<Etw2OpnConfiguration ProtocolName="Microsoft_Windows_Serial_ClassExtension_V2">

  <UsingClauses>
    <UsingClause Name="Utility"/>
    <UsingClause Name="SerCx2FriendlyNames"/>
    <UsingClause Name="SerCx2TransferStateMachine"/>
  </UsingClauses>

  <ImplementClauses>
    <ImplementClause Name="SerCx2Interface">
      <!--Regex: Pass QE Check 8/12/2014-->
      <MessageName Regex="Event_[1-9]"/>
      <!--Regex: Pass QE Check 8/12/2014-->
      <MessageName Regex="Event_[1-9][0-9]"/>
    </ImplementClause>
  </ImplementClauses>

  <Endpoint>
    public map&lt;uint, string&gt; DeviceInstanceMap = {};
    public map&lt;uint, string&gt; TransferSmInstanceMap = {};
  </Endpoint>

  <MessageClauses>
     <MessageClause Name="Event_5">
      <ToString>
        var instance = this.DeviceInstanceId;
        return "Rundown on UART instance " + (instance as string);
      </ToString>
    </MessageClause>
     <MessageClause Name="Event_7">
      <ToString>
        var instance = this.DeviceInstanceId;
        return " UART instance " + (instance as string) + " created";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_9">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        return "TransmitSM Event: " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_10">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "TransmitSM Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_11">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "!!! Invalid TransmitSM Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_12">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        return "ReceiveSM Event: " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_13">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "ReceiveSM Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_14">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "!!! Invalid ReceiveSM Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_15">
      <ToString>
        var ioctlName = this.IOCTL;
        string ioctlNameStr = IoctlToString(this.IOCTL);
        return "Processing " + ioctlNameStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_16">
      <ToString>
        string ioctlNameStr = IoctlToString(this.IOCTL);
        return "Completed " + ioctlNameStr + " with (" + DecToHexFormat(this.Status) + ")";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_18">
      <ToString>
        return "Transmit I/O request completed (" + DecToHexFormat(this.Status) + ")";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_19">
      <ToString>
        string eventStr = TransferEvent(this.TransferModeEvent);
        return "Transmit I/O chunk of " + (this.Length as string) + " bytes using " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_21">
      <ToString>
        return "Receive I/O request completed (" + DecToHexFormat(this.Status) + ")";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_22">
      <ToString>
        string eventStr = TransferEvent(this.TransferModeEvent);
        return "Receive I/O chunk of " + (this.Length as string) + " bytes using " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_24">
      <ToString>
        string powerStateNameStr = SystemPowerStateToString(this.TargetState);
        return "Transitioning to system power state " + powerStateNameStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_25">
      <ToString>
        string powerStateNameStr = DevicePowerStateToString(this.TargetState);
        return "Transitioning to device power state " + powerStateNameStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_26">
      <ToString>
        return "Transitoned to system power state with (" + DecToHexFormat(this.Status) + ")";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_27">
      <ToString>
        return "Transitoned to device power state with (" + DecToHexFormat(this.Status) + ")";
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_28">
      <ToString>
        string eventStr = SystemDmaEventToString(this.Event);
        return "System DMA Event: " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_29">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        return "TransmitSM History Event: " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_30">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "TransmitSM History Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_31">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        return "ReceiveSM History Event: " + eventStr;
      </ToString>
    </MessageClause>
    <MessageClause Name="Event_32">
      <ToString>
        string eventStr = TransferEvent(this.Event);
        string fromStateStr = TransferState(this.FromState);
        string toStateStr = TransferState(this.ToState);
        return "ReceiveSM History Transition: " + fromStateStr + "[" + eventStr + "] -> " + toStateStr;
      </ToString>
    </MessageClause>
  </MessageClauses>
</Etw2OpnConfiguration>

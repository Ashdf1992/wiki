<Etw2OpnConfiguration ProtocolName="Microsoft_Windows_SPB_ClassExtension">
    <MessageClauses>
        <MessageClause Name="Event_1010">
            <ToString>
                sbyte requestType = this.RequestType;
                string requestTypeStr;
                switch (requestType)
                {
                    case 1 => requestTypeStr = "Read";
                    case 2 => requestTypeStr = "Write";
                    case 3 => requestTypeStr = "Sequence";
                    case 4 => requestTypeStr = "LockController";
                    case 5 => requestTypeStr = "UnlockController";
                    case 6 => requestTypeStr = "LockConnection";
                    case 7 => requestTypeStr = "UnlockConnection";
                    default => requestTypeStr = "Other";
                }

                return "I/O start (" + requestTypeStr + ")";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1011">
            <ToString>
                return "I/O dispatch to target";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1012">
            <ToString>
                return "I/O forward to controller queue";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1013">
            <ToString>
                return "I/O dispatch to controller";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1014">
            <ToString>
                return "I/O present to driver";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1015">
            <ToString>
                return "I/O complete";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1016">
            <ToString>
                return "I/O end";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1018">
            <ToString>
                var direction = this.Data;
                switch (direction)
                {
                    case 1 => return "I/O from device";
                    case 2 => return "I/O to device";
                    default => return "I/O unknown direction";
                }
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1019">
            <ToString>
                return "I/O lock timeout";
            </ToString>
        </MessageClause>
        <MessageClause Name="Event_1020">
            <ToString>
                var deviceState = this.DeviceState;
                string dState = "D" + ((deviceState - 1) as string);
                return "Preprocess " + dState + " IRP";
            </ToString>
        </MessageClause>
    </MessageClauses>
</Etw2OpnConfiguration>

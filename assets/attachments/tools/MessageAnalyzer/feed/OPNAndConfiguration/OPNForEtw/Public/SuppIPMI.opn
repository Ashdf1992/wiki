module SuppIPMI;

using IPMI;
using Microsoft_Windows_DAL_Provider;
using Standard;
using Utility;
using Etw;
using EtwEvent;
using WindowsReference;

// Future Reference: #76267, remove the logic first.
/*
//IPMI over ETW actor
autostart actor IPMIOverETW(ep_Microsoft_Windows_DAL_Provider e)
{    
    // Decodes IPMI unencrypted request
    process e accepts m:Microsoft_Windows_DAL_Provider.Event_1 where m.PacketData.Count >= 7
    {
		switch(m.PacketData)
		{
			case request:IPMIEtwMessage from BinaryDecoder<IPMIEtwMessage[true]> =>
				IPMI20Payload p = new IPMI20Payload();
                p.Payload = request.Command.Request as LANRequest;
                dispatch endpoint IPMI.Console[$[]] accepts p;
			default =>
				ThrowDecodingException("IPMI", "IPMIEtwCommand request");
		}
    }
	
	// Decodes IPMI unencrypted response
	process e accepts m:Microsoft_Windows_DAL_Provider.Event_2 where m.PacketData.Count >= 8
    {
		switch(m.PacketData)
		{
			case response:IPMIEtwMessage from BinaryDecoder<IPMIEtwMessage[false]> =>
				IPMI20Payload p = new IPMI20Payload();
                p.Payload = response.Command.Response as LANResponse;
                dispatch endpoint IPMI.Console[$[]] issues p;
			default =>
				ThrowDecodingException("IPMI", "IPMIEtwCommand response");
		}
    }
}*/

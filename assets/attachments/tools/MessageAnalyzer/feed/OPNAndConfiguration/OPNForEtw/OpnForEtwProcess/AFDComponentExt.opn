module ExtendAFD;

using Utility;
using Microsoft_Windows_Winsock_AFD;
using WindowsReference;
using IANA;

// -------------------------------------------------------------------
// EventTemplate_27

(IPv4Address | IPv6Address) get Source(this EventTemplate_27 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Address;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Address;            
        }
        else
        {
            return null;
        }
    }
    return null;
}

string get Network(this EventTemplate_27 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
    }
    return null;
}

ushort get SourcePort(this EventTemplate_27 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Port;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Port;            
        }
    }
    return 0;
}

string get Transport(this EventTemplate_27 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
    }
    return "None";
}


// -------------------------------------------------------------------
// EventTemplate_28

(IPv4Address | IPv6Address) get Source(this EventTemplate_28 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Address;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Address;            
        }
        else
        {
            return null;
        }
    }
    return null;
}

string get Network(this EventTemplate_28 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
    }
    return null;
}



ushort get SourcePort(this EventTemplate_28 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Port;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Port;            
        }
    }
    return 0;
}

string get Transport(this EventTemplate_28 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
    }
    return "None";
}


// -------------------------------------------------------------------
// EventTemplate_30

(IPv4Address | IPv6Address) get Source(this EventTemplate_30 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Address;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Address;            
        }
        else
        {
            return null;
        }
    }
    return null;
}

string get Network(this EventTemplate_30 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
    }
    return null;
}

ushort get SourcePort(this EventTemplate_30 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Port;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Port;            
        }
    }
    return 0;
}

string get Transport(this EventTemplate_30 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
    }
    return "None";
}

// -------------------------------------------------------------------
// EventTemplate_37

(IPv4Address | IPv6Address) get Source(this EventTemplate_37 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Address;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Address;            
        }
        else
        {
            return null;
        }
    }
    return null;
}

string get Network(this EventTemplate_37 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            string src = GetAlias("Utility.IPv4Address", s.Address) ?? s.Address.ToString();
            return (src + " - unspecified");
        }
    }
    return null;
}

ushort get SourcePort(this EventTemplate_37 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;
            return s.Port;            
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;
            return s.Port;            
        }
    }
    return 0;
}

string get Transport(this EventTemplate_37 e)
{
    if(e.Address is WindowsReference.SocketAddress)
    {
        SocketAddress sa = e.Address as SocketAddress;
        if(sa.Address is SockAddrIn)
        {
            SockAddrIn s = sa.Address as SockAddrIn;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
        else if(sa.Address is SockAddrIn6)
        {
            SockAddrIn6 s = sa.Address as SockAddrIn6;

            ushort sp = s.Port;

            string src = IANA.PortToServiceNameForAlias(sp);
            return ("TCP: " + src + " - unspecified");
        }
    }
    return "None";
}

module extend_LDAP;

using Microsoft_Windows_LDAP_Client;
using LDAP;

//    Set process name actors
//
public autostart actor ProcessObserve(Microsoft_Windows_LDAP_Client.ep_Microsoft_Windows_LDAP_Client procmsg_ep)
{
    binary buffer = $[];
    bool msgfound = false;
    binary buffer17 = $[];
    bool msgfound17 = false;

    observe procmsg_ep accepts msg:Event_12
    {
        if(msg.Message.IndexOf("Unencrypted dump of Data") >= 0)
        {
            buffer = $[];
            msgfound = true;
        }
        else if(msg.Message.IndexOf("End of Unencrypted dump of") >= 0)
        {
            switch(buffer)
            {
                case ldapmsg:LDAP.LdapMessage from Asn1BerDecoder<LDAP.LdapMessage> =>
                    dispatch endpoint LDAP.Server accepts ldapmsg;
            }
            buffer = $[];
            msgfound = false;
        }
        else
        {
            if(msgfound)
            {
                // It would be better if we could define the size as msg.Message.Count/4.  BTW, there are
                // 2 extra spaces between the hex numbers and the values in the hex dump, but divide by 4
                // should still give you the right answer since the 2 is not significant.
                array<byte> builddata = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                for(int itr = 0; itr < msg.Message.Count/4; itr++)
                {
                    builddata[itr] = (AsciiToHex((msg.Message[itr*3]) as char)*16 + AsciiToHex((msg.Message[itr*3+1]) as char)) as byte;
                }
                buffer += builddata as binary;
            }
        }
    }

    observe procmsg_ep accepts msg:Event_17
    {
        if(msg.Message.IndexOf("Unencrypted dump of Data") >= 0)
        {
            buffer17 = $[];
            msgfound17 = true;
        }
        else if(msg.Message.IndexOf("End of Unencrypted dump of") >= 0)
        {
            switch(buffer17)
            {
                case ldapmsg:LDAP.LdapMessage from Asn1BerDecoder<LDAP.LdapMessage> =>
                    dispatch endpoint LDAP.Server accepts ldapmsg;
            }
            buffer17 = $[];
            msgfound17 = false;
        }
        else
        {
            if(msgfound17)
            {
                array<byte> builddata = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                for(int itr = 0; itr < msg.Message.Count/4; itr++)
                {
                    builddata[itr] = (AsciiToHex((msg.Message[itr*3]) as char)*16 + AsciiToHex((msg.Message[itr*3+1]) as char)) as byte;
                }
                buffer17 += builddata as binary;
            }
        }
    }

}

byte AsciiToHex(char hexchar)
{
    return (hexchar as string).ToByte(true) as byte;
}

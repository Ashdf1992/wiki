// Parse USB3 host controller events (ucx01000, usbhub3, and usbxhci drivers)
protocol Usb3;
using Etw;
using EtwEvent;
using Standard;
using Diagnostics;

using Microsoft_Windows_USB_USBXHCI;
using Microsoft_Windows_USB_UCX;
using Microsoft_Windows_USB_USBHUB3;
using NtStatusModule;
using UsbCommon;
using UsbSpec;
using UsbStateMachineValues;
using UsbMessageProt;

const guid UcxProviderId = {36da592d-e43a-4e28-af6f-4bc57c5a11e8};
const guid Usbhub3ProviderId = {ac52ad17-cc01-4f85-8df5-4dce4333c99b};
const guid UsbxhciProviderId = {30e1d284-5d88-459c-83fd-6345b39b19ec};

endpoint Usb3Globals accepts EmptyMessage {

    //
    // USB3 stack UsbDeviceInstance lookup
    // TODO: Root hub events and controller events should share a single ControllerInstance, DeviceInstance (effectively eliminating ControllerInstance). Root hub events should look for controller ID, or create a map from root hub UcxDevice to UcxController.
    //
    map<ulong, int> DeviceInstanceFromUsb3DevicePtr = {};
    map<ulong, int> ControllerInstanceFromUsb3ControllerPtr = {};

    // This is needed only for USB3, where some events have a device but not its controller
    map<int, int> ControllerInstanceFromDeviceInstance = {};

    //
    // Tracking of USB3 pipes and endpoints (not needed in USB2 because USB2 has no streams and the
    // drivers include endpoint descriptors in all events)
    //
    map<ulong, byte> EndpointAddressFromEndpointPtr = {};
    map<ulong, UsbTransferType> EndpointTypeFromEndpointPtr = {};
    map<ulong, uint> StreamIdFromPipeHandle = {};
    map<ulong, ulong> EndpointPtrFromPipeHandle = {};
    map<ulong, int> DeviceInstanceFromPipeHandle = {};
}

int GetDeviceInstanceUsb3(ulong devicePtr)
{
    var usbCommonGlobals = endpoint UsbCommonGlobals;
    var usb3Globals = endpoint Usb3Globals;
    if (!(devicePtr in usb3Globals.DeviceInstanceFromUsb3DevicePtr)) {

        usb3Globals.DeviceInstanceFromUsb3DevicePtr[devicePtr] =
            usbCommonGlobals.g_NextUnusedDeviceInstance;
        usbCommonGlobals.g_NextUnusedDeviceInstance++;
        UpdateDeviceMap(usb3Globals.DeviceInstanceFromUsb3DevicePtr[devicePtr]);
    }

    return usb3Globals.DeviceInstanceFromUsb3DevicePtr[devicePtr];
}
void DeviceInstanceRemovedUsb3(ulong devicePtr)
{
    // New device arrivals, no matter the similarities, will use a new device instance; this one
    // will never be reused.
    var usb3Globals = endpoint Usb3Globals;
    usb3Globals.DeviceInstanceFromUsb3DevicePtr.Remove(devicePtr);
}


int GetControllerInstanceUsb3(ulong controllerPtr)
{
    var usbCommonGlobals = endpoint UsbCommonGlobals;
    var usb3Globals = endpoint Usb3Globals;
    if (!(controllerPtr in usb3Globals.ControllerInstanceFromUsb3ControllerPtr)) {

        usb3Globals.ControllerInstanceFromUsb3ControllerPtr[controllerPtr] =
            usbCommonGlobals.g_NextUnusedControllerInstance;
        usbCommonGlobals.g_NextUnusedControllerInstance++;
        UpdateControllerMap(usb3Globals.ControllerInstanceFromUsb3ControllerPtr[controllerPtr]);
    }

    return usb3Globals.ControllerInstanceFromUsb3ControllerPtr[controllerPtr];
}
void ControllerInstanceRemovedUsb3(ulong controllerPtr)
{
    var usb3Globals = endpoint Usb3Globals;
    usb3Globals.ControllerInstanceFromUsb3ControllerPtr.Remove(controllerPtr);
}

void SaveDeviceController(
    int deviceInstance,
    int controllerInstance
    )
{
    var usb3Globals = endpoint Usb3Globals;
    usb3Globals.ControllerInstanceFromDeviceInstance[deviceInstance] = controllerInstance;
}

public autostart actor MarkUsb3EventErrors (EtwEvent.Node node)
{
    observe node accepts m:EtwProviderMsg // TODO: #q: should "m" referenced in "where" be replaced with "value"?
        where (m.EventRecord.Header.ProviderId == UcxProviderId ||
               m.EventRecord.Header.ProviderId == Usbhub3ProviderId ||
               m.EventRecord.Header.ProviderId == UsbxhciProviderId)
    {
        ErrorCodeIf(m.EventRecord.Header.Descriptor.Level <= 2, // 2 = win:Error in event manifest
                    m,
                    DiagnosisLevel.Error,
                    Format("USB: This event indicates that an error occurred. See the name and " +
                           "details of the event, plus any previous related events."));
    }
}

public autostart actor ObserveDescriptorDataAtUsb3Rundown (ep_Microsoft_Windows_USB_USBHUB3 node)
{
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_6 // device information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        // Device Descriptor
        SaveUsbDeviceId(deviceInstance,
                        m.Fid_DeviceDescriptor.Fid_idVendor,
                        m.Fid_DeviceDescriptor.Fid_idProduct,
                        m.Fid_DeviceDescriptor.Fid_bcdUSB,
                        m.Fid_DeviceDescriptor.Fid_iProduct,
                        m.Fid_DeviceDescriptor.Fid_iManufacturer,
                        m.Fid_DeviceDescriptor.Fid_iSerialNumber);

        // Config Descriptor
        var descriptorSet = BinaryDecoder<UsbMultipleDescriptors>(
            m.Fid_ConfigurationDescriptor as binary);
        if (descriptorSet == nothing) {
            throw "BinaryDecoder failed on full configuration descriptor in rundown event. This is never expected";
        } else {
            SaveUsbDeviceClass(deviceInstance, descriptorSet as UsbMultipleDescriptors);
        }
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_43 // new device information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        // Device Descriptor
        SaveUsbDeviceId(deviceInstance,
                        m.Fid_DeviceDescriptor.Fid_idVendor,
                        m.Fid_DeviceDescriptor.Fid_idProduct,
                        m.Fid_DeviceDescriptor.Fid_bcdUSB,
                        m.Fid_DeviceDescriptor.Fid_iProduct,
                        m.Fid_DeviceDescriptor.Fid_iManufacturer,
                        m.Fid_DeviceDescriptor.Fid_iSerialNumber);

        // Config Descriptor
        var descriptorSet = BinaryDecoder<UsbMultipleDescriptors>(
            m.Fid_ConfigurationDescriptor as binary);
        if (descriptorSet == nothing) {
            throw "BinaryDecoder failed on full configuration descriptor in rundown event. This is never expected";
        } else {
            SaveUsbDeviceClass(deviceInstance, descriptorSet as UsbMultipleDescriptors);
        }
    }
}

// TODO: #FeatureRequest: Binary copy/cast of "unrelated" types (defined in ETW); this would eliminate the need for these redundant functions and the ones in Usb2.opn totaling hundreds of rote lines
TransferUrbControl
NormalizeControlTransfer(
    fid_UCX_URB_CONTROL_TRANSFER urb
    )
{
    TransferUrbControl normalized = new TransferUrbControl { };
    normalized.Fid_URB_Hdr_Length           = urb.Fid_URB_Hdr_Length;
    normalized.Fid_URB_Hdr_Function         = urb.Fid_URB_Hdr_Function;
    normalized.Fid_URB_Hdr_Status           = urb.Fid_URB_Hdr_Status;
    normalized.Fid_URB_Hdr_UsbdDeviceHandle = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdDeviceHandle);
    normalized.Fid_URB_Hdr_UsbdFlags        = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdFlags);
    normalized.Fid_URB_PipeHandle           = UlongFromEtwPointer(urb.Fid_URB_PipeHandle);
    normalized.Fid_URB_TransferFlags        = urb.Fid_URB_TransferFlags;
    normalized.Fid_URB_TransferBufferLength = urb.Fid_URB_TransferBufferLength;
    normalized.Fid_URB_TransferBuffer       = UlongFromEtwPointer(urb.Fid_URB_TransferBuffer);
    normalized.Fid_URB_TransferBufferMDL    = UlongFromEtwPointer(urb.Fid_URB_TransferBufferMDL);
    normalized.Fid_URB_TimeoutOrReserved    = UlongFromEtwPointer(urb.Fid_URB_ReservedMBZ);
    normalized.Fid_URB_ReservedHcd = [
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[0]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[1]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[2]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[3]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[4]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[5]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[6]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[7]),
        ];
    normalized.Fid_URB_Setup_bmRequestType  = urb.Fid_URB_Setup_bmRequestType;
    normalized.Fid_URB_Setup_bRequest       = urb.Fid_URB_Setup_bRequest;
    normalized.Fid_URB_Setup_wValue         = urb.Fid_URB_Setup_wValue;
    normalized.Fid_URB_Setup_wIndex         = urb.Fid_URB_Setup_wIndex;
    normalized.Fid_URB_Setup_wLength        = urb.Fid_URB_Setup_wLength;
    return normalized;
}

TransferUrbControl
NormalizeControlTransfer(
    fid_UCX_URB_CONTROL_TRANSFER_EX urb
    )
{
    TransferUrbControl normalized = new TransferUrbControl { };
    normalized.Fid_URB_Hdr_Length           = urb.Fid_URB_Hdr_Length;
    normalized.Fid_URB_Hdr_Function         = urb.Fid_URB_Hdr_Function;
    normalized.Fid_URB_Hdr_Status           = urb.Fid_URB_Hdr_Status;
    normalized.Fid_URB_Hdr_UsbdDeviceHandle = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdDeviceHandle);
    normalized.Fid_URB_Hdr_UsbdFlags        = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdFlags);
    normalized.Fid_URB_PipeHandle           = UlongFromEtwPointer(urb.Fid_URB_PipeHandle);
    normalized.Fid_URB_TransferFlags        = urb.Fid_URB_TransferFlags;
    normalized.Fid_URB_TransferBufferLength = urb.Fid_URB_TransferBufferLength;
    normalized.Fid_URB_TransferBuffer       = UlongFromEtwPointer(urb.Fid_URB_TransferBuffer);
    normalized.Fid_URB_TransferBufferMDL    = UlongFromEtwPointer(urb.Fid_URB_TransferBufferMDL);
    normalized.Fid_URB_TimeoutOrReserved    = UlongFromEtwPointer(urb.Fid_URB_Timeout);
    normalized.Fid_URB_ReservedHcd = [
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[0]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[1]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[2]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[3]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[4]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[5]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[6]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[7]),
        ];
    normalized.Fid_URB_Setup_bmRequestType  = urb.Fid_URB_Setup_bmRequestType;
    normalized.Fid_URB_Setup_bRequest       = urb.Fid_URB_Setup_bRequest;
    normalized.Fid_URB_Setup_wValue         = urb.Fid_URB_Setup_wValue;
    normalized.Fid_URB_Setup_wIndex         = urb.Fid_URB_Setup_wIndex;
    normalized.Fid_URB_Setup_wLength        = urb.Fid_URB_Setup_wLength;
    return normalized;
}

void
ProcessControlTransferUsb3(
    int ControllerInstance,
    int DeviceInstance,
    ulong PipeHandle,
    ulong UrbPtr,
    TransferUrbControl Urb,
    binary TransferData,
    any message OriginCompletionMessage,
    uint? NtStatus
    )
{
    byte endpointAddress;

    //
    // Look up endpoint address (almost always 0, but if not then it's definitely in the map)
    //
    if (PipeHandle in (endpoint Usb3Globals).EndpointPtrFromPipeHandle) {

        endpointAddress = (endpoint Usb3Globals).EndpointAddressFromEndpointPtr[(endpoint Usb3Globals).EndpointPtrFromPipeHandle[PipeHandle]];

    } else {

        endpointAddress = 0x0;
    }

    ProcessControlTransfer(ControllerInstance,
                           DeviceInstance,
                           PipeHandle,
                           UrbPtr,
                           Urb,
                           TransferData,
                           OriginCompletionMessage,
                           NtStatus,
                           endpointAddress);
}

TransferUrbBulkOrInterrupt
NormalizeBulkOrInterruptTransfer(
    fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER urb
    )
{
    TransferUrbBulkOrInterrupt normalized = new TransferUrbBulkOrInterrupt { };
    normalized.Fid_URB_Hdr_Length           = urb.Fid_URB_Hdr_Length;
    normalized.Fid_URB_Hdr_Function         = urb.Fid_URB_Hdr_Function;
    normalized.Fid_URB_Hdr_Status           = urb.Fid_URB_Hdr_Status;
    normalized.Fid_URB_Hdr_UsbdDeviceHandle = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdDeviceHandle);
    normalized.Fid_URB_Hdr_UsbdFlags        = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdFlags);
    normalized.Fid_URB_PipeHandle           = UlongFromEtwPointer(urb.Fid_URB_PipeHandle);
    normalized.Fid_URB_TransferFlags        = urb.Fid_URB_TransferFlags;
    normalized.Fid_URB_TransferBufferLength = urb.Fid_URB_TransferBufferLength;
    normalized.Fid_URB_TransferBuffer       = UlongFromEtwPointer(urb.Fid_URB_TransferBuffer);
    normalized.Fid_URB_TransferBufferMDL    = UlongFromEtwPointer(urb.Fid_URB_TransferBufferMDL);
    normalized.Fid_URB_TimeoutOrReserved    = UlongFromEtwPointer(urb.Fid_URB_ReservedMBZ);
    normalized.Fid_URB_ReservedHcd = [
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[0]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[1]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[2]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[3]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[4]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[5]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[6]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[7]),
        ];
    return normalized;
}

void ProcessBulkOrInterruptTransferUsb3(
    int ControllerInstance,
    int DeviceInstance,
    ulong PipeHandle,
    ulong UrbPtr,
    TransferUrbBulkOrInterrupt Urb,
    binary TransferData,
    any message OriginCompletionMessage,
    uint? NtStatus
    )
{
    UsbTransferType endpointType;
    byte endpointAddress;
    ulong endpointPtr;
    bool processCompletedTransfer = true;
    var usb3Globals = endpoint Usb3Globals;

    if (IsRootHub(DeviceInstance)) {
        //
        // Root hub's endpoint may not have had any events about it (it is simulated)
        //
        endpointType = UsbTransferType.Interrupt;
        endpointAddress = 0x81;
    } else {
        if (PipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
            endpointPtr = usb3Globals.EndpointPtrFromPipeHandle[PipeHandle];

            if ((endpointPtr in usb3Globals.EndpointTypeFromEndpointPtr) &&
                (endpointPtr in usb3Globals.EndpointAddressFromEndpointPtr)) {

                endpointType = usb3Globals.EndpointTypeFromEndpointPtr[endpointPtr];
                endpointAddress = usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr];
            } else {
                //
                // Missing endpoint type or address, so don't process completed transfer
                //
                processCompletedTransfer = false;
            }
        } else {
            //
            // Missing endpoint pointer, therefore cannot get endpoint type or address
            // Don't process completed transfer
            //
            processCompletedTransfer = false;
        }
    }

    if (processCompletedTransfer)
    {
        ProcessBulkOrInterruptTransfer(ControllerInstance,
                                       DeviceInstance,
                                       PipeHandle,
                                       UrbPtr,
                                       Urb,
                                       TransferData,
                                       OriginCompletionMessage,
                                       NtStatus,
                                       endpointType,
                                       endpointAddress);
    } else {
        ValidationCheck(false, OriginCompletionMessage, "Missing URB information, releasing completion message");
        release OriginCompletionMessage;
    }
}

TransferUrbIsoch
NormalizeIsochTransfer(
    fid_UCX_URB_ISOCH_TRANSFER urb
    )
{
    TransferUrbIsoch normalized = new TransferUrbIsoch { };
    normalized.Fid_URB_Hdr_Length           = urb.Fid_URB_Hdr_Length;
    normalized.Fid_URB_Hdr_Function         = urb.Fid_URB_Hdr_Function;
    normalized.Fid_URB_Hdr_Status           = urb.Fid_URB_Hdr_Status;
    normalized.Fid_URB_Hdr_UsbdDeviceHandle = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdDeviceHandle);
    normalized.Fid_URB_Hdr_UsbdFlags        = UlongFromEtwPointer(urb.Fid_URB_Hdr_UsbdFlags);
    normalized.Fid_URB_PipeHandle           = UlongFromEtwPointer(urb.Fid_URB_PipeHandle);
    normalized.Fid_URB_TransferFlags        = urb.Fid_URB_TransferFlags;
    normalized.Fid_URB_TransferBufferLength = urb.Fid_URB_TransferBufferLength;
    normalized.Fid_URB_TransferBuffer       = UlongFromEtwPointer(urb.Fid_URB_TransferBuffer);
    normalized.Fid_URB_TransferBufferMDL    = UlongFromEtwPointer(urb.Fid_URB_TransferBufferMDL);
    normalized.Fid_URB_TimeoutOrReserved    = UlongFromEtwPointer(urb.Fid_URB_ReservedMBZ);
    normalized.Fid_URB_ReservedHcd = [
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[0]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[1]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[2]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[3]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[4]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[5]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[6]),
        UlongFromEtwPointer(urb.Fid_URB_ReservedHcd[7]),
        ];
    normalized.Fid_URB_StartFrame           = urb.Fid_URB_StartFrame;
    normalized.Fid_URB_NumberOfPackets      = urb.Fid_URB_NumberOfPackets;
    normalized.Fid_URB_ErrorCount           = urb.Fid_URB_ErrorCount;
    return normalized;
}

public autostart actor ObserveUcxEvent (ep_Microsoft_Windows_USB_UCX node)
{
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_3 // controller information
    {
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveControllerType(controllerInstance, ControllerTypeXhci);
        if (m.Fid_AcpiVendorId != "") {
            SaveControllerId(controllerInstance, m.Fid_AcpiVendorId, m.Fid_AcpiDeviceId);
        } else {
            SaveControllerId(controllerInstance,
                             ToHex(m.Fid_PciVendorId as ushort),
                             ToHex(m.Fid_PciDeviceId as ushort));
        }
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_8 // controller create
    {
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveControllerType(controllerInstance, ControllerTypeXhci);
        if (m.Fid_AcpiVendorId != "") {
            SaveControllerId(controllerInstance, m.Fid_AcpiVendorId, m.Fid_AcpiDeviceId);
        } else {
            SaveControllerId(controllerInstance,
                             ToHex(m.Fid_PciVendorId as ushort),
                             ToHex(m.Fid_PciDeviceId as ushort));
        }
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_9 // controller delete
    {
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        ControllerInstanceRemovedUsb3(controllerPtr);
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_5 // device information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        // Save device instance info mapping into global map variable, so that auto-generated actor
        // code can retrieve for all messages.
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveDevicePortPath(deviceInstance, m.PortPath);
        //TODO: #save: ParentHubMap[deviceInstance] = UlongFromEtwPointer(m.Fid_HubDevice);
        //TODO: #save: SpeedMap[deviceInstance] = m.DeviceSpeed as UsbSpeed;
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_4 // root hub information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveRootHub(deviceInstance, Usb30);
        // TODO: #save: SpeedMap[deviceInstance] = UsbSpeed.SuperSpeed; // Treat all ucx/hub3 root hubs as SuperSpeed
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_14 // device create
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveDevicePortPath(deviceInstance, m.PortPath);
        // TODO: #save: ParentHubMap[deviceInstance] = UlongFromEtwPointer(m.Fid_HubDevice);
        // TODO: #save: SpeedMap[deviceInstance] = m.DeviceSpeed as UsbSpeed;
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_10 // root hub create
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveRootHub(deviceInstance, Usb30);
        // TODO: #save: SpeedMap[deviceInstance] = UsbSpeed.SuperSpeed; // Treat all ucx/hub3 root hubs as SuperSpeed
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_12 // root hub prepare
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveRootHub(deviceInstance, Usb30);
        //ParentHubMap[deviceInstance] = 0 as ulong; // root hub
        // TODO: #save: SpeedMap[deviceInstance] = UsbSpeed.SuperSpeed; // Treat all ucx/hub3 root hubs as SuperSpeed
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_6 // endpoint rundown
    {
        var usb3Globals = endpoint Usb3Globals;
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var endpointPtr = UlongFromEtwPointer(m.Fid_Endpoint);
        var pipeHandle = UlongFromEtwPointer(m.Fid_PipeHandle);
        usb3Globals.EndpointPtrFromPipeHandle[pipeHandle] = endpointPtr;
        // TODO: save entire descriptor? would like to cast to usbspec descriptor type
        usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr] = m.Fid_UCX_Endpoint_Descriptor.Fid_bEndpointAddress;
        usb3Globals.EndpointTypeFromEndpointPtr[endpointPtr] = UsbEndpointTypeFromBmAttributes(
            m.Fid_UCX_Endpoint_Descriptor.Fid_bmAttributes);
        usb3Globals.DeviceInstanceFromPipeHandle[pipeHandle] = deviceInstance;
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_16 // endpoint create
    {
        var usb3Globals = endpoint Usb3Globals;
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var endpointPtr = UlongFromEtwPointer(m.Fid_Endpoint);
        var pipeHandle = UlongFromEtwPointer(m.Fid_PipeHandle);
        usb3Globals.EndpointPtrFromPipeHandle[pipeHandle] = endpointPtr;
        // TODO: save entire descriptor? would like to cast to usbspec descriptor type
        usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr] = m.Fid_UCX_Endpoint_Descriptor.Fid_bEndpointAddress;
        usb3Globals.EndpointTypeFromEndpointPtr[endpointPtr] = UsbEndpointTypeFromBmAttributes(
            m.Fid_UCX_Endpoint_Descriptor.Fid_bmAttributes);
        usb3Globals.DeviceInstanceFromPipeHandle[pipeHandle] = deviceInstance;
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_7 // static stream rundown
    {
        var usb3Globals = endpoint Usb3Globals;
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var endpointPipeHandle = UlongFromEtwPointer(m.Fid_EndpointPipeHandle);
        var streamPipeHandle = UlongFromEtwPointer(m.Fid_StreamPipeHandle);
        usb3Globals.EndpointPtrFromPipeHandle[streamPipeHandle] = usb3Globals.EndpointPtrFromPipeHandle[endpointPipeHandle];
        usb3Globals.StreamIdFromPipeHandle[streamPipeHandle] = m.Fid_StreamID;
        usb3Globals.DeviceInstanceFromPipeHandle[streamPipeHandle] = deviceInstance;

        if (endpointPipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
            usb3Globals.EndpointPtrFromPipeHandle[streamPipeHandle] = usb3Globals.EndpointPtrFromPipeHandle[endpointPipeHandle];
        }
    }
    observe node accepts m:Microsoft_Windows_USB_UCX.Event_18 // static stream create
    {
        var usb3Globals = endpoint Usb3Globals;
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var endpointPipeHandle = UlongFromEtwPointer(m.Fid_EndpointPipeHandle);
        var streamPipeHandle = UlongFromEtwPointer(m.Fid_StreamPipeHandle);
        usb3Globals.EndpointPtrFromPipeHandle[streamPipeHandle] = usb3Globals.EndpointPtrFromPipeHandle[endpointPipeHandle];
        usb3Globals.StreamIdFromPipeHandle[streamPipeHandle] = m.Fid_StreamID;
        usb3Globals.DeviceInstanceFromPipeHandle[streamPipeHandle] = deviceInstance;

        if (endpointPipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
            usb3Globals.EndpointPtrFromPipeHandle[streamPipeHandle] = usb3Globals.EndpointPtrFromPipeHandle[endpointPipeHandle];
        }
    }
    process node accepts m:Microsoft_Windows_USB_UCX.EventTemplate_6 // control transfer dispatch
    {
        //
        // EventTemplate_6 is "tid_UCX_Dispatch_Urb_Function_Control_Transfer" which corresponds to:
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER (Event_20)
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_OTHER
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_OTHER
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_OTHER
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_OTHER
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_DEVICE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_ENDPOINT
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_OTHER
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CONFIGURATION
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_INTERFACE
        //   UCX_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR
        //
        ProcessUrbDispatch(m,
                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                           m.Fid_UCX_URB_CONTROL_TRANSFER.Fid_URB_TransferBufferLength);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_23 // control transfer EX dispatch
    {
        ProcessUrbDispatch(m,
                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                           m.Fid_UCX_URB_CONTROL_TRANSFER_EX.Fid_URB_TransferBufferLength);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_26 // bulk transfer dispatch
    {
        ProcessUrbDispatch(m,
                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                           m.Fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER.Fid_URB_TransferBufferLength);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_30 // isoch transfer dispatch
    {
        ProcessUrbDispatch(m,
                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                           m.Fid_UCX_URB_ISOCH_TRANSFER.Fid_URB_TransferBufferLength);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_21 // control transfer complete
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER),
                                   null,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_21_1 // control transfer complete
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER),
                                   null,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_22 // control transfer complete with data
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER),
                                   m.Fid_URB_TransferData as binary,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_24 // control transfer EX complete
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER_EX),
                                   null,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_24_1 // control transfer EX complete
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER_EX),
                                   null,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }

    process node accepts m:Microsoft_Windows_USB_UCX.Event_25 // control transfer EX complete with data
    {
        ProcessControlTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                   GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                   UlongFromEtwPointer(m.Fid_PipeHandle),
                                   UlongFromEtwPointer(m.Fid_URB_Ptr),
                                   NormalizeControlTransfer(m.Fid_UCX_URB_CONTROL_TRANSFER_EX),
                                   m.Fid_URB_TransferData as binary,
                                   m,
                                   m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_27 // bulk transfer complete
    {
        ProcessBulkOrInterruptTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                           GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                           UlongFromEtwPointer(m.Fid_PipeHandle),
                                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                                           NormalizeBulkOrInterruptTransfer(m.Fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER),
                                           null,
                                           m,
                                           m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_27_1 // bulk transfer complete
    {
        ProcessBulkOrInterruptTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                           GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                           UlongFromEtwPointer(m.Fid_PipeHandle),
                                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                                           NormalizeBulkOrInterruptTransfer(m.Fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER),
                                           null,
                                           m,
                                           m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_28 // bulk transfer complete with partial data
    {
        ProcessBulkOrInterruptTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                           GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                           UlongFromEtwPointer(m.Fid_PipeHandle),
                                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                                           NormalizeBulkOrInterruptTransfer(m.Fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER),
                                           m.Fid_URB_TransferData as binary,
                                           m,
                                           m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_29 // bulk transfer complete with full data
    {
        ProcessBulkOrInterruptTransferUsb3(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                                           GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                                           UlongFromEtwPointer(m.Fid_PipeHandle),
                                           UlongFromEtwPointer(m.Fid_URB_Ptr),
                                           NormalizeBulkOrInterruptTransfer(m.Fid_UCX_URB_BULK_OR_INTERRUPT_TRANSFER),
                                           m.Fid_URB_TransferData as binary,
                                           m,
                                           m.Fid_IRP_NtStatus as uint);
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_31 // isoch transfer complete
    {
        var usb3Globals = endpoint Usb3Globals;
        ulong pipeHandle = UlongFromEtwPointer(m.Fid_PipeHandle);

        //
        // Process transfer only if endpoint address information is present
        //
        if (pipeHandle in usb3Globals.EndpointPtrFromPipeHandle
			&& usb3Globals.EndpointPtrFromPipeHandle[pipeHandle] in usb3Globals.EndpointAddressFromEndpointPtr) {
			ProcessIsochTransfer(GetControllerInstanceUsb3(UlongFromEtwPointer(m.Fid_UcxController)),
                             GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice)),
                             pipeHandle,
                             UlongFromEtwPointer(m.Fid_URB_Ptr),
                             NormalizeIsochTransfer(m.Fid_UCX_URB_ISOCH_TRANSFER),
                             m,
                             m.Fid_IRP_NtStatus as uint,
                             usb3Globals.EndpointAddressFromEndpointPtr[usb3Globals.EndpointPtrFromPipeHandle[pipeHandle]]);
        } else {
            ValidationCheck(false, m, "Missing URB information, releasing completion message");
            release m;
        }
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_63 // endpoint state machine transition
    {
        var usb3Globals = endpoint Usb3Globals;
        UcxEndpointStateMachineTransition transition = new UcxEndpointStateMachineTransition{ };
        // Due to a permanent bug, the event and state fields are reversed.
        uint actualEvent = m.Fid_State;
        uint actualState = m.Fid_Event;
        //
        // Events contain priority in the low 4 bits
        //
        transition.Event = (actualEvent & 0xfffffff0) as UcxEndpointStateMachineEvent;
        transition.NewState = actualState as UcxEndpointStateMachineState;
        transition.PipeHandle = UlongFromEtwPointer(m.Fid_URB_PipeHandle);
        transition.Rundown = false;
        //
        // PipeHandle events aren't annotated by generated code. Look up the device from the pipe
        // handle and add annotation.
        //
        if (transition.PipeHandle in usb3Globals.DeviceInstanceFromPipeHandle) {
            int deviceInstance = usb3Globals.DeviceInstanceFromPipeHandle[transition.PipeHandle];
            AnnotateDeviceMessage(m, deviceInstance);
            if (deviceInstance in usb3Globals.ControllerInstanceFromDeviceInstance) {
                int controllerInstance =
                    usb3Globals.ControllerInstanceFromDeviceInstance[deviceInstance];
                AnnotateControllerMessage(m, controllerInstance);
            }
        }
        //
        // Look up endpoint address (intermediate value needed: endpoint pointer).
        //
        if (transition.PipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
            ulong endpointPtr = usb3Globals.EndpointPtrFromPipeHandle[transition.PipeHandle];
            if (endpointPtr in usb3Globals.EndpointAddressFromEndpointPtr) {
                transition.EndpointAddress = usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr];
            }
        }
        dispatch (endpoint UsbEndpoint[transition.PipeHandle]) accepts transition;
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_64 // endpoint state machine event
    {
        var usb3Globals = endpoint Usb3Globals;
        UcxEndpointStateMachineTransitionEventOnly transition = new UcxEndpointStateMachineTransitionEventOnly{ };
        //
        // Events contain priority in the low 4 bits
        //
        transition.Event = (m.Fid_Event & 0xfffffff0) as UcxEndpointStateMachineEvent;
        transition.PipeHandle = UlongFromEtwPointer(m.Fid_URB_PipeHandle);
        transition.Rundown = false;
        //
        // PipeHandle events aren't annotated by generated code. Look up the device from the pipe
        // handle and add annotation.
        //
        if (transition.PipeHandle in usb3Globals.DeviceInstanceFromPipeHandle) {
            int deviceInstance = usb3Globals.DeviceInstanceFromPipeHandle[transition.PipeHandle];
            AnnotateDeviceMessage(m, deviceInstance);
            if (deviceInstance in usb3Globals.ControllerInstanceFromDeviceInstance) {
                int controllerInstance =
                    usb3Globals.ControllerInstanceFromDeviceInstance[deviceInstance];
                AnnotateControllerMessage(m, controllerInstance);
            }
        }
        //
        // Look up endpoint address (intermediate value needed: endpoint pointer).
        //
        if (transition.PipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
            ulong endpointPtr = usb3Globals.EndpointPtrFromPipeHandle[transition.PipeHandle];
            if (endpointPtr in usb3Globals.EndpointAddressFromEndpointPtr) {
                transition.EndpointAddress = usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr];
            }
        }
        dispatch (endpoint UsbEndpoint[transition.PipeHandle]) accepts transition;
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_65 // rundown endpoint state machine transition
    {
        var usb3Globals = endpoint Usb3Globals;
        //
        // UCX dumps its in-memory circular log of recent state machine transitions. Empty entries
        // entries contain 0s and indicate the log has not filled/wrapped yet. Those events are not
        // interesting, but we will log them along with diagnostic information.
        //
        if (m.Fid_Event != 0) {
            UcxEndpointStateMachineTransition transition = new UcxEndpointStateMachineTransition{ };
            // Due to a permanent bug, the event and state fields are reversed.
            uint actualEvent = m.Fid_State;
            uint actualState = m.Fid_Event;
            transition.Event = (actualEvent & 0xfffffff0) as UcxEndpointStateMachineEvent;
            transition.NewState = actualState as UcxEndpointStateMachineState;
            transition.PipeHandle = UlongFromEtwPointer(m.Fid_URB_PipeHandle);
            transition.Rundown = true;
            if (transition.PipeHandle in usb3Globals.DeviceInstanceFromPipeHandle) {
                int deviceInstance = usb3Globals.DeviceInstanceFromPipeHandle[transition.PipeHandle];
                AnnotateDeviceMessage(m, deviceInstance);
                if (deviceInstance in usb3Globals.ControllerInstanceFromDeviceInstance) {
                    int controllerInstance =
                        usb3Globals.ControllerInstanceFromDeviceInstance[deviceInstance];
                    AnnotateControllerMessage(m, controllerInstance);
                }
            }
            if (transition.PipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
                ulong endpointPtr = usb3Globals.EndpointPtrFromPipeHandle[transition.PipeHandle];
                if (endpointPtr in usb3Globals.EndpointAddressFromEndpointPtr) {
                    transition.EndpointAddress = usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr];
                }
            }
            dispatch (endpoint UsbEndpoint[transition.PipeHandle]) accepts transition;
        } else {
            ValidationCheck(false, m, DiagnosisLevel.Information, "Empty transition history buffer element");
            release m;
        }
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_66 // rundown endpoint state machine event
    {
        var usb3Globals = endpoint Usb3Globals;
        if (m.Fid_Event != 0) {
            UcxEndpointStateMachineTransitionEventOnly transition = new UcxEndpointStateMachineTransitionEventOnly{ };
            transition.Event = (m.Fid_Event & 0xfffffff0) as UcxEndpointStateMachineEvent;
            transition.PipeHandle = UlongFromEtwPointer(m.Fid_URB_PipeHandle);
            transition.Rundown = true;
            if (transition.PipeHandle in usb3Globals.DeviceInstanceFromPipeHandle) {
                int deviceInstance = usb3Globals.DeviceInstanceFromPipeHandle[transition.PipeHandle];
                AnnotateDeviceMessage(m, deviceInstance);
                if (deviceInstance in usb3Globals.ControllerInstanceFromDeviceInstance) {
                    int controllerInstance =
                        usb3Globals.ControllerInstanceFromDeviceInstance[deviceInstance];
                    AnnotateControllerMessage(m, controllerInstance);
                }
            }
            if (transition.PipeHandle in usb3Globals.EndpointPtrFromPipeHandle) {
                ulong endpointPtr = usb3Globals.EndpointPtrFromPipeHandle[transition.PipeHandle];
                if (endpointPtr in usb3Globals.EndpointAddressFromEndpointPtr) {
                    transition.EndpointAddress = usb3Globals.EndpointAddressFromEndpointPtr[endpointPtr];
                }
            }
            dispatch (endpoint UsbEndpoint[transition.PipeHandle]) accepts transition;
        } else {
            ValidationCheck(false, m, DiagnosisLevel.Information, "Empty event history buffer element");
            release m;
        }
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_67 // controller reset state machine transition
    {
        UcxControllerResetStateMachineTransition transition = new UcxControllerResetStateMachineTransition{ };
        // Due to a permanent bug, the event and state fields are reversed.
        uint actualEvent = m.Fid_State;
        uint actualState = m.Fid_Event;
        transition.Event = (actualEvent & 0xfffffff0) as UcxControllerResetStateMachineEvent;
        transition.NewState = actualState as UcxControllerResetStateMachineState;
        transition.UcxController = UlongFromEtwPointer(m.Fid_UcxController);
        transition.Rundown = false;
        dispatch (endpoint UsbControllerOpnEndpoint[transition.UcxController]) accepts transition;
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_68 // controller reset state machine event
    {
        UcxControllerResetStateMachineTransitionEventOnly transition = new UcxControllerResetStateMachineTransitionEventOnly{ };
        transition.Event = (m.Fid_Event & 0xfffffff0) as UcxControllerResetStateMachineEvent;
        transition.UcxController = UlongFromEtwPointer(m.Fid_UcxController);
        transition.Rundown = false;
        dispatch (endpoint UsbControllerOpnEndpoint[transition.UcxController]) accepts transition;
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_69 // rundown controller reset state machine transition
    {
        if (m.Fid_Event != 0) {
            UcxControllerResetStateMachineTransition transition = new UcxControllerResetStateMachineTransition{ };
            // Due to a permanent bug, the event and state fields are reversed.
            uint actualEvent = m.Fid_State;
            uint actualState = m.Fid_Event;
            transition.Event = (actualEvent & 0xfffffff0) as UcxControllerResetStateMachineEvent;
            transition.NewState = actualState as UcxControllerResetStateMachineState;
            transition.UcxController = UlongFromEtwPointer(m.Fid_UcxController);
            transition.Rundown = true;
            dispatch (endpoint UsbControllerOpnEndpoint[transition.UcxController]) accepts transition;
        } else {
            ValidationCheck(false, m, DiagnosisLevel.Information, "Empty transition history buffer element");
            release m;
        }
    }
    process node accepts m:Microsoft_Windows_USB_UCX.Event_70 // rundown controller reset state machine event
    {
        if (m.Fid_Event != 0) {
            UcxControllerResetStateMachineTransitionEventOnly transition = new UcxControllerResetStateMachineTransitionEventOnly{ };
            transition.Event = (m.Fid_Event & 0xfffffff0) as UcxControllerResetStateMachineEvent;
            transition.UcxController = UlongFromEtwPointer(m.Fid_UcxController);
            transition.Rundown = true;
            dispatch (endpoint UsbControllerOpnEndpoint[transition.UcxController]) accepts transition;
        } else {
            ValidationCheck(false, m, DiagnosisLevel.Information, "Empty event history buffer element");
            release m;
        }
    }
}

public autostart actor ObserveHub3Event (ep_Microsoft_Windows_USB_USBHUB3 node)
{
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_6 // device information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDevicePortPath(deviceInstance, m.Fid_PortPath);
        SaveDeviceDescription(deviceInstance, m.Fid_DeviceDescription);
        // TODO: #save: PowerStateMap[deviceInstance] = m.Fid_CurrentWdfPowerDeviceState as int;
        // TODO: #save: ParentHubMap[deviceInstance] = UlongFromEtwPointer(m.Fid_HubDevice);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_43 // device prepare hardware information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        // TODO: #save: PowerStateMap[deviceInstance] = m.Fid_CurrentWdfPowerDeviceState as int;
        // TODO: #save: ParentHubMap[deviceInstance] = UlongFromEtwPointer(m.Fid_HubDevice);
        SaveDevicePortPath(deviceInstance, m.Fid_PortPath);
        SaveDeviceDescription(deviceInstance, m.Fid_DeviceDescription);
    }
    // TODO: #FeatureRequest: symbolic name of event
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_5 // root hub information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveRootHub(deviceInstance, Usb30);
        // TODO: #save: PowerStateMap[deviceInstance] = m.Fid_CurrentWdfPowerDeviceState as int;
        // TODO: #save: SpeedMap[deviceInstance] = UsbSpeed.SuperSpeed; // Treat all ucx/hub3 root hubs as SuperSpeed
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_24 // root hub prepare hardware
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveRootHub(deviceInstance, Usb30);
        // TODO: #save: PowerStateMap[deviceInstance] = m.Fid_CurrentWdfPowerDeviceState as int;
        // TODO: #save: SpeedMap[deviceInstance] = UsbSpeed.SuperSpeed; // Treat all ucx/hub3 root hubs as SuperSpeed
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_4 // 2.0/1.1 hub information (rundown)
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_3 // SS hub information (rundown)
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_23 // 2.0/1.1 hub information at prepare hardware
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_22 // SS hub information at prepare hardware
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_21 // hub complete prepare hardware
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_20 // hub start prepare hardware
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        SaveDeviceInstanceAsHub(deviceInstance);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_50 // device release hardware complete
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        DeviceInstanceRemovedUsb3(devicePtr);
    }
    observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_58 // EvtDeviceCleanup complete
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        DeviceInstanceRemovedUsb3(devicePtr);
    }

    process node accepts m:Microsoft_Windows_USB_USBHUB3.Event_100 // usb 2.0 port status
    {
        int statusAndChange;
        int deviceInstance = GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice));
        UsbHubRequest.Get20PortStatus decoded = new UsbHubRequest.Get20PortStatus { };
        decoded.Status = UsbdStatus.USBD_STATUS_SUCCESS;
        decoded.DeviceInstance = deviceInstance;
        decoded.Port = m.Fid_PortNumber;
        
        //
        // Combine status and change fields into 1 type so they can be decoded together using
        // BinaryDecoder. Change comes first (before status) in the type we will decode with, so put
        // change in the most significant bit (OPN 5.14.1.2.2).
        //
        statusAndChange = m.Fid_PortStatus | (m.Fid_PortChange << 16);
        decoded.PortStatus = BinaryDecoder<Usb2PortStatus>([(m.Fid_PortChange >> 8) as byte, (m.Fid_PortChange & 0xff) as byte, (m.Fid_PortStatus >> 8) as byte, (m.Fid_PortStatus & 0xff) as byte,] as binary) as Usb2PortStatus;

        dispatch (endpoint UsbHub[deviceInstance]) accepts decoded;
    }
    process node accepts m:Microsoft_Windows_USB_USBHUB3.Event_101 // usb 3.0 port status
    {
        int statusAndChange;
        int deviceInstance = GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice));
        UsbHubRequest.Get30PortStatus decoded = new UsbHubRequest.Get30PortStatus { };
        decoded.Status = UsbdStatus.USBD_STATUS_SUCCESS;
        decoded.DeviceInstance = deviceInstance;
        decoded.Port = m.Fid_PortNumber;
        
        //
        // Combine status and change fields into 1 type so they can be decoded together using
        // BinaryDecoder. Change comes first (before status) in the type we will decode with, so put
        // change in the most significant bit (OPN 5.14.1.2.2).
        //
        statusAndChange = m.Fid_PortStatus | (m.Fid_PortChange << 16);
        decoded.PortStatus = BinaryDecoder<Usb3PortStatus>([(m.Fid_PortChange >> 8) as byte, (m.Fid_PortChange & 0xff) as byte, (m.Fid_PortStatus >> 8) as byte, (m.Fid_PortStatus & 0xff) as byte,] as binary) as Usb3PortStatus;

        dispatch (endpoint UsbHub[deviceInstance]) accepts decoded;
    }
    process node accepts m:Microsoft_Windows_USB_USBHUB3.Event_110 // state machine event
    {
        // TODO: track nested states (1 current state per depth)? where to show in UI? maybe just an array inside the message payload
        switch(m.Fid_StartIndex) {
            case $HubStateMachineStartIndex =>
                HubStateMachineTransition transition = new HubStateMachineTransition{ };
                transition.Event = m.Fid_Event as HubStateMachineEvent;
                transition.NewState = m.Fid_State as HubStateMachineState;
                transition.DevicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
                transition.Rundown = false;
                transition.Depth = m.Fid_Depth;
                dispatch (endpoint UsbHub[GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice))])
                    accepts transition;
            case $Port20StateMachineStartIndex =>
                Port20StateMachineTransition transition = new Port20StateMachineTransition{ };
                transition.Event = m.Fid_Event as Port20StateMachineEvent;
                transition.NewState = m.Fid_State as Port20StateMachineState;
                transition.PortObject = UlongFromEtwPointer(m.Fid_Context);
                transition.Rundown = false;
                transition.Depth = m.Fid_Depth;
                dispatch (endpoint UsbHubPort[transition.PortObject]) accepts transition;
            case $Port30StateMachineStartIndex =>
                Port30StateMachineTransition transition = new Port30StateMachineTransition{ };
                transition.Event = m.Fid_Event as Port30StateMachineEvent;
                transition.NewState = m.Fid_State as Port30StateMachineState;
                transition.PortObject = UlongFromEtwPointer(m.Fid_Context);
                transition.Rundown = false;
                transition.Depth = m.Fid_Depth;
                dispatch (endpoint UsbHubPort[transition.PortObject]) accepts transition;
            case $DeviceStateMachineStartIndex =>
                Usbhub3DeviceStateMachineTransition transition = new Usbhub3DeviceStateMachineTransition{ };
                transition.Event = m.Fid_Event as DeviceStateMachineEvent;
                transition.NewState = m.Fid_State as DeviceStateMachineState;
                transition.DevicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
                transition.Rundown = false;
                transition.Depth = m.Fid_Depth;
                //
                // All messages dispatched to UsbDeviceOpnEndpoint must have explicit origins to
                // avoid implicitly dispatching a message we've processed without dispatching.
                //
                transition.Origins += [m];
                dispatch (endpoint UsbDeviceOpnEndpoint[GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice))])
                    accepts transition;
            case $IdleStateMachineStartIndex =>
                Usbhub3DeviceIdleStateMachineTransition transition = new Usbhub3DeviceIdleStateMachineTransition{ };
                transition.Event = m.Fid_Event as IdleStateMachineEvent;
                transition.NewState = m.Fid_State as IdleStateMachineState;
                transition.DevicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
                transition.Rundown = false;
                transition.Depth = m.Fid_Depth;
                //
                // All messages dispatched to UsbDeviceOpnEndpoint must have explicit origins to
                // avoid implicitly dispatching a message we've processed without dispatching.
                //
                transition.Origins += [m];
                dispatch (endpoint UsbDeviceOpnEndpoint[GetDeviceInstanceUsb3(UlongFromEtwPointer(m.Fid_UsbDevice))])
                    accepts transition;
        }
    }
}

public autostart actor ObserveXhciEvent (ep_Microsoft_Windows_USB_USBXHCI node)
{
    observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_3 // controller information
    {
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveControllerType(controllerInstance, ControllerTypeXhci);
        if (m.Fid_AcpiVendorId != "") {
            SaveControllerId(controllerInstance, m.Fid_AcpiVendorId, m.Fid_AcpiDeviceId);
        } else {
            SaveControllerId(controllerInstance,
                             ToHex(m.Fid_PciVendorId as ushort),
                             ToHex(m.Fid_PciDeviceId as ushort));
        }
    }
    observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_6 // controller create
    {
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveControllerType(controllerInstance, ControllerTypeXhci);
        if (m.Fid_AcpiVendorId != "") {
            SaveControllerId(controllerInstance, m.Fid_AcpiVendorId, m.Fid_AcpiDeviceId);
        } else {
            SaveControllerId(controllerInstance,
                             ToHex(m.Fid_PciVendorId as ushort),
                             ToHex(m.Fid_PciDeviceId as ushort));
        }
    }
    observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_4 // device information
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveDevicePortPath(deviceInstance, m.PortPath);
    }
    observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_8 // device create
    {
        var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
        var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
        var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
        var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
        SaveDeviceController(deviceInstance, controllerInstance);
        SaveDevicePortPath(deviceInstance, m.PortPath);
    }
    // TODO: parse TRBs
}

// The global variables are used for temprary storing mappings during processing
// After the session gets closed or after saving as tracezip file, they won't exist anymore
// So it is critical not to get anything that may display in the UI from global variable.
// Must save to annotation instead.
//
// First pass (actual event processing):
//   Event -> (event-specific payload such as pointer) -> int DeviceInstance ->
//   for each property, e.g. UsbDeviceId:
//     Look up UsbDeviceId in global map using DeviceInstance as key ->
//     save to UsbDeviceIdAnnotation on the event
// All passes (event viewing):
//   For each property, e.g. UsbDeviceId:
//     UI: needs UsbDeviceId property -> UI: calls our UsbDeviceId() function ->
//     UsbDeviceId() function: gets annotation value from event

// !!!!GENERATED CODE - DO NOT MODIFY BELOW THIS POINT!!!!

public autostart actor AddColumnsToUcxEvent(ep_Microsoft_Windows_USB_UCX node)
{
observe node accepts m:Microsoft_Windows_USB_UCX.Event_3
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_8
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_9
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_4
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_10
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_11
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_12
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_13
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_71
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_5
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_14
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_15
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_6
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_16
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_17
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_7
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_18
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_19
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_20
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_34
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_35
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_36
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_37
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_38
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_39
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_40
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_41
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_42
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_43
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_44
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_45
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_46
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_47
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_48
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_49
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_50
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_51
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_52
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_53
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_54
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_55
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_56
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_57
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_58
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_59
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_60
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_61
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_62
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_21
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_22
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_23
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_24
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_25
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_26
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_27
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_28
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_29
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_30
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_31
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_32
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_33
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_67
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_69
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_68
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_UCX.Event_70
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
}
public autostart actor AddColumnsToUsbhub3Event(ep_Microsoft_Windows_USB_USBHUB3 node)
{
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_3
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_22
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_4
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_23
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_5
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_24
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_6
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_43
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_7
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_8
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_25
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_26
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_60
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_122
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_146
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_150
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_9
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_27
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_10
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_28
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_20
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_31
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_37
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_38
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_39
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_40
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_41
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_44
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_45
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_49
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_55
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_56
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_57
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_58
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_62
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_63
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_65
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_66
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_70
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_71
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_72
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_73
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_74
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_75
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_76
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_77
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_78
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_79
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_80
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_81
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_82
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_83
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_84
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_96
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_98
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_120
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_173
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_174
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_177
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_21
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_30
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_32
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_42
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_48
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_50
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_64
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_97
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_121
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_134
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_161
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_172
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_33
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_35
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_51
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_53
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_34
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_36
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_52
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_54
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_61
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_176
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_90
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_91
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_157
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_92
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_93
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_94
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_95
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_100
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_101
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_102
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_103
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_140
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_141
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_142
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_143
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_144
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_145
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_147
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_148
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_149
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_151
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_152
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_153
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_154
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_155
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_156
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_110
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_111
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_130
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_131
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_132
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_133
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_160
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_162
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_163
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_164
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_165
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_166
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_167
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_168
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_169
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_170
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_171
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_175
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
observe node accepts m:Microsoft_Windows_USB_USBHUB3.Event_179
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    if (deviceInstance in (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance) {
        var controllerInstance = (endpoint Usb3Globals).ControllerInstanceFromDeviceInstance[deviceInstance];
        m#UsbControllerInstanceAnnotation = controllerInstance;
        AnnotateControllerMessage(m, controllerInstance);
    }
}
}
public autostart actor AddColumnsToXhciEvent(ep_Microsoft_Windows_USB_USBXHCI node)
{
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_3
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_6
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_7
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_15
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_4
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_8
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_9
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_10
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_5
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_11
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_12
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_13
{
    var devicePtr = UlongFromEtwPointer(m.Fid_UsbDevice);
    var deviceInstance = GetDeviceInstanceUsb3(devicePtr);
    m#UsbDeviceInstanceAnnotation = deviceInstance;
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateDeviceMessage(m, deviceInstance);
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_14
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_16
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_18
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_20
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_22
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_17
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_19
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_21
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_23
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_24
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_26
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_28
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_25
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_27
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_29
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_30
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_31
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_32
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_33
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
observe node accepts m:Microsoft_Windows_USB_USBXHCI.Event_34
{
    var controllerPtr = UlongFromEtwPointer(m.Fid_UcxController);
    var controllerInstance = GetControllerInstanceUsb3(controllerPtr);
    m#UsbControllerInstanceAnnotation = controllerInstance;
    AnnotateControllerMessage(m, controllerInstance);
}
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_21 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_30 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_32 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_42 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_48 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_50 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_64 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_97 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_121 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_134 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_161 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_172 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_34 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_36 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_52 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_54 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_61 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_176 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_91 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_157 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_102 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_103 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_140 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_141 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_142 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_143 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_144 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_145 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_147 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_148 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_149 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_151 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_152 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_153 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_154 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_155 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_156 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_130 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_131 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_132 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_133 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_160 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_162 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_163 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_164 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_165 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_166 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_167 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_168 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_169 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_170 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBHUB3.Event_171 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_17 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_19 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_21 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_23 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_25 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_27 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}
NTSTATUS get NtStatus(this Microsoft_Windows_USB_USBXHCI.Event_29 msg)
{
    NTSTATUS status = msg.Fid_NtStatus as NTSTATUS;
    ErrorCodeIf((!NT_SUCCESS(status) && status != NTSTATUS.STATUS_CANCELLED),
                msg,
                DiagnosisLevel.Error,
                Format("USB: This message carries an error NTSTATUS: {0}", EnumToString(status, "NtStatusModule.NTSTATUS")));
    return status;
}

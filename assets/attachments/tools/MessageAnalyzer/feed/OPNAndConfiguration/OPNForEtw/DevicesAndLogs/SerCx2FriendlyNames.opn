protocol SerCx2FriendlyNames;

using Standard;
using DTYP;
using Utility;
using Diagnostics;

// This interface is implemented by all SerCx2 events.
interface SerCx2Interface {};

// Endpoint and message type used to display parsed IOCTL buffer information.
endpoint SerCx2IoctlEventEndpoint accepts IoctlBufferMessage;

message IoctlBufferMessage
{
    string Message;

    override string ToString()
    {
        return Message;
    }
}

//
// Global Variables
//

const int BITS_IN_ULONG = 32;

//
// Serial Structs
//

type SerialBaudRate
{
    ulong BaudRate;
}

type SerialTimeout
{
    ulong ReadIntervalTimeout;
    ulong ReadTotalTimeoutMultiplier;
    ulong ReadTotalTimeoutConstant;
    ulong WriteTotalTimeoutMultiplier;
    ulong WriteTotalTimeoutConstant;
}

type SerialChars
{
    byte EofChar;
    byte ErrorChar;
    byte BreakChar;
    byte EventChar;
    byte XonChar;
    byte XoffChar;
}

type SerialHandFlow
{
    ulong ControlHandShake;
    ulong FlowReplace;
    long XonLimit;
    long XoffLimit;
}

type SerialLineControl
{
    byte StopBits;
    byte Parity;
    byte WordLength;
}

type SerialStatus
{
    ulong Errors;
    ulong HoldReasons;
    ulong AmountInInQueue;
    ulong AmountInOutQueue;
    ushort EofReceived;
    ushort WaitForImmediate;
}

type SerialProperties
{
    ushort PacketLength;
    ushort PacketVersion;
    ulong ServiceMask;
    ulong Reserved1;
    ulong MaxTxQueue;
    ulong MaxRxQueue;
    ulong MaxBaud;
    ulong ProvSubType;
    ulong ProvCapabilities;
    ulong SettableParams;
    ulong SettableBaud;
    ushort SettableData;
    ushort SettableStopParity;
    ulong CurrentTxQueue;
    ulong CurrentRxQueue;
    ulong ProvSpec1;
    ulong ProvSpec2;
    ushort ProvChar;
}

type SerialQueueSize
{
    ulong InSize;
    ulong OutSize;
}

//
// Dispatch Messages for IOCTL Buffers
//
void ParseAndDisplayIoctlStartBuffer(uint IOCTLCode, array<byte> Buffer)
{
    array<string> ioctlMessageStrings = null;

    switch(IoctlToString(IOCTLCode))
    {
        case "IOCTL_SERIAL_SET_BAUD_RATE" =>ioctlMessageStrings = SerialBaudRateToStringArray(ByteArrayToSerialBaudRate(Buffer));
        case "IOCTL_SERIAL_SET_CHARS" =>ioctlMessageStrings = SerialCharsToStringArray(ByteArrayToSerialChars(Buffer));
        case "IOCTL_SERIAL_SET_FIFO_CONTROL" =>ioctlMessageStrings = ["FIFO Control: " + DecToHexFormat(ByteArrayToULong(Buffer, 0))];
        case "IOCTL_SERIAL_SET_HANDFLOW" =>ioctlMessageStrings = SerialHandFlowToStringArray(ByteArrayToSerialHandFlow(Buffer));
        case "IOCTL_SERIAL_SET_LINE_CONTROL" =>ioctlMessageStrings = SerialLineControlToStringArray(ByteArrayToSerialLineControl(Buffer));
        case "IOCTL_SERIAL_SET_MODEM_CONTROL" =>ioctlMessageStrings = ["Modem Control: " + DecToHexFormat(ByteArrayToULong(Buffer, 0))];
        case "IOCTL_SERIAL_SET_QUEUE_SIZE" =>ioctlMessageStrings = SerialQueueSizeToStringArray(ByteArrayToSerialQueueSize(Buffer));
        case "IOCTL_SERIAL_SET_TIMEOUTS" => ioctlMessageStrings = SerialTimeoutToStringArray(ByteArrayToSerialTimeout(Buffer));
        case "IOCTL_SERIAL_SET_WAIT_MASK" =>ioctlMessageStrings = WaitMaskToStringArray(ByteArrayToULong(Buffer, 0));
        case "IOCTL_SERIAL_PURGE" => ioctlMessageStrings = PurgeToStringArray(ByteArrayToULong(Buffer, 0));
    }

    if (ioctlMessageStrings != null)
    {
        foreach(string s in ioctlMessageStrings)
        {
            IoctlBufferMessage ioctlBufferMessage = new IoctlBufferMessage{};
            ioctlBufferMessage.Message = s;

            dispatch(endpoint SerCx2IoctlEventEndpoint) accepts ioctlBufferMessage;
        }
    }

}

void ParseAndDisplayIoctlStopBuffer(uint IOCTLCode, array<byte> Buffer)
{
    array<string> ioctlMessageStrings = null;

    switch(IoctlToString(IOCTLCode))
    {
        case "IOCTL_SERIAL_GET_BAUD_RATE" =>ioctlMessageStrings = SerialBaudRateToStringArray(ByteArrayToSerialBaudRate(Buffer));
        case "IOCTL_SERIAL_GET_CHARS" =>ioctlMessageStrings = SerialCharsToStringArray(ByteArrayToSerialChars(Buffer));
        case "IOCTL_SERIAL_GET_COMMSTATUS" =>ioctlMessageStrings = SerialStatusToStringArray(ByteArrayToSerialStatus(Buffer));
        case "IOCTL_SERIAL_GET_DTRRTS" =>ioctlMessageStrings = DtrRtsToStringArray(ByteArrayToULong(Buffer, 0));
        case "IOCTL_SERIAL_GET_HANDFLOW" =>ioctlMessageStrings = SerialHandFlowToStringArray(ByteArrayToSerialHandFlow(Buffer));;
        case "IOCTL_SERIAL_GET_LINE_CONTROL" =>ioctlMessageStrings = SerialLineControlToStringArray(ByteArrayToSerialLineControl(Buffer));
        case "IOCTL_SERIAL_GET_MODEMSTATUS" =>ioctlMessageStrings = ["Modem Status: " + DecToHexFormat(ByteArrayToULong(Buffer, 0))];
        case "IOCTL_SERIAL_GET_MODEM_CONTROL" =>ioctlMessageStrings = ["Modem Control: " + DecToHexFormat(ByteArrayToULong(Buffer, 0))];
        case "IOCTL_SERIAL_GET_PROPERTIES" =>ioctlMessageStrings = SerialPropertiesToStringArray(ByteArrayToSerialProperties(Buffer));
        case "IOCTL_SERIAL_GET_TIMEOUTS" => ioctlMessageStrings = SerialTimeoutToStringArray(ByteArrayToSerialTimeout(Buffer));
        case "IOCTL_SERIAL_GET_WAIT_MASK" =>ioctlMessageStrings = WaitMaskToStringArray(ByteArrayToULong(Buffer, 0));
        case "IOCTL_SERIAL_WAIT_ON_MASK" =>ioctlMessageStrings = WaitMaskToStringArray(ByteArrayToULong(Buffer, 0));
    }

    if (ioctlMessageStrings != null)
    {
        foreach(string s in ioctlMessageStrings)
        {
            IoctlBufferMessage ioctlBufferMessage = new IoctlBufferMessage{};
            ioctlBufferMessage.Message = s;

            dispatch(endpoint SerCx2IoctlEventEndpoint) accepts ioctlBufferMessage;
        }
    }
}

//
// IOCTL Byte Array To String Methods
//

array<string> PurgeToStringArray(ulong PurgeMask)
{
    array<string> outStrings = [""];
    string purgeFlags = " Flags: ";
    ulong purgeFlag;
    string purgeFlagToString;

    for (int i = 0; i < BITS_IN_ULONG; i++)
    {
        purgeFlag = PurgeMask & ((1 as ulong) << i);
        purgeFlagToString = "";

        if (purgeFlag != 0) {
            purgeFlagToString = purgeFlagToString + PurgeFlagToString(purgeFlag) + " ";
        }

        purgeFlags = purgeFlags + purgeFlagToString;
    }

    outStrings[0] = "Purge Mask: " + DecToHexFormat(PurgeMask) + purgeFlags;

    return outStrings;
}

array<string> DtrRtsToStringArray(ulong DtrRtsMask)
{
    array<string> outStrings = [""];
    string dtrRtsFlags = " Flags: ";
    ulong dtrRtsFlag;
    string dtrRtsFlagToString;

    for (int i = 0; i < BITS_IN_ULONG; i++)
    {
        dtrRtsFlag = DtrRtsMask & ((1 as ulong) << i);
        dtrRtsFlagToString = "";

        if (dtrRtsFlag != 0) {
            dtrRtsFlagToString = dtrRtsFlagToString + DtrRtsFlagToString(dtrRtsFlag) + " ";
        }

        dtrRtsFlags = dtrRtsFlags + dtrRtsFlagToString;
    }

    outStrings[0] = "DtrRts Mask: " + DecToHexFormat(DtrRtsMask) + dtrRtsFlags;

    return outStrings;
}

array<string> SerialTimeoutToStringArray(SerialTimeout Timeout)
{
    array<string> outStrings = ["","","","",""];

    outStrings[0] = "ReadIntervalTimeout: " + (Timeout.ReadIntervalTimeout as string);
    outStrings[1] = "ReadTotalTimeoutMultiplier: " + (Timeout.ReadTotalTimeoutMultiplier as string);
    outStrings[2] = "ReadTotalTimeoutConstant: " + (Timeout.ReadTotalTimeoutConstant as string);
    outStrings[3] = "WriteTotalTimeoutMultiplier: " + (Timeout.WriteTotalTimeoutMultiplier as string);
    outStrings[4] = "WriteTotalTimeoutConstant: " + (Timeout.WriteTotalTimeoutConstant as string);

    return outStrings;
}

array<string> SerialCharsToStringArray(SerialChars Chars)
{
    array<string> outStrings = ["","","","","",""];

    outStrings[0] = "EofChar: " + DecToHexFormat(Chars.EofChar);
    outStrings[1] = "ErrorChar: " + DecToHexFormat(Chars.ErrorChar);
    outStrings[2] = "BreakChar: " + DecToHexFormat(Chars.BreakChar);
    outStrings[3] = "EventChar: " + DecToHexFormat(Chars.EventChar);
    outStrings[4] = "XonChar: " + DecToHexFormat(Chars.XonChar);
    outStrings[5] = "XoffChar: " + DecToHexFormat(Chars.XoffChar);

    return outStrings;
}

array<string> WaitMaskToStringArray(ulong WaitMask)
{
    array<string> outStrings = [""];
    string waitMaskFlags = " Flags: ";
    ulong waitMaskFlag;
    string waitMaskFlagToString;

    for (int i = 0; i < BITS_IN_ULONG; i++)
    {
        waitMaskFlag = WaitMask & ((1 as ulong) << i);
        waitMaskFlagToString = "";

        if (waitMaskFlag != 0) {
            waitMaskFlagToString = waitMaskFlagToString + WaitMaskFlagToString(waitMaskFlag) + " ";
        }

        waitMaskFlags = waitMaskFlags + waitMaskFlagToString;
    }

    outStrings[0] = "Wait Mask: " + DecToHexFormat(WaitMask) + waitMaskFlags;

    return outStrings;
}

array<string> SerialBaudRateToStringArray(SerialBaudRate BaudRate)
{
    array<string> outStrings = [""];

    outStrings[0] = "BaudRate: " + (BaudRate.BaudRate as string);

    return outStrings;
}

array<string> SerialHandFlowToStringArray(SerialHandFlow HandFlow)
{
    array<string> outStrings = ["","","",""];

    ulong controlHandShakeFlag;
    ulong flowReplaceFlag;
    string controlHandShakeFlagStr = " Flags: ";
    string flowReplaceFlagStr = " Flags: ";
    string controlHandShakeFlagToString;
    string flowReplaceFlagToString;

    for (int i = 0; i < BITS_IN_ULONG; i++)
    {
        controlHandShakeFlag = HandFlow.ControlHandShake & ((1 as ulong) << i);
        flowReplaceFlag = HandFlow.FlowReplace & ((1 as ulong) << i);

        controlHandShakeFlagToString = "";

        if (controlHandShakeFlag != 0) {
            controlHandShakeFlagToString = controlHandShakeFlagToString + ControlHandShakeFlagToString(controlHandShakeFlag) + " ";
        }

        flowReplaceFlagToString = "";

        if (flowReplaceFlag != 0) {
            flowReplaceFlagToString = flowReplaceFlagToString + FlowReplaceFlagToString(flowReplaceFlag) + " ";
        }

        controlHandShakeFlagStr = controlHandShakeFlagStr + controlHandShakeFlagToString;
        flowReplaceFlagStr = flowReplaceFlagStr + flowReplaceFlagToString;
    }

    outStrings[0] = "ControlHandShake: " + DecToHexFormat(HandFlow.ControlHandShake) + controlHandShakeFlagStr;
    outStrings[1] = "FlowReplace: " + DecToHexFormat(HandFlow.FlowReplace) + flowReplaceFlagStr;
    outStrings[2] = "XonLimit: " + (HandFlow.XonLimit as string);
    outStrings[3] = "XoffLimit: " + (HandFlow.XoffLimit as string);

    return outStrings;
}

array<string> SerialLineControlToStringArray(SerialLineControl LineControl)
{
    array<string> outStrings = ["","",""];

    outStrings[0] = "StopBits: " + StopBitsToString(LineControl.StopBits);
    outStrings[1] = "Parity: " + ParityToString(LineControl.Parity);
    outStrings[2] = "WordLength: " + (LineControl.WordLength as string);

    return outStrings;
}

array<string> SerialPropertiesToStringArray(SerialProperties Properties)
{
    array<string> outStrings = ["","","","","","","","","","","","","","","","",""];

    outStrings[0] = "PacketLength: " + (Properties.PacketLength as string);
    outStrings[1] = "PacketVersion: " + (Properties.PacketVersion as string);
    outStrings[2] = "ServiceMask: " + DecToHexFormat(Properties.ServiceMask);
    outStrings[3] = "Reserved1: " + DecToHexFormat(Properties.Reserved1);
    outStrings[4] = "MaxTxQueue: " + (Properties.MaxTxQueue as string);
    outStrings[5] = "MaxRxQueue: " + (Properties.MaxRxQueue as string);
    outStrings[6] = "MaxBaud: " + (Properties.MaxBaud as string);
    outStrings[7] = "ProvSubType: " + DecToHexFormat(Properties.ProvSubType);
    outStrings[8] = "ProvCapabilities: " + DecToHexFormat(Properties.ProvCapabilities);
    outStrings[9] = "SettableParams: " + DecToHexFormat(Properties.SettableParams);
    outStrings[10] = "SettableBaud: " + DecToHexFormat(Properties.SettableBaud);
    outStrings[11] = "SettableData: " + DecToHexFormat(Properties.SettableData);
    outStrings[12] = "CurrentTxQueue: " + (Properties.CurrentTxQueue as string);
    outStrings[13] = "CurrentRxQueue: " + (Properties.CurrentRxQueue as string);
    outStrings[14] = "ProvSpec1: " + DecToHexFormat(Properties.ProvSpec1);
    outStrings[15] = "ProvSpec2: " + DecToHexFormat(Properties.ProvSpec2);
    outStrings[16] = "ProvChar: " + (Properties.ProvChar as string);

    return outStrings;
}

array<string> SerialStatusToStringArray(SerialStatus Status)
{
    array<string> outStrings = ["","","","","",""];

    string holdReasonsFlags = " Flags: ";
    ulong holdReasonsFlag;
    string holdReasonsFlagToString;

    for (int i = 0; i < BITS_IN_ULONG; i++)
    {
        holdReasonsFlag = Status.HoldReasons & ((1 as ulong) << i);
        holdReasonsFlagToString = "";

        if (holdReasonsFlag != 0) {
            holdReasonsFlagToString = holdReasonsFlagToString + HoldReasonsFlagToString(holdReasonsFlag) + " ";
        }

        holdReasonsFlags = holdReasonsFlags + holdReasonsFlagToString;
    }

    outStrings[0] = "Errors: " + (Status.Errors as string);
    outStrings[1] = "HoldReasons: " + DecToHexFormat(Status.HoldReasons) + holdReasonsFlags;
    outStrings[2] = "AmountInInQueue: " + (Status.AmountInInQueue as string);
    outStrings[3] = "AmountInOutQueue: " + (Status.AmountInOutQueue as string);
    outStrings[4] = "EofReceived: " + (Status.EofReceived as string);
    outStrings[5] = "WaitForImmediate: " + (Status.WaitForImmediate as string);

    return outStrings;
}

array<string> SerialQueueSizeToStringArray(SerialQueueSize QueueSize)
{
    array<string> outStrings = ["",""];
    
    outStrings[0] = "InSize: " + (QueueSize.InSize as string);
    outStrings[1] = "OutSize: " + (QueueSize.OutSize as string);

    return outStrings;
}

string IoctlToString(ulong IoctlCode)
{
    string ioctlNameStr;

    switch (IoctlCode)
    {
        case 0x1b00a0 => ioctlNameStr = "IOCTL_SERIAL_APPLY_DEFAULT_CONFIGURATION";
        case 0x1b0090 => ioctlNameStr = "IOCTL_SERIAL_CLEAR_STATS";
        case 0x1b0028 => ioctlNameStr = "IOCTL_SERIAL_CLR_DTR";
        case 0x1b0034 => ioctlNameStr = "IOCTL_SERIAL_CLR_RTS";
        case 0x1b0080 => ioctlNameStr = "IOCTL_SERIAL_CONFIG_SIZE";
        case 0x1b0050 => ioctlNameStr = "IOCTL_SERIAL_GET_BAUD_RATE";
        case 0x1b0058 => ioctlNameStr = "IOCTL_SERIAL_GET_CHARS";
        case 0x1b006c => ioctlNameStr = "IOCTL_SERIAL_GET_COMMSTATUS";
        case 0x1b0078 => ioctlNameStr = "IOCTL_SERIAL_GET_DTRRTS";
        case 0x1b0060 => ioctlNameStr = "IOCTL_SERIAL_GET_HANDFLOW";
        case 0x1b0054 => ioctlNameStr = "IOCTL_SERIAL_GET_LINE_CONTROL";
        case 0x1b0068 => ioctlNameStr = "IOCTL_SERIAL_GET_MODEMSTATUS";
        case 0x1b0094 => ioctlNameStr = "IOCTL_SERIAL_GET_MODEM_CONTROL";
        case 0x1b0074 => ioctlNameStr = "IOCTL_SERIAL_GET_PROPERTIES";
        case 0x1b008c => ioctlNameStr = "IOCTL_SERIAL_GET_STATS";
        case 0x1b0020 => ioctlNameStr = "IOCTL_SERIAL_GET_TIMEOUTS";
        case 0x1b0040 => ioctlNameStr = "IOCTL_SERIAL_GET_WAIT_MASK";
        case 0x1b0018 => ioctlNameStr = "IOCTL_SERIAL_IMMEDIATE_CHAR";
        case 0x1b007c => ioctlNameStr = "IOCTL_SERIAL_LSRMST_INSERT";
        case 0x1b004c => ioctlNameStr = "IOCTL_SERIAL_PURGE";
        case 0x1b002c => ioctlNameStr = "IOCTL_SERIAL_RESET_DEVICE";
        case 0x1b0004 => ioctlNameStr = "IOCTL_SERIAL_SET_BAUD_RATE";
        case 0x1b0014 => ioctlNameStr = "IOCTL_SERIAL_SET_BREAK_OFF";
        case 0x1b0010 => ioctlNameStr = "IOCTL_SERIAL_SET_BREAK_ON";
        case 0x1b005c => ioctlNameStr = "IOCTL_SERIAL_SET_CHARS";
        case 0x1b0024 => ioctlNameStr = "IOCTL_SERIAL_SET_DTR";
        case 0x1b009c => ioctlNameStr = "IOCTL_SERIAL_SET_FIFO_CONTROL";
        case 0x1b0064 => ioctlNameStr = "IOCTL_SERIAL_SET_HANDFLOW";
        case 0x1b000c => ioctlNameStr = "IOCTL_SERIAL_SET_LINE_CONTROL";
        case 0x1b0098 => ioctlNameStr = "IOCTL_SERIAL_SET_MODEM_CONTROL";
        case 0x1b0008 => ioctlNameStr = "IOCTL_SERIAL_SET_QUEUE_SIZE";
        case 0x1b0030 => ioctlNameStr = "IOCTL_SERIAL_SET_RTS";
        case 0x1b001c => ioctlNameStr = "IOCTL_SERIAL_SET_TIMEOUTS";
        case 0x1b0044 => ioctlNameStr = "IOCTL_SERIAL_SET_WAIT_MASK";
        case 0x1b0038 => ioctlNameStr = "IOCTL_SERIAL_SET_XOFF";
        case 0x1b003c => ioctlNameStr = "IOCTL_SERIAL_SET_XON";
        case 0x1b0048 => ioctlNameStr = "IOCTL_SERIAL_WAIT_ON_MASK";
        case 0x1b0070 => ioctlNameStr = "IOCTL_SERIAL_XOFF_COUNTER";
        default => ioctlNameStr = "Unknown IOCTL " + (IoctlCode as string);
    }

    return ioctlNameStr;
}

string WaitMaskFlagToString(ulong WaitMaskFlag)
{
    string waitMaskFlagStr;

    switch(WaitMaskFlag)
    {
        case 0x0001 => waitMaskFlagStr = "RXCHAR";
        case 0x0002 => waitMaskFlagStr = "RXFLAG";
        case 0x0004 => waitMaskFlagStr = "TXEMPTY";
        case 0x0008 => waitMaskFlagStr = "CTS";
        case 0x0010 => waitMaskFlagStr = "DSR";
        case 0x0020 => waitMaskFlagStr = "RLSD";
        case 0x0040 => waitMaskFlagStr = "BREAK";
        case 0x0080 => waitMaskFlagStr = "ERR";
        case 0x0100 => waitMaskFlagStr = "RING";
        case 0x0200 => waitMaskFlagStr = "PERR";
        case 0x0400 => waitMaskFlagStr = "RX80FULL";
        case 0x0800 => waitMaskFlagStr = "EVENT1";
        case 0x1000 => waitMaskFlagStr = "EVENT2";
        default => waitMaskFlagStr = "UNKNOWN";
    }

    return waitMaskFlagStr;
}

string ControlHandShakeFlagToString(ulong ControlHandShakeFlag)
{
    string controlHandShakeFlagStr;

    switch(ControlHandShakeFlag)
    {
        case 0x01 => controlHandShakeFlagStr = "DTR_CONTROL";
        case 0x02 => controlHandShakeFlagStr = "DTR_HANDSHAKE";
        case 0x08 => controlHandShakeFlagStr = "CTS_HANDSHAKE";
        case 0x10 => controlHandShakeFlagStr = "DSR_HANDSHAKE";
        case 0x20 => controlHandShakeFlagStr = "DCD_HANDSHAKE";
        case 0x40 => controlHandShakeFlagStr = "DSR_SENSITIVITY";
        default => controlHandShakeFlagStr = "UNKNOWN";
    }

    return controlHandShakeFlagStr;
}

string FlowReplaceFlagToString(ulong FlowReplaceFlag)
{
    string flowReplaceFlagStr;

    switch(FlowReplaceFlag)
    {
        case 0x01 => flowReplaceFlagStr = "AUTO_TRANSMIT";
        case 0x02 => flowReplaceFlagStr = "AUTO_RECEIVE";
        case 0x04 => flowReplaceFlagStr = "ERROR_CHAR";
        case 0x08 => flowReplaceFlagStr = "NULL_STRIPPING";
        case 0x10 => flowReplaceFlagStr = "BREAK_CHAR";
        case 0x40 => flowReplaceFlagStr = "RTS_CONTROL";
        case 0x80 => flowReplaceFlagStr = "RTS_HANDSHAKE";
        case 0x80000000 => flowReplaceFlagStr = "DSR_SENSITIVITY";
        default => flowReplaceFlagStr = " UNKNOWN";
    }

    return flowReplaceFlagStr;
}

string WaitForImmediateFlagToString(ulong WaitForImmediateFlag)
{
    string waitForImmediateFlagStr;

    switch(WaitForImmediateFlag)
    {
        case 0x01 => waitForImmediateFlagStr = "WAITING_FOR_CTS";
        case 0x02 => waitForImmediateFlagStr = "WAITING_FOR_DSR";
        case 0x04 => waitForImmediateFlagStr = "WAITING_FOR_DCD";
        case 0x08 => waitForImmediateFlagStr = "WAITING_FOR_XON";
        case 0x10 => waitForImmediateFlagStr = "XOFF_SENT";
        case 0x20 => waitForImmediateFlagStr = "WAITING_ON_BREAK";
        case 0x40 => waitForImmediateFlagStr = "WAITING_FOR_DSR";
        default => waitForImmediateFlagStr = "UNKNOWN";
    }

    return waitForImmediateFlagStr;
}

string HoldReasonsFlagToString(ulong HoldReasonsFlag)
{
    string holdReasonsFlagStr;

    switch(HoldReasonsFlag)
    {
        case 0x01 => holdReasonsFlagStr = "CTS";
        case 0x02 => holdReasonsFlagStr = "DSR";
        case 0x04 => holdReasonsFlagStr = "DCD";
        case 0x08 => holdReasonsFlagStr = "XON";
        case 0x10 => holdReasonsFlagStr = "XOFF_SENT";
        case 0x20 => holdReasonsFlagStr = "BREAK";
        case 0x40 => holdReasonsFlagStr = "DSR";
    }

    return holdReasonsFlagStr;
}

string PurgeFlagToString(ulong PurgeFlag)
{
    string purgeFlagStr;

    switch(PurgeFlag)
    {
        case 0x01 => purgeFlagStr = "TXABORT";
        case 0x02 => purgeFlagStr = "RXABORT";
        case 0x04 => purgeFlagStr = "TXCLEAR";
        case 0x08 => purgeFlagStr = "RXCLEAR";
        default => purgeFlagStr = "UNKNOWN";
    }

    return purgeFlagStr;
}

string StopBitsToString(byte StopBits)
{
    string StopBitsStr;

    switch(StopBits)
    {
        case 0 => StopBitsStr = "1";
        case 1 => StopBitsStr = "1.5";
        case 2 => StopBitsStr = "2";
        default => StopBitsStr = "Invalid stop bits: " + (StopBits as string);
    }

    return StopBitsStr;
}

string ParityToString(byte Parity)
{
    string ParityStr;

    switch(Parity)
    {
        case 0 => ParityStr = "None";
        case 1 => ParityStr = "Odd";
        case 2 => ParityStr = "Even";
        case 3 => ParityStr = "Mark";
        case 4 => ParityStr = "Space";
        default => ParityStr = "Invalid parity: " + (Parity as string);
    }

    return ParityStr;
}

string DtrRtsFlagToString(ulong DtrRtsFlag)
{
    string DtrRtsStr;

    switch(DtrRtsFlag)
    {
        case 0x01 => DtrRtsStr = "DTR";
        case 0x02 => DtrRtsStr = "RTS";
        default => DtrRtsStr = "UNKNOWN";
    }

    return DtrRtsStr;
}

string SystemPowerStateToString(ulong SystemPowerState)
{
    string powerStateStr;

    switch(SystemPowerState)
    {
        case 1 => powerStateStr = "Working";
        case 2 => powerStateStr = "S1";
        case 3 => powerStateStr = "S2";
        case 4 => powerStateStr = "S3";
        case 5 => powerStateStr = "Hibernate";
        case 6 => powerStateStr = "Shutdown";
        default => powerStateStr = "Unknown power state code " + (SystemPowerState as string);
    }

    return powerStateStr;
}

string DevicePowerStateToString(ulong DevicePowerState)
{
    string powerStateStr;

    switch(DevicePowerState)
    {
        case 1 => powerStateStr = "D0";
        case 2 => powerStateStr = "D1";
        case 3 => powerStateStr = "D2";
        case 4 => powerStateStr = "D3";
        default => powerStateStr = "Unknown power state code " + (DevicePowerState as string);
    }

    return powerStateStr;
}

string SystemDmaEventToString(ulong Event)
{
    string eventStr;

    switch(Event)
    {
        case 1 => eventStr = "EvtProgramDmaTransmit";
        case 2 => eventStr = "EvtProgramDmaReceive";
        case 3 => eventStr = "EvtDmaTransactionConfigureDmaChannelTransmit";
        case 4 => eventStr = "EvtDmaTransactionConfigureDmaChannelReceive";
        default => eventStr = "Unknown event code " + (Event as string);
    }

    return eventStr;
}


//
// Byte Array To Serial Struct Methods
//

SerialBaudRate ByteArrayToSerialBaudRate(array<byte> Array)
{
    SerialBaudRate baudRate = new SerialBaudRate{};

    baudRate.BaudRate = ByteArrayToULong(Array, 0);

    return baudRate;
}

SerialTimeout ByteArrayToSerialTimeout(array<byte> Array)
{
    SerialTimeout timeout = new SerialTimeout{};

    timeout.ReadIntervalTimeout = ByteArrayToULong(Array, 0);
    timeout.ReadTotalTimeoutMultiplier = ByteArrayToULong(Array, 4);
    timeout.ReadTotalTimeoutConstant = ByteArrayToULong(Array, 8);
    timeout.WriteTotalTimeoutMultiplier = ByteArrayToULong(Array, 12);
    timeout.WriteTotalTimeoutConstant = ByteArrayToULong(Array, 16);

    return timeout;
}

SerialChars ByteArrayToSerialChars(array<byte> Array)
{
    SerialChars chars = new SerialChars{};

    chars.EofChar = Array[0];
    chars.ErrorChar = Array[1];
    chars.BreakChar = Array[2];
    chars.EventChar = Array[3];
    chars.XonChar = Array[4];
    chars.XoffChar = Array[5];

    return chars;
}

SerialHandFlow ByteArrayToSerialHandFlow(array<byte> Array)
{
    SerialHandFlow handFlow = new SerialHandFlow{};

    handFlow.ControlHandShake = ByteArrayToULong(Array, 0);
    handFlow.FlowReplace = ByteArrayToULong(Array, 4);
    handFlow.XonLimit = ByteArrayToLong(Array, 8);
    handFlow.XoffLimit = ByteArrayToLong(Array, 12);

    return handFlow;
}

SerialLineControl ByteArrayToSerialLineControl(array<byte> Array)
{
    SerialLineControl lineControl = new SerialLineControl{};

    lineControl.StopBits = Array[0];
    lineControl.Parity = Array[1];
    lineControl.WordLength = Array[2];

    return lineControl;
}

SerialStatus ByteArrayToSerialStatus(array<byte> Array)
{
    SerialStatus status = new SerialStatus{};

    status.Errors = ByteArrayToULong(Array, 0);
    status.HoldReasons = ByteArrayToULong(Array, 4);
    status.AmountInInQueue = ByteArrayToULong(Array, 8);
    status.AmountInOutQueue = ByteArrayToULong(Array, 12);
    status.EofReceived = ByteArrayToUShort(Array, 16);
    status.WaitForImmediate = ByteArrayToUShort(Array, 18);

    return status;
}

SerialProperties ByteArrayToSerialProperties(array<byte> Array)
{
    SerialProperties properties = new SerialProperties{};

    properties.PacketLength = ByteArrayToUShort(Array, 0);
    properties.PacketVersion = ByteArrayToUShort(Array, 2);
    properties.ServiceMask = ByteArrayToULong(Array, 4);
    properties.Reserved1 = ByteArrayToULong(Array, 8);
    properties.MaxTxQueue = ByteArrayToULong(Array, 12);
    properties.MaxRxQueue = ByteArrayToULong(Array, 16);
    properties.ProvSubType = ByteArrayToULong(Array, 20);
    properties.ProvCapabilities = ByteArrayToULong(Array, 24);
    properties.SettableParams = ByteArrayToULong(Array, 28);
    properties.SettableBaud = ByteArrayToULong(Array, 32);
    properties.SettableData = ByteArrayToUShort(Array, 36);
    properties.SettableStopParity = ByteArrayToUShort(Array, 38);
    properties.CurrentTxQueue = ByteArrayToULong(Array, 40);
    properties.CurrentRxQueue = ByteArrayToULong(Array, 44);
    properties.ProvSpec1 = ByteArrayToULong(Array, 48);
    properties.ProvSpec2 = ByteArrayToULong(Array, 52);
    properties.ProvChar = ByteArrayToUShort(Array, 56);

    return properties;
}

SerialQueueSize ByteArrayToSerialQueueSize(array<byte> Array)
{
    SerialQueueSize queueSize = new SerialQueueSize{};

    queueSize.InSize = ByteArrayToULong(Array, 0);
    queueSize.OutSize = ByteArrayToULong(Array, 4);

    return queueSize;
}

ulong ByteArrayToULong(array<byte> Array, int Offset)
{
    ulong outValue = 0;

    outValue = outValue | Array[Offset];
    outValue = outValue | ((Array[Offset + 1] as ulong) << 8);
    outValue = outValue | ((Array[Offset + 2] as ulong) << 16);
    outValue = outValue | ((Array[Offset + 3] as ulong) << 24);

    return outValue;
}

long ByteArrayToLong(array<byte> Array, int Offset)
{
    return (ByteArrayToULong(Array, Offset) as long);
}

ushort ByteArrayToUShort(array<byte> Array, int Offset)
{
    ushort outValue;
    ulong temp = 0;

    temp = temp | Array[(Offset) + 1];
    temp = temp | ((Array[Offset] as ulong) << 8);

    outValue = temp as ushort;

    return outValue;
}

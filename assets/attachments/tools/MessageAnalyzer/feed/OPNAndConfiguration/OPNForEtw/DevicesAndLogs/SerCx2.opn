protocol SerCx2;

using Etw;
using EtwEvent;
using Standard;
using DTYP;
using Utility;

using Microsoft_Windows_Serial_ClassExtension_V2;
using SerCx2FriendlyNames;


annotation string DeviceInstanceIdAnnotation;

public autostart actor ParseSerCx2Event(ep_Microsoft_Windows_Serial_ClassExtension_V2 node)
{
    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_5 // DeviceRundown
    {
        var device = msg.Device.pointerValue as uint;
        var transmitSm = msg.TransmitTransferSmContext.pointerValue as uint;
        var receiveSm = msg.ReceiveTransferSmContext.pointerValue as uint;

        // Map WdfDevice and state machine pointers to ACPI instance ID string.
        node.DeviceInstanceMap[device] = msg.DeviceInstanceId;
        node.TransferSmInstanceMap[transmitSm] = msg.DeviceInstanceId;
        node.TransferSmInstanceMap[receiveSm] = msg.DeviceInstanceId;

        msg#DeviceInstanceIdAnnotation = msg.DeviceInstanceId as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_7
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_8
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_9
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_10
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_11
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_12
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_13
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_14
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_15
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_16
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_17
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_18
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_19
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_20
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_21
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_22
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_23
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_24
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_25
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_26
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_27
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_28
    {
        var device = msg.Device.pointerValue as uint;
        if (device in node.DeviceInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.DeviceInstanceMap[device] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_29
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_30
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_31
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }

    observe node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.Event_32
    {
        var sm = msg.TransferSmContext.pointerValue as uint;
        if (sm in node.TransferSmInstanceMap)
            msg#DeviceInstanceIdAnnotation = node.TransferSmInstanceMap[sm] as string;
    }
}

public autostart actor ParseSerCx2EventTemplate(ep_Microsoft_Windows_Serial_ClassExtension_V2 node)
{
    process node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.EventTemplate_7 // IOCTLStart
    {
        uint ioctlCode = msg.IOCTL as uint;
        array<byte> buffer = msg.IOCTLInputBuffer as array<byte>;
        IoctlBufferMessage ioctlBufferMessage = new IoctlBufferMessage{};

        // Re-dispatch original IOCTL message for readability in message list
        ioctlBufferMessage.Message = msg.ToString();
        dispatch(endpoint SerCx2IoctlEventEndpoint) accepts ioctlBufferMessage;

        ParseAndDisplayIoctlStartBuffer(ioctlCode, buffer);
    }

    process node accepts msg:Microsoft_Windows_Serial_ClassExtension_V2.EventTemplate_8 // IOCTLStop
    {
        uint ioctlCode = msg.IOCTL as uint;
        array<byte> buffer = msg.IOCTLOutputBuffer as array<byte>;
        IoctlBufferMessage ioctlBufferMessage = new IoctlBufferMessage{};

        ParseAndDisplayIoctlStopBuffer(ioctlCode, buffer);

        // Re-dispatch original IOCTL message for readability in message list
        ioctlBufferMessage.Message = msg.ToString();
        dispatch(endpoint SerCx2IoctlEventEndpoint) accepts ioctlBufferMessage;
    }
}

string get DeviceId(this SerCx2Interface serCx2Message)
{
    var msg = serCx2Message as any message;

    if (msg#DeviceInstanceIdAnnotation != nothing) {
        return msg#DeviceInstanceIdAnnotation as string;
    }

    // No device instance information available for this message
    return "";
}

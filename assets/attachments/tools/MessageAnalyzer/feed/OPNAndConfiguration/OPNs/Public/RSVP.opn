protocol RSVP with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Resource ReSerVation Protocol",
    ShortName = "RSVP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "RFC 2205"},
            new Reference{Name = "RFC 2207"},
            new Reference{Name = "RFC 2210"},
            new Reference{Name = "RFC 2745"},
            new Reference{Name = "RFC 2746"},
            new Reference{Name = "RFC 2747"},
            new Reference{Name = "RFC 2750"},
            new Reference{Name = "RFC 2961"},
            new Reference{Name = "RFC 3097"},
            new Reference{Name = "RFC 3209"},
            new Reference{Name = "RFC 3471"},
            new Reference{Name = "RFC 3473"},
            new Reference{Name = "RFC 3474"},
            new Reference{Name = "RFC 3477"},
            new Reference{Name = "RFC 3496"},
            new Reference{Name = "RFC 4090"},
            new Reference{Name = "RFC 4124"},
            new Reference{Name = "RFC 4420"},
            new Reference{Name = "RFC 4860"},
            new Reference{Name = "RFC 4872"},
            new Reference{Name = "RFC 4874"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

using IPv4;
using Utility;
using IANA;

endpoint Node
    over IPv4.Node
    accepts Datagram;

autostart actor RSVPOverIPv4(IPv4.Node node)
{
    process node accepts d:IPv4.Datagram{Protocol is ProtocolType.RSVP}
    {
        switch (d.Payload)
        {
            case datagram:Datagram from RSVPDecoder =>
                ValidationCheck(Utility.ValidateCheckSum(d.Payload, datagram.Checksum) || datagram.Checksum == 0, datagram, "RSVP Checksum is invalid.");
                var e = endpoint Node over node;
                dispatch e accepts datagram;
            default =>
                ThrowDecodingException("RSVP");
        }
    }
}

message Datagram
{
    byte Version with BinaryEncoding{Width = 4};
    Flags Flags;
    byte MsgType;
    ushort Checksum;
    byte TTL;
    byte Reserved;
    ushort TotalLength;
    array<Objects> Objects with Encoding{Ignore = true};
    binary ObjectPayload;

    override string ToString()
    {
        string summary;
        switch (MsgType)
        {
            case  1 => summary = "Path Message";
            case  2 => summary = "Resv Message";
            case  3 => summary = "PathErr Message";
            case  4 => summary = "ResvErr Message";
            case  5 => summary = "PathTear Message";
            case  6 => summary = "ResvTear Message";
            case  7 => summary = "ResvConf Message";
            case  8 => summary = "Diagnostic Request Message";
            case  9 => summary = "Diagnostic Reply Message";
            case 10 => summary = "ResvTearConfirm Message";
            case 12 => summary = "Bundle Message";
            case 13 => summary = "ACK Message";
            case 15 => summary = "Srefresh Message";
            case 20 => summary = "Hello Message";
            case 21 => summary = "Notify Message";
            case 25 => summary = "Integrity Challenge Message";
            case 26 => summary = "Integrity Response Message";
            case 66 => summary = "DSBM willing Message";
            case 67 => summary = "I AM DSBM";
            default => summary = "Undefined message type(" + (MsgType as string) + ")";
        }
        
        summary += ", Length: " + (TotalLength.ToString());
        return summary;
    }
}

optional Datagram RSVPDecoder(binary data)
{
    optional Datagram datagram = BinaryDecoder(data);
    if (datagram == nothing)
    {
        return nothing;
    }
    
    Datagram d = datagram as Datagram;
    stream s = d.ObjectPayload as stream;
    if (s.ByteLength <= 0)
    {
        return d;
    }
    
    array<Objects> objects = [];
    while (s.BytePosition < s.ByteLength)
    {
        var obj = BinaryDecoder<Objects>(s);
        if (obj != null && obj != nothing && GetObjectLength(obj as Objects) > 0)
        {
            objects += [obj as Objects];
        }
        else
        {
            ValidationCheck(false, d, "Parsing object failed due to invalid data.");
            break;
        }
    }
    
    d.Objects = objects;
    return d;
}

type Objects
{
    (SessionObject          // 1
    | HopObject             // 3
    | IntegrityObject       // 4
    | TimeValuesObject      // 5
    | ErrorSpecObject       // 6
    | ScopeObject           // 7
    | StyleObject           // 8
    | FlowspecObject        // 9
    | FilterSpecObject      // 10
    | SenderTemplateObject  // 11
    | SenderTspecObject     // 12
    | AdspecObject          // 13
    | PolicyDataObject      // 14
    | ResvConfirmObject     // 15
    | DiagnosticObject      // 30
    | RouteObject           // 31
    | DiagResponseObject    // 32
    | DiagSelectObject      // 33
    | DefaultObject) Object;
}

ushort GetObjectLength(Objects obj)
{
    if (obj.Object is SessionObject)
    {
        return (obj.Object as SessionObject).Header.Length;
    }
    else if (obj.Object is HopObject)
    {
        return (obj.Object as HopObject).Header.Length;
    }
    else if (obj.Object is IntegrityObject)
    {
        return (obj.Object as IntegrityObject).Header.Length;
    }
    else if (obj.Object is TimeValuesObject)
    {
        return (obj.Object as TimeValuesObject).Header.Length;
    }
    else if (obj.Object is ErrorSpecObject)
    {
        return (obj.Object as ErrorSpecObject).Header.Length;
    }
    else if (obj.Object is ScopeObject)
    {
        return (obj.Object as ScopeObject).Header.Length;
    }
    else if (obj.Object is StyleObject)
    {
        return (obj.Object as StyleObject).Header.Length;
    }
    else if (obj.Object is FlowspecObject)
    {
        return (obj.Object as FlowspecObject).Header.Length;
    }
    else if (obj.Object is FilterSpecObject)
    {
        return (obj.Object as FilterSpecObject).Header.Length;
    }
    else if (obj.Object is SenderTemplateObject)
    {
        return (obj.Object as SenderTemplateObject).Header.Length;
    }
    else if (obj.Object is SenderTspecObject)
    {
        return (obj.Object as SenderTspecObject).Header.Length;
    }
    else if (obj.Object is AdspecObject)
    {
        return (obj.Object as AdspecObject).Header.Length;
    }
    else if (obj.Object is PolicyDataObject)
    {
        return (obj.Object as PolicyDataObject).Header.Length;
    }
    else if (obj.Object is ResvConfirmObject)
    {
        return (obj.Object as ResvConfirmObject).Header.Length;
    }
    else if (obj.Object is DiagnosticObject)
    {
        return (obj.Object as DiagnosticObject).Header.Length;
    }
    else if (obj.Object is RouteObject)
    {
        return (obj.Object as RouteObject).Header.Length;
    }
    else if (obj.Object is DiagResponseObject)
    {
        return (obj.Object as DiagResponseObject).Header.Length;
    }
    else if (obj.Object is DiagSelectObject)
    {
        return (obj.Object as DiagSelectObject).Header.Length;
    }
    else if (obj.Object is DefaultObject)
    {
        return (obj.Object as DefaultObject).Header.Length;
    }
    else
    {
        return 0;
    }
} 

type Flags
{
    byte Reserved where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 3};
    byte Refresh with BinaryEncoding{Width = 1}; // RFC 2961
}

type ObjectHeader
{
    ushort Length;
    byte ClassNum;
    byte CType;
}

// SESSION Object, RFC 2205
type SessionObject
{
    (ObjectHeader where value.ClassNum == 1) Header;
    ([|Header.CType in {1, 3}|] SessionIPv4UDPGPI
        | [|Header.CType in {2, 4}|] SessionIPv6UDPGPI
        | [|Header.CType == 7|] SessionLspTunnelIPv4
        | [|Header.CType == 8|] SessionLspTunnelIPv6
        | [|Header.CType == 9|] SessionAggregateIP4
        | [|Header.CType == 10|] SessionAggregateIP6
        | [|Header.CType == 11|] SessionUniIPv4
        | [|Header.CType == 12|] SessionUniIPv6
        | [|Header.CType == 15|] SessionEnniIPv4
        | [|Header.CType == 16|] SessionEnniIPv6
        | [|Header.CType == 17|] SessionGenericAggregateIP4
        | [|Header.CType == 18|] SessionGenericAggregateIP6
        | [|Header.CType == 19|] SessionVpnIPv4
        | [|Header.CType == 20|] SessionVpnIPv6
        | [|Header.CType == 21|] SessionAggregateVpnIPv4
        | [|Header.CType == 22|] SessionAggregateVpnIPv6
        | [|Header.CType == 23|] SessionGenericAggregateVpnIPv4
        | [|Header.CType == 24|] SessionGenericAggregateVpnIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// RFC 2205/2207, IPv4/UDP is same with IPv4/GPI. CType = 1/3
type SessionIPv4UDPGPI
{
    IPv4Address DestinationAddress where ValidationCheck(value.Octets != $[00000000], null, "DestinationAddress must be nonzero.");
    byte ProtocolId where ValidationCheck(value != 0, null, "ProtocolId must be nonzero.");
    byte Flags;
    ushort DstPort;
}

// RFC 2205/2207, IPv4/UDP is same with IPv4/GPI. CType = 2/4
type SessionIPv6UDPGPI
{
    IPv6Address DestinationAddress where ValidationCheck(value.Octets != $[00000000000000000000000000000000], null, "DestinationAddress must be nonzero.");
    byte ProtocolId where ValidationCheck(value != 0, null, "ProtocolId must be nonzero.");
    byte Flags;
    ushort DstPort;
}

// 4.6.1.1 LSP_TUNNEL_IPv4 Session Object, RFC 3209. CType = 7
type SessionLspTunnelIPv4
{
    IPv4Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    uint ExtendedTunnelId;
}

// 4.6.1.2. LSP_TUNNEL_IPv6 Session Object, RFC 3209. CType = 8
type SessionLspTunnelIPv6
{
    IPv6Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    array<byte> ExtendedTunnelId with BinaryEncoding{Length = 16};
}

// 3.3. SESSION Object, RFC 3175. "IP4", not "IPv4". CType = 9
type SessionAggregateIP4
{
    IPv4Address SessionAddress;
    byte Reserved1;
    byte Flags;
    byte Reserved2;
    byte DSCP;
}

// 3.3. SESSION Object, RFC 3175. CType = 10.
type SessionAggregateIP6
{
    IPv6Address SessionAddress;
    byte Reserved1;
    byte Flags;
    byte Reserved2;
    byte DSCP;
}

// Section 3.2, RFC 3476. CType = 11.
type SessionUniIPv4
{
    IPv4Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    IPv4Address ExtendedIPv4Address;
}

// Section 7, RFC 3474. CType = 12.
type SessionUniIPv6
{
    IPv6Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    array<byte> ExtendedTunnelId with BinaryEncoding{Length = 16};
}

// Section 7, RFC 3474. CType = 15.
type SessionEnniIPv4
{
    IPv4Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    uint ExtendedTunnelId;
}

// Section 7, RFC 3474. CType = 16.
type SessionEnniIPv6
{
    IPv6Address TunnelEndPointAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved must be zero.");
    ushort TunnelId;
    array<byte> ExtendedTunnelId with BinaryEncoding{Length = 16};
}

// Section 2.1, RFC 4860. CType = 17
type SessionGenericAggregateIP4
{
    IPv4Address DestAddress;
    byte Reserved1 where ValidationCheck(value == 0, null, "Reserved1 must be zero.");
    byte Flags;
    ushort PhbId;
    ushort Reserved2 where ValidationCheck(value == 0, null, "Reserved2 must be zero.");
    ushort DstPort;
    uint ExtendedDstPort;
}

// Section 2.1, RFC 4860. CType = 18
type SessionGenericAggregateIP6
{
    IPv6Address DestAddress;
    byte Reserved1 where ValidationCheck(value == 0, null, "Reserved1 must be zero.");
    byte Flags;
    ushort PhbId;
    ushort Reserved2 where ValidationCheck(value == 0, null, "Reserved2 must be zero.");
    ushort DstPort;
    array<byte> ExtendedDstPort with BinaryEncoding{Length = 16};
}

// Section 8.1, RFC 6016. CType = 19
type SessionVpnIPv4
{
    VpnIPv4 VpnIPv4DestAddress;
    byte ProtocolId;
    byte Flags;
    ushort DstPort;
}

// Section 4.2, RFC 4364
type VpnIPv4
{
    VpnIPRouteDistinguisher RouteDistinguisher;
    IPv4Address Address;
}

// used by VPN-IPv4 and VPN-IPv6
type VpnIPRouteDistinguisher
{
    ushort Type;
    ( [|Type == 0|] VpnIPRouteDistinguisherType0
        | [|Type == 1|] VpnIPRouteDistinguisherType1
        | [|Type == 2|] VpnIPRouteDistinguisherType2
        | VpnIPRouteDistinguisherTypeOther) Value;
}

type VpnIPRouteDistinguisherType0
{
    ushort AutonomousSystemNumber;
    uint AssignedNumber;
}

type VpnIPRouteDistinguisherType1
{
    IPv4Address Address;
    ushort AssignedNumber;
}

type VpnIPRouteDistinguisherType2
{
    uint AutonomousSystemNumber;
    ushort AssignedNumber;
}

type VpnIPRouteDistinguisherTypeOther
{
    array<byte> Value with BinaryEncoding{Length = 6};
}

// Section 8.1, RFC 6016. CType = 20
type SessionVpnIPv6
{
    VpnIPv6 VpnIPv6DestAddress;
    byte ProtocolId;
    byte Flags;
    ushort DstPort;
}

// Section 2, RFC 4659
type VpnIPv6
{
    VpnIPRouteDistinguisher RouteDistinguisher;
    IPv6Address Address;
}

// Section 8.5, RFC 6016. CType = 21
type SessionAggregateVpnIPv4
{
    VpnIPv4 VpnIPv4DestAddress;
    byte Reserved1;
    byte Flags;
    byte Reserved2;
    byte DSCP;
}

// Section 8.5, RFC 6016. CType = 22
type SessionAggregateVpnIPv6
{
    VpnIPv6 VpnIPv6DestAddress;
    byte Reserved1;
    byte Flags;
    byte Reserved2;
    byte DSCP;
}

// Section 8.5, RFC 6016. CType = 23
type SessionGenericAggregateVpnIPv4
{
    VpnIPv4 VpnIPv4DestAddress;
    byte Reserved1;
    byte Flags;
    ushort PhbId;
    ushort Reserved2;
    ushort DstPort;
    uint ExtendedDstPort;
}

// Section 8.5, RFC 6016. CType = 24
type SessionGenericAggregateVpnIPv6
{
    VpnIPv6 VpnIPv6DestAddress;
    byte Reserved1;
    byte Flags;
    ushort PhbId;
    ushort Reserved2;
    ushort DstPort;
    uint ExtendedDstPort;
}

// Hop Object, RFC 2205
type HopObject
{
    (ObjectHeader where value.ClassNum == 3) Header;
    ([|Header.CType == 1|] HopIPv4
        | [|Header.CType == 2|] HopIPv6
        | [|Header.CType == 3|] HopIPv4IfId
        | [|Header.CType == 4|] HopIPv6IfId
        | [|Header.CType == 5|] VpnIPv4
        | [|Header.CType == 6|] VpnIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// Section A.2, RFC 2205. CType = 1
type HopIPv4
{
    IPv4Address NextPreviousHopAddress;
    uint LIH; //Logical Interface Handle
}

// Section A.2, RFC 2205. CType = 2
type HopIPv6
{
    IPv6Address NextPreviousHopAddress;
    uint LIH; //Logical Interface Handle
}

// Section 8.1.1, RFC 3473. CType = 3
type HopIPv4IfId
{
    IPv4Address NextPreviousHopAddress;
    uint LIH; //Logical Interface Handle
    TLVsType TLVs;
}

// Section 8.1.1, RFC 3473. CType = 4
type HopIPv6IfId
{
    IPv6Address NextPreviousHopAddress;
    uint LIH; //Logical Interface Handle
    TLVsType TLVs;
}

type TLVsType
{
    ushort Type;
    ushort Length;
    ([|Type == 1|] IPv4Address 
        | [|Type == 2|] IPv6Address
        | [|Type in {3, 4, 5}|] TLVsIP
        | TLVsDefault[(Length - 4) as ushort]) Value;
}

type TLVsIP
{
    IPv4Address Address;
    uint InterfaceId;
}

type TLVsDefault[ushort length]
{
    array<byte> Value with BinaryEncoding{Length = length};
}

// Class 4
type IntegrityObject
{
    (ObjectHeader where value.ClassNum == 4) Header;
    ([|Header.CType == 1|] IntegrityType1[(Header.Length - 4) as uint]
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// RFC 2747
type IntegrityType1[uint Len]
{
    IntegrityFlags Flags;
    byte Reserved;
    ulong KeyIdentifier with BinaryEncoding{Width = 48};
    ulong SequenceNumber;
    binary KeyedMessageDigest with BinaryEncoding{Length = (Len - 16)};
}

type IntegrityFlags
{
    byte HandShake with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
}

// Class 5, RFC 2205
type TimeValuesObject
{
    (ObjectHeader where value.ClassNum == 5) Header;
    ([|Header.CType == 1|] uint | Blob[(Header.Length - 4) as uint]) RefreshPeriod;
}

// Class 6, RFC 2205
type ErrorSpecObject
{
    (ObjectHeader where value.ClassNum == 6) Header;
    ([|Header.CType == 1|] ErrorSpecIPv4
        | [|Header.CType == 2|] ErrorSpecIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// Section A.5, RFC 2205
type ErrorSpecIPv4
{
    IPv4Address ErrorNodeAddress;
    byte InPlace with BinaryEncoding{Width = 1};
    byte NotGuilty with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 6};
    byte ErrorCode;
    ushort ErrorValue;
}

// Section A.5, RFC 2205
type ErrorSpecIPv6
{
    IPv6Address ErrorNodeAddress;
    byte InPlace with BinaryEncoding{Width = 1};
    byte NotGuilty with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 6};
    byte ErrorCode;
    ushort ErrorValue;
}

// Section A.6, RFC 2205
type ScopeObject
{
    (ObjectHeader where value.ClassNum == 7) Header;
    ([|Header.CType == 1|] IPv4AddressArray[(Header.Length - 4) as ushort]
        | [|Header.CType == 2|] IPv6AddressArray[(Header.Length - 4) as ushort]
        | Blob[(Header.Length - 4) as uint]) Contents;
}

type IPv4AddressArray[ushort len]
{
    array<IPv4Address> Addresses with BinaryEncoding{Length = (len / 4)};
}

type IPv6AddressArray[ushort len]
{
    array<IPv6Address> Addresses with BinaryEncoding{Length = (len / 16)};
}

// Section A.7, RFC 2205
type StyleObject
{
    (ObjectHeader where value.ClassNum == 8) Header;
    ([|Header.CType == 1|] StyleOptionVendor | Blob[(Header.Length - 4) as uint]) Contents;
}

type StyleOptionVendor
{
    byte Flags;
    ushort Reserved1;
    byte Reserved2 with BinaryEncoding{Width = 3};
    byte SharingControl with BinaryEncoding{Width = 2};
    byte SenderSelectionControl with BinaryEncoding{Width = 3};
}

// Section A.8, RFC 2205
type FlowspecObject
{
    (ObjectHeader where value.ClassNum == 9) Header;
    ((FlowspecInvserv where Header.CType == 2)
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// CType = 2. Section A.8, RFC 2205.
type FlowspecInvserv
{
    ushort Version with BinaryEncoding{Width = 4};
    ushort Reserved1 with BinaryEncoding{Width = 12};
    ushort MsgLength;
    (FlowspecControlledLoadService | FlowspecGuaranteedService | Blob[(MsgLength - 6) as ushort]) Service;
}

// Section 3.2.1, RFC 2210
type FlowspecControlledLoadService
{
    (byte where value == 5) ServiceNumber;
    byte BreakBit with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
    ushort ServiceLength;
    ParameterHeader TokenBucketTSpecHeader;
    float TokenBucketRate;
    float TokenBucketSize;
    float PeakDataRate;
    uint MinimumPolicedUnit;
    uint MaximumPacketSize;
}

// Section 3.2.2, RFC 2210
type FlowspecGuaranteedService
{
    (byte where value == 2) ServiceNumber;
    byte BreakBit with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
    ushort ServiceLength;
    ParameterHeader TokenBucketTSpecHeader;
    float TokenBucketRate;
    float TokenBucketSize;
    float PeakDataRate;
    uint MinimumPolicedUnit;
    uint MaximumPacketSize;
    ParameterHeader GuaranteedServiceRSpecHeader;
    float Rate;
    uint SlackTerm;
}

// Secion A.9, RFC 2205
type FilterSpecObject
{
    (ObjectHeader where value.ClassNum == 10) Header;
    ([|Header.CType == 1|] FilterSpecIPv4
        | [|Header.CType == 2|] FilterSpecIPv6
        | [|Header.CType == 3|] FilterSpecIPv6FlowLabel
        | [|Header.CType == 4|] FilterSpecIPv4GPI
        | [|Header.CType == 5|] FilterSpecIPv6GPI
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// CType = 1
type FilterSpecIPv4
{
    IPv4Address SrcAddress where ValidationCheck(value.Octets != $[00000000], null, "The SrcAddress must be nonzero.");
    ushort Reserved;
    ushort SrcPort;
} 

// CType = 2
type FilterSpecIPv6
{
    IPv6Address SrcAddress where ValidationCheck(value.Octets != $[00000000000000000000000000000000], null, "The SrcAddress must be nonzero.");
    ushort Reserved;
    ushort SrcPort;
}

// CType = 3
type FilterSpecIPv6FlowLabel
{
    IPv6Address SrcAddress where ValidationCheck(value.Octets != $[00000000000000000000000000000000], null, "The SrcAddress must be nonzero.");
    byte Reserved;
    uint FlowLabel;
}

// CType = 4. Section 3.2, RFC 2207
type FilterSpecIPv4GPI
{
    IPv4Address SrcAddress;
    uint GeneralizedPortIdentifier;
}

// Section 3.2, RFC 2207. CType = 5.
type FilterSpecIPv6GPI
{
    IPv6Address SrcAddress;
    uint GeneralizedPortIdentifier;
}

// Section A.10, RFC 2205.
type SenderTemplateObject
{
    (ObjectHeader where value.ClassNum == 11) Header;
    ([|Header.CType == 1|] FilterSpecIPv4
        | [|Header.CType == 2|] FilterSpecIPv6
        | [|Header.CType == 3|] SenderTemplateIPv6FlowLabel
        | [|Header.CType == 4|] FilterSpecIPv4GPI // Section 3.3, RFC 2207
        | [|Header.CType == 5|] FilterSpecIPv6GPI // Section 3.3, RFC 2207
        | [|Header.CType == 7|] SenderTemplateLspTunnelIPv4
        | [|Header.CType == 8|] SenderTemplateLspTunnelIPv6
        | [|Header.CType == 9|] SenderTemplategAgregateIPv4
        | [|Header.CType == 10|] SenderTemplategAgregateIPv6
        | [|Header.CType == 12|] SenderTemplateP2mpLspTunnelIPv4
        | [|Header.CType == 13|] SenderTemplateP2mpLspTunnelIPv6
        | [|Header.CType == 14|] SenderTemplateVpnIPv4
        | [|Header.CType == 15|] SenderTemplateVpnIPv6
        | [|Header.CType == 16|] SenderTemplateAGGREGATEVpnIPv4
        | [|Header.CType == 17|] SenderTemplateAGGREGATEVpnIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// IPv6 Flow-label FILTER_SPEC object
type SenderTemplateIPv6FlowLabel
{
    IPv6Address IPv6SrcAddress;
    byte Reserved;
    uint FlowLable with BinaryEncoding{Width = 24};
}

// Section 4.6.2, RFC 3209. CType = 7.
type SenderTemplateLspTunnelIPv4
{
    IPv4Address IPv4TunnelSenderAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort LspId;
}

// Section 4.6.2, RFC 3209. CType = 8.
type SenderTemplateLspTunnelIPv6
{
    IPv6Address IPv6TunnelSenderAddress;
    ushort Reserved where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort LspId;
}

// Section 3.4, RFC 3175. CType = 9.
type SenderTemplategAgregateIPv4
{
    IPv4Address IPv4AggregatorAddress;
}

// Section 3.4, RFC 3175. CType = 10.
type SenderTemplategAgregateIPv6
{
    IPv6Address IPv6AggregatorAddress;
}

// Section 19.2, RFC 4875. CType = 12.
type SenderTemplateP2mpLspTunnelIPv4
{
    IPv4Address IPv4TunnelSenderAddress;
    ushort Reserved1 where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort LspId;
    uint SubGroupOriginatorId;
    ushort Reserved2 where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort SubGroupId;
}

// Section 19.2, RFC 4875. CType = 13.
type SenderTemplateP2mpLspTunnelIPv6
{
    IPv6Address IPv6TunnelSenderAddress;
    ushort Reserved1 where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort LspId;
    array<byte> SubGroupOriginatorId with BinaryEncoding{Length = 16};
    ushort Reserved2 where ValidationCheck(value == 0, null, "Reserved field value must be zero.");
    ushort SubGroupId;
}

// Section 8.2, RFC 6016. CType = 14.
type SenderTemplateVpnIPv4
{
    VpnIPv4Address VpnIPv4SrcAddress;
    ushort Reserved;
    ushort SrcPort;
}

// Section 8.2, RFC 6016. CType = 15.
type SenderTemplateVpnIPv6
{
    VpnIPv4Address VpnIPv6SrcAddress;
    ushort Reserved;
    ushort SrcPort;
} 

// The VPN-IPv4 Address Family, RFC 4364. Section 4.1.
type VpnIPv4Address
{
    RouteDistinguisher RouteDistinguisher;
    IPv4Address IPv4Address;
}

// VPN IPv6 NLRI Encoding, RFC 4659. Section 3.2.
type VpnIPv6Address
{
    RouteDistinguisher RouteDistinguisher;
    IPv6Address IPv6Address;
}

// Section 4.2, RFC 4364
type RouteDistinguisher
{
    ushort Type;
    ([|Type == 0|] RouteDistinguisherType0 | RouteDistinguisherType1) Value; // 6 bytes 
}

type RouteDistinguisherType0
{
    ushort Administrator;
    uint AssignedNumber;
}

type RouteDistinguisherType1
{
    uint Administrator;
    ushort AssignedNumber;
}

// Section 8.6, RFC 6016
type SenderTemplateAGGREGATEVpnIPv4
{
    VpnIPv4Address AggregatorAddress;
}

// Section 8.6, RFC 6016
type SenderTemplateAGGREGATEVpnIPv6
{
    VpnIPv6Address AggregatorAddress;
}

// Section A.11, RFC 2205
type SenderTspecObject
{
    (ObjectHeader where value.ClassNum == 12) Header;
    ([|Header.CType == 2|] SenderTspecIntserv
        | [|Header.CType == 4|] SenderTspec
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// Section 3.1, RFC 2205. CType = 2
type SenderTspecIntserv
{
    ushort Version with BinaryEncoding{Width = 4};
    ushort Reserved1 with BinaryEncoding{Width = 12};
    ushort Length;
    (byte where value == 1) ServiceHeader;
    byte Reserved2;
    ushort ServiceLength;
    ParameterHeader ParameterHeader;
    float TokenBucketRate;
    float TokenBucketSize;
    float PeakDataRate;
    uint MinimumPolicedUnit;
    uint MaximumPacketSize;
} 

type ParameterHeader
{
    byte ParameterId;
    ParameterFlag ParameterFlag;
    ushort ParameterLength;
}

type ParameterFlag
{
    byte Flag with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};//(byte where value == 0)
}

type Parameter
{
    ParameterHeader Header;
    // The data is actually consist of 32-bit values, not must be float type.
    array<float> Data with BinaryEncoding{Length = Header.ParameterLength};
}

// Section 2.1, RFC 3946. CType = 4
type SenderTspec
{
    byte SingleType;
    byte RCC;
    ushort NCC;
    ushort NVC;
    ushort Multiplier;
    TransparencyFlag Transparency;
    uint Profile;
}

// Page 8, RFC 3946
type TransparencyFlag
{
    uint Reserved with BinaryEncoding{Width = 30};
    uint LineOrMultiplex with BinaryEncoding{Width = 1};
    uint SectionOrRegenerator with BinaryEncoding{Width = 1};
}

// Section 3.3, RFC 2210
type AdspecObject
{
    (ObjectHeader where value.ClassNum == 13) Header;
    ushort Version with BinaryEncoding{Width = 4};
    ushort Reserved1 with BinaryEncoding{Width = 12};
    ushort MsgLength;
    AdspecDefaultGeneralParameters DefaultGeneralParameters;
    optional AdspecGuaranteedService GuaranteedService;
    optional AdspecControlledLoadService ControlledLoadService;
}

// Section 3.3.2, RFC 2210
type AdspecDefaultGeneralParameters
{
    (byte where value == 1) ServiceNumber;
    byte BreakBit with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
    ushort ServiceLength;
    ParameterHeader HopCntHeader;
    uint ISHopCnt;
    ParameterHeader PathHeader;
    float PathBWEstimate;
    ParameterHeader MinimumPathLatencyHeader;
    int MinimumPathLatency;
    ParameterHeader ComposedMtuHeader;
    uint ComposedMtu;
}

// Section 3.3.3, RFC 2210
type AdspecGuaranteedService 
{
    (byte where value == 2) ServiceNumber;
    byte BreakBit with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
    ushort ServiceLength;
    ParameterHeader CtotHeader;
    int Ctot; // End-to-end composed value for C
    ParameterHeader DtotHeader;
    int Dtot; // End-to-end composed value for D
    ParameterHeader CsumHeader;
    int Csum; // Since-last-reshaping point composed C
    ParameterHeader DsumHeader;
    int Dsum; // Since-last-reshaping point composed D
    //optional [|ServiceLength - 32 > 0|] array<Parameter> Parameters;
    // WORKAROUND: Cannot get parameter array length, use binary instead.
    optional [|ServiceLength > 8|] binary Parameters with BinaryEncoding{Length = ((ServiceLength - 8) * 4)};
}

// 
type AdspecControlledLoadService
{
    (byte where value == 5) ServiceNumber;
    byte BreakBit with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 7};
    ushort ServiceLength;
    // WORKAROUND: Cannot get parameter array length, use binary instead.
    optional [|ServiceLength > 8|] binary Parameters with BinaryEncoding{Length = ((ServiceLength - 8) * 4)};
}

// Section A.13, RFC 2205; section 3.1, RFC 2750.
type PolicyDataObject
{
    (ObjectHeader where value.ClassNum == 14) Header;
    ((PolicyDataType1 where Header.CType == 1)
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// Section 3.1, RFC 2750
type PolicyDataType1
{
    ushort DataOffset;
    ushort Reserved;
    optional array<PolicyDataType1Option> OptionList;
    optional array<PolicyElement> PolicyElementList; 
}

pattern PolicyDataType1Option = FilterSpecObject | ScopeObject | IntegrityObject | TimeValuesObject;

type PolicyElement
{
    ushort Length;
    ushort PType;
    binary PolicyInformation with BinaryEncoding{Length = Length};
}

// Section A.14, RFC 2205
type ResvConfirmObject
{
    (ObjectHeader where value.ClassNum == 15) Header;
    ([|Header.CType == 1|] IPv4Address
        | [|Header.CType == 2|] IPv6Address
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// Section 3.3, RFC RFC 2745
type DiagnosticObject
{
    (ObjectHeader where value.ClassNum == 30) Header;
    ([|Header.CType == 1|] DiagnosticIPv4
        | [|Header.CType == 2|] DiagnosticIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
} 

// CType = 1
type DiagnosticIPv4
{
    byte MaxRsvpHops;
    byte RsvpHopCount;
    ushort Reserved with BinaryEncoding{Width = 15};
    ushort MF with BinaryEncoding{Width = 1};
    uint RequestId;
    ushort PathMtu;
    ushort FragmentOffset;
    IPv4Address LastHopAddress;
    SenderTemplateObject SenderTemplateObject;
    FilterSpecObject FilterSpecObject;
} 

// CType = 2
type DiagnosticIPv6
{
    byte MaxRsvpHops;
    byte RsvpHopCount;
    ushort Reserved with BinaryEncoding{Width = 15};
    ushort MF with BinaryEncoding{Width = 1};
    uint RequestId;
    ushort PathMtu;
    ushort FragmentOffset;
    IPv6Address LastHopAddress;
    SenderTemplateObject SenderTemplateObject;
    FilterSpecObject FilterSpecObject;
}

// Section 3.5, RFC 2745.
type RouteObject
{
    (ObjectHeader where value.ClassNum == 31) Header;
    ([|Header.CType == 1|] RouteIPv4[(Header.Length - 4) as ushort]
        | [|Header.CType == 2|] RouteIPv6[(Header.Length - 4) as ushort]
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// CType = 1
type RouteIPv4[ushort typeLength]
{
    array<byte> Reserved with BinaryEncoding{Length= 3};
    byte RPointer;
    array<IPv4Address> RsvpNodeList with BinaryEncoding{Length = ((typeLength - 4) / 4)};
}

// CType = 2
type RouteIPv6[ushort typeLength]
{
    array<byte> Reserved with BinaryEncoding{Length= 3};
    byte RPointer;
    array<IPv4Address> RsvpNodeList with BinaryEncoding{Length = ((typeLength - 4) / 16)};
}

// Section 3.6, RFC 2745
type DiagResponseObject
{
    (ObjectHeader where value.ClassNum == 32) Header;
    ([|Header.CType == 1|] DiagResponseIPv4
        | [|Header.CType == 2|] DiagResponseIPv6
        | Blob[(Header.Length - 4) as uint]) Contents;
}

// CType = 1
type DiagResponseIPv4
{
    uint DreqArrivalTime;
    IPv4Address IncomingInterfaceAddress;
    IPv4Address OutgoingInterfaceAddress;
    IPv4Address PreviousRsvpHopRouterAddress;
    byte DTTL;
    byte M with BinaryEncoding{Width = 1};
    byte Err with BinaryEncoding{Width = 3};
    byte K with BinaryEncoding{Width = 4};
    ushort TimerValue;
}

// CType = 2
type DiagResponseIPv6
{
    uint DreqArrivalTime;
    IPv6Address IncomingInterfaceAddress;
    IPv6Address OutgoingInterfaceAddress;
    IPv6Address PreviousRsvpHopRouterAddress;
    byte DTTL;
    byte M with BinaryEncoding{Width = 1};
    byte Err with BinaryEncoding{Width = 3};
    byte K with BinaryEncoding{Width = 4};
    ushort TimerValue;
}

// Section 3.4, RFC 2745
type DiagSelectObject
{
    (ObjectHeader where value.ClassNum == 33) Header;
    ([|Header.CType == 1|] DiagSelectClassTypePairs[((Header.Length - 4) / 2) as uint]
        | Blob[(Header.Length - 4) as uint]) Contents;
}

type DiagSelectClassTypePairs[uint length]
{
    array<DiagSelectClassTypePair> ClassTypeList with BinaryEncoding{Length = length};
}

type DiagSelectClassTypePair
{
    byte Class;
    byte CType;
}

// For NULL and unreconized objects
type DefaultObject
{
    ObjectHeader Header;
    binary Data with BinaryEncoding{Length = (Header.Length - 4)};
}

/* All implemented Class/Type are listed in below table.
 * For all known Class/Type, please refer: http://www.networksorcery.com/enp/protocol/rsvp.htm
 * 
 * Class    Class/Type Description                        References 
 * -------  ----------------------                        ------------
 * 0 NULL                                                  RFC 2205 
 *         
 * 1        0x0101 SESSION, IPv4/UDP.                      RFC 2205 
 *          0x0102 SESSION, IPv6/UDP.                      RFC 2205 
 *          0x0103 SESSION, IPv4/GPI.                      RFC 2207 
 *          0x0104 SESSION, IPv6/GPI.                      RFC 2207 
 *          0x0106 SESSION, tagged_tunnel_IPv4.            RFC 3209
 *          0x0107 SESSION, LSP Tunnel IPv4.               RFC 3209 
 *          0x0108 SESSION, LSP Tunnel IPv6.               RFC 3209 
 *          0x0109 SESSION, RSVP-Aggregate-IPv4.           RFC 3175 
 *          0x010A SESSION, RSVP-Aggregate-IPv6.           RFC 3175 
 *          0x010B SESSION, UNI_IPv4.   
 *          0x010C SESSION, UNI_IPv6 (ASON).               RFC 3474 
 *          0x010F ENNI_IPv4 (ASON).                       RFC 3474 
 *          0x0110 ENNI_IPv6 (ASON).                       RFC 3474 
 *          0x0111 GENERIC-AGGREGATE-IP4.                  RFC 4860 
 *          0x0112 GENERIC-AGGREGATE-IP6.                  RFC 4860 
 *          0x0113 VPN-IPv4.                               RFC 6016 
 *          0x0114 VPN-IPv6.                               RFC 6016 
 *          0x0115 AGGREGATE-VPN-IPv4.                     RFC 6016 
 *          0x0116 AGGREGATE-VPN-IPv6.                     RFC 6016 
 *          0x0117 GENERIC-AGGREGATE-VPN-IPv4.             RFC 6016 
 *          0x0118 GENERIC-AGGREGATE-VPN-IPv6.             RFC 6016 
 *         
 * 3        0x0301 IPv4 RSVP_HOP object.                   RFC 2205 
 *          0x0302 IPv6 RSVP_HOP object.                   RFC 2205 
 *          0x0303 IPv4 IF_ID RSVP_HOP                     RFC 3473 
 *          0x0304 IPv6 IF_ID RSVP_HOP                     RFC 3473 
 *          0x0305 VPN-IPv4. RFC 6016 
 *          0x0306 VPN-IPv6. RFC 6016 
 *         
 * 4        0x0401 Type 1 Integrity Value.                 RFC 2747 
        
 * 5        0x0501 TIME_VALUES object.                     RFC 2205 
 * 6        0x0601 IPv4 ERROR_SPEC object.                 RFC 2205 
 *          0x0602 IPv6 ERROR_SPEC object.                 RFC 2205 
 * 7        0x0701 IPv4 SCOPE List object.                 RFC 2205 
 *          0x0702 IPv6 SCOPE List object.                 RFC 2205 
 * 8        0x0801 Type 1 Style. RFC 2205 
 * 9        0x0901 Reserved (obsolete) flowspec object.    RFC 2205 
 *          0x0902 Inv-serv Flowspec object.               RFC 2210 
 *          0x0903 deprecated.   
 *          0x0904 SONET/SDH FLOWSPEC.                     RFC 3946 
 *         
 * 10       0x0A01 IPv4 FILTER_SPEC object.                RFC 2205 
 *          0x0A02 IPv6 FILTER_SPEC object                 RFC 2205 
 *          0x0A03 IPv6 Flow-label FILTER_SPEC object.     RFC 2205 
 *          0x0A04 IPv4/GPI.                               RFC 2207 
 *          0x0A05 IPv6/GPI.                               RFC 2207 
 *          0x0A06 tagged_tunnel_IPv4.   
 *          0x0A07 LSP Tunnel IPv4.                        RFC 3209 
 *          0x0A08 LSP Tunnel IPv6.                        RFC 3209 
 *          0x0A09 RSVP-Aggregate-IP4.                     RFC 3175 
 *          0x0A0A RSVP-Aggregate-IP6.                     RFC 3175 
 *          0x0A0B     
 *          0x0A0C P2MP LSP_IPv4.                          RFC 4875 
 *          0x0A0D P2MP LSP_IPv6.                          RFC 4875 
 *          0x0A0E VPN-IPv4.                               RFC 6016 
 *          0x0A0F VPN-IPv6.                               RFC 6016 
 *          0x0A10 AGGREGATE-VPN-IPv4.                     RFC 6016 
 *          0x0A11 AGGREGATE-VPN-IPv6.                     RFC 6016 
 *         
 * 11       0x0B01 IPv4 SENDER_TEMPLATE object.            RFC 2205 
 *          0x0B02 IPv6 SENDER_TEMPLATE object.            RFC 2205 
 *          0x0B03 IPv6 Flow-label SENDER_TEMPLATE object. RFC 2205 
 *          0x0B04 IPv4/GPI.                               RFC 2207 
 *          0x0B05 IPv6/GPI.                               RFC 2207 
 *          0x0B06 tagged_tunnel_IPv4.                     RFC 3209
 *          0x0B07 LSP Tunnel IPv4.                        RFC 3209 
 *          0x0B08 LSP Tunnel IPv6.                        RFC 3209 
 *          0x0B09 RSVP-Aggregate-IP4.                     RFC 3175 
 *          0x0B0A RSVP-Aggregate-IP6.                     RFC 3175    
 *          0x0B0C P2MP_LSP_TUNNEL_IPv4.                   RFC 4875 
 *          0x0B0D P2MP_LSP_TUNNEL_IPv6.                   RFC 4875 
 *          0x0B0E VPN-IPv4.                               RFC 6016 
 *          0x0B0F VPN-IPv6.                               RFC 6016 
 *          0x0B10 AGGREGATE-VPN-IPv4.                     RFC 6016 
 *          0x0B11 AGGREGATE-VPN-IPv6.                     RFC 6016 
 *         
 * 12       0x0C02 Intserv SENDER_TSPEC object.            RFC 2210 
 *          0x0C04 SONET/SDH SENDER_TSPEC.                 RFC 3946 
 * 13       0x0D02 Intserv ADSPEC object.                  RFC 2210 
 * 14       0x0E01 Type 1 POLICY_DATA object.              RFC 2205, RFC 2750 
 * 15       0x0F01 IPv4 RESV_CONFIRM object.               RFC 2205 
 *          0x0F02 IPv6 RESV_CONFIRM object.               RFC 2205 
 * 30       0x1E01 DIAGNOSTIC, IPv4.                       RFC 2745 
 *          0x1E02 DIAGNOSTIC, IPv6.                       RFC 2745 
 * 31       0x1F01 ROUTE, IPv4.                            RFC 2745 
 *          0x1F02 ROUTE, IPv6.                            RFC 2745 
 * 32       0x2001 DIAG_RESPONSE, IPv4.                    RFC 2745 
 *          0x2002 DIAG_RESPONSE, IPv6.                    RFC 2745 
 * 33       0x2101 DIAG_SELECT object.                     RFC 2745 
 */

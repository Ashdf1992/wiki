protocol PEAP with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Protected EAP Protocol",
    ShortName = "PEAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "PEAPv2", Version = "2.0", Link = "https://tools.ietf.org/html/draft-josefsson-pppext-eap-tls-eap-10"},
            new Reference{Name = "MS-PEAP", Version = "25.0", Date = "06/30/2015"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "380791", Date = "08/13/2015"}
        ]
};

using Standard;
using Utility;
using EAP;
using TLS;
using PPP;
using Ethernet;
using UDP;

annotation int Packet#PEAPFragmentNumber;
annotation uint Packet#PEAPPacketLength;

endpoint Server over ReassemblyServer issues Packet accepts Packet;
client endpoint Client connected to Server;

endpoint ReassemblyServer over EAP.Server issues Packet accepts Packet
{
    int sentFragmentNumber = 0;
    array<Packet> sentFragments = [];
    int receivedFragmentNumber = 0;
    array<Packet> receivedFragments = [];
    process this accepts p:Packet
    {
        ReassemblePEAPFragment(p, ref receivedFragments, true, ref receivedFragmentNumber, endpoint Server over this);
    }
    
    process this issues p:Packet
    {
        ReassemblePEAPFragment(p, ref sentFragments, false, ref sentFragmentNumber, endpoint Server over this);
    }
    
    // destructor
    ~endpoint(ReassemblyServer reassemblyServer)
    {
        if (reassemblyServer.sentFragments.Count > 0)
        {
            foreach (Packet packet in reassemblyServer.sentFragments) // packet type is Packet
            {
                DisplayTopLevelMessage(packet, "PEAP: Insufficient fragments for full reassembly.");
            }
            reassemblyServer.sentFragments = [];
        }
        
        if (reassemblyServer.receivedFragments.Count > 0)
        {
            foreach (Packet packet in reassemblyServer.receivedFragments) // packet type is Packet
            {
                DisplayTopLevelMessage(packet, "PEAP: Insufficient fragments for full reassembly.");
            }
            reassemblyServer.receivedFragments = [];
        }
    }
}

client endpoint ReassemblyClient connected to ReassemblyServer;

void ReassemblePEAPFragment(Packet p, ref array<Packet> packetArray, bool isAccept, ref int fragmentNumber, Server ept)
{
    if ((p.Flags & PacketFlags.M) > 0)
    {
        fragmentNumber++;
        p#PEAPFragmentNumber = fragmentNumber;
        packetArray += [p];
    }
    else
    {
        if (p.Data.TLS_Data is nothing && p.Data.Outer_TLV_Data is nothing)
        {
            if ((p.Flags & PacketFlags.S) > 0 || packetArray.Count == 0)
            {
                if (isAccept)
                {
                    dispatch ept accepts p;
                }
                else
                {
                    dispatch ept issues p;
                }
            }
            else
            {
                packetArray += [p];
            }
        }
        else
        {
            Packet packet;
            uint totalLength = 0;
            if (packetArray.Count > 0)
            {
                packetArray += [p];
                
                p#PEAPFragmentNumber = fragmentNumber + 1;
                fragmentNumber = 0;
                packet = new Packet{};
                PacketData packetData = new PacketData{};
                packet#PEAPPacketLength = 0;
                
                binary tls_Data = Utility.EmptyBinary;
                array<TLVList> outer_TLV_Data = [];
                for (int i = 0; i < packetArray.Count; i++)
                {
                    if (packetArray[i].Data.TLS_Data is bin:binary && bin.Count > 0)
                    {
                        tls_Data += bin;
                    }
                    if (packetArray[i].Data.Outer_TLV_Data is tlvList:array<TLVList> && tlvList.Count > 0)
                    {
                        outer_TLV_Data += tlvList;
                    }
                }
                packetData.TLS_Data = tls_Data.Count > 0 ? tls_Data : nothing;
                int outTlvsLength = 0;
                for (int j = 0; j < outer_TLV_Data.Count; j++)
                {
                    outTlvsLength += outer_TLV_Data[j].GetLength() + 4;
                }
                packetData.Outer_TLV_Data = outer_TLV_Data.Count > 0 ? outer_TLV_Data : nothing;
                packetData.TLS_Message_Length = packetArray[0].Data.TLS_Message_Length;
                
                int packetHeadLength = 1;
                packet.Flags = packetArray[0].Flags;
                packet.AssignFieldEncodingInfo("Flags", 0, 6);
                packet.Ver = packetArray[0].Ver;
                packet.AssignFieldEncodingInfo("Ver", 6, 2);

                if (packetData.TLS_Message_Length != nothing)
                {
                    packetData.AssignFieldEncodingInfo("TLS_Message_Length", 8, 32);
                    packetHeadLength += 4;
                    totalLength = packetData.TLS_Message_Length as uint;
                }
                packetData.AssignFieldEncodingInfo("TLS_Data", (packetHeadLength + outTlvsLength) * 8, (packetData.TLS_Data as binary).Count * 8);
                packet.Data = packetData;
                packet#PEAPPacketLength = (outTlvsLength + (packet.Data.TLS_Data as binary).Count + packetHeadLength) as uint;
                
                if (totalLength == (packet.Data.TLS_Data as binary).Count)
                {
                    binary sourceData = Utility.EmptyBinary;
                    for (int i = 0; i < packetArray.Count; i++)
                    {
                        packet.Origins += [packetArray[i]]; // packet.Origins = packetArray may cause compiling error
                        sourceData += (packetArray[i].SourceData as binary);
                    }
                    packet.SourceData = sourceData;
                }
                else
                {
                    for (int i = 0; i < packetArray.Count; i++)
                    {
                        DisplayTopLevelMessage(packetArray[i], "PEAP: Insufficient fragments for full reassembly.");
                    }
                }
                packetArray = [];
            }
            else
            {
                packet = p;
            }
            array<any message> origins = packet.Origins;
            if (origins.Count > 0)
            {
                if (isAccept)
                {
                    dispatch ept accepts packet;
                }
                else
                {
                    dispatch ept issues packet;
                }
            }
        }
    }
}

autostart actor PEAPOverEAP(EAP.Server node)
{
    process node issues p:EAP.Packet where (p.Type == EAP.MethodType.PEAP && p.Type_Data is peapData:EAP.PEAP)
    {
        if (BinaryDecoder<PEAP.Packet[peapData.PEAPData.Count as uint]>(peapData.PEAPData) is packet:PEAP.Packet)
        {
            packet#PEAPPacketLength = peapData.PEAPData.Count as uint;
            dispatch endpoint ReassemblyServer over node issues packet;
        }
        else
        {
            ThrowDecodingException("PEAP");
        }
    }

    process node accepts p:EAP.Packet where (p.Type == EAP.MethodType.PEAP && p.Type_Data is peapData:EAP.PEAP)
    {
        if (BinaryDecoder<PEAP.Packet[peapData.PEAPData.Count as uint]>(peapData.PEAPData) is packet:PEAP.Packet)
        {
            packet#PEAPPacketLength = peapData.PEAPData.Count as uint;
            dispatch endpoint ReassemblyServer over node accepts packet;
        }
        else
        {
            ThrowDecodingException("PEAP");
        }
    }

    observe node accepts p:EAP.Packet where (p.Type is methodType:MethodType && 
        methodType == EAP.MethodType.ExtensionsMethods && p.Type_Data is typeData:EAP.ExtensionsMethods && 
        typeData.Data is typeDataBin:binary)
    {
        if (BinaryDecoder<array<EAPTLVExtensionsMethodType> >(typeDataBin) is re:array<EAPTLVExtensionsMethodType>)
        {
            p.Type_Data = new ExtensionsMethodsEx
                            {
                                Data = re,
                            };
        }
    }

    observe node issues p:EAP.Packet where (p.Type is methodType:MethodType && 
        methodType == EAP.MethodType.ExtensionsMethods && p.Type_Data is typeData:EAP.ExtensionsMethods && 
        typeData.Data is typeDataBin:binary)
    {
        if (BinaryDecoder<array<EAPTLVExtensionsMethodType> >(typeDataBin) is re:array<EAPTLVExtensionsMethodType>)
        {
            p.Type_Data = new ExtensionsMethodsEx
                            {
                                Data = re,
                            };
        }
    }

    observe node accepts p:EAP.Packet where (p.Type is methodType:MethodType && 
        methodType == EAP.MethodType.ExpandedTypes && p.Type_Data is typeData:EAP.ExpandedTypes && 
        typeData.Vendor_Id == ExpandedTypesVendorId.Microsoft)
    {
        if (typeData.Vendor_Type == 0x21)
        {
            if (BinaryDecoder<SoHRequestTLV>(typeData.Vendor_Data) is re:SoHRequestTLV)
            {
                p.Type_Data = new ExpandedTypesEx
                            {
                                Vendor_Id = ExpandedTypesVendorId.Microsoft,
                                Vendor_Type = 0x21,
                                Vendor_Data = re,
                            };
            }
        }
        else if (typeData.Vendor_Type == 0x22)
        {
            if (BinaryDecoder<CapabilitiesMethodVendorData>(typeData.Vendor_Data) is re:CapabilitiesMethodVendorData)
            {
                p.Type_Data = new ExpandedTypesEx
                            {
                                Vendor_Id = ExpandedTypesVendorId.Microsoft,
                                Vendor_Type = 0x22,
                                Vendor_Data = re,
                            };
            }
        }
    }

    observe node issues p:EAP.Packet where (p.Type is methodType:MethodType && 
        methodType == EAP.MethodType.ExpandedTypes && p.Type_Data is typeData:EAP.ExpandedTypes && 
        typeData.Vendor_Id == ExpandedTypesVendorId.Microsoft)
    {
        if (typeData.Vendor_Type == 0x21)
        {
            if (BinaryDecoder<SoHTLV>(typeData.Vendor_Data) is re:SoHTLV)
            {
                 p.Type_Data = new ExpandedTypesEx
                            {
                                Vendor_Id = ExpandedTypesVendorId.Microsoft,
                                Vendor_Type = 0x21,
                                Vendor_Data = re,
                            };
            }
        }
        else if (typeData.Vendor_Type == 0x22)
        {
            if (BinaryDecoder<CapabilitiesMethodVendorData>(typeData.Vendor_Data) is re:CapabilitiesMethodVendorData)
            {
                p.Type_Data = new ExpandedTypesEx
                            {
                                Vendor_Id = ExpandedTypesVendorId.Microsoft,
                                Vendor_Type = 0x22,
                                Vendor_Data = re,
                            };
            }
        }
    }
}

autostart actor TLSOverPEAP(PEAP.Server server)
{
    TLS.SessionContext ClientContext = null;
    TLS.SessionContext ServerContext = null;
    TLS.Server TLSEPT = endpoint TLS.Server over server;

    process server accepts d:PEAP.Packet where d.Data.TLS_Data is bin:binary && IsTlsHeader(bin)
    {
        if (ClientContext == null)
        {
            InitializeContextPair(ref ClientContext, ref ServerContext);
            InitializeTLSServerFromPEAP(DispathDecrytedMessageBack, TLSEPT, d, MessageDirection.Accepts);
        }
        
        TLS.TryDecodingAndDispatchingTLSMessage(bin, ClientContext, TLSEPT, MessageDirection.Accepts);
    }
    
    process server issues d:PEAP.Packet where d.Data.TLS_Data is bin:binary && IsTlsHeader(bin)
    {
        if (ServerContext == null)
        {
            InitializeContextPair(ref ClientContext, ref ServerContext);
            InitializeTLSServerFromPEAP(DispathDecrytedMessageBack, TLSEPT, d, MessageDirection.Issues);
        }
        
        TLS.TryDecodingAndDispatchingTLSMessage(bin, ServerContext, TLSEPT, MessageDirection.Issues);
    }

    void DispathDecrytedMessageBack(binary bin, RecordLayers rls, TLS.Server tlsServer, MessageDirection direction)
    {
        if (rls.Origins[0] is Packet:PEAP.Packet)
        {
            EAP.PacketDecoder(bin, (endpoint EAP.Server over tlsServer));
        }
    }
}

void InitializeTLSServerFromPEAP(void(binary, RecordLayers, TLS.Server, MessageDirection) dispatchBack, 
    TLS.Server tlsServer, any message topMsg, MessageDirection dir)
{
    binary srcAddr;
    binary destAddr;
    ushort srcPort;
    ushort destPort;

    any message currentMsg = topMsg;
    while (currentMsg.Origins.Count != 0 && !(currentMsg.Origins[0] is UDP.Datagram)) // EAP over RADIUS and EAP over IKE
    {
        currentMsg = currentMsg.Origins[0];
    }
    if (currentMsg.Origins.Count != 0 && currentMsg.Origins[0] is udp:UDP.Datagram)
    {
        if (dir == MessageDirection.Accepts)
        {
            srcAddr = udp#DestinationAddress is b1:binary ? b1 : Utility.EmptyBinary;
            destAddr = udp#SourceAddress is b2:binary ? b2 : Utility.EmptyBinary;
            srcPort = udp.DestinationPort;
            destPort = udp.SourcePort;
        }
        else
        {
            srcAddr = udp#SourceAddress is b1:binary ? b1 : Utility.EmptyBinary;
            destAddr = udp#DestinationAddress is b2:binary ? b2 : Utility.EmptyBinary;
            srcPort = udp.SourcePort;
            destPort = udp.DestinationPort;
        }
    }
    if (currentMsg.Origins.Count == 0)
    {
        currentMsg = topMsg;
        while (currentMsg.Origins.Count != 0 && !(currentMsg.Origins[0] is PPP.Frame)) // EAP over PPP
        {
            currentMsg = currentMsg.Origins[0];
        }
        if (currentMsg.Origins.Count != 0 && currentMsg.Origins[0] is ppp:PPP.Frame)
        {
            if (dir == MessageDirection.Accepts)
            {
                srcAddr = (ppp#PPPDestinationAddress is str1:string ? str1.ToBinary() : nothing) is b1:binary ? b1 : Utility.EmptyBinary;
                destAddr = (ppp#PPPSourceAddress is str2:string ? str2.ToBinary() : nothing) is b2:binary ? b2 : Utility.EmptyBinary;
            }
            else
            {
                srcAddr = (ppp#PPPSourceAddress is str1:string ? str1.ToBinary() : nothing) is b1:binary ? b1 : Utility.EmptyBinary;
                destAddr = (ppp#PPPDestinationAddress is str2:string ? str2.ToBinary() : nothing) is b2:binary ? b2 : Utility.EmptyBinary;
            }
            srcPort = 0; // TLS need port to decrption, when no port in the lower layer, we make up one
            destPort = 1;
        }
    }
    if (currentMsg.Origins.Count == 0)
    {
        currentMsg = topMsg;
        while (currentMsg.Origins.Count != 0 && !(currentMsg.Origins[0] is Ethernet.Frame)) // EAP over EAPOL
        {
            currentMsg = currentMsg.Origins[0];
        }
        if (currentMsg.Origins.Count != 0 && currentMsg.Origins[0] is ethernet:Ethernet.Frame)
        {
            if (dir == MessageDirection.Accepts)
            {
                srcAddr = ethernet.DestinationAddress is addr1:MacAddress ? addr1.Octets : Utility.EmptyBinary;
                destAddr = ethernet.SourceAddress is addr2:MacAddress ? addr2.Octets : Utility.EmptyBinary;
            }
            else
            {
                srcAddr = ethernet.SourceAddress is addr1:MacAddress ? addr1.Octets : Utility.EmptyBinary;
                destAddr = ethernet.DestinationAddress is addr2:MacAddress ? addr2.Octets : Utility.EmptyBinary;
            }
            srcPort = 0; // TLS need port to decrption, when no port in the lower layer, we make up one
            destPort = 1;
        }
        else
        {
            srcAddr = Utility.EmptyBinary;
            destAddr = Utility.EmptyBinary;
            srcPort = 0; // TLS need port to decrption, when no port in the lower layer, we make up one
            destPort = 1;
        }
    }
    tlsServer.InitializeContext(srcAddr, destAddr, srcPort, destPort, dispatchBack);
}

// 2.2.2    PEAP Packet
message Packet[uint Length]
{
    PacketFlags Flags where ValidationCheckReservedZero((value & PacketFlags.A) == 0 && (value & PacketFlags.B) == 0 && (value & PacketFlags.C) == 0, 
        this, true, ReferenceType.Type, "PEAP", "A, B, C of Flags", "Packet", value) 
        with BinaryEncoding{Width = 6};
    PacketVer Ver with BinaryEncoding{Width = 2};
    PacketData[(Flags & PacketFlags.L) > 0, Length] Data;
    
    override string ToString()
    {
        string displayStr = "";
        if (Data.TLS_Data is nothing && Data.Outer_TLV_Data is nothing)
        {
            if ((Flags & PacketFlags.S) > 0)
            {
                displayStr += "PEAP Start Message, ";
            }
            else
            {
                displayStr += "Fragment Acknowledgment, ";
            }
        }
        if ((this.Origins).Count > 1)
        {
            displayStr += "[Reassembled, Count: " + (this.Origins.Count as string) + "] ";
        }
        else if (this#PEAPFragmentNumber != nothing)
        {
            displayStr += "[Fragment, No." + (this#PEAPFragmentNumber as string) + "] ";
        }
        if (Flags > 0)
        {
            displayStr += "Flags: " + EnumToString<PacketFlags>(Flags) + ", ";
        }
        displayStr += "Length: " + (this#PEAPPacketLength as string);
        return displayStr;
    }
}

type PacketData[bool IsLSet, uint Length]
{
    optional [|IsLSet == true|] uint TLS_Message_Length;
    optional [|TLS_Message_Length == nothing ? Length > 1 : Length > 5|] binary TLS_Data with BinaryEncoding{MaxLength = (TLS_Message_Length == nothing ? Length - 1 : (TLS_Message_Length as uint))};
    optional [|TLS_Message_Length == nothing ? false : Length - TLS_Message_Length > 5|] array<TLVList> Outer_TLV_Data;
}

pattern PacketFlags = flags byte
{
    L = 0x20,
    M = 0x10,
    S = 0x08,
    A = 0x04,
    B = 0x02,
    C = 0x01
};

pattern PacketVer = flags byte
{
    R = 0x2,
    V = 0x1
};

// 2.2.8.1    EAP TLV Extensions Method
type ExtensionsMethodsEx : EAP.ExtensionsMethods
{
    new array<EAPTLVExtensionsMethodType> Data;
}

pattern EAPTLVExtensionsMethodType = [|RemainingBitLength(stream) >= 16|]
    ([|(CurrentByte(stream) & 0xC0) == 0|] 
        ([|PeekByte(stream, stream.BitPosition + 8) == 12|] CryptobindingTLV        // TLVType = 12, [MS-PEAP] 2.2.8.1.1
        | [|PeekByte(stream, stream.BitPosition + 8) == 3|] SoHResponseTLV          // TLVType = 3, [MS-PEAP] 2.2.8.1.3
        | binary)
    | [|(CurrentByte(stream) & 0xC0) == 0x80 && PeekByte(stream, stream.BitPosition + 8) == 3|] ResultTLV // TLVType = 3, [MS-PEAP] 2.2.8.1.2
    | binary);

// 2.2.8.1.1    Cryptobinding TLV
type CryptobindingTLV // 12
{
    byte M where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "M", "CryptobindingTLV", value)
        with BinaryEncoding{Width = 1};
    byte R where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "R", "CryptobindingTLV", value) with BinaryEncoding{Width = 1};
    ushort TLV_Type where value == 0x0C with BinaryEncoding{Width = 14};
    ushort Length where ValidationCheckZero(value == 56, null, true, 
        ReferenceType.Type, "PEAP", "Length", "CryptobindingTLV", value);
    CryptobindingTLVValue Value;
}

type CryptobindingTLVValue
{
    byte Reserved where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "Reserved", "CryptobindingTLVValue", value);
    byte Version where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "Version", "CryptobindingTLVValue", value);
    byte ReceivedVersion where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "Version", "CryptobindingTLVValue", value);
    CryptobindingTLVSubType SubType;
    binary Nonce with BinaryEncoding{Length = 32};
    binary Compound_MAC with BinaryEncoding{Length = 20};
}

pattern CryptobindingTLVSubType = enum byte
{
    request = 0,
    response = 1,
    ...
};

// 2.2.8.1.2    Result TLV
type ResultTLV // 3
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "R", "ResultTLV", value) with BinaryEncoding{Width = 1};
    ushort TLV_Type where value == 0x03 with BinaryEncoding{Width = 14};
    ushort Length where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "Length", "ResultTLV", value);
    ResultTLVValue Value;
}
type ResultTLVValue
{
    ResultTLVResult Result;
}

pattern ResultTLVResult = enum ushort
{
    Success = 1,
    Failure = 2,
    ...
};

// 2.2.8.1.3    SoH Response TLV
type SoHResponseTLV // 3
{
    byte M where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "M", "SoHRequestTLV", value)
        with BinaryEncoding{Width = 1};
    byte R where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "R", "SoHRequestTLV", value) with BinaryEncoding{Width = 1};
    ushort TLV_Type where value == 0x03 with BinaryEncoding{Width = 14};
    ushort Length;
    binary Value with BinaryEncoding{Length = Length};
}

// 2.2.8.2.1    SoH Request TLV
type SoHRequestTLV // 2
{
    byte M where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "M", "SoHRequestTLV", value)
        with BinaryEncoding{Width = 1};
    byte R where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "R", "SoHRequestTLV", value) with BinaryEncoding{Width = 1};
    ushort TLV_Type where value == 0x02 with BinaryEncoding{Width = 14};
    ushort Length where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "PEAP", "Length", "SoHRequestTLV", value);
}

// 2.2.8.2.2    SoH TLV
type SoHTLV // 1
{
    byte M where ValidationCheckZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "M", "SoHTLV", value)
        with BinaryEncoding{Width = 1};
    byte R where ValidationCheckReservedZero(value == 0, null, true, 
        ReferenceType.Type, "PEAP", "R", "SoHTLV", value) with BinaryEncoding{Width = 1};
    ushort TLV_Type where value == 0x01 with BinaryEncoding{Width = 14};
    ushort Length;
    binary Value with BinaryEncoding{Length = Length};
}

// 2.2.8.3.1    Capabilities Method Request
pattern CapabilitiesMethodVendorData = flags uint
{
    Reserved= 0x7F,
    F = 0x80,
    ...
};

type UsignedInteger // To decode an uint from BinaryDecoder with Big encoding
{
    uint Value;
}

pattern TLVListType = [|RemainingBitLength(stream) >= 16|]
    ([|(CurrentByte(stream) & 0xC0) == 0|] 
        ([|PeekByte(stream, stream.BitPosition + 8) == 12|] CryptobindingTLV         // TLVType = 12, [MS-PEAP] 2.2.8.1.1
        | [|PeekByte(stream, stream.BitPosition + 8) == 3|] SoHResponseTLV          // TLVType = 3, [MS-PEAP] 2.2.8.1.3
        | [|PeekByte(stream, stream.BitPosition + 8) == 2|] SoHRequestTLV           // TLVType = 2, [MS-PEAP] 2.2.8.2.1
        | [|PeekByte(stream, stream.BitPosition + 8) == 1|] SoHTLV                  // TLVType = 4, [MS-PEAP] 2.2.8.2.2
        | [|PeekByte(stream, stream.BitPosition + 8) == 4|] NAKTLV                  // TLVType = 4, 
        | [|PeekByte(stream, stream.BitPosition + 8) == 4|] NAKTLV                  // TLVType = 4
        | [|PeekByte(stream, stream.BitPosition + 8) == 5|] ErrorCodeTLV            // TLVType = 5
        | [|PeekByte(stream, stream.BitPosition + 8) == 6|] ConnectionBindingTLV    // TLVType = 6
        | [|PeekByte(stream, stream.BitPosition + 8) == 7|] VendorSpecificTLV       // TLVType = 7
        | [|PeekByte(stream, stream.BitPosition + 8) == 8|] URITLV                  // TLVType = 8
        | [|PeekByte(stream, stream.BitPosition + 8) == 9|] EAPPayloadTLV           // TLVType = 9
        | [|PeekByte(stream, stream.BitPosition + 8) == 10|] IntermediateResultTLV  // TLVType = 10
        | [|PeekByte(stream, stream.BitPosition + 8) == 13|] CallingStationIDTLV    // TLVType = 13
        | [|PeekByte(stream, stream.BitPosition + 8) == 14|] CalledStationIDTLV     // TLVType = 14
        | [|PeekByte(stream, stream.BitPosition + 8) == 15|] NASPortTypeTLV         // TLVType = 15
        | [|PeekByte(stream, stream.BitPosition + 8) == 16|] ServerIdentifierTLV    // TLVType = 16
        | [|PeekByte(stream, stream.BitPosition + 8) == 17|] IdentityTypeTLV        // TLVType = 17
        | [|PeekByte(stream, stream.BitPosition + 8) == 18|] ServerTrustedRootTLV   // TLVType = 18
        | [|PeekByte(stream, stream.BitPosition + 8) == 19|] RequestActionTLV       // TLVType = 19
        | [|PeekByte(stream, stream.BitPosition + 8) == 20|] PKCS7TLV               // TLVType = 20
        | binary) // Should not remove the 2 "binary" here
    | [|(CurrentByte(stream) & 0xC0) == 0x80 && PeekByte(stream, stream.BitPosition + 8) == 3|] ResultTLV // TLVType = 3, [MS-PEAP] 2.2.8.1.2
    | binary);

type TLVList
{
    TLVListType TLVList;

    ushort GetLength()
    {
        switch (TLVList)
        {
            case tlv: ResultTLV =>
                return tlv.Length;
            case tlv: NAKTLV =>
                return tlv.Length;
            case tlv: ErrorCodeTLV =>
                return tlv.Length;
            case tlv: CryptobindingTLV =>
                return tlv.Length;
            case tlv: ConnectionBindingTLV =>
                return tlv.Length;
            case tlv: VendorSpecificTLV =>
                return tlv.Length;
            case tlv: URITLV =>
                return tlv.Length;
            case tlv: IntermediateResultTLV =>
                return tlv.Length;
            case tlv: CallingStationIDTLV =>
                return tlv.Length;
            case tlv: CalledStationIDTLV =>
                return tlv.Length;
            case tlv: NASPortTypeTLV =>
                return tlv.Length;
            case tlv: ServerIdentifierTLV =>
                return tlv.Length;
            case tlv: IdentityTypeTLV =>
                return tlv.Length;
            case tlv: ServerTrustedRootTLV =>
                return tlv.Length;
            case tlv: RequestActionTLV =>
                return tlv.Length;
            case tlv: PKCS7TLV =>
                return tlv.Length;
            default =>
                return 0;
        }
    }
}
 // PEAPv2, http://potaroo.net/ietf/idref/draft-josefsson-pppext-eap-tls-eap/#page-27
type NAKTLV // 4
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 4;
    ushort Length;
    uint VendorId;
    ushort NAKType;
    // the M of TLVList in array below must be 0
    optional [|Length > 6|] array<TLVList> TLVs;
}

type ErrorCodeTLV // 5
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 5;
    ushort Length;
    uint ErrorCode;
}

type ConnectionBindingTLV // 6
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 6;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // the M of TLVList in array below must be 0
    optional [|Length > 0|] array<TLVList> TLVs;
}

type VendorSpecificTLV // 7
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 7;
    ushort Length where ValidationCheck(value >= 4, null, "Length field cannot be smaller than 4.");
    uint VendorId;
    // It contains vendor-specific TLVs, in a format defined by the vendor.
    optional [|Length > 4|] binary VendorTLVs with BinaryEncoding{Length = Length - 4};
}

type URITLV // 8
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 8;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // Format specified in [RFC2396].
    optional [|Length > 0|] string URI with BinaryEncoding{Length = Length, TextEncoding = TextEncoding.ASCII};
}

type EAPPayloadTLV // 9
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 9;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // This field contains a complete EAP packet
    EAP.Packet EapPacket;
    // the M of TLVList in array below must be 0
    optional [|Length > EapPacket.Length|] array<TLVList> TLVs;
}

type IntermediateResultTLV // 10
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 10;
    ushort Length where ValidationCheck(value >= 2, null, "Length field cannot be smaller than 2.");
    ushort Status;
    // the M of TLVList in array below must be 0
    optional [|Length > 2|] array<TLVList> TLVs;
}

type CallingStationIDTLV // 13
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 13;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // The field should be the same as the value of the Calling-Station-ID attribute in [RFC2865].
    CallingStationId String;
}

type CalledStationIDTLV // 14
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 14;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // The field should be the same as the value of the Calling-Station-ID attribute in [RFC2865].
    CallingStationId String;
}

type NASPortTypeTLV // 15
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 15;
    ushort Length where ValidationCheck(value == 4, null, "Length field must be 4.");
    // The Value field is four octets.  Values are the same as for the NAS-Port-Type attribute defined in [RFC2865].
    NASPortType Value;
}

type ServerIdentifierTLV // 16
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 16;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // Contains an identifier sent by the EAP server.
    optional [|Length > 0|] string String with BinaryEncoding{Length = Length, TextEncoding = TextEncoding.ASCII};
}

type IdentityTypeTLV // 17
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 17;
    ushort Length where ValidationCheck(value == 0, null, "Length field must be 2.");
    // Values include:1 -> User, 2 -> Machine
    ushort IdentityType;
}

type ServerTrustedRootTLV // 18
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 18;
    ushort Length where ValidationCheck(value >= 2, null, "Length field cannot be smaller than 2.");
    ushort CredentialFormat;
    // It contains TLVs associated with the certificate-request.
    optional [|Length > 2|] array<TLVList> TLVs;
}

type RequestActionTLV // 19
{
    byte M where ValidationCheck(value == 1, null, "M field must be 1.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 19;
    ushort Length where ValidationCheck(value == 2, null, "Length field must be 2.");
    // Values include: 1 -> Process-TLV, 2 -> Negotiate-EAP
    ushort Action;
}

type PKCS7TLV // 20
{
    byte M where ValidationCheck(value == 0, null, "M field must be zero.") with BinaryEncoding{Width = 1};
    byte R where ValidationCheck(value == 0, null, "Reserved field must be zero.") with BinaryEncoding{Width = 1};
    ushort TLVType with BinaryEncoding{Width = 14};
    invariant TLVType == 20;
    ushort Length where ValidationCheck(value >= 0, null, "Length field cannot be smaller than zero.");
    // This field contains a certificate or certificate chain in PKCS#7 [RFC2315] format.
    optional [|Length > 0|] binary PKCS7Data with BinaryEncoding{Length = Length};
}

type CallingStationId
{
    byte Type;
    byte Length;
    optional [|Length > 0|] string String with BinaryEncoding{Length = Length, TextEncoding = TextEncoding.ASCII};
}

type NASPortType
{
    byte Type;
    byte Length;
    ushort Value;
}

type ExpandedTypesEx : EAP.ExpandedTypes
{
    new (SoHRequestTLV | SoHTLV | CapabilitiesMethodVendorData) Vendor_Data;
}

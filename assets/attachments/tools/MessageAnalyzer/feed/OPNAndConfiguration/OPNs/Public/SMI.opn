module SMI with
Asn1EncodingDefaults{ EncodingRule = Asn1EncodingRule.BER },
Documentation
{
    ProtocolName = "Structure of Management Information",
    ShortName = "SMI",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2578"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "384029", Date = "02/03/2016"}
        ]
};

using Technologies.ASN1;

// ObjectName
pattern ObjectName = ObjectIdentifier;

// ObjectSyntax

pattern ObjectSyntaxSimple = SimpleSyntax;

pattern ObjectSyntaxApplicationWide = ApplicationSyntax;

pattern ObjectSyntax = ObjectSyntaxSimple
    | ObjectSyntaxApplicationWide;

// SimpleSyntax

pattern SimpleSyntaxNumber = Integer;

pattern SimpleSyntaxString = OctetString with Asn1Encoding{ Flags = Asn1EncodingFlags.OctetStringIsString };

pattern SimpleSyntaxObject = ObjectIdentifier;

pattern SimpleSyntaxEmpty = Null;

pattern SimpleSyntax = SimpleSyntaxNumber
    | SimpleSyntaxString
    | SimpleSyntaxObject
    | SimpleSyntaxEmpty
    ;

// ApplicationSyntax
pattern ApplicationSyntax = IpAddress
    | Counter
    | Gauge
    | TimeTicks
    | Opaque
    | Counter64
    ;

// IpAddress
pattern IpAddress = OctetString with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 0,
    Tagging = Asn1Tagging.Implicit,
    // Size = 4
    };

// Counter
pattern Counter = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 1,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// Gauge
pattern Gauge = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 2,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// TimeTicks
pattern TimeTicks = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 3,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// Opaque
pattern Opaque = OctetString with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 4,
    Tagging = Asn1Tagging.Implicit
    };

// Counter64
pattern Counter64 = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 6,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    // UpperEndValue = 18446744073709551615 // PEF bug 6413376: [ASN1] Asn1Encoding don't support ulong and 'UpperEndValue = 18446744073709551615'
    };

protocol VXLAN
    with BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Virtual eXtensible Local Area Network (VXLAN)",
    ShortName = "VXLAN",
    Description = "Virtual eXtensible Local Area Network (VXLAN): A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 7348"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "369381", Date = "10/14/2014"}
        ]
};

using IANA;
using Utility;
using UDP;
using Ethernet;

autostart actor EthernetOverVXLAN(VXLAN.Host host)
{
    process host accepts f:VXLAN.Frame where f.Payload.Count > 0
    {
        switch (f.Payload)
        {
            case frame:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[false]> =>
                dispatch (endpoint Ethernet.Node) accepts frame;
            default => 
                ThrowDecodingException("VXLAN", "Ethernet.Frame");
        }
    }
}

endpoint Host accepts Frame;

autostart actor VXLANOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram where d.Payload.Count > 0 && d.DestinationPort == IANA.Port.VXLAN
    {
        switch (d.Payload)
        {
            case m:Frame from BinaryDecoder<Frame> =>
                dispatch (endpoint VXLAN.Host over host) accepts m;
            default => 
                ThrowDecodingException("VXLAN", "VXLAN.Frame");
        }
    }
}

message Frame
{
    Flags Flags;
    int Reserved1 where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "VXLAN", "Reserved1", "Frame", value) with BinaryEncoding{Width = 24};
    int $"VXLAN Network Identifier (VNI)" with BinaryEncoding{Width = 24};
    int Reserved2 where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "VXLAN", "Reserved2", "Frame", value) with BinaryEncoding{Width = 8};
    binary Payload;

    override string ToString()
    {
        return "VXLAN Frame";
    }
}

pattern Flags = flags byte
{
    R = 0xF7,
    I = 0x8,
    ...
};

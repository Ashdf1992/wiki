protocol EPM with Documentation
{
    ProtocolName = "Endpoint Mapper",
    ProtocolType = "rpc",
    ShortName = "EPM",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference{Name = "X/Open C706", Link = "http://www.opengroup.org/pubs/catalog/c706.htm"},
    ],
    RevisionSummary = 
    [
        new Revision{Class = RevisionClass.Major, Version = "381911", Date = "10/09/2015"}
    ]
};

using ERREF;
using Technologies.IDL;
using MSRPCE;
using Utility;
using Technologies.ASN1;

const guid RpcDataRepresentationIdentifier = {8a885d04-1ceb-11c9-9fe8-08002b104860};

endpoint Server over MSRPCE.Server provides ept;

contract ept
{
    accepts operation ept_insert
    {
        in optional handle_t h;
        in unsigned32 num_ents;
        in array<ept_entry_t> entries
               with Technologies.IDL.IDL{Size_is = [num_ents], Dimensions = [null]};
        in boolean32 replace with DisplayInfo{ToText = BooleanToString};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "ept_insert, status: " + Win32ErrorCodesToText(status) +
                ", entries: " + entries.ToString() +
                ", replace: " + BooleanToString(replace);
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation ept_delete
    {
        in optional handle_t h;
        in unsigned32 num_ents;
        in array<ept_entry_t> entries
               with Technologies.IDL.IDL{Size_is = [num_ents], Dimensions = [null]};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "ept_delete, status: " + Win32ErrorCodesToText(status) +
                ", delete entries: " + entries.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation ept_lookup
    {
        in optional handle_t h;
        in InqurityType inquiry_type 
            where ValidationCheck(InRange<InqurityType>(value), null, DiagnosisLevel.Error, "EPM: The inquiry_type in operation ept_lookup is not applicable to InqurityType.")
            with Encoding{Decoder = PatternDecoder<InqurityType>, SourcePattern = TypeOf<unsigned32>()};
        in uuid_p_t object with IDL {PointerType = PointerKind.FullPtr};
        in rpc_if_id_p_t interface_id with IDL {PointerType = PointerKind.FullPtr};
        in VersOption vers_option
            where ValidationCheck(value == 0 || InRange<VersOption>(value), null, DiagnosisLevel.Error, "EPM: The vers_option in operation ept_lookup is not applicable to VersOption.")
            with Encoding{Decoder = PatternDecoder<VersOption>, SourcePattern = TypeOf<unsigned32>()};
        in out ept_lookup_handle_t entry_handle
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        in unsigned32 max_ents;
        out unsigned32 num_ents with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<ept_entry_t> entries
            with Technologies.IDL.IDL{Size_is = [max_ents], Length_is = [num_ents], Dimensions = [null]};
        out error_status_t status
            with Technologies.IDL.IDL{IndirectionLevel = 1};
                
        string VersionOptionToString()
        {
            switch (vers_option)
            {
                case VersOption.RPC_C_VERS_ALL =>
                    return " with all version";
                case VersOption.RPC_C_VERS_COMPATIBLE =>
                    if(interface_id != null)
                    {
                        return " with version greater than v" + interface_id.vers_major.ToString() + "." + interface_id.vers_minor.ToString();
                    }
                    return " with compatible version.";
                case VersOption.RPC_C_VERS_EXACT =>
                    if(interface_id != null)
                    {
                        return " with version exactly equal to v" + interface_id.vers_major.ToString() + "." + interface_id.vers_minor.ToString();
                    }
                    return " with exactly version";
                case VersOption.RPC_C_VERS_MAJOR_ONLY =>
                    if(interface_id != null)
                    {
                        return " with version exactly equal to v" + interface_id.vers_major.ToString() + ".*";
                    }
                    return " with major version.";
                case VersOption.RPC_C_VERS_UPTO =>
                    if(interface_id != null)
                    {
                        return " with version less than v" + interface_id.vers_major.ToString() + "." + interface_id.vers_minor.ToString();
                    }
                    return " with upto version";
                default=>
                    return " with unknown version type";
            }
        }
        
        override string ToString()
        {
            string summaryLine = "ept_lookup, status: " + Win32ErrorCodesToText(status);
            
            switch (inquiry_type)
            {
                case InqurityType.RPC_C_EP_ALL_ELTS =>
                    summaryLine += ", lookup all elements in the endpoint mapper";
                case InqurityType.RPC_C_EP_MATCH_BY_IF =>
                    summaryLine += ", look up elements matched by interface";
                    if(interface_id != null)
                    {
                        summaryLine += " " + interface_id.ToString();
                    }
                    else
                    {
                        summaryLine += " null";
                    }
                    summaryLine += VersionOptionToString();
                case InqurityType.RPC_C_EP_MATCH_BY_OBJ =>
                    summaryLine += ", look up elements matched by object";
                    if(object != null)
                    {
                        summaryLine += " " + UuidToText(object);
                    }
                    else
                    {
                        summaryLine += " null";
                    }
                case InqurityType.RPC_C_EP_MATCH_BY_BOTH => 
                    summaryLine += ", look up elements matched by interface";
                    if(interface_id != null)
                    {
                        summaryLine += " " + interface_id.ToString();
                    }
                    else
                    {
                        summaryLine += " null";
                    }
                    
                    summaryLine += " and by object";
                    if(object != null)
                    {
                        summaryLine += " " + UuidToText(object);
                    }
                    else
                    {
                        summaryLine += " null";
                    }
                    summaryLine += VersionOptionToString();
                default=>
                    summaryLine += " Unknown";
            }
            
            if(num_ents > 0)
            {
                summaryLine += ", and find entries: " + entries.ToString();
            }
            else
            {
                summaryLine += ", and find no entry.";
            }
            return summaryLine;
        }
    }
    with Technologies.IDL.IDL{Idempotent = true, Opnum = 2};
    
    accepts operation ept_map
    {
        in optional handle_t h;
        in uuid_p_t object with IDL {PointerType = PointerKind.FullPtr};
        in twr_p_t map_tower with IDL {PointerType = PointerKind.FullPtr};
        in out ept_lookup_handle_t entry_handle
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        in unsigned32 max_towers;
        out unsigned32 num_towers
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<twr_p_t> towers
            with Technologies.IDL.IDL{Size_is = [max_towers], Length_is = [num_towers], Dimensions = [null]};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "ept_map, status: " + Win32ErrorCodesToText(status) +
                ", " + towers.ToString();
        }
    }
    with Technologies.IDL.IDL{Idempotent = true, Opnum = 3};
    
    accepts operation ept_lookup_handle_free
    {
        in optional handle_t h;
        in out ept_lookup_handle_t entry_handle
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "ept_lookup_handle_free, status: " + Win32ErrorCodesToText(status);
        }
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation ept_inq_object
    {
        in optional handle_t h;
        out guid ept_object with Technologies.IDL.IDL{IndirectionLevel = 1};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "ept_inq_object, status: " + Win32ErrorCodesToText(status);
        }
    }
    with Technologies.IDL.IDL{Idempotent = true, Opnum = 5};
    
    accepts operation ept_mgmt_delete
    {
        in optional handle_t h;
        in boolean32 object_speced with DisplayInfo{ToText = BooleanToString};
        in uuid_p_t object with IDL {PointerType = PointerKind.FullPtr};
        in twr_p_t tower with IDL {PointerType = PointerKind.FullPtr};
        out error_status_t status
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            // get string of object
            string objectStr = "null";
            if(object != null)
            {
                objectStr = UuidToText(object);
            }
                       
            return  "ept_mgmt_delete, status: " + Win32ErrorCodesToText(status) +
                ", delete object " + objectStr;
        }
    }
    with Technologies.IDL.IDL{Opnum = 6};
}
with Technologies.IDL.IDL{Uuid = {e1af8308-5d1f-11c9-91a4-08002b14a0fa}, Version = "3.0", Pointer_default = PointerKind.FullPtr};

typedef unsigned32 = IDLUlong;

type ept_entry_t
{
    guid object;
    twr_p_t tower
        with Technologies.IDL.IDL{ EmbedType = true};
    string @annotation
        with Technologies.IDL.IDL{Dimensions = [64], BaseStringType = TypeOf<char>()};
        
    override string ToString()
    {
        return @annotation;
    }
}

typedef uuid_p_t = guid with IDL {IndirectionLevel = 1};

typedef unsigned16 = ushort;

typedef unsigned8 = usmall;

typedef twr_p_t = twr_t with IDL {IndirectionLevel = 1};

type twr_t
{
    unsigned32 tower_length;
    TowerOctetString tower_octet_string
        with Technologies.IDL.IDL{Size_is = [tower_length], Dimensions = [null]}
        with Encoding{Decoder = BinaryDecoder<TowerOctetString>, SourcePattern = TypeOf<array<byte>>()};

    override string ToString()
    {
        return tower_octet_string.ToString();
    }
}
with Technologies.IDL.IDL{DoNotGenerate = true};

typedef boolean32 = unsigned32;

typedef rpc_if_id_p_t = rpc_if_id_t with IDL{IndirectionLevel = 1};

type rpc_if_id_t
{
    guid uuid;
    unsigned16 vers_major;
    unsigned16 vers_minor;
    
    override string ToString()
    {
        return UuidToText(uuid);
    }
}
with Technologies.IDL.IDL{DoNotGenerate = true};

typedef ept_lookup_handle_t = ContextHandle;

pattern InqurityType = enum unsigned32
{
    RPC_C_EP_ALL_ELTS = 0x00000000,
    RPC_C_EP_MATCH_BY_IF = 0x00000001,
    RPC_C_EP_MATCH_BY_OBJ = 0x00000002,
    RPC_C_EP_MATCH_BY_BOTH = 0x00000003,
    ...
}
with IDL{DoNotGenerate = true};

pattern VersOption = enum unsigned32
{
    RPC_C_VERS_ALL = 0x00000001,
    RPC_C_VERS_COMPATIBLE = 0x00000002,
    RPC_C_VERS_EXACT = 0x00000003,
    RPC_C_VERS_MAJOR_ONLY = 0x00000004,
    RPC_C_VERS_UPTO = 0x00000005,
    ...
}
with IDL{DoNotGenerate = true};

/*--------------------------------Utility annotations and functions -----------------------------------------------*/

string BooleanToString(any input)
{
    boolean32 temp = input as boolean32;
    if(temp == 0)
    {
        return "False";
    }
    else
    {
        return "True";
    }
}

/*-----------------------C706 Appendix L: Structures for TowerOctet String ---------------------------------------*/
// +-------------+---------+---------+---------+---------+---------+ 
// | floor count | floor 1 | floor 2  | floor 3 | ...     | floor n | 
// +-------------+---------+---------+---------+---------+---------+
type TowerOctetString
{
    ushort FloorCount;
    array<TowerFloor> Floors with BinaryEncoding{Length = (FloorCount)};

    override string ToString()
    {
        if (FloorCount > 0 && Floors[0].ProtocolIdentifierData is dyncPId:DynamicalGenerateProtocolIdentifier)
        {
            string summary = Floors[0].ToString();
            if (FloorCount == 5)
            {
                summary += ", Address: " + Floors[4].RelatedOrAddressData.ToString() +
                    ", Port: " + Floors[3].RelatedOrAddressData.ToString();
            }
            return summary;
        }
        else
        {
            return base.ToString();
        }
    }
}with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

// |<- tower floor left hand side ->|<- tower floor right hand side ->|
// +------------+-----------------------+------------+----------------------+
// | LHS byte   | protocol identifier    | RHS byte   | related or address    |
// | count      | data                   | count      | data                  |
// +------------+-----------------------+------------+----------------------+
type TowerFloor
{
    ushort LHSByteCount;
    ProtocolIdentifier ProtocolIdentifierData with BinaryEncoding{WidthForComposedType = LHSByteCount * 8};
    ushort RHSByteCount;
    RelatedOrAddressData[ProtocolIdentifierData] RelatedOrAddressData with BinaryEncoding{WidthForComposedType = RHSByteCount * 8};
        
    override string ToString()
    {
        string str = "";
        if (ProtocolIdentifierData is oid:OSIObjectIdentifier)
        {
            str += "OSIObjectIdentifier: " + oid.ToString();
        }
        else if (ProtocolIdentifierData is dyncPId:DynamicalGenerateProtocolIdentifier)
        {
            if (dyncPId.UUID == RpcDataRepresentationIdentifier)
            {
                str += "RPC Data Representation";
            }
            else
            {
                str += GetRPCUuidString(dyncPId.UUID);
            }
            
            str += " {" + dyncPId.UUID.ToString() + "}, Version: " + (dyncPId.Version.ToString()) + "." + (RelatedOrAddressData.ToString());
        }
        else if (ProtocolIdentifierData is id:byte)
        {
            str += EnumToString<SingleOctetIdentifier>(id);
            
            if (id == 0x0a)
            {
                str += ", Version: 4." + (RelatedOrAddressData.ToString());
            }
            else if (id == 0x0b)
            {
                str += ", Version: 5." + (RelatedOrAddressData.ToString());
            }
            else
            {
                str += ": " + RelatedOrAddressData.ToString();
            }
        }
        else
        {
            str = "Invalid Tower Floor";
        }
        
        return str;
    }
} with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

// Appendix I, it defines the encoding of Protocol Identifier and related data in Floor
pattern ProtocolIdentifier = 
    [|CurrentByte(stream) == 0x00|] (OSIObjectIdentifier | binary) |
    [|CurrentByte(stream) == 0x0d|] (DynamicalGenerateProtocolIdentifier | binary) |
    SingleOctetIdentifier;

// An octet string derived from OSI Object Identiﬁers (OIDs).
type OSIObjectIdentifier
{
    byte Prefix where value == 0x00;
    ObjectIdentifier ObjectIdentifier with Encoding{Decoder = Asn1BerDecoder<ObjectIdentifier>, SourcePattern = TypeOf<binary>()};
    
    override string ToString()
    {
        return ObjectIdentifier as string;
    }
} with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

// An octet string derived from an interface UUID combined with a version number
type DynamicalGenerateProtocolIdentifier
{
    byte Prefix where value == 0x0d;
    guid UUID;
    ushort Version;
    
    override string ToString()
    {
        return UUID as string;
    }
} with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

// Single octet registered identiﬁers
pattern SingleOctetIdentifier = enum byte
{
    $"OSI TP4"      = 0x05,
    $"OSI CLNS"     = 0x06,
    $"DOD TCP"      = 0x07,
    $"DOD UDP"      = 0x08,
    $"DOD IP"       = 0x09,
    $"RPC connectionless protocol" = 0x0a,
    $"RPC connection- oriented protocol" = 0x0b,
    $"DNA Session Control" = 0x02,
    $"DNA Session Control V3" = 0x03,
    $"DNA NSP Transpor" = 0x04,
    $"DNA Routing"  = 0x06,
    $"Named Pipes"  = 0x10,
    $"Microsoft NetBIOS" = 0x11,
    $"NetBEUI"      = 0x12,
    $"Netware SPX"  = 0x13,
    $"Netware IPX"  = 0x14,
    $"Appletalk Stream" = 0x16,
    $"Appletalk Datagram" = 0x17,
    $"Appletalk"    = 0x18,
    $"NetBIOS"      = 0x19,
    $"VINES SPP"    = 0x1A,
    $"VINES IPC"    = 0x1B,
    $"StreetTalk"   = 0x1C,
    $"Unix Domain socket" = 0x20,
    $"null"         = 0x21,
    $"NetBIOS name"      = 0x22,
    ...
} with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

type RelatedOrAddressData[ProtocolIdentifier Pid]
{
    ([|Pid is OSIObjectIdentifier || Pid is DynamicalGenerateProtocolIdentifier || 
            Pid is SingleOctetIdentifier.$"RPC connectionless protocol" || Pid is SingleOctetIdentifier.$"RPC connection- oriented protocol"|] ushort |
        [|Pid is SingleOctetIdentifier.$"DOD TCP" || Pid is SingleOctetIdentifier.$"DOD UDP"
            || Pid is SingleOctetIdentifier.$"VINES SPP" || Pid is SingleOctetIdentifier.$"VINES IPC"|] ushort |
        [|Pid is SingleOctetIdentifier.$"DOD IP"|] IPv4Address |
        [|Pid is SingleOctetIdentifier.$"Named Pipes" || Pid is SingleOctetIdentifier.$"Microsoft NetBIOS"
            || Pid is SingleOctetIdentifier.$"NetBEUI" || Pid is SingleOctetIdentifier.$"Netware SPX" || Pid is SingleOctetIdentifier.$"Netware IPX"|] string |
        binary) Data with BinaryEncoding{Endian = Endian.Big, TextEncoding = TextEncoding.ASCII};
    
    override string ToString()
    {
        return Data as string;
    }
}

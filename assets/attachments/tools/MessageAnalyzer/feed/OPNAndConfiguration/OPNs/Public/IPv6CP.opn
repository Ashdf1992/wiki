protocol IPv6CP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "IPv6 Control Protocol",
    ShortName = "IPv6CP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2472"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

using Standard;
using Utility;
using PPP;

endpoint Node over PPP.Node
    accepts Message;

autostart actor IPv6CPOverPPP(PPP.Node node)
{
    process node accepts p:PPP.Frame where GetPacketTypeValue(p.PacketType) == 0x8057
    {
        switch (p.Payload)
        {
            case msg:Message from BinaryDecoder<Message> =>
                dispatch (endpoint Node over node) accepts msg;
            default =>
                ThrowDecodingException("IPv6CP");
        }
    }
}

message Message
{
    Code Code;
    byte Identifier;
    ushort Length;
    array<Option> Options;
    override string ToString()
    {
        return (InRange<Code>(Code) ? "" : "Unknow Message Code: ") + EnumToString<IPv6CP.Code>(Code, false) + ", Length: " + (Length.ToString());
    }
}

pattern Code = enum byte
{
    //VendorSpecific = 0,
    ConfigureRequest = 1,
    ConfigureAck = 2,
    ConfigureNak = 3,
    ConfigureReject = 4,
    TerminateRequest = 5,
    TerminateAck = 6,
    CodeReject = 7,
    ...
};

pattern Option = (InterfaceIdentifier | CompressionProtocol);

type InterfaceIdentifier
{
    (byte where value == 1) Type;
    byte Length where value == 10;
    ulong InterfaceID;
}

type CompressionProtocol
{
    (byte where value == 2) Type;
    byte Length where value >= 14;
    ushort CompressionProtocol;
    binary Data with BinaryEncoding{Length =(Length - 4)};
}

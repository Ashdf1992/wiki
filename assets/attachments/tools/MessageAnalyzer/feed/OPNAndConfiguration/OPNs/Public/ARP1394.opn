protocol ARP1394 with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Serial Bus Address Resolution Protocol",
    ShortName = "ARP1394",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2734"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "356548", Date = "11/16/2013"}
        ]
};

using Standard;
using Utility;
using IP1394;
using IANA;

endpoint Node
    accepts Packet;

// ARP1394 over IP1394
autostart actor ARP1394OverIP1394(IP1394.Node node)
{
    process node accepts f:IP1394.Frame where ((f#EthernetType as ushort) is EtherType.ARP)
    {            
        switch (f.Payload)
        {
            case p:Packet from BinaryDecoder<Packet> =>
                dispatch endpoint Node accepts p;
            default => 
                ThrowDecodingException("ARP1394");
        }
    }
}    

message Packet
{
    ushort HardwareType;
    ushort ProtocolType;
    byte HWAddrLen;
    byte IPAddrLen;
    ushort OpCode;
    array<byte> SenderUniqueID with BinaryEncoding{Length = 8};
    byte SenderMaxRec;
    byte SSPD;
    ushort SenderUnicastFIFOHi;
    uint SenderUnicastFIFOLo;
    IPv4Address SenderIPAaddress;
    IPv4Address TargetIPAddress;
    
    override string ToString()
    {
        return OpCode(OpCode)
                  + ", SSPD:" + ARP1394SSPD(SSPD)
                  + ", SenderIP: " + SenderIPAaddress.ToString()
                  + ", TargetIP: " + TargetIPAddress.ToString();
    }
}

string OpCode(ushort opCode)
{
    switch (opCode)
    {
        case 1 => return "Request";
        case 2 => return "Response";
        default => return "Unknown OpCode: " + (opCode as string);
    }
}

string ARP1394SSPD(byte sspd)
{
    switch (sspd)
    {
        case 0  => return "S100";
        case 1  => return "S200";
        case 2  => return "S400";
        case 3  => return "S800";
        case 4  => return "S1600";
        case 5  => return "S3200";
        default => return "Unknown SSPD: " + (sspd as string);
    }
}

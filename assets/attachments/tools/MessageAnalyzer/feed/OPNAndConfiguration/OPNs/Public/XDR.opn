module XDR with
BinaryEncodingDefaults{Endian = Endian.Big, TextEncoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "External Data Representation Standard",
    ShortName = "XDR",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "RFC 4506"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

pattern XDRInt = int;

pattern XdrUnsignedInt = uint;

//pattern XDREnum = enum XDRInt{};

pattern XDRBool = enum XDRInt
{
    FALSE = 0,
    TRUE = 1
};

pattern XDRHyper = long;

pattern XDRUnsignedHyper = ulong;

type XDRFloat
{
    byte Sign with BinaryEncoding{Width = 1};
    byte Exponent;
    uint Fraction with BinaryEncoding{Width = 23};
}

type XDRDouble
{
    byte Sign with BinaryEncoding{Width = 1};
    byte Exponent with BinaryEncoding{Width = 11};
    ulong Fraction with BinaryEncoding{Width = 52};
}

type XDRQuadruple
{
    byte Sign with BinaryEncoding{Width = 1};
    byte Exponent with BinaryEncoding{Width = 15};
    binary Fraction with BinaryEncoding{Width = 112};
}

bool BinaryZeroBytes(binary binValue)
{
    int count = binValue.Count;
    for (int index = 0; index < count; index++)
    {
        if (binValue[index] != 0)
        {
            return false;
        }
    }
    return true;
}

type XdrOpaqueFixed[uint OpaqueLength]
{
    binary Value with BinaryEncoding{Length = OpaqueLength};
    binary Padding where ValidationCheck(BinaryZeroBytes(value), null, "Must be residual zero bytes to make the total byte count of the opaque object a multiple of four.") with BinaryEncoding{Length = ((4 - (OpaqueLength % 4)) % 4)};
}

type XdrOpaqueVariable
{
    uint Length;// where ValidationCheck(MaxOpaqueLength == 0 || value <= MaxOpaqueLength, null, "XDR: The Length in type XdrOpaqueVariable should be less than or equal to TD required MaxValue.");
    binary Value with BinaryEncoding{Length = Length};
    binary Padding where ValidationCheck(BinaryZeroBytes(value), null, "Must be residual zero bytes to make the total byte count of the opaque object a multiple of four.") with BinaryEncoding{Length = ((4 - (Length % 4)) % 4)};
}

type XDRString
{
    uint Length;// where ValidationCheck(MaxStringLength == 0 || value <= MaxStringLength, null, "Length of String should be less than TD required MaxValue or not set.");
    string Value with BinaryEncoding{Length = Length};
    binary Padding where ValidationCheck(BinaryZeroBytes(value), null, "Must be residual zero bytes to make the total byte count of the string object a multiple of four.") with BinaryEncoding{Length = ((4 - (Length % 4)) % 4)};
}

// Each element(T)'s size is a multiple of four bytes.
type XDRArrayFixed<T>[uint Length]
{
    array<T> Items with BinaryEncoding{Length = Length};
}

// Each element(T)'s size is a multiple of four bytes.
type XDRArrayVariable<T>[uint MaxArrayLength]
{
    uint Length where ValidationCheck(MaxArrayLength == 0 || value <= MaxArrayLength, null, "Length of Array should be less than TD required MaxValue or not set.");
    array<T> Items with BinaryEncoding{Length = Length};
}

type XDROptional<T>
{
    uint Opted where ValidationCheck(value == 0 || value == 1, null, "XDR optional data, opted should be zero or 1.");
    optional [|Opted == 1|] T OptedValue;
}

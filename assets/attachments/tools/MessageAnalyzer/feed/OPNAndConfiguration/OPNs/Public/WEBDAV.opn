protocol WEBDAV with 
XmlEncodingDefaults{Namespace = WebdavDavNamespace},
Documentation
{
    ProtocolName = "Web Distributed Authoring and Versioning",
    ShortName = "WEBDAV",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 4918"},
            new Reference{Name = "RFC 5689"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "360482", Date = "03/21/2014"}
        ]
};

using Standard;
using Utility;
using HTTP;

const string WebdavDavNamespace = "DAV:";

endpoint Server
    over HTTP.Server
    accepts PropFindMsg
    accepts PropertyUpdateMsg
    accepts MkcolMsg
    accepts LockInfoMsg
    issues MkcolResponseMsg
    issues PropMsg
    issues MultistatusMsg;
    
client endpoint Client connected to Server;

autostart actor WEBDAVOverHTTP(HTTP.Server server)
{
    bool IsWEBDAV = false;
    bool IsMkcol = false;
    bool IsLock = false;

    process server accepts p:HttpContract.Request where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
                && (p.Method == "PROPFIND")
    {
        IsWEBDAV = true;
        
        switch (p.Payload)
        {
            case m:PropFindType from XmlDecoder<PropFindType> =>
                PropFindMsg pr = new PropFindMsg{};
                pr.PropFind = m;
                dispatch (endpoint Server over server) accepts pr;
            default =>
                ThrowDecodingException("PROPFIND");
        }
    }
    
    process server accepts p:HttpContract.Request where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Method == "PROPPATCH")
    {
        IsWEBDAV = true;
        switch (p.Payload)
        {
            case pru:PropertyUpdateType from XmlDecoder<PropertyUpdateType> =>
                PropertyUpdateMsg pu = new PropertyUpdateMsg{};
                pu.PropertyUpdate = pru;
                dispatch (endpoint Server over server) accepts pu;
            default =>
                ThrowDecodingException("PROPPATCH");
        }
    }
    
    process server accepts p:HttpContract.Request where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Method == "MKCOL")
    {
        IsWEBDAV = true;
        IsMkcol = true;
        switch (p.Payload)
        {
            case ml:MkcolType from XmlDecoder<MkcolType> =>
                MkcolMsg mk = new MkcolMsg{};
                mk.Mkcol = ml;
                dispatch (endpoint Server over server) accepts mk;
            default =>
                ThrowDecodingException("MKCOL");
        }
    }
    
    process server accepts p:HttpContract.Request where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Method == "LOCK")
    {
        IsWEBDAV = true;
        IsLock = true;
        switch (p.Payload)
        {
            case l:LockInfoType from XmlDecoder<LockInfoType> =>
                LockInfoMsg li = new LockInfoMsg{};
                li.LockInfo = l;
                dispatch (endpoint Server over server) accepts li;
            default =>
                ThrowDecodingException("LOCK");
        }
    }
    
    process server issues p:HttpContract.Response where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Payload.Count > 0) && IsWEBDAV && (IsMkcol && p.StatusCode == 403)
    {
        switch (p.Payload)
        {
            case mp:MkcolResponseType from XmlDecoder<MkcolResponseType> =>
                    MkcolResponseMsg mr = new MkcolResponseMsg{};
                    mr.MkcolResponse = mp;
                    dispatch (endpoint Server over server) issues mr;
            default =>
                ThrowDecodingException("MkcolResponse");
        }
        IsWEBDAV = false;
        IsMkcol = false;
    }
    
    process server issues p:HttpContract.Response where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Payload.Count > 0) && IsWEBDAV && (IsLock && p.StatusCode == 200)
    {
        switch (p.Payload)
        {
            case pt:PropType from XmlDecoder<PropType> =>
                    PropMsg po = new PropMsg{};
                    po.Prop = pt;
                    dispatch (endpoint Server over server) issues po;
            default =>
                ThrowDecodingException("Prop");
        }
        IsWEBDAV = false;
        IsLock = false;
    }
    
    process server issues p:HttpContract.Response where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && (p.Payload.Count > 0) && IsWEBDAV && (p.StatusCode == 207)
    {
        switch (p.Payload)
        {
            case mu:MultistatusType from XmlDecoder<MultistatusType> =>
                MultistatusMsg ms = new MultistatusMsg{};
                ms.Multistatus = mu;
                dispatch (endpoint Server over server) issues ms;
            default =>
                ThrowDecodingException("Multistatus");
        }
        IsWEBDAV = false;
    }
}
    
set<string> Methods = { "PROPFIND", "PROPPATCH", "MKCOL", "COPY", "MOVE", "LOCK", "UNLOCK", "DELETE"};
    

message PropFindMsg
{
    PropFindType PropFind with XmlEncoding{Name = "propfind"};
    
    override string ToString()
    {
        return "PropFind Message";
    }
}

message PropertyUpdateMsg
{
    PropertyUpdateType PropertyUpdate with XmlEncoding{Name = "propertyupdate"};
    
    override string ToString()
    {
        return "PropertyUpdate Message";
    }
}

message MkcolMsg
{
    MkcolType Mkcol with XmlEncoding{Name = "mkcol"};
    
    override string ToString()
    {
        return "Mkcol Message";
    }
}

message LockInfoMsg
{
    LockInfoType LockInfo with XmlEncoding{Name = "lockInfo"};
    
    override string ToString()
    {
        return "LockInfo Message";
    }
}
message MkcolResponseMsg
{
    MkcolResponseType MkcolResponse with XmlEncoding{Name = "mkcolResponse"};
    
    override string ToString()
    {
        return "MkcolResponse Message";
    }
}

message MultistatusMsg
{
    MultistatusType Multistatus with XmlEncoding{Name = "multistatus"};
    
    override string ToString()
    {
        return "Multistatus Message";
    }
}

message PropMsg
{
    PropType Prop with XmlEncoding{Name = "prop"};
    
    override string ToString()
    {
        return "Prop Message";
    }
}

type PropFindType
{
    optional PropName PropName with XmlEncoding{Name = "propname"};
    optional AllProp AllProp with XmlEncoding{Name = "allprop"};
    optional Include Include with XmlEncoding{Name = "include"};
    optional PropType Prop with XmlEncoding{Name = "prop"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type MultistatusType
{
    array<Response> Response with XmlEncoding{Name = "response", Namespace = WebdavDavNamespace};
    optional ResponseDescription ResponseDescription with XmlEncoding{Name = "responsedescription"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type PropertyUpdateType
{
    // Future Reference: Use Or Pattern to match definition: <!ELEMENT propertyupdate (remove | set)+ > need parse use "array<Remove|Set> Elements" or choice.
    // WORKAROUND: RunTime not support, so use optional array<> to parse.
    optional array<Remove> Remove with XmlEncoding{Name = "remove", Namespace = WebdavDavNamespace};
    optional array<Set> Set with XmlEncoding{Name = "set", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}


// RFC 5689 5.1.  mkcol XML Element
type MkcolType
{
    array<Set> Set with XmlEncoding{Name = "set", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}
    
// RFC 5689 5.2.  mkcol-response XML Element
type MkcolResponseType
{
    array<PropStat> PropStat with XmlEncoding{Name = "propstat", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type LockInfoType
{
    LockScope LockScope with XmlEncoding{Name = "lockscope"};
    LockType LockType with XmlEncoding{Name = "locktype"};
    optional Owner Owner with XmlEncoding{Name = "owner"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}
    
type PropType
{
    optional GetContentLength GetContentLength with XmlEncoding{Name = "getcontentlength"};
    optional CreationData CreationData with XmlEncoding{Name = "creationdate"};
    optional DisplayName DisplayName with XmlEncoding{Name = "displayname"};
    optional GetContentLanguage GetContentLanguage with XmlEncoding{Name = "getcontentlanguage"};
    optional GeteTag GeteTag with XmlEncoding{Name = "getetag"};
    optional GetLastModified GetLastModified with XmlEncoding{Name = "getlastmodified"};
    optional LockDiscovery LockDiscovery with XmlEncoding{Name = "lockdiscovery"};
    optional ResourceType ResourceType with XmlEncoding{Name = "resourcetype"};
    optional SupportedLock SupportedLock with XmlEncoding{Name = "supportedlock "};
    optional GetContentType GetContentType with XmlEncoding{Name = "getcontenttype"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// activelock XML Element
type ActiveLock
{
    optional LockScope LockScope with XmlEncoding{Name = "lockscope"};
    optional LockType LockType with XmlEncoding{Name = "locktype"};
    optional Depth Depth with XmlEncoding{Name = "depth"};
    optional Owner Owner with XmlEncoding{Name = "owner"};
    optional TimeOut TimeOut with XmlEncoding{Name = "timeout"};
    optional LockToken LockToken with XmlEncoding{Name = "locktoken"};
    optional LockRoot LockRoot with XmlEncoding{Name = "lockroot"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// allprop XML Element
type AllProp
{
    // Empty body.
}

// collection XML Element
type Collection
{
    // Empty body.
}

//depth XML Element
type Depth
{
    DepthE Data with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

pattern DepthE = enum string
{
    Depth0 = "0",
    Depth1 = "1",
    Infinity = "infinity"
};

// error XML Element
// <!ELEMENT error ANY >
//
type Error
{
    optional LockTokenMatchesRequestUri LockTokenMatchesRequestUri with XmlEncoding{Name = "lock-token-matches-request-uri"};
    optional LockTokenSubmitted LockTokenSubmitted with XmlEncoding{Name = "lock-token-submitted"};
    optional NoConflictingLock NoConflictingLock with XmlEncoding{Name = "no-conflicting-lock"};
    optional NoExternalEntities NoExternalEntities with XmlEncoding{Name = "no-external-entities"};
    optional PreservedLiveProperties PreservedLiveProperties with XmlEncoding{Name = "preserved-live-properties"};
    optional PropfindFiniteDepth PropfindFiniteDepth with XmlEncoding{Name = "propfind-finite-depth"};
    optional CannotModifyProtectedProperty CannotModifyProtectedProperty with XmlEncoding{Name = "cannot-modify-protected-property"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// lock-token-matches-request-uri
type LockTokenMatchesRequestUri
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// lock-token-submitted
type LockTokenSubmitted
{
    array<Href> Href with XmlEncoding{Name = "href", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// no-conflicting-lock
type NoConflictingLock
{
    optional array<Href> Href with XmlEncoding{Name = "href", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// no-external-entities
type NoExternalEntities
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// preserved-live-properties
type PreservedLiveProperties
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// propfind-finite-depth
type PropfindFiniteDepth
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// cannot-modify-protected-property
type CannotModifyProtectedProperty
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// exclusive XML Element
type Exclusive
{
    // Empty body.
}

// href XML Element
type Href
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// include XML Element 
// <!ELEMENT include ANY >
//
type Include
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// location XML Element
type Location
{
    Href Href with XmlEncoding{Name = "href"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// lockentry XML Element
type LockEntry
{
    LockScope LockScope with XmlEncoding{Name = "lockscope"};
    LockType LockType with XmlEncoding{Name = "locktype"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// lockroot XML Element
type LockRoot
{
    Href Href with XmlEncoding{Name = "href"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// lockscope XML Element
type LockScope
{
    optional Exclusive Exclusive with XmlEncoding{Name = "exclusive"};
    optional Shared Shared with XmlEncoding{Name = "shared"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// locktoken XML Element
type LockToken
{
    Href Href  with XmlEncoding{Name = "href"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// locktype XML Element
type LockType
{
    Write Write with XmlEncoding{Name = "write"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// owner XML Element
type Owner
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// propname XML Element
type PropName
{
    // Empty body.
}

// propstat XML Element
type PropStat
{
    PropType Prop with XmlEncoding{Name = "prop"};
    Status Status with XmlEncoding{Name = "status"};
    optional Error Error with XmlEncoding{Name = "error"};
    optional ResponseDescription ResponseDescription with XmlEncoding{Name = "responsedescription"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// remove XML Element
type Remove
{
    PropType Prop  with XmlEncoding{Name = "prop"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// response XML Element
type Response
{
    array<Href> Href with XmlEncoding{Name = "href", Namespace = WebdavDavNamespace};
    optional Status Status with XmlEncoding{Name = "status"};
    array<PropStat> PropStat with XmlEncoding{Name = "propstat", Namespace = WebdavDavNamespace};
    optional Error Error with XmlEncoding{Name = "error"};
    optional ResponseDescription ResponseDescription with XmlEncoding{Name = "responsedescription"};
    optional Location Location with XmlEncoding{Name = "location"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// responsedescription XML Element
type ResponseDescription
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// set XML Element
type Set
{
    PropType Prop with XmlEncoding{Name = "prop"};
    optional ResourceType ResourceType with XmlEncoding{Name = "resourcetype"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// shared XML Element
type Shared
{
    //Empty body.
}

// status XML Element
type Status
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// timeout XML Element
type TimeOut
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// write XML Element
type Write
{
    //Empty body.
}

// creationdate Property
type CreationData
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// displayname Property
type DisplayName
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// getcontentlanguage Property
type GetContentLanguage
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// getcontentlength Property
type GetContentLength
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// getcontenttype Property
type GetContentType
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// getetag Property
type GeteTag
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}
// getlastmodified Property
type GetLastModified
{
    string Data with XmlEncoding{Kind = XmlKind.Text};
}

// lockdiscovery Property
type LockDiscovery
{
    array<ActiveLock> ActiveLock with XmlEncoding{Name = "activelock", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
};

// resourcetype Property
type ResourceType
{
    optional Collection Collection with XmlEncoding{Name = "collection"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// supportedlock Property
type SupportedLock
{
    array<LockEntry> LockEntry with XmlEncoding{Name = "lockentry", Namespace = WebdavDavNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}


protocol OVSDB with
JsonEncodingDefaults{},
Documentation
{
    ProtocolName = "Open vSwitch Database Management Protocol",
    ShortName = "OVSDB",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 7047", Link = "http://tools.ietf.org/html/rfc7047"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "368948", Date = "10/08/2014"}
        ]
};

using IANA;
using Standard;
using Utility;
using TCP;
using JSONRPC;
using PublicResources;
using Diagnostics;

endpoint Server over TCP.Server
    provides Messages consumes Messages
    provides VirtualOperations;

set<string> OVSDBNotificationMethodNames = {"cancel", "update", "locked", "stolen"};

autostart actor OVSDBOverTCP(TCP.Server server)
{
    JSONRPCOverTCPDecodingHelper decodingHelper = null;

    process server accepts s:TCP.Segment
        where s.DestinationPort == IANA.Port.OVSDB
    {
        if (decodingHelper == null)
        {
            decodingHelper = new JSONRPCOverTCPDecodingHelper();
            decodingHelper.InitializeJSONRPCOverTCPDecodingHelper("OVSDB", endpoint OVSDB.Server over server, ref OVSDBNotificationMethodNames, DecodeOVSDBRequestMessage, DecodeOVSDBResponseMessage);
        }
        decodingHelper.TryDecode(s, MessageDirection.Accepts);
    }

    process server issues s:TCP.Segment 
        where s.SourcePort == IANA.Port.OVSDB
    {
        if (decodingHelper == null)
        {
            decodingHelper = new JSONRPCOverTCPDecodingHelper();
            decodingHelper.InitializeJSONRPCOverTCPDecodingHelper("OVSDB", endpoint OVSDB.Server over server, ref OVSDBNotificationMethodNames, DecodeOVSDBRequestMessage, DecodeOVSDBResponseMessage);
        }
        decodingHelper.TryDecode(s, MessageDirection.Issues);
    }

    // Below rules are added in case that TCP mistakes the Client for Server by port number for the trace without TCP 3-way handshake.
    process server issues s:TCP.Segment
        where server.isMissingThreeWayHandshake && s.DestinationPort == IANA.Port.OVSDB
    {
        if (decodingHelper == null)
        {
            decodingHelper = new JSONRPCOverTCPDecodingHelper();
            decodingHelper.InitializeJSONRPCOverTCPDecodingHelper("OVSDB", endpoint OVSDB.Server over server, ref OVSDBNotificationMethodNames, DecodeOVSDBRequestMessage, DecodeOVSDBResponseMessage);
        }
        decodingHelper.TryDecode(s, MessageDirection.Accepts);
    }

    process server accepts s:TCP.Segment
        where server.isMissingThreeWayHandshake && s.SourcePort == IANA.Port.OVSDB
    {
        if (decodingHelper == null)
        {
            decodingHelper = new JSONRPCOverTCPDecodingHelper();
            decodingHelper.InitializeJSONRPCOverTCPDecodingHelper("OVSDB", endpoint OVSDB.Server over server, ref OVSDBNotificationMethodNames, DecodeOVSDBRequestMessage, DecodeOVSDBResponseMessage);
        }
        decodingHelper.TryDecode(s, MessageDirection.Issues);
    }

    ~endpoint(TCP.Server server)
    {
        if (decodingHelper != null)
        {
            decodingHelper.ClearInDestructor();
            decodingHelper = null;
        }
    }
}

optional any message DecodeOVSDBRequestMessage(string method, json js)
{
    optional any message result;
    switch (method)
    {
        case "list_dbs" =>
            result = DecodeMessage<Messages.ListDatabasesRequest>(js);
        case "get_schema" =>
            result = DecodeMessage<Messages.GetSchemaRequest>(js);
        case "transact" =>
            result = DecodeMessage<Messages.TransactRequest>(js);
        case "cancel" =>
            result = DecodeMessage<Messages.Cancel>(js);
        case "monitor" =>
            result = DecodeMessage<Messages.MonitorRequest>(js);
        case "update" =>
            result = DecodeMessage<Messages.UpdateNotification>(js);
        case "monitor_cancel" =>
            result = DecodeMessage<Messages.MonitorCancellationRequest>(js);
        case "lock" =>
            result = DecodeMessage<Messages.LockOperationsRequest>(js);
        case "steal" =>
            result = DecodeMessage<Messages.LockOperationsRequest>(js);
        case "unlock" =>
            result = DecodeMessage<Messages.LockOperationsRequest>(js);
        case "locked" =>
            result = DecodeMessage<Messages.LockNotification>(js);
        case "stolen" =>
            result = DecodeMessage<Messages.StolenNotification>(js);
        case "echo" =>
            result = DecodeMessage<Messages.EchoRequest>(js);
        default =>
            result = nothing;
    }
    return result;
}

optional any message DecodeOVSDBResponseMessage(any message request, json js)
{
    optional any message result;
    switch (request)
    {
        case Messages.ListDatabasesRequest =>
            result = DecodeMessage<Messages.ListDatabasesResponse>(js);
        case Messages.GetSchemaRequest =>
            result = DecodeMessage<Messages.GetSchemaResponse>(js);
        case transactRequest:Messages.TransactRequest =>
            result = DecodeMessage<Messages.TransactResponse[transactRequest]>(js);
        case Messages.MonitorRequest =>
            result = DecodeMessage<Messages.MonitorResponse>(js);
        case Messages.MonitorCancellationRequest =>
            result = DecodeMessage<Messages.MonitorCancellationResponse>(js);
        case Messages.LockOperationsRequest =>
            result = DecodeMessage<Messages.LockOperationsResponse>(js);
        case Messages.EchoRequest =>
            result = DecodeMessage<Messages.EchoResponse>(js);
        default =>
            result = nothing;
    }
    return result;
}

optional T DecodeMessage<T>(json s)
{
    if (JsonDecoder<T>(s) is result:T)
    {
        return result;
    }
    else
    {
        return nothing;
    }
}

contract Messages
{
    // 4.1.1.  List Databases
    message ListDatabasesRequest
    {
        string method;
        array<json> params where ValidationCheck((params.Count == 0), this, DiagnosisLevel.Warning, OVSDB_EmtpyArray);
        any id;

        override string ToString()
        {
            return "List Databases Request";
        }
    }

    message ListDatabasesResponse
    {
        array<DBName> result;
        int? $"error";
        any id;

        override string ToString()
        {
            return "List Databases Response";
        }
    }

    // 4.1.2.  Get Schema
    message GetSchemaRequest
    {
        string method;
        array<DBName> params;
        any id;

        override string ToString()
        {
            return "Get Schema Request";
        }
    }

    // the response object or the error response
    message GetSchemaResponse
    {
        (databaseSchema | Error | int?) result;
        (string | int?) $"error";
        any id;

        override string ToString()
        {
            return "Get Schema Response";
        }
    }

    // 4.1.3.  Transact
    message TransactRequest
    {
        string method;
        optional array<OperationRequest | DBName | json> params with Encoding{Decoder = DecodeOperationRequestArray, SourcePattern = TypeOf<any>()}; // WORKAROUND: Pef bug #79826
        any id;

        override string ToString()
        {
            return "Transact Request";
        }
    }

    message TransactResponse[Messages.TransactRequest Request]
    {
        optional (array<OperationResponse | json> | array<json>) result with Encoding{Decoder = (any anyJson) => DecodeOperationResponseArray(anyJson, Request), SourcePattern = TypeOf<any>()};
        (string | int?) $"error";
        any id;

        override string ToString()
        {
            return "Transact Response";
        }
    }
    
    // 4.1.4.  Cancel
    message Cancel
    {
        string method;
        array<json> params;
        int? id;

        override string ToString()
        {
            return "Cancel Notification";
        }
    }

    // 4.1.5.  Monitor
    message MonitorRequest
    {
        string method;
        MonitorParams params with Encoding{Decoder = MonitorParamsDecoder, SourcePattern = TypeOf<any>()};
        any id;

        override string ToString()
        {
            return "Monitor Request";
        }
    }

    message MonitorResponse
    {
        TableUpdates result with Encoding{Decoder = TableUpdatesDecoder, SourcePattern = TypeOf<any>()};
        int? $"error";
        any id;

        override string ToString()
        {
            return "Monitor Response";
        }
    }

    // 4.1.6.  Update Notification
    message UpdateNotification
    {
        string method;
        UpdateParams params with Encoding{Decoder = UpdateParamsDecoder, SourcePattern = TypeOf<any>()};
        int? id;

        override string ToString()
        {
            return "Update Notification";
        }
    }

    // 4.1.7.  Monitor Cancellation
    message MonitorCancellationRequest
    {
        string method;
        array<json> params;
        any id;

        override string ToString()
        {
            return "Monitor Cancellation Request";
        }
    }

    message MonitorCancellationResponse
    {
        (any | int?) result;
        (string | int?) $"error";
        any id;

        override string ToString()
        {
            return "Monitor Cancellation Response";
        }
    }
    
    // 4.1.8.  Lock Operations
    message LockOperationsRequest
    {
        string method;
        array<id> params;
        any id;

        override string ToString()
        {
            return "Lock Operations Request";
        }
    }

    message LockOperationsResponse
    {
        (locked | any) result;
        int? $"error";
        any id;

        override string ToString()
        {
            return "Lock Operations Response";
        }
    }

    // 4.1.9.  Lock Notification
    message LockNotification
    {
        string method;
        array<id> params;
        int? id;

        override string ToString()
        {
            return "Lock Notification";
        }
    }

    // 4.1.10.  Stolen Notification
    message StolenNotification
    {
        string method;
        array<id> params;
        int? id;

        override string ToString()
        {
            return "Stolen Notification";
        }
    }

    // 4.1.11.  Echo
    message EchoRequest
    {
        string method;
        array<json> params;
        any id;

        override string ToString()
        {
            return "Echo Request";
        }
    }

    message EchoResponse
    {
        array<json> result;
        int? $"error";
        any id;

        override string ToString()
        {
            return "Echo Response";
        }
    }
}
// 4.1.8.  Lock Operations
type locked
{
    bool locked;
}

// 4.1.6.  Update Notification
type UpdateParams
{
    // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
    // any JsonValue;
    string JsonValue;
    TableUpdates TableUpdates;
}

optional UpdateParams UpdateParamsDecoder(any anyValue)
{
    if (anyValue is tempJs:json && (tempJs.Children is jsArray:array<json>) && 
        (jsArray.Count == 2) && (jsArray[0] is jsonValue:json) && (jsArray[1] is tableUpdatesJson:json))
    {
        UpdateParams result = new UpdateParams();

        // UpdateParams.JsonValue
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        // any JsonValue;
        if (jsonValue.InnerJsonValue is jsonStr:string)
            result.JsonValue = jsonStr;

        // UpdateParams.TableUpdates
        if (TableUpdatesDecoder(tableUpdatesJson) is val:TableUpdates)
            result.TableUpdates = val;
        return result;
    }
    else
        return nothing;
}

type TableUpdates
{
    map<string, (TableUpdate | json)> TableUpdates;
}

optional TableUpdates TableUpdatesDecoder(any anyValue)
{
    if (MapDecoder<TableUpdate>(anyValue, (json js) => TableUpdateDecoder(js)) is val:map<string, (TableUpdate | json)>)
        return new TableUpdates{TableUpdates = val};
    else
        return nothing;
}

type TableUpdate
{
    map<string, (RowUpdate | json)> TableUpdate;
}

optional TableUpdate TableUpdateDecoder(any anyValue)
{
    if (MapDecoder<RowUpdate>(anyValue, (json js) => JsonDecoder(js)) is val:map<string, (RowUpdate | json)>)
        return new TableUpdate{TableUpdate = val};
    else
        return nothing;
}

type RowUpdate
{
    optional map<string, (Value | json)> old with Encoding{Decoder = (any anyValue) => MapDecoder<Value>(anyValue, (json js) => ValueDecoder(js)), SourcePattern = TypeOf<any>()};
    optional map<string, (Value | json)> $"new" with Encoding{Decoder = (any anyValue) => MapDecoder<Value>(anyValue, (json js) => ValueDecoder(js)), SourcePattern = TypeOf<any>()};
}

// 4.1.5.  Monitor
type MonitorParams
{
    DBName DBName;
    // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
    // any JsonValue;
    string JsonValue;
    map<string, (MonitorRequest | json)> MonitorRequests;
}

type MonitorRequest
{
    optional array<column> columns;
    optional MonitorSelect $"select";
}

type MonitorSelect
{
    optional bool initial;
    optional bool insert;
    optional bool $"delete";
    optional bool modify;
}

optional MonitorParams MonitorParamsDecoder(any anyValue)
{
    if (anyValue is tempJs:json && (tempJs.Children is jsArray:array<json>) && 
        (jsArray.Count == 3) && (jsArray[0] is dbNameJson:json) && (jsArray[1] is jsonValue:json) && (jsArray[2] is monitorRequestsJson:json))
    {
        MonitorParams result = new MonitorParams();
        // MonitorParams.DBName
        if (JsonDecoder<DBName>(dbNameJson) is dbName:DBName)
            result.DBName = dbName;

        // MonitorParams.JsonValue
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        // any JsonValue;
        if (jsonValue.InnerJsonValue is jsonStr:string)
            result.JsonValue = jsonStr;

        // MonitorParams.MonitorRequests
        if (MapDecoder<MonitorRequest>(monitorRequestsJson, (json js) => JsonDecoder<MonitorRequest>(js)) is val:map<string, (MonitorRequest | json)>)
            result.MonitorRequests = val;
        return result;
    }
    else
        return nothing;
}

// 5.2.  Operations
pattern OperationRequest = Insert | Select | Update | Mutate | Delete | Wait | Commit | Abort | Comment | Assert;
pattern OperationResponse = InsertResult | SelectResult | UpdateResult | MutateResult | DeleteResult | WaitResult | CommitResult | AbortResult | CommentResult | AssertResult | Error | int?;

optional array<OperationRequest | DBName | json> DecodeOperationRequestArray(any anyValue)
{
    if (anyValue is anyJson:json && anyJson.Children is jsArray:array<json>)
    {
        array<OperationRequest | DBName | json> result = [];
        if ((jsArray.Count > 0) && JsonDecoder<DBName>(jsArray[0]) is name:DBName)
            result += [name];
        for (int index = 1; index < jsArray.Count; index++)
        {
            json js = jsArray[index];
            if (js.GetChild(new TreedataName{LocalName = "op"}) is op:json)
            {
                switch (op.Value)
                {
                    case "insert" =>
                        result += [DecodeOneOperationRequest<Insert>(js)];
                    case "select" =>
                        result += [DecodeOneOperationRequest<Select>(js)];
                    case "update" =>
                        result += [DecodeOneOperationRequest<Update>(js)];
                    case "mutate" =>
                        result += [DecodeOneOperationRequest<Mutate>(js)];
                    case "delete" =>
                        result += [DecodeOneOperationRequest<Delete>(js)];
                    case "wait" =>
                        result += [DecodeOneOperationRequest<Wait>(js)];
                    case "commit" =>
                        result += [DecodeOneOperationRequest<Commit>(js)];
                    case "abort" =>
                        result += [DecodeOneOperationRequest<Abort>(js)];
                    case "comment" =>
                        result += [DecodeOneOperationRequest<Comment>(js)];
                    case "assert" =>
                        result += [DecodeOneOperationRequest<Assert>(js)];
                    default =>
                        result += [js];
                        ValidationCheck(false, null, DiagnosisLevel.Warning, () => Format(OVSDB_UnknownOp, op.Value as string));
                }
            }
            else
                result += [js];
        }
        return result;
    }
    else
        return nothing;
}

(T | json) DecodeOneOperationRequest<T>(json js)
{
    (T | json)  result;
    if (JsonDecoder<T>(js) is temp:T)
        result = temp;
    else
        result = js;
    return result;
}

optional (array<OperationResponse | json> | array<json>) DecodeOperationResponseArray(any anyValue, Messages.TransactRequest request)
{
    if (anyValue is anyJson:json && (anyJson.Children is jsArray:array<json>))
    {
        array<OperationResponse | json> result = [];
        if (request.params is operations:array<OperationRequest | json>)
        {
            int index = 0;
            while ((index + 1 < operations.Count) && (index < jsArray.Count))
            {
                var op = operations[index + 1];
                json js = jsArray[index];
                switch (op)
                {
                    case Insert =>
                        result += [DecodeOneOperationResponse<InsertResult>(js)];
                    case Select =>
                        result += [DecodeOneOperationResponse<SelectResult>(js)];
                    case Update =>
                        result += [DecodeOneOperationResponse<UpdateResult>(js)];
                    case Mutate =>
                        result += [DecodeOneOperationResponse<MutateResult>(js)];
                    case Delete =>
                        result += [DecodeOneOperationResponse<DeleteResult>(js)];
                    case Wait =>
                        result += [DecodeOneOperationResponse<WaitResult>(js)];
                    case Commit =>
                        result += [DecodeOneOperationResponse<CommitResult>(js)];
                    case Abort =>
                        result += [DecodeOneOperationResponse<AbortResult>(js)];
                    case Comment =>
                        result += [DecodeOneOperationResponse<CommentResult>(js)];
                    case Assert =>
                        result += [DecodeOneOperationResponse<AssertResult>(js)];
                    default =>
                        result += [js];
                }
                index++;
            }

            while (index < jsArray.Count)
            {
                json js = jsArray[index];
                if (JsonDecoder<Error>(js) is temp:Error)
                    result += [temp];
                else
                    result += [js];
                index++;
            }
        }
        else
        {
            return jsArray;
        }
        return result;
    }
    else
        return nothing;
}

(T | Error | int? | json) DecodeOneOperationResponse<T>(json js)
{
    (T | Error | int? | json)  result;
    if (JsonDecoder<T>(js) is temp1:T)
        result = temp1;
    else if (JsonDecoder<Error>(js) is temp2:Error)
        result = temp2;
    else if (JsonDecoder<NullWrapper>(js) is temp3:NullWrapper)
        result = temp3.nullValue;
    else
        result = js;
    return result;
}

type NullWrapper
{
    int? nullValue with Standard.JsonEncoding{SkipWrapping = true};
}
// 5.2.1.  Insert
type Insert
{
    string op;
    table table;
    map<string, (Value | json)> row with Encoding{Decoder = (any anyValue) => MapDecoder<Value>(anyValue, (json js) => ValueDecoder(js)), SourcePattern = TypeOf<any>()};
    optional id $"uuid-name";
}

type InsertResult
{
    atom uuid with Encoding{Decoder = AtomDecoder, SourcePattern = TypeOf<any>()};
}

// 5.2.2.  Select
type Select
{
    string op;
    table table;
    array<condition | json> $"where" with Encoding{Decoder = (any any1) => ArrayDecoder<condition>(any1, (any any2) => ConditionDecoder(any2)), SourcePattern = TypeOf<any>()};
    optional array<column> columns;
}
type SelectResult
{
    array<map<string, (Value | json)> | json> rows with Encoding{Decoder = (any any1) => ArrayDecoder<map<string, (Value | json)>>(any1, (any any2) => MapDecoder<Value>(any2, (json js) => ValueDecoder(js))), SourcePattern = TypeOf<any>()};
}

// 5.2.3.  Update
type Update
{
    string op;
    table table;
    array<condition | json> $"where" with Encoding{Decoder = (any any1) => ArrayDecoder<condition>(any1, (any any2) => ConditionDecoder(any2)), SourcePattern = TypeOf<any>()};
    map<string, (Value | json)> row with Encoding{Decoder = (any anyValue) => MapDecoder<Value>(anyValue, (json js) => ValueDecoder(js)), SourcePattern = TypeOf<any>()};
}
type UpdateResult
{
    double count;
}

// 5.2.4.  Mutate
type Mutate
{
    string op;
    table table;
    array<condition | json> $"where" with Encoding{Decoder = (any any1) => ArrayDecoder<condition>(any1, (any any2) => ConditionDecoder(any2)), SourcePattern = TypeOf<any>()};
    array<mutation | json> mutations with Encoding{Decoder = (any any1) => ArrayDecoder<mutation>(any1, (any any2) => MutationDecoder(any2)), SourcePattern = TypeOf<any>()};
}
type MutateResult
{
    double count;
}

// 5.2.5.  Delete
type Delete
{
    string op;
    table table;
    array<condition | json> $"where" with Encoding{Decoder = (any any1) => ArrayDecoder<condition>(any1, (any any2) => ConditionDecoder(any2)), SourcePattern = TypeOf<any>()};
}
type DeleteResult
{
    double count;
}

// 5.2.6.  Wait
type Wait
{
    string op;
    optional double timeout;
    table table;
    array<condition | json> $"where" with Encoding{Decoder = (any any1) => ArrayDecoder<condition>(any1, (any any2) => ConditionDecoder(any2)), SourcePattern = TypeOf<any>()};
    optional array<column> columns;
    until until;
    array<map<string, (Value | json)> | json> rows with Encoding{Decoder = (any any1) => ArrayDecoder<map<string, (Value | json)>>(any1, (any any2) => MapDecoder<Value>(any2, (json js) => ValueDecoder(js))), SourcePattern = TypeOf<any>()};
}
pattern until = enum string
{
    $"==" = "==",
    $"!=" = "!=",
    ...
};
type WaitResult
{
    optional string $"error";
}

// 5.2.7.  Commit
type Commit
{
    string op;
    bool durable;
}
type CommitResult
{
    optional string $"error";
}

// 5.2.8.  Abort
type Abort
{
    string op;
}
type AbortResult
{
    optional string $"error";
}

// 5.2.9.  Comment
type Comment
{
    string op;
    string comment;
}
type CommentResult
{
}

// 5.2.10.  Assert
type Assert
{
    string op;
    id lock;
}
type AssertResult
{
    optional string $"error";
}

// 5.1.  Notation
pattern DBName       = id;
pattern table        = id;
pattern column       = id;

pattern Value = Set | Map | atom;

type Set
{
    string $"set" with Encoding{Ignore = true};
    array<atom | json> values with Encoding{Ignore = true};
}

type Map
{
    string $"map" with Encoding{Ignore = true};
    array<pair> values with Encoding{Ignore = true};
}

type PairArrayWrapper
{
    array<pair> pairArray with Standard.JsonEncoding{SkipWrapping = true};
}

type pair
{
    array<atom | json> pair with Encoding{Decoder = (any any1) => ArrayDecoder<atom>(any1, AtomDecoder), SourcePattern = TypeOf<any>()}
                            with JsonEncoding{SkipWrapping = true};
}

pattern atom = uuid | NamedUuid | array<string> | decimal | bool | string;

type atomWrapper
{
    (decimal | bool | string) atomValue with Standard.JsonEncoding{SkipWrapping = true};
}

optional atom AtomDecoder(any anyValue)
{
    optional atom result = nothing;
    if (anyValue is js:json)
    {
        if (JsonDecoder<array<string>>(js) is stringArray:array<string> && stringArray.Count == 2 && stringArray[0] is name:string)
        {
            if (name == "uuid")
                result = new uuid{uuid = name, $"value" = stringArray[1]};
            else if (name == "named-uuid")
                result = new NamedUuid{NamedUuid = name, $"value" = stringArray[1]};
            else
                result = stringArray;
        }
        else if (JsonDecoder<atomWrapper>(js) is val:atomWrapper)
        {
            result = val.atomValue;
        }
    }
    return result;
}

type uuid
{
    string uuid;
    string $"value";
}

type NamedUuid
{
    string NamedUuid;
    string $"value";
}

type condition
{
    // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
    //(string | any) column;
    //(function | any) function;
    //(Value | any) $"value";
    string column;
    function function;
    Value $"value";
}

pattern function = enum string
{
    $"<"     = "<",
    $"<="    = "<=",
    $"=="    = "==",
    $"!="    = "!=",
    $">="    = ">=",
    $">"     = ">",
    includes = "includes",
    excludes = "excludes",
    ...
};

optional condition ConditionDecoder(any anyValue)
{
    if (anyValue is tempJs:json && (tempJs.Children is jsArray:array<json>) && 
        (jsArray.Count == 3) && (jsArray[0] is colJson:json) && (jsArray[1] is funJson:json) && (jsArray[2] is valJson:json))
    {
        condition result = new condition();
        if (JsonDecoder<string>(colJson) is col:string)
            result.column = col;
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        //else
            //result.column = colJson;
        
        if (JsonDecoder<function>(funJson) is fun:function)
            result.function = fun;
        //else
            //result.function = funJson;

        if (ValueDecoder(valJson) is val:Value)
            result.$"value" = val;
        //else
            //result.$"value" = valJson;
        return result;
    }
    else
        return nothing;
}

pattern mutator = enum string
{
    $"+="     = "+=",
    $"-="     = "-=",
    $"*="     = "*=",
    $"/="     = "/=",
    $"%="     = "%=",
    insert    = "insert",
    $"delete" = "delete",
    ...
};

type mutation
{
    // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
    //(string | any) column;
    //(mutator | any) mutator;
    //(Value | any) $"value";
    string column;
    mutator mutator;
    Value $"value";
}

optional mutation MutationDecoder(any anyValue)
{
    if (anyValue is tempJs:json && (tempJs.Children is jsArray:array<json>) && 
        (jsArray.Count == 3) && (jsArray[0] is colJson:json) && (jsArray[1] is mutJson:json) && (jsArray[2] is valJson:json))
    {
        mutation result = new mutation();
        if (JsonDecoder<string>(colJson) is col:string)
            result.column = col;
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        //else
            //result.column = colJson;
        
        if (JsonDecoder<mutator>(mutJson) is mut:mutator)
            result.mutator = mut;
        //else
            //result.mutator = mutJson;

        if (ValueDecoder(valJson) is val:Value)
            result.$"value" = val;
        //else
            //result.$"value" = valJson;
        return result;
    }
    else
        return nothing;
}
/*
For example:
    [elementA, elementB]
*/
optional array<T | json> ArrayDecoder<T>(any anyValue, (optional T)(any) elementDecoder)
{
    if (anyValue is anyJson:json)
    {
        array<T | json> result = [];
        if (anyJson.Children is jsArray:array<json>)
        {
            foreach (json js in jsArray)
            {
                if (elementDecoder(js) is val:T)
                    result += [val];
                else
                    result += [js];
            }
        }
        return result;
    }
    else
        return nothing;
}
/*
For example:
    {
    key1:value1,
    key2:value2
    }
*/
optional map<string, (T | json)> MapDecoder<T>(any anyValue, (optional T)(json) mapValueDecoder)
{
    if (anyValue is jsArray:json)
    {
        map<string, (T | json)> result = {}.ToOrdered();
        foreach (json js in jsArray.Children)
        {
            if (js.Name is name1:TreedataName && js.InnerJsonValue is str:string && mapValueDecoder(BuildJson(str)) is val:T)
                result[name1.LocalName] = val;
            else if (js.Name is name2:TreedataName)
                result[name2.LocalName] = BuildJson(js.InnerJsonValue as string);
        }
        return result;
    }
    else
        return nothing;
}

optional Value ValueDecoder(any anyValue)
{
    optional Value result = nothing;
    if (anyValue is tempJs:json)
    {
        if (tempJs.Children is jsArray:array<json> &&
            (jsArray.Count == 2) && jsArray[0].Value is name:string && jsArray[1].InnerJsonValue is temp:string)
        {
            if ((name == "set") && ArrayDecoder<atom>(BuildJson(temp), AtomDecoder) is val1:array<atom | json>)
                result = new Set{$"set" = "set", values = val1};
            else if ((name == "map") && JsonDecoder<PairArrayWrapper>(temp) is wrapper3:PairArrayWrapper)
                result = new Map{$"map" = "map", values = wrapper3.pairArray};
            else if (name == "uuid")
                result = new uuid{uuid = name, $"value" = temp};
            else if (name == "named-uuid")
                result = new NamedUuid{NamedUuid = name, $"value" = temp};
        }
        else if (AtomDecoder(tempJs) is val2:atom)
        {
            result = val2;
        }
    }
    return result;
}

contract VirtualOperations
{
    // 4.1.1.  List Databases
    issues virtual operation ListDatabases
    {
        in string method = meth;
        in string id = identifier;
        in array<json> params = par;
        out array<DBName> result = res;
        out int? $"error" = err;

        override string ToString()
        {
            return "List Databases";
        }
    } =
    accepts Messages.ListDatabasesRequest{((id as json).Value as string) is var identifier, method is var meth, params is var par}
    issues Messages.ListDatabasesResponse{((id as json).Value as string) == identifier, result is var res, $"error" is var err};

    // 4.1.2.  Get Schema
    issues virtual operation GetSchema
    {
        in string method = methodName;
        in string id = identifier;
        in array<DBName> params = par;
        out (databaseSchema | Error | int?) result = res;
        out (string | int?) $"error" = err;

        override string ToString()
        {
            return "Get Schema";
        }
    } = GetSchemaScenario[out var methodName, out var identifier, out var par, out var res, out var err];
    
    // 4.1.3.  Transact
    issues virtual operation Transact
    {
        in string method = methodName;
        in string id = identifier;
        in optional array<OperationRequest | json> params = par;
        out optional (array<OperationResponse | json> | array<json>) result = res;
        out (string | int?) $"error" = err;

        override string ToString()
        {
            return method;
        }
    } = TransactScenario[out var methodName, out var identifier, out var par, out var res, out var err];

    // 4.1.5.  Monitor
    issues virtual operation Monitor
    {
        string method = meth;
        string id = identifier;
        MonitorParams params = par;
        TableUpdates result = res;
        int? $"error" = err;

        override string ToString()
        {
            return "Monitor";
        }
    } =
    accepts Messages.MonitorRequest{((id as json).Value as string) is var identifier, method is var meth, params is var par}
    issues Messages.MonitorResponse{((id as json).Value as string) == identifier, result is var res, $"error" is var err};

    // 4.1.7.  Monitor Cancellation
    issues virtual operation MonitorCancellation
    {
        string method = meth;
        string id = identifier;
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        //array<json> params = par;
        //(any | int?) result = res;
        (string | int?) $"error" = err;

        override string ToString()
        {
            return "Monitor Cancellation";
        }
    } =
    accepts Messages.MonitorCancellationRequest{((id as json).Value as string) is var identifier, method is var meth, params is var par}
    issues Messages.MonitorCancellationResponse{((id as json).Value as string) == identifier, result is var res, $"error" is var err};

    // 4.1.8.  Lock Operations
    issues virtual operation LockOperations
    {
        string method = meth;
        string id = identifier;
        array<id> params = par;
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        // (locked | any) result = res;
        int? $"error" = err;

        override string ToString()
        {
            return "Lock Operations";
        }
    } =
    accepts Messages.LockOperationsRequest{((id as json).Value as string) is var identifier, method is var meth, params is var par}
    issues Messages.LockOperationsResponse{((id as json).Value as string) == identifier, result is var res, $"error" is var err};

    // 4.1.11.  Echo
    virtual operation Echo
    {
        string method = methodName;
        string id = identifier;
        // WORKAROUND: Pef bug #79826: Runtime don't deal with array<json>/any correctly
        //array<json> params = par;
        //array<json> result = res;
        int? $"error" = err;

        override string ToString()
        {
            return "Echo";
        }
    } = EchoScenario[out var methodName, out var identifier, out var par, out var res, out var err];
}

// ------------------------------------------
// Scenario
scenario GetSchemaScenario[out string methodName, out string identifier, out array<DBName> par, out (databaseSchema | any) res, out (int? | string) err] =
    backtrack(Messages.GetSchemaRequest{})
    accepts Messages.GetSchemaRequest{((id as json).Value as string) is identifier, method is methodName, params is par}
    later
    issues Messages.GetSchemaResponse{((id as json).Value as string) == identifier, result is res, $"error" is err};

scenario TransactScenario[out string methodName, out string identifier, out optional array<OperationRequest | json> par, out optional (array<OperationResponse | json> | array<json>) res, out (string | int?) err] =
    backtrack(Messages.TransactRequest{})
    accepts Messages.TransactRequest{((id as json).Value as string) is identifier, "Transact" is methodName, params is par}
    later
    (
        accepts Messages.Cancel{(params.Count > 0) && (params[0] as string == identifier), "Transact, Canceled" is methodName}
    )?
    later
    issues Messages.TransactResponse{((id as json).Value as string) == identifier, result is res, $"error" is err};

scenario EchoScenario[out string methodName, out string identifier, out array<json> par, out array<json> res, out int? err] =
    backtrack(Messages.EchoRequest{})
    accepts Messages.EchoRequest{((id as json).Value as string) is identifier, method is methodName, params is par}
    later
    issues Messages.EchoResponse{((id as json).Value as string) == identifier, result is res, $"error" is err};

// 3.2.  Schema Format
type databaseSchema
{
    id name;
    version version;
    optional string cksum;
    map<string, (tableSchema | json)> tables with Encoding{Decoder = (any anyValue) => MapDecoder<tableSchema>(anyValue, (json js) => JsonDecoder<tableSchema>(js)), SourcePattern = TypeOf<any>()};
}

type tableSchema
{
    map<string, (columnSchema | json)> columns with Encoding{Decoder = (any anyValue) => MapDecoder<columnSchema>(anyValue, (json js) => JsonDecoder<columnSchema>(js)), SourcePattern = TypeOf<any>()};
    optional long maxRows;
    optional bool isRoot;
    optional array<columnSet> indexes;
}

type columnSet
{
    array<string> column with Standard.JsonEncoding{SkipWrapping = true};
}

type columnSchema
{
    $"type" $"type";
    optional bool ephemeral;
    optional bool $"mutable";
}

pattern $"type" = typeJson | atomicType;

type typeJson
{
    (baseType | atomicType) key;
    optional (baseType | atomicType) $"value";
    optional long min;
    optional (long | string) max;
}

pattern atomicType = enum string
{
    integer = "integer",
    real    = "real",
    boolean  = "boolean",
    $"string" = "string",
    uuid = "uuid",
    ...
};

type baseType
{
    atomicType $"type";
    optional Value $"enum" with Encoding{Decoder = ValueDecoder, SourcePattern = TypeOf<any>()};
    optional long minInteger;
    optional long maxInteger;
    optional double minReal;
    optional double maxReal;
    optional long minLength;
    optional long maxLength;
    optional id refTable;
    optional string refType;
}

// 3.1.  JSON Usage
pattern id           = string;
pattern version      = string;
type Error
{
    string $"error";
    optional string details;
}

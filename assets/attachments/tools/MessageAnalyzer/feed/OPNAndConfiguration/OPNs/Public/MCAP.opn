protocol MCAP with
    BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Multicast channel allocation protocol",
    ShortName = "MCAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2734"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

using Standard;
using Utility;
using IP1394;

endpoint Node
    accepts Message;
    
autostart actor MCAPOverIP1394(IP1394.Node node)
{
    process node accepts f:IP1394.Frame where f#EthernetType != nothing && f#EthernetType == 0x8861// 0x8861 is the Ethertype of MCAP Datagram. 
    {
        switch (f.Payload)
        {
            case m:Message from BinaryDecoder<Message> =>
                dispatch (endpoint Node) accepts m;
            default =>
                ThrowDecodingException("MCAP");
        }
    }
}


message Message
{
    ushort Length;
    byte Reserved;
    byte OpCode where ValidationCheck(value <= 1, null, "OpCode must be zero or 1.");
    MSGData MessageData;
    
    override string ToString()
    {
        string summary;
        summary = "Message Length: " + Length.ToString() + ", OpCode: ";
        if (OpCode == 0)
        {
            summary += "Advertise, Speed: ";
            switch (MessageData.Speed) 
            {
                case 0 => summary += "S100";
                case 1 => summary += "S200";
                case 2 => summary += "S400";
                case 3 => summary += "S800";
                case 4 => summary += "S1600";
                case 5 => summary += "S3200";
                default => summary += "Unknown Value(" + (MessageData.Speed.ToString()) + ")";
            }
        }
        else if (OpCode == 1)
        {
            summary += "Solicit";
        }
        else
        {
            summary += "Unknown(" + (OpCode.ToString()) + ")";
        }
        return summary;
    }
}

type MSGData
{
    byte DataLength;
    byte Type;
    ushort Reserved0 where ValidationCheck(value == 0, null, "Reserved must be zero.");
    byte Expiration;
    byte Channal where ValidationCheck(value <= 63 && value >=0, null, "MCAP: The Channel in type MSGData must be at least zero and no greater than 63 in the range zero to 63 inclusive.");
    byte Speed;
    byte Reserved1 where ValidationCheck(value == 0, null, "Reserved must be zero.");
    uint BandWidth where ValidationCheck(value == 0, null, "This field must be zero.");
    optional [|(DataLength - 12) / 4 > 0|] array<IPv4Address> GroupAddress with BinaryEncoding{Length = (DataLength - 12) / 4};
};

protocol AARP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "AppleTalk Address Resolution Protocol",
    ShortName = "AARP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "AARP", Link = "http://www.protocols.com/pbook/appletalk.htm#AARP"},
            new Reference{Name = "RFC 1742"},
            new Reference{Name = "The Networker's Guide to AppleTalk,IPX and NetBIOS", Link = "http://ptgmedia.pearsoncmg.com/images/0735709777/samplechapter/0735709777.pdf"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "379377", Date = "06/25/2015"}
        ]
};

using Standard;
using Ethernet;
using SNAP;
using Utility;

endpoint Node over Ethernet.Node | over SNAP.Node accepts AARP.Packet;

// Since Bug 36618, change all the "binding" to actor temporarily.
//binding AARPOverEthernet: AARP.Node over node:Ethernet.Node
//{
    //rule node accepts Frame{LengthOrType is $33011, MacClientData is p:AARP.Packet from BinaryDecoder<AARP.Packet>}
        //=>AARP.Node accepts p;
//}
//
//binding AARPOverSNAP: AARP.Node over node:SNAP.Node
//{
    //rule node accepts SNAP.Segment{EtherType is $33011, Payload is p:AARP.Packet from BinaryDecoder<AARP.Packet>}
        //=>AARP.Node accepts p;
//}

autostart actor AARPOverEthernet(Ethernet.Node node)
{
    process node accepts f:Ethernet.Frame where f.LengthOrType == 33011
    {
        switch (f.MacClientData)
        {
            case p:Packet from BinaryDecoder<Packet> =>
                dispatch (endpoint Node over node) accepts p;
            default => 
                ThrowDecodingException("AARP", "Packet");
        }
    }
}

autostart actor AARPOverSNAP(SNAP.Node node)
{
    process node accepts s:SNAP.Segment where s.EtherType == 33011
    {
        switch (s.Payload)
        {
            case p:Packet from BinaryDecoder<Packet> =>
                dispatch (endpoint Node over node) accepts p;
            default => 
                ThrowDecodingException("AARP", "Packet");
        }
    }
}

message Packet
{
    ushort HardwareType;
    ushort ProtocolType;
    byte HardwareAddressLen where ValidationCheck(value == 6, this, "Length in bytes of the hardware address field is 6.");
    byte ProtocolAddressLen where ValidationCheck(value == 4, this, "Length in bytes of the protocol address field is 4.");
    ushort Function;
    HardwareAddress SourceHardwareAddress;
    AppleTalkAddress SourceAppleTalkAddress;
    HardwareAddress DestinationHardwareAddress;
    AppleTalkAddress DestinationAppleTalkAddress;
    
    override string ToString()
    {
        switch (Function)
        {
            case 1 =>
                return "Request, " + (SourceAppleTalkAddress as string) + " ask for " + (DestinationAppleTalkAddress as string);
            case 2 =>
                return "Response, " + (SourceAppleTalkAddress as string) + " at " + (DestinationAppleTalkAddress as string);
            case 3 =>
                return "Probe, Does " + (DestinationAppleTalkAddress as string) + " exists?";
            default =>
                return "Unknown AARP";
        }
    }
}

type HardwareAddress
{
    binary Octets with BinaryEncoding{Length = 6};
}

type AppleTalkAddress
{
    binary Octets with BinaryEncoding{Length = 4};
}

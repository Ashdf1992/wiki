protocol SDP with
StreamEncodingDefaults{Encoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "SDP: Session Description Protocol",
    ShortName = "SDP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 4566"},
            new Reference{Name = "RFC 2327"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "381980", Date = "10/13/2015"},
        ]
};

using Standard;
using Utility;
using SIP;

endpoint Server
    over SIP.Server
    accepts SessionDescription issues SessionDescription;
    
client endpoint Client connected to Server;

autostart actor SDPServerOverSIPServer(SIP.Server server)
{
    process server issues res:SIP.Response where res.Body != nothing && res.GetSIPContentType() != null && (res.GetSIPContentType() as SIP.HeaderFieldType).Value.Contains("application/sdp")
    {
        MessageDecoderAndDispatcher(res.Body as binary, IssuesDispatcher, server);
    }
    process server accepts req:SIP.Request where req.Body != nothing && req.GetSIPContentType() != null && (req.GetSIPContentType() as SIP.HeaderFieldType).Value.Contains("application/sdp")
    {
        MessageDecoderAndDispatcher(req.Body as binary, AcceptsDispatcher, server);
    }
}

// Future Reference: Add actor over RTSP when the protocol available.

void AcceptsDispatcher(SessionDescription f, SIP.Server server)
{
    dispatch (endpoint Server over server) accepts f;
}

void IssuesDispatcher(SessionDescription f, SIP.Server server)
{
    dispatch (endpoint Server over server) issues f;
}

void MessageDecoderAndDispatcher(stream s, void (SessionDescription, SIP.Server) dispatcher, SIP.Server server)
{
    optional SessionDescription f = SessDescription(s);
    if (f != nothing)
    {
        dispatcher(f as SessionDescription, server);
    }
    else
    {
        ThrowDecodingException("SDP");
    }
}

message SessionDescription
{
    string ProtoVersion;
    OriginFieldType OriginField;
    string SessionNameField;
    optional string InformationField;
    optional string UriField;
    optional EmailAddressType EmailFields;
    optional PhoneNumberType PhoneFields;
    optional ConnectionFieldType ConnectionField;
    optional string BandwidthFields;
    string TimeFields;
    optional string KeyField;
    optional array<AttributeFieldType> AttributeFields;
    optional array<MediaDescriptionType> MediaDescriptions;
    
    override string ToString()
    {
        return "Name: " + SessionNameField + 
            ", Version: " + ProtoVersion + 
            (MediaDescriptions == [] ? "" : (", MediaDescriptions: " + ConvertMediaDescriptionsTypeArrayToString(MediaDescriptions)));
    }
}

string ConvertMediaDescriptionsTypeArrayToString(optional array<MediaDescriptionType> arr)
{
    string str = "";
    array<MediaDescriptionType> arr2 = arr as array<MediaDescriptionType>;
    foreach (MediaDescriptionType cur in arr2)
    {
        str += cur.MediaField + " - ";
    }
    return str;
}

syntax SessDescription   = s1:ProtoVersion s2:OriginField s3:SessionNameField 
                              s4:InformationField s5:UriField s6:EmailFields s7:PhoneFields s8:ConnectionField
                              s9:BandwidthFields s10:TimeFields s11:KeyField s12:AttributeFields s13:MediaDescriptions
                                => new SessionDescription
                                {
                                    ProtoVersion              = s1,
                                    OriginField               = s2,
                                    SessionNameField          = s3,
                                    InformationField          = (s4.Count == 0 ? nothing : s4[0]),
                                    UriField                  = (s5.Count == 0 ? nothing : s5[0]),
                                    EmailFields               = (s6.Count == 0 ? nothing : s6[0]),
                                    PhoneFields               = (s7.Count == 0 ? nothing : s7[0]),
                                    ConnectionField           = (s8.Count == 0 ? nothing : s8[0]),
                                    BandwidthFields           = (s9.Count == 0 ? nothing : ConvertStringArrayToString(s9)),
                                    TimeFields                = s10,
                                    KeyField                  = (s11.Count == 0 ? nothing : s11[0]),
                                    AttributeFields           = (s12.Count == 0 ? nothing : s12),
                                    MediaDescriptions         = s13,
                                };

syntax ProtoVersion         = "v=" s:Digits CRLF => s;
syntax OriginField          = "o=" s1:UserName SP s2:SessId SP 
                                s3:SessVersion SP s4:NetType SP s5:AddrType 
                                SP s6:UnicastAddress CRLF
                                => new OriginFieldType
                                {
                                    UserName              = s1,
                                    SessionId             = s2,
                                    SessionVersion        = s3,
                                    NetType               = s4,
                                    AddressType           = s5,
                                    UnicastAddress        = s6,
                                };
syntax SessionNameField     = "s=" s:Text CRLF => s;
syntax InformationField     = s:("i=" s1:Text CRLF => s1)? => s;
syntax UriField             = s:("u=" s1:SIP.Uri CRLF => s1)? => s;
syntax EmailFields          = ("e=" s:EmailAddress CRLF => new EmailAddressType{EmailAddress = s})*;
syntax PhoneFields          = ("p=" s:PhoneNumber CRLF => new PhoneNumberType{PhoneNumber = s})*;
/* WORKAROUND: This is optional field. Avoid endless roop in MediaDescriptions, and defind it as common syntax here.
 * Bug #32185 - Endless loop occurs for someSyntax* when someSyntax is optional
 */
syntax ConnectionField      = s:("c=" s1:NetType SP s3:AddrType SP s5:ConnectionAddress CRLF 
                                => new ConnectionFieldType
                                {
                                    NetType            = s1,
                                    AddressType        = s3,
                                    ConnectionAddress  = s5,
                                })? => s;
syntax BandwidthFields      = s:("b=" s1: BWType s2:":" s3:Bandwidth CRLF => (s1 + s2 + s3))* => s;
syntax TimeFields           = s1:("t=" s11:StartTime s12:SP s13:StopTime
                                  s14:RepeatFieldsReg* CRLF // s14:(CRLF s41:RepeatFields => s41)* CRLF
                                    => ("Start Time:" + s11 + s12 + "Stop Time:" + s13 + ConvertStringArrayToString(s14)))+ 
                              s2:(s21:ZoneAdjustments CRLF => s21)?
                                => (ConvertStringArrayToString(s1) + (s2.Count == 0 ? "" : s2[0]));
syntax RepeatFields         = "r=" s1:RepeatInterval s2:SP s3:TypedTime s4:(s41:SP s42:TypedTime => (s41 + s42))+
                              => (s1 + s2 + s3 + ConvertStringArrayToString(s4));
// WORKAROUND: Bug #28338 - BytePosition doesnot move back, if match first sub-syntax successfully, but second sub-syntax failed.
syntax RepeatFieldsReg      = s:regex{[\x0D][\x0A][r][=][1-9][0-9]*[\x64\x68\x6D\x73]?[ ][0-9]+[\x64\x68\x6D\x73]?} => s;

syntax ZoneAdjustments      = "z=" s1:Time s2:SP s3:"-"? s4:TypedTime 
                              s5:(s51:SP s52:Time s53:SP s54:"-"? s55:TypedTime 
                                => (s51 + s52 + s53 + (s54.Count == 0 ? "" : s54[0]) + s55))* 
                              => (s1 + s2 + (s3.Count == 0 ? "" : s3[0]) + s4 + ConvertStringArrayToString(s5));
syntax KeyField             = s:("k=" s1:KeyType CRLF => s1)? => s;

syntax AttributeFields      = ("a=" s1:Attribute CRLF => new AttributeFieldType{Attribute = s1})*;

syntax MediaDescriptions    = (s1:MediaField s2:InformationField s3:ConnectionField s4:BandwidthFields s5:KeyField s6:AttributeFields
                                => new MediaDescriptionType
                                {
                                    MediaField         = s1,
                                    InformationField   = (s2.Count == 0 ? nothing : s2[0]),
                                    ConnectionFields   = (s3.Count == 0 ? nothing : s3[0]),
                                    BandwidthFields    = (s4.Count == 0 ? nothing : ConvertStringArrayToString(s4)),
                                    KeyField           = (s5.Count == 0 ? nothing : s5[0]),
                                    AttributeFields    = (s6.Count == 0 ? nothing : s6),
                                })*;
syntax MediaField           = "m=" s1:Media s2:SP s3:Port 
                                 s4:(s41:"/" s42:Integer => (s41 + s42))? s5:SP s6:Proto 
                                 s7:(s71:SP s72:FMT => (s71 + s72))+ CRLF 
                              => (s1 + s2 + s3 + (s4.Count == 0 ? "" : s4[0]) + s5 + s6 + ConvertStringArrayToString(s7));
syntax UserName             = NonWSString;
syntax SessId               = regex{[A-Za-z0-9]+};
syntax SessVersion          = Digits;
syntax NetType              = Token;
syntax AddrType             = Token;
syntax EmailAddress         = s:(AddressAndComment | DispNameAndAddress | SIP.AddrSpec) => s;
syntax AddressAndComment    = s1:SIP.AddrSpec s2:SP+ s3:"(" s4:EmailSafe+ s5:")" 
                                => (s1 + ConvertStringArrayToString(s2) + s3 + ConvertStringArrayToString(s4) + s5);
syntax DispNameAndAddress   = s1:EmailSafe+ s2:SP+ s3:"(" s4:EmailSafe+ s5:")" 
                                => (ConvertStringArrayToString(s1) + ConvertStringArrayToString(s2) + s3 + ConvertStringArrayToString(s4) + s5);
syntax PhoneNumber          = s:(s1:(s11:Phone s12:SP* s13:"(" s14:EmailSafe+ 
                                    => (s11 + ConvertStringArrayToString(s12) + s13 + ConvertStringArrayToString(s14))) | 
                                 s2:(s21:EmailSafe+ s22:"<" s23:Phone s24:">" 
                                    => (ConvertStringArrayToString(s21) + s22 + s23 + s24))                             | 
                                 Phone) => s;
syntax Phone                = s1:"+"? s2:Digit s3:regex{[ 0-9\x2D]+} => ((s1.Count == 0 ? "" : s1[0]) + s2 + s3); // phone = ["+"] DIGIT 1*(SP / "-" / DIGIT)
syntax ConnectionAddress    = s:(MulticastAddress | UnicastAddress) => s;
syntax BWType               = Token;
syntax Bandwidth            = Digits;
syntax StartTime            = s:("0" | Time) => s;
syntax StopTime             = s:("0" | Time) => s;
syntax Time                 = s1:PosDigit s2:regex{[0-9]{9}[0-9]*} => (s1 + s2);
syntax RepeatInterval       = s1:PosDigit s2:regex{[0-9]*} s3:FixedLenTimeUnit? => (s1 + s2 + (s3.Count == 0 ? "" : s3[0]));
syntax TypedTime            = s1:Digits s2:FixedLenTimeUnit? => (s1 + (s2.Count == 0 ? "" : s2[0]));
syntax FixedLenTimeUnit     = regex{[\x64\x68\x6D\x73]};
syntax KeyType              = s:("prompt" | 
                                 s1:(s11:"clear:" s12:Text => (s11 + s12))    | 
                                 s2:(s21:"base64:" s22:Base64 => (s21 + s22)) | 
                                 s3:(s31:"uri:" s32:SIP.Uri => (s31 + s32))) => s;
syntax Base64               = s1:Base64Unit* s2:(Base64Pad)? => (ConvertStringArrayToString(s1) + (s2.Count == 0 ? "" : s2[0]));
syntax Base64Unit           = regex{[a-zA-Z0-9+/]{4}};
syntax Base64Pad            = s:(s1:(s11:regex{[a-zA-Z0-9+/]{3}} s12:"=" => (s11 + s12)) | s2:(s21:regex{[a-zA-Z0-9+/]{2}} s22:"==" 
                              => (s21 + s22))) => s;
syntax Base64Char           = regex{[a-zA-Z0-9+/]}; // base64-char =         ALPHA / DIGIT / "+" / "/"
// Bug#28338 - BytePosition doesnot move back, if match first sub-syntax successfully, but second sub-syntax failed.
syntax Attribute            = s:(s1:(s11:AttField s12:":" s13:AttValue => (s11 + s12 + s13)) | AttField) => s;
syntax AttField             = s:Token => s;
syntax AttValue             = s: ByteString => s;
syntax Media                = s:Token => s;
syntax FMT                  = s:Token => s;
syntax Proto                = s1:Token s2:(s21:"/" s22:Token => (s21 + s22))* => (s1 + ConvertStringArrayToString(s2));
syntax UnicastAddress       = s:(ExtnAddr | FQDN | IPv6Address | IPv4Address) => s;
syntax MulticastAddress     = s:(ExtnAddr | FQDN | IP6Multicast | IP4Multicast) => s;
syntax IP4Multicast         = s1:M1 s2:DecimalUchar3 s3:"/" s4:TTL s5:(s51:"/" s52:Integer => (s51 + s52))? 
                              => (s1 + s2 + s3 + s4 + (s5.Count == 0? "" : s5[0]));
syntax DecimalUchar3        = s1:"." s2:DecimalUchar
                              s3:"." s4:DecimalUchar
                              s5:"." s6:DecimalUchar => (s1 + s2 + s3 + s4 + s5 + s6);
syntax M1                   = s:( s1:(s11:"22" s12:("4" | "5" | "6" | "7" | "8" | "9") => (s11 + s12)) |
                                  s2:(s21:"23" s22:Digit => (s21 + s22))) => s;
syntax IP6Multicast         = s1: HexPart s2:(s21:"/" s22:Integer => (s21 + s22))? => (s1 + (s2.Count == 0 ? "" : s2[0]));
syntax TTL                  = s1:PosDigit s2:regex{[0-9]{0,2}} => (s1 + (s2 == null ? "" : s2));
syntax FQDN                 = s:((s1:(s11:AlphaNum s12:AlphaNum s13:AlphaNum s14:AlphaNum 
                              => (s11 + s12 + s13 + s14)) => s1) | "-" | ".") => s;
syntax IPv4Address          = s1:B1 s2:DecimalUchar3 => (s1 + s2);
syntax B1                   = s: DecimalUchar => s;
syntax ExtnAddr             = s:NonWSString;
syntax ByteChar             = s:regex{[\x01-\x09\x0B-\x0C\x0E-\xFF]} => s;
syntax ByteString           = s:ByteChar+ => ConvertStringArrayToString(s);
syntax Text                 = ByteString;
syntax NonWSString          = s:(VChar | regex{[\x80-\xFF]})+ => ConvertStringArrayToString(s);
syntax Token                = s:TokenChar+ => ConvertStringArrayToString(s);
syntax TokenChar            = s:regex{[\x21\x23-\x27\x2A-\x2B\x2D-\x2E\x30-\x39\x41-\x5A\x5E-\x7E]} => s;
syntax EmailSafe            = s:regex{[\x01-\x09\x0B-\x0C\x0E-\x27\x2A-\x3B\x3D\x3F-\xFF]} => s;
syntax Integer              = s:regex{[1-9][0-9]*} =>s;
syntax PosDigit             = s:regex{[1-9]} => s;

// Bug #28338 - BytePosition doesnot move back, if match first sub-syntax successfully, but second sub-syntax failed.
syntax DecimalUchar = s:(s1:"2" s2:"5" s3:("0" | "1" | "2" | "3" | "4" | "5")  => (s1 + s2 + s3)   | 
                         s4:"2" s5:("0" | "1" | "2" | "3" | "4") s6:Digit  => (s4 + s5 + s6)       | 
                         s7:"1" s8:regex{[0-9][0-9]+}                           => (s7 + s8)        | 
                         s9:PosDigit s10:Digit                              => (s9 + s10)           | 
                         Digit)          => s;
syntax VChar                = s:regex{[\x21-\x7e]} => s;
syntax IPv6Reference        = s1:"[" s2:IPv6Address s3:"]" => (s1 + s2 + s3);
syntax IPv6Address          = s1:HexPart s2:(s21:":" s22:IPv4Address => (s21 + s22))? => (s1 + (s2.Count == 0 ? "" : s2[0]));
syntax HexPart              = s1:HexSeq => s1
                                | s2:(s21:HexSeq s22:"::" s23:HexSeq? => (s21 + s22 + (s23.Count == 0 ? "" : s23[0]))) => s2
                                | s3:(s31:"::" s32:HexSeq? => (s31 + (s32.Count == 0 ? "" : s32[0]))) => s3;
syntax HexSeq               = s1:Hex4 s2:(s22:":" s23:Hex4 => (s22 + s23))* => (s1 + ConvertStringArrayToString(s2));

syntax Hex4                 = s:regex{[0-9A-Fa-f]{1,4}} => s;
syntax Port                 = s:Digit+ => ConvertStringArrayToString(s);
syntax AlphaNum             = s:(Alpha | Digit) => s;

// Future Reference:  bug #32183, need move common syntaxs to ABNF.opn
syntax Digit                = s:regex{[0-9]} => s;
syntax Digits               = s:regex{[0-9]+} => s;
syntax Alpha                = s:(UpAlpha | LoAlpha) => s;
syntax UpAlpha              = s:regex{[A-Z]} => s;
syntax LoAlpha              = s:regex{[a-z]} => s;
syntax SP                   = s:" " => s;
syntax CRLF                 = regex{[\x20]*}"\r\n";

type OriginFieldType
{
    string UserName;
    string SessionId;
    string SessionVersion;
    string NetType;
    string AddressType;
    string UnicastAddress;
}

type ConnectionFieldType
{
    string NetType;
    string AddressType;
    string ConnectionAddress;
}

type AttributeFieldType
{
    string Attribute;
}

type MediaDescriptionType
{
    string MediaField;
    optional string InformationField;
    optional ConnectionFieldType ConnectionFields;
    optional string BandwidthFields;
    optional string KeyField;
    optional array<AttributeFieldType> AttributeFields;
}

type EmailAddressType
{
    string EmailAddress;
}

type PhoneNumberType
{
    string PhoneNumber;
}

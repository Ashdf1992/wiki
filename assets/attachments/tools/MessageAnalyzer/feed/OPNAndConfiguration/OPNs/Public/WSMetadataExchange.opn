protocol WSMetadataExchange with 
XmlEncodingDefaults{Namespace = WSMetadataExchangeNamespace},
Documentation
{
    ProtocolName = "Web Services Metadata Exchange",
    ShortName = "WSMetadataExchange",
    Description = "Web Services Metadata Exchange (WS-MetadataExchange)"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSMetadataExchange", Version = "1.1.0", Link = "http://specs.xmlsoap.org/ws/2004/09/mex/WS-MetadataExchange.pdf"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="361425", Date="03/26/2014"}
        ]
};

using Utility;
using SOAP;
using XSD;
using Technologies.SOAP;

endpoint Server
    over IntermidiateServer
    provides OperationContract;
client endpoint Client connected to Server;

// Intermidiate layer
endpoint IntermidiateServer 
    over SOAP.Server 
    provides MessageContract;
client endpoint IntermidiateClient connected to IntermidiateServer;

autostart actor OperationActor(IntermidiateServer node)
{    
    MessageContract.GetMetadataRequest request = null;
    
    // request
    process node accepts req:MessageContract.GetMetadataRequest 
    {
        if (request == null)
        {
            request = req;
        }
        else
        {
            ValidationCheck(false, request, "Incomplete GetMetadata operation due to missing response.");
            DisplayTopLevelMessage(request);
            request = req;
        }
    }
    
    // response
    process node issues res:MessageContract.GetMetadataResponse
    {
        if (request == null)
        {
            ValidationCheck(false, res, "Incomplete GetMetadata operation due to missing request.");
            reject;
        }
        else
        {
            var getMetadata = new OperationContract.GetMetadata
                            {
                                Dialect = request.GetMetadata.Dialect,
                                Identifier = request.GetMetadata.Identifier,
                                AnyAttribute1 = request.GetMetadata.AnyAttribute,
                                
                                MetadataSection = res.Metadata.MetadataSection,
                                AnyElement = res.Metadata.AnyElement,
                                AnyAttribute2 = res.Metadata.AnyAttribute
                            };
            getMetadata.Origins = [request as any message, res as any message];
            request = null;
            dispatch (endpoint Server over node) accepts getMetadata;
        }
    }
}

// Operation contract
contract OperationContract
    with XmlEncodingDefaults{Namespace = WSMetadataExchangeNamespace}
{
    accepts operation GetMetadata
    {
        in optional XSAnyURI Dialect;
        in optional XSAnyURI Identifier;
        in optional array<xml> AnyAttribute1 with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other}; 
        out MetadataSectionType MetadataSection with XmlEncoding{Name = "MetadataSection"};
        out optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
        out optional array<xml> AnyAttribute2 with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
        
        override string ToString()
        {
            return "WSMetadataExchange.GetMetadata Operation";
        }
    } with SoapMessageInfo{
                Action = WSMetadataExchangeGetmetadataAction,
                ReplyAction = WSMetadataExchangeGetmetadataResponseAction};
}

autostart actor MessageActor(SOAP.Server node)
{
    // request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSMetadataExchangeGetmetadataAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.GetMetadataRequest from XmlDecoder<MessageContract.GetMetadataRequest> =>
                dispatch (endpoint IntermidiateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSMetadataExchange, Request");
        }
    }
    // response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSMetadataExchangeGetmetadataResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.GetMetadataResponse from XmlDecoder<MessageContract.GetMetadataResponse> =>
                dispatch (endpoint IntermidiateServer over node) issues m;
            default =>
                ThrowDecodingException("WSMetadataExchange, Response");
        }
    }
}

// Message contract
contract MessageContract
    with XmlEncodingDefaults{Namespace = ""}
{
    accepts message GetMetadataRequest
    {
        GetMetadataType GetMetadata with XmlEncoding{Name = "GetMetadata"};
        override string ToString()
        {
            return "Get Metadata Request Message";
        }
    }
    issues message GetMetadataResponse
    {
        MetadataType Metadata with XmlEncoding{Name = "Metadata"}; 
        override string ToString()
        {
            return "Get Metadata Response Message";
        }
    }
}

// WORKAROUND: Workaround of <choice/> tag.
type GetMetadataType
{
    optional XSAnyURI Dialect;
    optional XSAnyURI Identifier;
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other}; 
}

type MetadataType
{
   MetadataSectionType MetadataSection with XmlEncoding{Name = "MetadataSection"};
   optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
   optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other}; 
}

type MetadataSectionType
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional MetadataReferenceType MetadataReference with XmlEncoding{Kind = XmlKind.Element};
    optional XSAnyURI Location with XmlEncoding{Kind = XmlKind.Element};
    optional XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute};
    optional XSAnyURI Identifier with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type MetadataReferenceType
{
    array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
}

const string WSMetadataExchangeNamespace = "http://schemas.xmlsoap.org/ws/2004/09/mex";
const string WSMetadataExchangeGetmetadataAction = WSMetadataExchangeNamespace + "/GetMetadata/Request";
const string WSMetadataExchangeGetmetadataResponseAction = WSMetadataExchangeNamespace + "/GetMetadata/Response";

protocol ADCAP with
XmlEncodingDefaults{Namespace = ADCAPNamespace},
Documentation
{
    ProtocolName = "Active Directory Web Services: Custom Action Protocol",
    ShortName = "ADCAP",
    Description = "Custom Action Protocol permits access to Active Directory [MS-ADTS] via the use of common SOAP-based Web services"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-ADCAP", Version = "18.0", Date = "05/15/2014", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="361436", Date="06/16/2014"},
        ]
};

using Standard;
using Technologies.WCF;
using Technologies.WSDL;
using Technologies.SOAP;
using SOAP;

contract AccountManagement
{
    accepts operation GetADGroupMember
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADGroupMemberType GetADGroupMemberRequest;
        
        out GetADGroupMemberResponseType GetADGroupMemberResponse;

        override string ToString()
        {
            return "GetADGroupMember, Server: " + Server +
                        ", GroupDN: " + GetADGroupMemberRequest.GroupDN +
                        ", PartitionDN: " + GetADGroupMemberRequest.PartitionDN;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
        {Action = GetADGroupMemberAction,
        ReplyAction = GetADGroupMemberResponseAction}
    exception GetADGroupMemberFault with Technologies.SOAP.SoapMessageInfo{Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADGroupMemberFault"};

    accepts operation GetADPrincipalGroupMembership
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADPrincipalGroupMembershipType GetADPrincipalGroupMembershipRequest;
        
        out GetADPrincipalGroupMembershipResponseType GetADPrincipalGroupMembershipResponse;
        
        override string ToString()
        {
            return "GetADPrincipalGroupMembership, Server: " + Server +
                        ", PartitionDN: " + GetADPrincipalGroupMembershipRequest.PartitionDN +
                        ", PrincipalDN: " + GetADPrincipalGroupMembershipRequest.PrincipalDN;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetADPrincipalGroupMembershipAction,
              ReplyAction = GetADPrincipalGroupMembershipResponseAction}
    exception GetADPrincipalGroupMembershipFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADPrincipalGroupMembershipFault"};

    accepts operation SetPassword
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in SetPasswordType SetPasswordRequest;
        
        out SetPasswordResponseType SetPasswordResponse;
        
        override string ToString()
        {
            return "SetPassword, Server: " + Server +
                        ", AccountDN: " + SetPasswordRequest.AccountDN +
                        ", NewPassword: " + SetPasswordRequest.NewPassword +
                        ", PartitionDN: " + SetPasswordRequest.PartitionDN;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = SetPasswordAction,
              ReplyAction = SetPasswordResponseAction}
    exception SetPasswordFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "SetPasswordFault"};

    accepts operation ChangePassword
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in ChangePasswordType ChangePasswordRequest;
        
        out ChangePasswordResponseType ChangePasswordResponse
                with Standard.XmlEncoding
                         {Namespace = ADCAPNamespace};

        override string ToString()
        {
            return "ChangePassword, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = ChangePasswordAction,
              ReplyAction = ChangePasswordResponseAction}
    exception ChangePasswordFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "ChangePasswordFault"};

    accepts operation GetADPrincipalAuthorizationGroup
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADPrincipalAuthorizationGroupType GetADPrincipalAuthorizationGroupRequest;
        
        out GetADPrincipalAuthorizationGroupResponseType GetADPrincipalAuthorizationGroupResponse;
        
        override string ToString()
        {
            return "GetADPrincipalAuthorizationGroup, Server: " + Server +
                        ", PartitionDN: " + GetADPrincipalAuthorizationGroupRequest.PartitionDN +
                        ", PrincipalDN: " + GetADPrincipalAuthorizationGroupRequest.PrincipalDN;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetADPrincipalAuthorizationGroupAction,
              ReplyAction = GetADPrincipalAuthorizationGroupResponseAction}
    exception GetADPrincipalAuthorizationGroupFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADPrincipalAuthorizationGroupFault"};
    
    accepts operation TranslateName
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in TranslateNameType TranslateNameRequest;
        
        out TranslateNameResponseType TranslateNameResponse;
        
        override string ToString()
        {
            return "TranslateName, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = TranslateNameAction,
              ReplyAction = TranslateNameResponseAction}
    exception TranslateNameFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "TranslateNameFault"};
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

contract TopologyManagement
{
    accepts operation GetADDomainController
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADDomainControllerType GetADDomainControllerRequest;
        
        out GetADDomainControllerResponseType GetADDomainControllerResponse;
        
        override string ToString()
        {
            return "GetADDomainController, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetADDomainControllerAction,
              ReplyAction = GetADDomainControllerResponseAction}
    exception GetADDomainControllerFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADDomainControllerFault"};
    
    accepts operation GetADDomain
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADDomainType GetADDomainRequest;
        
        out GetADDomainResponseType GetADDomainResponse;
        
        override string ToString()
        {
            return "GetADDomain, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetADDomainAction,
              ReplyAction = GetADDomainResponseAction}
    exception GetADDomainFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADDomainFault"};
    
    accepts operation MoveADOperationMasterRole
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in MoveADOperationMasterRoleType MoveADOperationMasterRoleRequest;
        
        out MoveADOperationMasterRoleResponseType MoveADOperationMasterRoleResponse;
        
        override string ToString()
        {
            return "MoveADOperationMasterRole, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = MoveADOperationMasterRoleAction,
              ReplyAction = MoveADOperationMasterRoleResponseAction}
    exception MoveADOperationMasterRoleFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "MoveADOperationMasterRoleFault"};
    
    accepts operation GetADForest
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in GetADForestType GetADForestRequest;
        
        out GetADForestResponseType GetADForestResponse;
        
        override string ToString()
        {
            return "GetADForest, Server: " + Server;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetADForestAction,
              ReplyAction = GetADForestResponseAction}
    exception GetADForestFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetADForestFault"};

    accepts operation ChangeOptionalFeature
    {
        in string Server
               with Technologies.SOAP.SoapMessageInfo
                        {Kind = SoapComponentKind.Header};
        
        in ChangeOptionalFeatureType ChangeOptionalFeatureRequest;
        
        out ChangeOptionalFeatureResponseType ChangeOptionalFeatureResponse;
        
        override string ToString()
        {
            return "ChangeOptionalFeature, Server: " + Server +
                        ", DistinguishedName: " + ChangeOptionalFeatureRequest.DistinguishedName +
                        ", FeatureId: {" + ChangeOptionalFeatureRequest.FeatureId + "}";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = ChangeOptionalFeatureAction,
              ReplyAction = ChangeOptionalFeatureResponseAction}
    exception ChangeOptionalFeatureFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "ChangeOptionalFeatureFault"};
    
    accepts operation GetVersion
    {
        in GetVersionType GetVersionRequest;
        
        out GetVersionResponseType GetVersionResponse;
        
        override string ToString()
        {
            return "GetVersion, VersionString: " + GetVersionResponse.VersionString;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = GetVersionAction,
              ReplyAction = GetVersionResponseAction}
    exception GetVersionFault
        with Technologies.SOAP.SoapMessageInfo
                 {Action = ADCAPFault},
             Standard.XmlEncoding{Name = "GetVersionFault"};
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

endpoint AccountManagementEndpoint over SOAP.Server provides AccountManagement
    with Technologies.WSDL.WsdlInfo
             {Name = "AccountManagement",
              Namespace = ADCAPNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

endpoint TopologyManagementEndpoint over SOAP.Server provides TopologyManagement
    with Technologies.WSDL.WsdlInfo
             {Name = "TopologyManagement",
              Namespace = ADCAPNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type GetADGroupMemberType
{
    string GroupDN;
    
    string PartitionDN;
    
    bool Recursive;
}
with Standard.XmlEncoding{AnonymousType = true};

type ArrayOfActiveDirectoryPrincipal
{
    optional array<ActiveDirectoryPrincipal> ActiveDirectoryPrincipal;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryObject
{
    string DistinguishedName;
    
    string Name;
    
    string ObjectClass;
    
    TypeOfguid ObjectGuid;
    
    optional array<string> ObjectTypes
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string ReferenceServer;
}
with Technologies.WCF.WcfInfo{KnownTypes = [TypeOf<ActiveDirectoryDomain>(),
                                            TypeOf<ActiveDirectoryPrincipal>(),
                                            TypeOf<ActiveDirectoryGroup>(),
                                            TypeOf<ActiveDirectoryPartition>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

pattern TypeOfguid = string
    with Standard.XmlPrimitiveValueEncoding
             {Pattern = "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}"},
         Standard.XmlEncoding
             {Namespace = Serialization
             };

type ActiveDirectoryPartition : ActiveDirectoryObject
{
    string DNSRoot;
    
    string DeletedObjectsContainer;
    
    string LostAndFoundContainer;
    
    string QuotasContainer;
    
    optional array<string> ReadOnlyReplicaDirectoryServer
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> ReplicaDirectoryServer
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> SubordinateReferences
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
}
with Technologies.WCF.WcfInfo{KnownTypes = [TypeOf<ActiveDirectoryDomain>(),
                                            TypeOf<ActiveDirectoryDomain>(),
                                            TypeOf<ActiveDirectoryPrincipal>(),
                                            TypeOf<ActiveDirectoryGroup>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryDomain : ActiveDirectoryPartition
{
    optional array<string> AllowedDNSSuffixes
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> AppliedGroupPolicies
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> ChildDomains
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string ComputersContainer;
    
    string DomainControllersContainer;
    
    int DomainMode;
    
    binary DomainSID;
    
    string ForeignSecurityPrincipalsContainer;
    
    string Forest;
    
    string InfrastructureMaster;
    
    optional TimeSpan LastLogonReplicationInterval;
    
    string ManagedBy;
    
    string NetBIOSName;
    
    string PDCEmulator;
    
    string ParentDomain;
    
    string RIDMaster;
    
    string SystemsContainer;
    
    string UsersContainer;
}
with Technologies.WCF.WcfInfo{KnownTypes = [TypeOf<ActiveDirectoryPrincipal>(),
                                            TypeOf<ActiveDirectoryGroup>(),
                                            TypeOf<ActiveDirectoryPartition>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryPrincipal : ActiveDirectoryObject
{
    binary SID;
    
    string SamAccountName;
}
with Technologies.WCF.WcfInfo{KnownTypes = [TypeOf<ActiveDirectoryGroup>(),
                                            TypeOf<ActiveDirectoryDomain>(),
                                            TypeOf<ActiveDirectoryGroup>(),
                                            TypeOf<ActiveDirectoryPartition>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryGroup : ActiveDirectoryPrincipal
{
    ActiveDirectoryGroupScope GroupScope;
    
    ActiveDirectoryGroupType GroupType;
}
with Technologies.WCF.WcfInfo{KnownTypes = [TypeOf<ActiveDirectoryDomain>(),
                                            TypeOf<ActiveDirectoryPrincipal>(),
                                            TypeOf<ActiveDirectoryPartition>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

pattern ActiveDirectoryGroupScope =
    enum string
    {
        Unknown = "Unknown", DomainLocal = "DomainLocal", Global = "Global", Universal = "Global", ...
    }
    with Standard.XmlEncoding
             {Namespace = ADCAPNamespace};

pattern ActiveDirectoryGroupType =
    enum string
    {
        Unknown = "Unknown", Distribution = "Distribution", Security = "Security", ...
    }
    with Standard.XmlEncoding
             {Namespace = ADCAPNamespace};

type GetADGroupMemberResponseType
{
    ArrayOfActiveDirectoryPrincipal Members;
}
with Standard.XmlEncoding{AnonymousType = true};

type CustomActionFault
{
    optional ArgumentErrorDetailCA ArgumentError;
    
    optional DirectoryErrorDetailCA DirectoryError;
    
    optional string Error;
    
    optional string ShortError;
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ArgumentErrorDetailCA
{
    optional string Message;
    
    optional string ParameterName;
    
    optional string ShortMessage;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type DirectoryErrorDetailCA
{
    optional string ErrorCode;
    
    optional string ExtendedErrorMessage;
    
    optional string MatchedDN;
    
    optional string Message;
    
    optional array<string> Referral
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional string ShortMessage;
    
    optional string Win32ErrorCode;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADDomainFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ChangeOptionalFeatureFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADForestFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type MoveADOperationMasterRoleFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADPrincipalGroupMembershipFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type SetPasswordFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ChangePasswordFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADPrincipalAuthorizationGroupFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADDomainControllerFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type TranslateNameFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetVersionFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<GetADGroupMemberFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADGroupMemberFault : CustomActionFault
{
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<GetADDomainFault>(),
                        TypeOf<ChangeOptionalFeatureFault>(),
                        TypeOf<GetADForestFault>(),
                        TypeOf<MoveADOperationMasterRoleFault>(),
                        TypeOf<GetADPrincipalGroupMembershipFault>(),
                        TypeOf<SetPasswordFault>(),
                        TypeOf<ChangePasswordFault>(),
                        TypeOf<GetADPrincipalAuthorizationGroupFault>(),
                        TypeOf<GetADDomainControllerFault>(),
                        TypeOf<TranslateNameFault>(),
                        TypeOf<GetVersionFault>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADPrincipalGroupMembershipType
{
    string PartitionDN;
    
    string PrincipalDN;
    
    string ResourceContextPartition;
    
    string ResourceContextServer;
}
with Standard.XmlEncoding{AnonymousType = true};

type ArrayOfActiveDirectoryGroup
{
    optional array<ActiveDirectoryGroup> ActiveDirectoryGroup;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADPrincipalGroupMembershipResponseType
{
    ArrayOfActiveDirectoryGroup MemberOf;
}
with Standard.XmlEncoding{AnonymousType = true};

type SetPasswordType
{
    string AccountDN;
    
    string NewPassword;
    
    string PartitionDN;
}
with Standard.XmlEncoding{AnonymousType = true};

type SetPasswordResponseType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type ChangePasswordType
{
    optional string AccountDN;
    
    optional string NewPassword;
    
    optional string OldPassword;
    
    optional string PartitionDN;
}
with Standard.XmlEncoding{AnonymousType = true};

type ChangePasswordResponseType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADPrincipalAuthorizationGroupType
{
    string PartitionDN;
    
    string PrincipalDN;
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADPrincipalAuthorizationGroupResponseType
{
    ArrayOfActiveDirectoryGroup MemberOf;
}
with Standard.XmlEncoding{AnonymousType = true};

pattern ActiveDirectoryNameFormat =
    enum string
    {
        DistinguishedName = "DistinguishedName", CanonicalName = "CanonicalName", ...
    }
    with Standard.XmlEncoding
             {Namespace = ADCAPNamespace};

type ArrayOfstring
{
    optional array<string> @string;
}
with Standard.XmlEncoding
         {Namespace = SerializationArrays};

type TranslateNameType
{
    ActiveDirectoryNameFormat FormatDesired;
    
    ActiveDirectoryNameFormat FormatOffered;
    
    ArrayOfstring Names;
}
with Standard.XmlEncoding{AnonymousType = true};

type ArrayOfActiveDirectoryNameTranslateResult
{
    optional array<ActiveDirectoryNameTranslateResult> ActiveDirectoryNameTranslateResult;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryNameTranslateResult
{
    string Name;
    
    uint Result;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type TranslateNameResponseType
{
    ArrayOfActiveDirectoryNameTranslateResult NameTranslateResult;
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADDomainControllerType
{
    ArrayOfstring NtdsSettingsDN;
}
with Standard.XmlEncoding{AnonymousType = true};

type ArrayOfActiveDirectoryDomainController
{
    optional array<ActiveDirectoryDomainController>
        ActiveDirectoryDomainController;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type ActiveDirectoryDirectoryServer
{
    string DefaultPartition;
    
    string HostName;
    
    TypeOfguid InvocationId;
    
    int LdapPort;
    
    string NTDSSettingsObjectDN;
    
    string Name;
    
    optional array<ActiveDirectoryOperationMasterRole> OperationMasterRole
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = ADCAPNamespace,
                  IsWrapped = true,
                  ArrayItemName = "ActiveDirectoryOperationMasterRole"};
    
    optional array<string> Partitions
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string ServerObjectDN;
    
    TypeOfguid ServerObjectGuid;
    
    string Site;
    
    int SslPort;
}
with Technologies.WCF.WcfInfo
         {KnownTypes = [TypeOf<ActiveDirectoryDomainController>()]},
     Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

pattern ActiveDirectoryOperationMasterRole = enum string
                                             {
                                                 PDCEmulator = "PDCEmulator",
                                                 RIDMaster = "PDCEmulator",
                                                 InfrastructureMaster = "PDCEmulator",
                                                 SchemaMaster = "PDCEmulator",
                                                 DomainNamingMaster = "PDCEmulator",
                                                 ...
                                             }
    with Standard.XmlEncoding
             {Namespace = ADCAPNamespace};

type ActiveDirectoryDomainController : ActiveDirectoryDirectoryServer
{
    string ComputerDN;
    
    string Domain;
    
    bool Enabled;
    
    string Forest;
    
    bool IsGlobalCatalog;
    
    bool IsReadOnly;
    
    string OSHotFix;
    
    string OSName;
    
    string OSServicepack;
    
    string OSVersion;
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADDomainControllerResponseType
{
    ArrayOfActiveDirectoryDomainController DomainControllers;
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADDomainType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADDomainResponseType
{
    ActiveDirectoryDomain Domain;
}
with Standard.XmlEncoding{AnonymousType = true};

type MoveADOperationMasterRoleType
{
    ActiveDirectoryOperationMasterRole OperationMasterRole;
    
    bool Seize;
}
with Standard.XmlEncoding{AnonymousType = true};

type MoveADOperationMasterRoleResponseType
{
    bool WasSeized;
}
with Standard.XmlEncoding{AnonymousType = true};

type GetADForestType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type ActiveDirectoryForest
{
    optional array<string> ApplicationPartitions
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> CrossForestReferences
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string DomainNamingMaster;
    
    optional array<string> Domains
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    int ForestMode;
    
    optional array<string> GlobalCatalogs
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string Name;
    
    string RootDomain;
    
    optional array<string> SPNSuffixes
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    string SchemaMaster;
    
    optional array<string> Sites
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
    
    optional array<string> UPNSuffixes
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace,
                  ArrayItemNamespace = SerializationArrays,
                  IsWrapped = true,
                  ArrayItemName = "string"};
}
with Standard.XmlEncoding
         {Namespace = ADCAPNamespace};

type GetADForestResponseType
{
    ActiveDirectoryForest Forest;
}
with Standard.XmlEncoding{AnonymousType = true};

type ChangeOptionalFeatureType
{
    string DistinguishedName;
    
    bool Enable;
    
    TypeOfguid FeatureId 
        with Standard.XmlEncoding
                 {Namespace = ADCAPNamespace};
}
with Standard.XmlEncoding{AnonymousType = true};

type ChangeOptionalFeatureResponseType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type GetVersionType
{
}
with Standard.XmlEncoding{AnonymousType = true};

type GetVersionResponseType
{
    int VersionMajor;
    
    int VersionMinor;
    
    string VersionString;
}
with Standard.XmlEncoding{AnonymousType = true};

const string ADCAPNamespace = "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions";
const string GetADGroupMemberAction = ADCAPNamespace + "/AccountManagement/GetADGroupMember";
const string GetADGroupMemberResponseAction = GetADGroupMemberAction + "Response";
const string GetADPrincipalGroupMembershipAction = ADCAPNamespace + "/AccountManagement/GetADPrincipalGroupMembership";
const string GetADPrincipalGroupMembershipResponseAction = GetADPrincipalGroupMembershipAction + "Response";
const string SetPasswordAction = ADCAPNamespace + "/AccountManagement/SetPassword";
const string SetPasswordResponseAction = SetPasswordAction + "Response";
const string ChangePasswordAction = ADCAPNamespace + "/AccountManagement/ChangePassword";
const string ChangePasswordResponseAction = ChangePasswordAction + "Response";
const string GetADPrincipalAuthorizationGroupAction = ADCAPNamespace + "/AccountManagement/GetADPrincipalAuthorizationGroup";
const string GetADPrincipalAuthorizationGroupResponseAction = GetADPrincipalAuthorizationGroupAction + "Response";
const string TranslateNameAction = ADCAPNamespace + "/AccountManagement/TranslateName";
const string TranslateNameResponseAction = TranslateNameAction + "Response";
const string Serialization = "http://schemas.microsoft.com/2003/10/Serialization/";
const string SerializationArrays = Serialization + "Arrays";
const string ADCAPFault = "http://schemas.microsoft.com/2008/1/ActiveDirectory/Data/fault";
const string GetADDomainControllerAction = ADCAPNamespace + "/TopologyManagement/GetADDomainController";
const string GetADDomainControllerResponseAction = GetADDomainControllerAction + "Response";
const string GetADDomainAction = ADCAPNamespace + "/TopologyManagement/GetADDomain";
const string GetADDomainResponseAction = GetADDomainAction + "Response";
const string MoveADOperationMasterRoleAction = ADCAPNamespace + "/TopologyManagement/MoveADOperationMasterRole";
const string MoveADOperationMasterRoleResponseAction = MoveADOperationMasterRoleAction + "Response";
const string GetADForestAction = ADCAPNamespace + "/TopologyManagement/GetADForest";
const string GetADForestResponseAction = GetADForestAction + "Response";
const string ChangeOptionalFeatureAction = ADCAPNamespace + "/TopologyManagement/ChangeOptionalFeature";
const string ChangeOptionalFeatureResponseAction = ChangeOptionalFeatureAction + "Response";
const string GetVersionAction = ADCAPNamespace + "/TopologyManagement/GetVersion";
const string GetVersionResponseAction = GetVersionAction + "Response";

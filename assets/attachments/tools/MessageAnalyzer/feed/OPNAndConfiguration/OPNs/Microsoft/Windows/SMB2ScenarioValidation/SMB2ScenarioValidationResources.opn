protocol SMB2ScenarioValidation;
// 3.3.4.1 Sending Any Outgoing Message
string SMB2_SendingAnyOutgoingMessage = "\r\n3.3.4.1 Sending Any Outgoing Message";
string SMB2_SendingAnyOutgoingMessage_1 = "SMB2: See \"Sending Any Outgoing Message\". For every outgoing message, the server should set the CreditCharge field in the SMB2 header of the response to the CreditCharge value in the SMB2 header of the request.";
string SMB2_SendingAnyOutgoingMessage_2 = "SMB2: See \"Signing the Message\". If the request was signed by the client, the response message being sent contains a nonzero SessionId and a zero TreeId in the SMB2 header, and the session identified by SessionId has Session.SigningRequired equal to TRUE. The server should sign the message";
string SMB2_SendingAnyOutgoingMessage_3 = "SMB2: See \"Signing the Message\". If the request was signed by the client, the response message being sent contains a nonzero SessionId, and a nonzero TreeId in the SMB2 header, and the session identified by SessionId has Session.SigningRequired equal to TRUE, if either global EncryptData is FALSE or Connection.ClientCapabilities does not include the SMB2_GLOBAL_CAP_ENCRYPTION bit. The server should sign the message";
string SMB2_SendingAnyOutgoingMessage_4 = "SMB2: See \"Signing the Message\". If the request was signed by the client, and the response is not an interim response to an asynchronously processed request. The server should sign the message";
string SMB2_SendingAnyOutgoingMessage_5 = "SMB2: See \"Signing the Message\". The server set the SMB2_FLAGS_SIGNED bit or sign the response message which does not meet the conditions in \"Signing the Message\"";

// 3.3.4.2 Sending an Interim Response for an Asynchronous Operation
string SMB2_SendingAnInterimResponse = "\r\n3.3.4.2 Sending an Interim Response for an Asynchronous Operation";
string SMB2_SendingAnInterimResponse_1 = "SMB2: See \"Sending an Interim Response for an Asynchronous Operation\". The server should not set the SMB2_FLAGS_SIGNED bit or sign an interim response.";
string SMB2_SendingAnInterimResponse_2 = "SMB2: See \"Sending an Interim Response for an Asynchronous Operation\". The SMB2_FLAGS_SERVER_TO_REDIR bit MUST be set in the Flags field of the SMB2 header.";
string SMB2_SendingAnInterimResponse_3 = "SMB2: See \"Sending an Interim Response for an Asynchronous Operation\". The server MUST set the SMB2_FLAGS_ASYNC_COMMAND bit in the Flags field of the SMB2 header.";
string SMB2_SendingAnInterimResponse_4 = "SMB2: See \"Sending an Interim Response for an Asynchronous Operation\". The server MUST set the AsyncId field of the SMB2 header to the value that was generated earlier.";
string SMB2_SendingAnInterimResponse_5 = "SMB2: See \"Sending an Interim Response for an Asynchronous Operation\". The server MUST append an SMB2 ERROR Response following the SMB2 header with a ByteCount of zero.";

// 3.3.4.3 Sending a Success Response
string SMB2_SendingASuccessResponse = "\r\n3.3.4.3 Sending a Success Response";
string SMB2_SendingASuccessResponse_1 = "SMB2: See \"Sending a Success Response\". The SMB2_FLAGS_SERVER_TO_REDIR bit MUST be set in the Flags field of the SMB2 header.";
string SMB2_SendingASuccessResponse_2 = "SMB2: See \"Sending a Success Response\". If Request.AsyncId is nonzero, the server MUST set the AsyncId field to it, MUST set the SMB2_FLAGS_ASYNC_COMMAND bit in the Flags field, and MUST set the CreditResponse field to 0.";

// 3.3.4.4 Sending an Error Response
string SMB2_SendingAnErrorResponse = "\r\n3.3.4.4 Sending an Error Response";
string SMB2_SendingAnErrorResponse_1 = "SMB2: See \"Sending an Error Response\". The SMB2_FLAGS_SERVER_TO_REDIR bit MUST be set in the Flags field of the SMB2 header.";
string SMB2_SendingAnErrorResponse_2 = "SMB2: See \"Sending an Error Response\". If Request.AsyncId is nonzero, the server MUST set the AsyncId field to it, MUST set the SMB2_FLAGS_ASYNC_COMMAND bit in the Flags field, and MUST set the CreditResponse field to 0.";

// 3.3.5.2 Receiving Any Message
string SMB2_ReceivingAnyMessage = "\r\n3.3.5.2 Receiving Any Message";
string SMB2_ReceivingAnyMessage_1 = "SMB2: See \"Receiving Any Message\". If the length of the message exceeds Connection.MaxTransactSize+256, the server must disconnect the connection.";
string SMB2_ReceivingAnyMessage_2 = "SMB2: See \"Receiving Any Message\". If Connection.SupportsMultiCredit is FALSE and the size of the request is greater than 68*1024 bytes, the server should terminate the connection.";
string SMB2_ReceivingAnyMessage_3 = "SMB2: See \"Receiving Any Message\". If Connection.SupportsMultiCredit is TRUE, the command is other than READ, WRITE, IOCTL, QUERY_DIRECTORY, CHANGE_NOTIFY, QUERY_INFO, or SET_INFO, and the size of the request is greater than 68*1024 bytes, the server must terminate the connection.";

// 3.3.5.2.2 Verifying the Connection State
string SMB2_VerifyTheConnectionState = "\r\n3.3.5.2.2 Verifying the Connection State";
string SMB2_VerifyTheConnectionState_1 = "SMB2: See \"Verifying the Connection State\". If the request being received is not an SMB2 NEGOTIATE Request or a traditional SMB_COM_NEGOTIATE, and Connection.NegotiateDialect is 0xFFFF or 0x02FF, the server must disconnect the connection.";

// 3.3.5.2.3 Verifying the Sequence Number
string SMB2_VerifyTheSequenceNumber = "\r\n3.3.5.2.3 Verifying the Sequence Number";
string SMB2_VerifyTheSequenceNumber_1 = "SMB2: See \"Verifying the Connection State\". If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server should terminate the connection.";

// 3.3.5.2.4 Verifying the Signature
string SMB2_VerifyTheSignature = "\r\n3.3.5.2.4 Verifying the Signature";
string SMB2_VerifyTheSignature_1 = "SMB2: See \"Verifying the Signature\". If the SMB2 header of the SMB2 NEGOTIATE request has the SMB2_FLAGS_SIGNED bit set in the Flags field, the server must fail the request with STATUS_INVALID_PARAMETER.";
string SMB2_VerifyTheSignature_2 = "SMB2: See \"Verifying the Signature\". If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. If the session is not found, the request MUST be failed with the error code STATUS_USER_SESSION_DELETED.";
string SMB2_VerifyTheSignature_3 = "SMB2: See \"Verifying the Signature\". If the request is not for binding the session, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request. If the session is not found, the request MUST be failed with the error code STATUS_USER_SESSION_DELETED.";
string SMB2_VerifyTheSignature_4 = "SMB2: See \"Verifying the Signature\". If the SMB2 header of the request does not have SMB2_FLAGS_SIGNED set in the Flags field, the server MUST determine if the client failed to sign a packet that required it. The server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. If the session is found and Session.SigningRequired is equal to TRUE, the server MUST fail this request with STATUS_ACCESS_DENIED.";

// 3.3.5.2.5 Verifying the Credit Charge and the Payload Size
string SMB2_VerifyTheCreditChargeAndThePayloadSize = "\r\n3.3.5.2.5 Verifying the Credit Charge and the Payload Size";
string SMB2_VerifyTheCreditChargeAndThePayloadSize_1 = "SMB2: See \"Verifying the Credit Charge and the Payload Size\". If Connection.SupportsMultiCredit is TRUE, CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server must fail the request with the error code STATUS_INVALID_PARAMETER.";
string SMB2_VerifyTheCreditChargeAndThePayloadSize_2 = "SMB2: See \"Verifying the Credit Charge and the Payload Size\". If Connection.SupportsMultiCredit is TRUE, CreditCharge is greater than zero, the server must calculate the expected CreditCharge for the current operation using the formula specified in section \"Calculating the CreditCharge\". If the calculated credit number is greater than the CreditCharge, the server must fail the request with the error code STATUS_INVALID_PARAMETER.";

// 3.3.5.2.7 Handling Compounded Requests
string SMB2_HandlingCompoundedRequests = "\r\n3.3.5.2.7 Handling Compounded Requests";
string SMB2_HandlingCompoundedRequests_1 = "SMB2: See \"Handling Compounded Requests\". Unrelated and related rRequest must not be intermixed in the same transport send, and in such a case, the server should fail each of the requests with STATUS_INVALID_PARAMETER.";
string SMB2_HandlingCompoundedRequests_2 = "SMB2: See \"Handling Compounded Related Requests\". If the first request has SMB2_FLAGS_RELATED_OPERATIONS set, the server should fail processing the compound chain request.";
string SMB2_HandlingCompoundedRequests_3 = "SMB2: See \"Handling Compounded Related Requests\". If the previous request fails with an error, the server should fail the current request with the same error code returned by the previous request or fail the current request with STATUS_INVALID_PARAMETER.";

// 3.3.5.2.9 Verifying the Session
string SMB2_VerifyTheSession = "\r\n3.3.5.2.9 Verifying the Session";
string SMB2_VerifyTheSession_1 = "SMB2: See \"Verifying the Session\". If Connection.ConstrainedConnection is TRUE, the server SHOULD<217> disconnect the connection.";
string SMB2_VerifyTheSession_2 = "SMB2: See \"Verifying the Session\". The server MUST look up the Session in Connection.SessionTable by using the SessionId in the SMB2 header of the request. If SessionId is not found in Connection.SessionTable, the server MUST fail the request with STATUS_USER_SESSION_DELETED.";
// 3.3.5.2.11 Verifying the Tree Connect
string SMB2_VerifyTheTreeConnect = "\r\n3.3.5.2.11 Verifying the Tree Connect";
string SMB2_VerifyTheTreeConnect_1 = "SMB2: See \"Verifying the Tree Connect\". The server MUST look up the TreeConnect in Session.TreeConnectTable by using the TreeId in the SMB2 header of the request. If no tree connect is found, the request MUST be failed with STATUS_NETWORK_NAME_DELETED.";
string SMB2_VerifyTheTreeConnect_2 = "SMB2: See \"Verifying the Tree Connect\". The server look up the TreeConnect in Session.TreeConnectTable by using the TreeId in the SMB2 header of the request and the tree connect is found, the server should not fail this request with STATUS_NETWORK_NAME_DELETED.";

// 3.3.5.3 Receiving an SMB_COM_NEGOTIATE
string SMB2_ReceivingAnSMBComNegotiate = "\r\n3.3.5.3 Receiving an SMB_COM_NEGOTIATE";
string SMB2_ReceivingAnSMBComNegotiate_1 = "SMB2: See \"Receiving an SMB_COM_NEGOTIATE\". If Connection.NegotiateDialect is not 0xFFFF, the server must disconnect the connection without sending a response.";
// 3.3.5.3.1 SMB 2.1 or SMB 3.x Support
string SMB2_ReceivingAnSMBComNegotiate_2 = "SMB2: See \"Receiving an SMB_COM_NEGOTIATE\". Server must respond with an SMB2 NEGOTIATE Response when receiving an SMB_COM_NEGOTIATE.";
string SMB2_ReceivingAnSMBComNegotiate_3 = "SMB2: See \"SMB 2.1 or SMB 3.0 Support\". When the server supports SMB 2.1 or SMB 3.0, the SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set.";
string SMB2_ReceivingAnSMBComNegotiate_4 = "SMB2: See \"SMB 2.1 or SMB 3.0 Support\". When the server supports SMB 2.1 or SMB 3.0 and RequireMessageSigning is TRUE, the server must set SMB2_NEGOTIATE_SIGNING_REQUIRED in the SecurityMode.";
string SMB2_ReceivingAnSMBComNegotiate_40 = "SMB2: See \"SMB 2.1 or SMB 3.0 Support\". When the server supports SMB 2.1 or SMB 3.0 and the server supports the Distributed File System, the server must set SMB2_GLOBAL_CAP_DFS in the Capabilities.";
string SMB2_ReceivingAnSMBComNegotiate_41 = "SMB2: See \"SMB 2.1 or SMB 3.0 Support\". When the server supports SMB 2.1 or SMB 3.0 and Connection.SupportsMultiCredit is TRUE, the server must set SMB2_GLOBAL_CAP_LARGE_MTU in the Capabilities.";
string SMB2_ReceivingAnSMBComNegotiate_5 = "SMB2: See \"SMB 2.002 Support\". When the client does not support SMB2, the SMB2 server must disconnect the connection.";
string SMB2_ReceivingAnSMBComNegotiate_6 = "SMB2: See \"SMB 2.002 Support\". When the server supports SMB 2.002, the SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set.";
string SMB2_ReceivingAnSMBComNegotiate_7 = "SMB2: See \"SMB 2.002 Support\". When the server supports SMB 2.002 and RequireMessageSigning is TRUE, the server must set SMB2_NEGOTIATE_SIGNING_REQUIRED in the SecurityMode.";
string SMB2_ReceivingAnSMBComNegotiate_8 = "SMB2: See \"SMB 2.002 Support\". When the server supports SMB 2.002 and the SMB_COM_NEGOTIATE request contains the dialect string \"SMB 2.002\", DialectRevision of the SMB2 NEGOTIATE response must be set to 0x0202.";
string SMB2_ReceivingAnSMBComNegotiate_9 = "SMB2: See \"SMB 2.002 Support\". When the server supports SMB 2.002 and the server supports the Distributed File System, the server must set SMB2_GLOBAL_CAP_DFS in the Capabilities";

// 3.3.5.4 Receiving an SMB2 NEGOTIATE Request
string SMB2_ReceivingAnSMB2NegotiateRequest = "\r\n3.3.5.4 Receiving an SMB2 NEGOTIATE Request";
string SMB2_ReceivingAnSMB2NegotiateRequest_1 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, 0x0302, or 0x0311, the server must disconnect the connection";
string SMB2_ReceivingAnSMB2NegotiateRequest_2 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server must fail the request with STATUS_INVALID_PARAMETER.";
string SMB2_ReceivingAnSMB2NegotiateRequest_3 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". DialectRevision of the SMB2 NEGOTIATE Response must be the greatest common dialect between the dialects the server implemented and the Dialects array of the SMB2 NEGOTIATE Request.";
string SMB2_ReceivingAnSMB2NegotiateRequest_4 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If the Connection.Dialect is \"3.1.1\" and the negotiate context list does not contain exactly one SMB2_PREAUTH_INTEGRITY_CAPABILITIES negotiate context, then the server must fail the negotiate request with STATUS_INVALID_PARAMETER.";
string SMB2_ReceivingAnSMB2NegotiateRequest_5 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If the Connection.Dialect is \"3.1.1\" and the negotiate context list contains more than one SMB2_ENCRYPTION_CAPABILITIES negotiate context, then the server must fail the negotiate request with STATUS_INVALID_PARAMETER.";
string SMB2_ReceivingAnSMB2NegotiateRequest_6 = "SMB2:  See \"Receiving an SMB2 NEGOTIATE Request\". The SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set.";
string SMB2_ReceivingAnSMB2NegotiateRequest_7 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If RequireMessageSigning is TRUE, the server must also set SMB2_NEGOTIATE_SIGNING_REQUIRED in the SecurityMode field.";
string SMB2_ReceivingAnSMB2NegotiateRequest_8 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.SupportsMultiCredit is TRUE, the server must set SMB2_GLOBAL_CAP_LARGE_MTU in the Capabilities of Negotiate Response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_9 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, and SMB2_GLOBAL_CAP_MULTI_CHANNEL is set in the Capabilities field of the request, the server must set SMB2_GLOBAL_CAP_MULTI_CHANNEL in the Capabilities of Negotiate Response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_10 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports directory leasing, and SMB2_GLOBAL_CAP_DIRECTORY_LEASING is set in the Capabilities field of the request, the server must set SMB2_GLOBAL_CAP_DIRECTORY_LEASING in the Capabilities of Negotiate Response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_11 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capabilities field of the request, and the server supports persistent handles, the server must set SMB2_GLOBAL_CAP_PERSISTENT_HANDLES in the Capabilities of Negotiate Response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_12 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect is \"3.0\" or \"3.0.2\", the server supports encryption, and SMB2_GLOBAL_CAP_ENCRYPTION is set in the Capabilities field of the request, the server must set SMB2_GLOBAL_CAP_ENCRYPTION in the Capabilities of Negotiate Response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_13 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect is \"3.1.1\", the server must build a negotiate context list for its negotiate response.";
string SMB2_ReceivingAnSMB2NegotiateRequest_14 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect is \"3.1.1\", the server must add an SMB2_PREAUTH_INTEGRITY_CAPABILITIES negotiate context to the response's negotiate context list and HashAlgorithmCount must be set to 1.";
string SMB2_ReceivingAnSMB2NegotiateRequest_15 = "SMB2: See \"Receiving an SMB2 NEGOTIATE Request\". If Connection.Dialect is \"3.1.1\" and the client's negotiate request contains an SMB2_ENCRYPTION_CAPABILITIES negotiate context, the server must add an SMB2_ENCRYPTION_CAPABILITIES negotiate context to the response's negotiate context list and CipherCount must be set to 1.";

// 3.3.5.5 Receiving an SMB2 SESION_SETUP Request
string SMB2_ReceivingAnSMB2SessionSetupRequest = "\r\n3.3.5.5 Receiving an SMB2 SESION_SETUP Request";
string SMB2_ReceivingAnSMB2SessionSetupRequest_1 = "SMB2: Please check the configuration of EncryptData and RejectUnencryptedAccess. See \"Receiving an SMB2 SESION_SETUP Request\". If the server implements the SMB 3.x dialect family, Connection.Dialect does not belong to the SMB 3.x dialect family, EncryptData is TRUE, and RejectUnencryptedAccess is TRUE, the server must fail the request with STATUS_ACCESS_DENIED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_2 = "SMB2: Please check the configuration of EncryptData and RejectUnencryptedAccess. See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, EncryptData is TRUE, RejectUnencryptedAccess is TRUE, and Connection.ClientCapabilities does not include the SMB2_GLOBAL_CAP_ENCRYPTION bit, the server must fail the request with STATUS_ACCESS_DENIED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_3 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server must look up the session in GlobalSessionTable using the SessionId from the SMB2 header. If the session is not found, the server must fail the session setup request with STATUS_USER_SESSION_DELETED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_4 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, and Connection.Dialect is not the same as Session.Connection.Dialect, the server must fail the request with STATUS_INVALID_PARAMETER.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_5 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, and the SMB2_FLAGS_SIGNED bit is not set in the Flags field in the header, the server must fail the request with error STATUS_INVALID_PARAMETER.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_6 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, and Session.IsAnonymous or Session.IsGuest is TRUE, the server must fail the request with STATUS_NOT_SUPPORTED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_7 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE, the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, and there is a session in Connection.SessionTable identified by the SessionId in the request, the server must fail the request with STATUS_REQUEST_NOT_ACCEPTED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_8 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to \"2.0.2\" or \"2.1\" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<232> fail the session setup request with  STATUS_REQUEST_NOT_ACCEPTED.";
string SMB2_ReceivingAnSMB2SessionSetupRequest_9 = "SMB2: See \"Receiving an SMB2 SESION_SETUP Request\". Otherwise, the server must look up the session in Connection.SessionTable using the SessionId from the SMB2 header. If the session is not found, the server must fail the session setup request with STATUS_USER_SESSION_DELETED.";

// 3.3.5.5.1 Authenticating a New Session
string SMB2_AuthenticatingANewSession = "\r\n3.3.5.5.1 Authenticating a New Session";

// 3.3.5.5.3 Handling GSS-API Authentication
string SMB2_HandlingGSSAPIAuthentication = "\r\n3.3.5.5.3 Handling GSS-API Authentication";
string SMB2_HandlingGSSAPIAuthentication_1 = "SMB2: See \"Handling GSS-API Authentication\". If the authentication protocol indicates success. SMB2_FLAGS_SERVER_TO_REDIR must be set in the Flags field of the SMB2 header";
string SMB2_HandlingGSSAPIAuthentication_2 = "SMB2: See \"Handling GSS-API Authentication\". If the GSS mechanism indicates that this is the final message in the authentication exchange, the server must look up all existing connections from the client in the global ConnectionList where Connection.ClientGuid matches Session.Connection.ClientGuid. For any matching Connection, if Connection.Dialect is not the same as Session.Connection.Dialect, the server should fail the session setup request with STATUS_USER_SESSION_DELETED.";
string SMB2_HandlingGSSAPIAuthentication_21 = "SMB2: See \"Handling GSS-API Authentication\". For current SMB2 Session Setup request, the server should not fail the session setup request with STATUS_USER_SESSION_DELETED.";
string SMB2_HandlingGSSAPIAuthentication_3 = "SMB2: See \"Handling GSS-API Authentication\". If the GSS mechanism indicates that this is the final message in the authentication exchange and Connection.Dialect belongs to the SMB 3.x dialect family and global EncryptData is TRUE, the server must set the SMB2_SESSION_FLAG_ENCRYPT_DATA flag in the SessionFlags field of the SMB2 SESSION_SETUP Response.";
string SMB2_HandlingGSSAPIAuthentication_4 = "SMB2: See \"Handling GSS-API Authentication\". If the GSS mechanism indicates that this is the final message in the authentication exchange and Connection.Dialect is \"3.1.1\" or Session.SigningRequired is TRUE, the server MUST sign the final session setup response using Session.SigningKey before sending it to the client.";
string SMB2_HandlingGSSAPIAuthentication_5 = "SMB2: See \"Handling GSS-API Authentication\". If the GSS mechanism indicates that this is the final message in the authentication exchange and Connection.Dialect is \"3.0\" or \"3.0.2\", and if the SMB2_SESSION_FLAG_BINDING is set in the Flags field of the request, the server MUST sign the response using Channel.SigningKey.";
string SMB2_HandlingGSSAPIAuthentication_6 = "SMB2: See \"Handling GSS-API Authentication\". If the GSS mechanism indicates that this is not the final message of the authentication exchange and Connection.Dialect belongs to the SMB 3.x dialect family, and if the SMB2_SESSION_FLAG_BINDING is set in the Flags field of the request, the server MUST sign the response by using Session.SessionKey.";

// 3.3.5.6 Receiving an SMB2 LOGOFF Request
string SMB2_ReceivingAnSMB2LogoffRequest = "\r\n3.3.5.6 Receiving an SMB2 LOGOFF Request";

// 3.3.5.7 Receiving an SMB2 TREE_CONNECT Request
string SMB2_ReceivingAnSMB2TreeConnectRequest = "\r\n3.3.5.7 Receiving an SMB2 TREE_CONNECT Request";
string SMB2_ReceivingAnSMB2TreeConnectRequest_1 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Connection.Dialect is \"3.1.1\" and Session.IsAnonymous and Session.IsGuest are set to FALSE and the request is not signed or not encrypted, then the server MUST disconnect the connection.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_2 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If the server implements the SMB 3.x dialect family, EncryptData or Share.EncryptData is TRUE, RejectUnencryptedAccess is TRUE, and Connection.ServerCapabilities does not include SMB2_GLOBAL_CAP_ENCRYPTION, the server MUST fail the request with STATUS_ACCESS_DENIED.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_3 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set all flags contained in Share.CscFlags";
string SMB2_ReceivingAnSMB2TreeConnectRequest_4 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set the SMB2_SHAREFLAG_ACCESS_BASED_DIRECTORY_ENUM bit if Share.DoAccessBasedDirectoryEnumeration is TRUE and ServerHashLevel is not HashDisableAll.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_5 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set the SMB2_SHAREFLAG_ALLOW_NAMESPACE_CACHING bit if Share.AllowNamespaceCaching is TRUE.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_6 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set the SMB2_SHAREFLAG_FORCE_SHARED_DELETE bit if Share.ForceSharedDelete is TRUE.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_7 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set the SMB2_SHAREFLAG_RESTRICT_EXCLUSIVE_OPENS bit if Share.RestrictExclusiveOpens is TRUE.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_8 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Connection.Dialect belongs to the SMB 3.x dialect family, and Share.EncryptData is TRUE, the server MUST set the SMB2_SHAREFLAG_ENCRYPT_DATA bit.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_9 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Share.HashEnabled is TRUE, ServerHashLevel is not HashDisableAll, and Connection.Dialect does not belong to the SMB 3.x dialect family, the server should set the SMB2_SHAREFLAG_ENABLE_HASH_V1 bit.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_10 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". The server MUST set the SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK bit if Share.ForceLevel2Oplock is TRUE.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_11 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If this share provides access to named pipes, as indicated by resource type STYPE_IPC, ShareType MUST be set to SMB2_SHARE_TYPE_PIPE.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_12 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If this share provides access to a printer, as indicated by the resource type STYPE_PRINTQ, ShareType MUST be set to SMB2_SHARE_TYPE_PRINT.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_13 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Share.IsDfs is TRUE, the server MUST set the SMB2_SHARE_CAP_DFS bit in the Capabilities field.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_14 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Connection.Dialect belongs to the SMB 3.x dialect family and Share.IsCA is TRUE, the server MUST set the SMB2_SHARE_CAP_CONTINUOUS_AVAILABILITY bit in the Capabilities field.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_15 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Connection.Dialect belongs to the SMB 3.x dialect family and TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS, the server MUST set the SMB2_SHARE_CAP_SCALEOUT bit in the Capabilities field.";
string SMB2_ReceivingAnSMB2TreeConnectRequest_16 = "SMB2: See \"Receiving an SMB2 TREE_CONNECT Request\". If Connection.Dialect belongs to the SMB 3.x dialect family and TreeConnect.Share.Type includes STYPE_CLUSTER_FS, STYPE_CLUSTER_SOFS, or STYPE_CLUSTER_DFS, the server MUST set the SMB2_SHARE_CAP_CLUSTER bit in the Capabilities field.";

// 3.3.5.8 Receiving an SMB2 TREE_DISCONNECT Request
string SMB2_ReceivingAnSMB2TreeDisconnectRequest = "\r\n3.3.5.8 Receiving an SMB2 TREE_DISCONNECT Request";

string SMB2_WrongStatusCode = "SMB2: For current SMB2 {0} request, the server should not return the error response with status code {1}";
string SMB2_RequestIsMissing = "SMB2: Because the corresponding request for this response is missing, the validation on this connection will be diabled.";
string SMB2_FirstRequestIsMissing = "SMB2: The first request on this connection is missing, the validation on this connection will be diabled.";

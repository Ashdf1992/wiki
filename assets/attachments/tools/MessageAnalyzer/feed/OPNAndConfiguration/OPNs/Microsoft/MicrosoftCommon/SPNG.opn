module SPNG
with Asn1EncodingDefaults{EncodingRule = Asn1EncodingRule.BER},
Documentation
{
    ProtocolName = "Generic Security Service Application Program Interface (GSS-API) Negotiation Mechanism",
    ShortName = "SPNG",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 4178"},
            new Reference{Name = "MS-SPNG", Version = "11.2", Date = "01/31/2013", ProgramName = ProgramName.WSPP},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "363762", Date = "05/07/2014"}
        ]
};

using Standard;
using IANA;
using Utility;
using Technologies.ASN1;

pattern NegotiationToken = NegTokenInitPatter | NegTokenRespPatter;

// WORKAROUND for bug that Asn1BerDecoder report exception when decode or-pattern.
type NegotiationTokenType 
{  
    (NegTokenInitPatter | NegTokenRespPatter) SpnegoToken;
} with Asn1Encoding{Flags = Asn1EncodingFlags.TagLengthSkipped};

// Have to define a standalone pattern to consume explict tag.
pattern NegTokenInitPatter = NegTokenInit with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0, Tagging = Asn1Tagging.Explicit};

// RFC 4178 Section 4.2.1
type NegTokenInit
{
    MechTypeList MechTypes with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0, Tagging = Asn1Tagging.Explicit}, DisplayInfo{ToText = MechTypesToText};
    optional ContextFlags ReqFlags with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1, Tagging = Asn1Tagging.Explicit};
    optional (OctetString | any) MechToken with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 2, Tagging = Asn1Tagging.Explicit};
    optional NegHints NegHints with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 3, Tagging = Asn1Tagging.Explicit};        // MS-SPNG 2.2.1
    // Future Reference: Separate NegTokenInit and NegTokenInit2
    //optional OctetString MechListMIC with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 3, Tagging = Asn1Tagging.Explicit};  //RFC 4178 Section 4.2.1
    optional OctetString MechListMIC2 with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 4, Tagging = Asn1Tagging.Explicit}; // MS-SPNG 2.2.1
} 

// Have to define a standalone pattern to consume explict tag.
pattern NegTokenRespPatter = NegTokenResp with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1, Tagging = Asn1Tagging.Explicit};

// RFC 4178 Section 4.2.2
type NegTokenResp
{
    optional NegStateEnumerated NegState with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional MechType SupportedMech with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1, Tagging = Asn1Tagging.Explicit}, DisplayInfo{ToText = MechTypeToText};
    optional (OctetString | any) ResponseToken with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 2, Tagging = Asn1Tagging.Explicit};
    optional (OctetString | any) MechListMIC with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 3, Tagging = Asn1Tagging.Explicit};
} 

pattern ContextFlags = BitString;
pattern MechType = ObjectIdentifier with DisplayInfo{ToText = MechTypeToText};
pattern MechTypeList = array<MechType>;

pattern NegStateEnumerated = enum Integer
{
    AcceptCompleted  = 0,
    AcceptIncomplete = 1,
    Reject           = 2,
    RequestMic       = 3
};

// MS-SPNG 2.2.1   NegHints
type NegHints
{
    optional GeneralString HintName with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0, Tagging = Asn1Tagging.Explicit, Flags = Asn1EncodingFlags.OctetStringIsString};
    optional OctetString HintAddress with Asn1Encoding{TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1, Tagging = Asn1Tagging.Explicit};
}

static string MechTypeToText(any data)
{
    string summary = "";
    if (data is intArray:array<int>)
    {
        summary += GetOidMeaning(Array2String<int>(intArray, "."));
    }
    return summary;
}

static string MechTypesToText(any data)
{
    string summary = "[";
    MechTypeList mechTypeList = data as array<MechType>;
    for (int i= 0; i < mechTypeList.Count; i++)
    {
        summary += MechTypeToText(mechTypeList[i]);
        if (i != mechTypeList.Count - 1)
        {
            summary += ", ";
        }
    }
    summary += "]";
    return summary;
}

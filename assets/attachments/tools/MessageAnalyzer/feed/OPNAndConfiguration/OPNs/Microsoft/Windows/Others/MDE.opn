protocol MDE with
XmlEncodingDefaults{Namespace = MDE.TnsNamesapce},
Documentation
{
    ProtocolName = "Mobile Device Enrollment Protocol",
    ShortName = "MDE",
    DocumentName = "MS-MDE",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-MDE", Version = "6.0", Date = "09/15/2017", ProgramName = ProgramName.WSPP},
        new Reference {Name = "MS-MDE2", Version = "7.0", Date = "3/16/2018", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = ""}
    ]
};

using Standard;
using Technologies.SOAP;
using Utility;
using OthersResources;
using XSD;
using HTTP;
using SOAP;
using WSFederation;
using WSS;
using WSTEP;
using WSTrust13;
// using XCEP;

// ------------------------------------- Namespace ---------------------------------------//
const string TnsNamesapce = "http://schemas.microsoft.com/windows/management/2012/01/enrollment";

// ------------------------------------- Actions ---------------------------------------//
const string MDEDiscoverAction = "http://schemas.microsoft.com/windows/management/2012/01/enrollment/IDiscoveryService/Discover";
const string MDEDiscoverResponseAction = "http://schemas.microsoft.com/windows/management/2012/01/enrollment/IDiscoveryService/DiscoverResponse";

// ------------------------------------- Constants ---------------------------------------//
const string AuthPolicyValue = "Federated";
const string RequestTypeInRequestSecurityTokenIssue = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue";
const string RequestTypeInRequestSecurityTokenRenew = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew";
const string TokenTypeInRequestSecurityTokenRST = "http://schemas.microsoft.com/5.0.0.0/ConfigurationManager/Enrollment/DeviceEnrollmentToken";
const string TokenTypeInRequestSecurityTokenRSTOnBehalfOf = "http://schemas.microsoft.com/5.0.0.0/ConfigurationManager/Enrollment/DeviceEnrollmentOnBehalfOfToken";
const string BinarySecurityTokenValueTypeInRequestSecurityToken = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment#PKCS10";
const string BinarySecurityTokenValueTypeInRequestSecurityTokenRenew = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment#PKCS7";
const string BinarySecurityTokenEncodingTypeInRequestSecurityToken = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd#base64binary";
const string BinarySecurityTokenValueTypeInRequestSecurityTokenResponse = "http://schemas.microsoft.com/5.0.0.0/ConfigurationManager/Enrollment/DeviceEnrollmentProvisionDoc";
const string BinarySecurityTokenEncodingTypeInRequestSecurityTokenResponse = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd#base64binary";
const string DeviceTypeValue = "CIMClient_Windows";
const string ApplicationVersion = "8.0.0.0";
// ------------------------------------- Endpoint & Actor---------------------------------------//

// Endpoint: Server
endpoint Server 
    over SOAP.Server
    accepts DiscoverInputMessage
    issues DiscoverOutputMessage
    provides IDiscoveryService;

client endpoint Client connected to Server;

string EnrollmentServiceUri = null;
autostart actor MDEServerOverSOAP(SOAP.Server server)
{
    DiscoverInputMessage cachedDiscoveryInputMessage = null;

    // process Discover Input message
    process server accepts soapMessage:SoapMessage where soapMessage.WsaAction == MDEDiscoverAction
    {
        switch (soapMessage.Body)
        {
            case discoverMessage:DiscoverInputMessage from XmlDecoder<DiscoverInputMessage> =>
                discoverMessage.Origins = [soapMessage];
            
                // cache the input message
                cachedDiscoveryInputMessage = discoverMessage;
            default =>
                ThrowDecodingException("MDE", "IDiscoveryService_Discover_InputMessage");
        }
    }
    
    // process Discover Output Message
    process server issues soapMessage:SoapMessage where soapMessage.WsaAction == MDEDiscoverResponseAction
    {
        switch (soapMessage.Body)
        {
            case discoverResponseMessage:DiscoverOutputMessage from XmlDecoder<DiscoverOutputMessage> =>
                // cache enrollment service
                if (discoverResponseMessage.DiscoverResponse.DiscoverResult.EnrollmentServiceUrl is url:string)
                {
                    EnrollmentServiceUri = url;
                }
                
                // set origins for response
                discoverResponseMessage.Origins = [soapMessage];
        
                // dispatch operatoin
                DispatchDiscoverOperation(cachedDiscoveryInputMessage, discoverResponseMessage);
                cachedDiscoveryInputMessage = null;
            default =>
                ThrowDecodingException("MDE", "IDiscoveryService_Discover_OutputMessage");
        }
    }
   
    // construct & dispatch operation Discover
    void DispatchDiscoverOperation(DiscoverInputMessage discoverMessage, DiscoverOutputMessage discoverResponseMessage)
    {
        if (discoverMessage == null)
        {
            ReportInsufficientData(discoverResponseMessage as any message, DiagnosisLevel.Error, MDE_INCOMPLETE_DISCOVR_OPERATION_REQUEST);
            // dispatch output message when the input message is null
            dispatch (endpoint MDE.Server over server) issues discoverResponseMessage;
            return;
        }

        var discoverOperation = new IDiscoveryService.Discovery
        {
            Discover = discoverMessage.Discover,
            DiscoverResponse = discoverResponseMessage.DiscoverResponse,
        };

        // dispatch operation
        discoverOperation.Origins = [discoverMessage as any message, discoverResponseMessage as any message];
        dispatch (endpoint MDE.Server over server) accepts discoverOperation;
    }
    
    ~endpoint(SOAP.Server server)
    {
        if (cachedDiscoveryInputMessage != null)
        {
            ReportInsufficientData(cachedDiscoveryInputMessage, DiagnosisLevel.Error, MDE_INCOMPLETE_DISCOVR_OPERATION_RESPONSE);
            dispatch (endpoint MDE.Server over server) accepts cachedDiscoveryInputMessage;
        }
        cachedDiscoveryInputMessage = null;
        EnrollmentServiceUri = null;
    }
}

/*
// sequence validation check
autostart actor MDEServerObserveXCEP(XCEP.IntermediateServer server)
{
    observe server issues msg:MessageContract.GetPoliciesResponse where IsMDEOverEnrollmentService(msg)
    {
        // section 3.3.4.1.1.2
        if (msg.GetPoliciesResponse.Response is res:ResponseType)
        {
            foreach (var policy in res.Policies.Policy)
            {
                ValidationCheckValue(policy.Attributes.PolicySchema == 3, msg, true, ReferenceType.Type, "MDE", "PolicySchema", "AttributesType",
                    3, policy.Attributes.PolicySchema);
            }
        }
    }
}
*/

// sequance validation check. cover the section 3.4.4.1.1.1, 3.4.4.1.1.2 and 3.5.4.1.1.1
autostart actor MDEServerObserveWSTEP(WSTEP.Server server)
{
    observe server accepts rstMsg:WSTEP.RequestSecurityTokenMsg where IsMDEOverEnrollmentService(rstMsg)
    {
        CheckWSTEPRequest(rstMsg.RequestSecurityToken, rstMsg);
    }
}

autostart actor MDEServerOverWSTEP(WSTEP.Server server)
{
    observe server issues rstrcMsg:WSTEP.RequestSecurityTokenResponseCollectionMsg where IsMDEOverEnrollmentService(rstrcMsg)
    {
        ExtendWSTEPResponse(rstrcMsg.RequestSecurityTokenResponseCollection, rstrcMsg);
    }
    
    observe server issues op:WSTEP.SecurityTokenService.RequestSecurityToken2 where IsMDEOverEnrollmentService(op)
    {
        /* assume that operation always contains the two origins message. First is request and second is response. */
        CheckWSTEPRequest(op.request, (op.Origins)[0]);
        ExtendWSTEPResponse(op.responseCollection, (op.Origins)[1]);
    }
}

// -------------------------------------- Constracts, Operations & Messages -------------------------------------------//
// section 3.1.4.1 Discover
contract IDiscoveryService
{
    operation Discovery
    {
        in DiscoverElement Discover;
        out DiscoverResponseElement DiscoverResponse;

        override string ToString()
        {
            string summaryLine = "Discovery";
            DiscoveryRequestType discoverRequest = Discover.request;
            DiscoveryResponseType discoveryResponse = DiscoverResponse.DiscoverResult;

            // input message
            if (discoverRequest.EmailAddress != nothing)
            {
                summaryLine += ", EmailAddress: " + (discoverRequest.EmailAddress as string);
            }
            if (discoverRequest.RequestVersion != nothing)
            {
                summaryLine += ", RequestVersion: " + (discoverRequest.RequestVersion as string);
            }
            
            if (discoveryResponse.AuthPolicy != nothing)
            {
                summaryLine += ", AuthPolicy: " + (discoveryResponse.AuthPolicy as string);
            }
            if (discoveryResponse.EnrollmentPolicyServiceUrl != nothing)
            {
                summaryLine += ", EnrollmentPolicyServiceUrl: " + (discoveryResponse.EnrollmentPolicyServiceUrl as string);
            }
            if (discoveryResponse.EnrollmentServiceUrl != nothing)
            {
                summaryLine += ", EnrollmentServiceUrl: " + (discoveryResponse.EnrollmentServiceUrl as string);
            }
            if (discoveryResponse.AuthenticationServiceUrl != nothing)
            {
                summaryLine += ", AuthenticationServiceUrl: " + (discoveryResponse.AuthenticationServiceUrl as string);
            }
            return summaryLine;
        }
    } 
    with SoapMessageInfo{Action = MDEDiscoverAction, ReplyAction = MDEDiscoverResponseAction};
}

message IDiscoveryService_Discover_InputMessage 
{
    DiscoverElement Discover;

    override string ToString()
    {
        DiscoveryRequestType discoverRequest = Discover.request;
        
        string summaryLine = "InputMessage";
        if (discoverRequest.EmailAddress is emailAddress:string)
        {
            summaryLine += ", EmailAddress: " + emailAddress;
        }
        if (discoverRequest.RequestVersion is requestVersion:string)
        {
            summaryLine += ", RequestVersion: " + requestVersion;
        }
        return summaryLine;
    }
}

message IDiscoveryService_Discover_OutputMessage
{
    DiscoverResponseElement DiscoverResponse;

    override string ToString()
    {
        DiscoveryResponseType discoveryResponse = DiscoverResponse.DiscoverResult;
        string summaryLine = "OutputMessage";
        if (discoveryResponse.AuthPolicy is authPolicy:string)
        {
            summaryLine += ", AuthPolicy: " + authPolicy;
        }
        if (discoveryResponse.EnrollmentPolicyServiceUrl is enrollmentPolicyServiceUrl:string)
        {
            summaryLine += ", EnrollmentPolicyServiceUrl: " + enrollmentPolicyServiceUrl;
        }
        if (discoveryResponse.EnrollmentServiceUrl is enrollmentServiceUrl:string)
        {
            summaryLine += ", EnrollmentServiceUrl: " + enrollmentServiceUrl;
        }
        if (discoveryResponse.AuthenticationServiceUrl is authenticationServiceUrl:string)
        {
            summaryLine += ", AuthenticationServiceUrl: " + authenticationServiceUrl;
        }
        
        return summaryLine;
    }
}

typedef DiscoverInputMessage = IDiscoveryService_Discover_InputMessage;
typedef DiscoverOutputMessage = IDiscoveryService_Discover_OutputMessage;

//----------------------------------------- Types ---------------------------------------------//
// 3.1.4.1.2.1   Discover
type DiscoverElement
{
    DiscoveryRequestType request;
}

// MDE/MDE2 section 3.1.4.1.3.1   Discovery Request
// The type should be complicatable with MDE and MDE2
type DiscoveryRequestType
{
    optional string EmailAddress;
    optional string RequestVersion where ValidationCheckEnumValue(value == "3.0" || value == "2.0" || value == "1.0", null, true, ReferenceType.Type,
        "MDE", "RequestVersion", "DiscoveryRequestType", "3.0, 2.0, 1.0", value);
    optional string DeviceType where ValidationCheckEnumValue(value == nothing || value == "WindowsPhone" || value == "CIMClient_Windows", null, true, ReferenceType.Type,
        "MDE", "DeviceType", "DiscoveryRequestType", "WindowsPhone, CIMClient_Windows", value);
    optional string ApplicationVersion;
    optional OSEditionEnum OSEdition where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<OSEditionEnum>(value as OSEditionEnum), null, true, ReferenceType.Type,
        "MDE", "OSEdition", "DiscoveryRequestType", "OSEdition", "[MS-MDE2]");
    optional array<string> AuthPolicies;
} with XmlEncoding{Order = XmlOrderIndicator.All};

pattern OSEditionEnum = enum uint
{
    PRODUCT_UNDEFINED                           = 0x00000000,
    PRODUCT_ULTIMATE                            = 0x00000001,
    PRODUCT_HOME_BASIC                          = 0x00000002,
    PRODUCT_HOME_PREMIUM                        = 0x00000003,
    PRODUCT_ENTERPRISE                          = 0x00000004,
    PRODUCT_HOME_BASIC_N                        = 0x00000005,
    PRODUCT_BUSINESS                            = 0x00000006,
    PRODUCT_STANDARD_SERVER                     = 0x00000007,
    PRODUCT_DATACENTER_SERVER                   = 0x00000008,
    PRODUCT_SMALLBUSINESS_SERVER                = 0x00000009,
    PRODUCT_ENTERPRISE_SERVER                   = 0x0000000A,
    PRODUCT_STARTER                             = 0x0000000B,
    PRODUCT_DATACENTER_SERVER_CORE              = 0x0000000C,
    PRODUCT_STANDARD_SERVER_CORE                = 0x0000000D,
    PRODUCT_ENTERPRISE_SERVER_CORE              = 0x0000000E,
    PRODUCT_ENTERPRISE_SERVER_IA64              = 0x0000000F,
    PRODUCT_BUSINESS_N                          = 0x00000010,
    PRODUCT_WEB_SERVER                          = 0x00000011,
    PRODUCT_CLUSTER_SERVER                      = 0x00000012,
    PRODUCT_HOME_SERVER                         = 0x00000013,
    PRODUCT_STORAGE_EXPRESS_SERVER              = 0x00000014,
    PRODUCT_STORAGE_STANDARD_SERVER             = 0x00000015,
    PRODUCT_STORAGE_WORKGROUP_SERVER            = 0x00000016,
    PRODUCT_STORAGE_ENTERPRISE_SERVER           = 0x00000017,
    PRODUCT_SERVER_FOR_SMALLBUSINESS            = 0x00000018,
    PRODUCT_SMALLBUSINESS_SERVER_PREMIUM        = 0x00000019,
    PRODUCT_HOME_PREMIUM_N                      = 0x0000001A,
    PRODUCT_ENTERPRISE_N                        = 0x0000001B,
    PRODUCT_ULTIMATE_N                          = 0x0000001C,
    PRODUCT_WEB_SERVER_CORE                     = 0x0000001D,
    PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT    = 0x0000001E,
    PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY      = 0x0000001F,
    PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING     = 0x00000020,
    PRODUCT_SERVER_FOUNDATION                   = 0x00000021,
    PRODUCT_HOME_PREMIUM_SERVER                 = 0x00000022,
    PRODUCT_SERVER_FOR_SMALLBUSINESS_V          = 0x00000023,
    PRODUCT_STANDARD_SERVER_V                   = 0x00000024,
    PRODUCT_DATACENTER_SERVER_V                 = 0x00000025,
    PRODUCT_ENTERPRISE_SERVER_V                 = 0x00000026,
    PRODUCT_DATACENTER_SERVER_CORE_V            = 0x00000027,
    PRODUCT_STANDARD_SERVER_CORE_V              = 0x00000028,
    PRODUCT_ENTERPRISE_SERVER_CORE_V            = 0x00000029,
    PRODUCT_HYPERV                              = 0x0000002A,
    PRODUCT_STORAGE_EXPRESS_SERVER_CORE         = 0x0000002B,
    PRODUCT_STORAGE_STANDARD_SERVER_CORE        = 0x0000002C,
    PRODUCT_STORAGE_WORKGROUP_SERVER_CORE       = 0x0000002D,
    PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE      = 0x0000002E,
    PRODUCT_STARTER_N                           = 0x0000002F,
    PRODUCT_PROFESSIONAL                        = 0x00000030,
    PRODUCT_PROFESSIONAL_N                      = 0x00000031,
    PRODUCT_SB_SOLUTION_SERVER                  = 0x00000032,
    PRODUCT_SERVER_FOR_SB_SOLUTIONS             = 0x00000033,
    PRODUCT_STANDARD_SERVER_SOLUTIONS           = 0x00000034,
    PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE      = 0x00000035,
    PRODUCT_SB_SOLUTION_SERVER_EM               = 0x00000036,
    PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM          = 0x00000037,
    PRODUCT_SOLUTION_EMBEDDEDSERVER             = 0x00000038,
    PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE        = 0x00000039,
    PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT       = 0x0000003B,
    PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL       = 0x0000003C,
    PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC    = 0x0000003D,
    PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC    = 0x0000003E,
    PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE   = 0x0000003F,
    PRODUCT_CLUSTER_SERVER_V                    = 0x00000040,
    PRODUCT_EMBEDDED                            = 0x00000041,
    PRODUCT_STARTER_E                           = 0x00000042,
    PRODUCT_HOME_BASIC_E                        = 0x00000043,
    PRODUCT_HOME_PREMIUM_E                      = 0x00000044,
    PRODUCT_PROFESSIONAL_E                      = 0x00000045,
    PRODUCT_ENTERPRISE_E                        = 0x00000046,
    PRODUCT_ULTIMATE_E                          = 0x00000047,
    PRODUCT_ENTERPRISE_EVALUATION               = 0x00000048,
    PRODUCT_MULTIPOINT_STANDARD_SERVER          = 0x0000004C,
    PRODUCT_MULTIPOINT_PREMIUM_SERVER           = 0x0000004D,
    PRODUCT_STANDARD_EVALUATION_SERVER          = 0x0000004F,
    PRODUCT_DATACENTER_EVALUATION_SERVER        = 0x00000050,
    PRODUCT_ENTERPRISE_N_EVALUATION             = 0x00000054,
    PRODUCT_EMBEDDED_AUTOMOTIVE                 = 0x00000055,
    PRODUCT_EMBEDDED_INDUSTRY_A                 = 0x00000056,
    PRODUCT_THINPC                              = 0x00000057,
    PRODUCT_EMBEDDED_A                          = 0x00000058,
    PRODUCT_EMBEDDED_INDUSTRY                   = 0x00000059,
    PRODUCT_EMBEDDED_E                          = 0x0000005A,
    PRODUCT_EMBEDDED_INDUSTRY_E                 = 0x0000005B,
    PRODUCT_EMBEDDED_INDUSTRY_A_E               = 0x0000005C,
    PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 0x0000005F,
    PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER  = 0x00000060,
    PRODUCT_CORE_ARM                            = 0x00000061,
    PRODUCT_CORE_N                              = 0x00000062,
    PRODUCT_CORE_COUNTRYSPECIFIC                = 0x00000063,
    PRODUCT_CORE_SINGLELANGUAGE                 = 0x00000064,
    PRODUCT_CORE                                = 0x00000065,
    PRODUCT_PROFESSIONAL_WMC                    = 0x00000067,
    PRODUCT_MOBILE_CORE                         = 0x00000068,
    PRODUCT_EMBEDDED_INDUSTRY_EVAL              = 0x00000069,
    PRODUCT_EMBEDDED_INDUSTRY_E_EVAL            = 0x0000006A,
    PRODUCT_EMBEDDED_EVAL                       = 0x0000006B,
    PRODUCT_EMBEDDED_E_EVAL                     = 0x0000006C,
    PRODUCT_NANO_SERVER                         = 0x0000006D,
    PRODUCT_CLOUD_STORAGE_SERVER                = 0x0000006E,
    PRODUCT_CORE_CONNECTED                      = 0x0000006F,
    PRODUCT_PROFESSIONAL_STUDENT                = 0x00000070,
    PRODUCT_CORE_CONNECTED_N                    = 0x00000071,
    PRODUCT_PROFESSIONAL_STUDENT_N              = 0x00000072,
    PRODUCT_CORE_CONNECTED_SINGLELANGUAGE       = 0x00000073,
    PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC      = 0x00000074,
    PRODUCT_CONNECTED_CAR                       = 0x00000075,
    PRODUCT_INDUSTRY_HANDHELD                   = 0x00000076,
    PRODUCT_PPI_PRO                             = 0x00000077,
    PRODUCT_ARM64_SERVER                        = 0x00000078,
    PRODUCT_EDUCATION                           = 0x00000079,
    PRODUCT_EDUCATION_N                         = 0x0000007A,
    PRODUCT_IOTUAP                              = 0x0000007B,
    PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER    = 0x0000007C,
    PRODUCT_ENTERPRISE_S                        = 0x0000007D,
    PRODUCT_ENTERPRISE_S_N                      = 0x0000007E,
    PRODUCT_PROFESSIONAL_S                      = 0x0000007F,
    PRODUCT_PROFESSIONAL_S_N                    = 0x00000080,
    PRODUCT_ENTERPRISE_S_EVALUATION             = 0x00000081,
    PRODUCT_ENTERPRISE_S_N_EVALUATION           = 0x00000082,
    PRODUCT_HOLOGRAPHIC                         = 0x00000087,
    PRODUCT_HOLOGRAPHIC_BUSINESS                = 0x00000088,
    ...
};

// 3.1.4.1.2.2   DiscoverResponse
type DiscoverResponseElement
{
    DiscoveryResponseType DiscoverResult;
}

// 3.1.4.1.3.2   DiscoveryResponse
// The type should be complicatable with MDE and MDE2
type DiscoveryResponseType
{
    optional string AuthPolicy where ValidationCheckValue(value == AuthPolicyValue, null, true, ReferenceType.Type,
        "MDE", "AuthPolicy", "DiscoveryResponseType", AuthPolicyValue, value);
    optional string EnrollmentPolicyServiceUrl;
    optional string EnrollmentServiceUrl;
    optional string AuthenticationServiceUrl;
    optional string EnrollmentVersion;
} with XmlEncoding{Order = XmlOrderIndicator.All};

bool IsMDEOverEnrollmentService(any message msg)
{
    if ((msg.Origins).Count == 0)
    {
        return false;
    }
    // redirect to RequestSecurityTokenMsg if current is the operation
    if ((msg.Origins)[0] is rstMsg:RequestSecurityTokenMsg)
    {
        msg = rstMsg;
    }
    if ((msg.Origins).Count > 0 && (msg.Origins)[0] is soapMessage:SoapMessage
        && (soapMessage.Origins).Count > 0)
    {
        if ((soapMessage.Origins)[0] is httpRequest:HttpContract.Request)
        {
            return httpRequest.Uri.ToString() == EnrollmentServiceUri;
        }
        else if ((soapMessage.Origins)[0] is httpResponse:HttpContract.Response)
        {
            return httpResponse#Uri != nothing && (httpResponse#Uri as UriType).ToString() == EnrollmentServiceUri;
        }
    }
    return false;
}

// used to manual created
type BinarySecurityTokenType : WSTEP.RequestedSecurityTokenTypeBinarySecurityTokenType
{
    new WapProvisioningdocType Value;
}

// 3.6   XML Provisioning Document Schema
type WapProvisioningdocType
{
    string version with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    array<CharacteristicType> characteristic with XmlEncoding{Namespace = ""};
}

type CharacteristicType
{
    string $"type" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional array<ParmType> parm with XmlEncoding{Namespace = ""};
    optional array<CharacteristicType> characteristic with XmlEncoding{Namespace = ""};
}

type ParmType
{
    optional string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string $"value" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// ----------------------------------------- Utility ---------------------------------------------//
void CheckWSTEPRequest(WSTEP.RequestSecurityTokenType request, any message context)
{
    if (request.RequestType is requestType:XSAnyURI)
    {
        // section 3.4.4.1.1.1, 3.4.4.1.1.2 and 3.5.4.1.1.1
        ValidationCheckValue(requestType == RequestTypeInRequestSecurityTokenIssue || requestType == RequestTypeInRequestSecurityTokenRenew, context, true, ReferenceType.Type,
            "MDE", "RequestType", "RequestSecurityTokenTypeWstepExtended",
            RequestTypeInRequestSecurityTokenIssue + " or " + RequestTypeInRequestSecurityTokenRenew, requestType);
    }
    if (request.TokenType is tokenType:XSAnyURI)
    {
        if (request.RequestType != nothing && (requestType as XSAnyURI) == RequestTypeInRequestSecurityTokenIssue)
        {
            // section 3.4.4.1.1.1 and section 3.4.4.1.1.2
            ValidationCheckValue(tokenType == TokenTypeInRequestSecurityTokenRST || tokenType == TokenTypeInRequestSecurityTokenRSTOnBehalfOf, context,
                true, ReferenceType.Type, "MDE", "TokenType", "RequestSecurityTokenTypeWstepExtended",
                TokenTypeInRequestSecurityTokenRST + " or " + TokenTypeInRequestSecurityTokenRSTOnBehalfOf, tokenType);
        }
    }
    if (request.BinarySecurityToken is bst:WSTEP.RequestSecurityTokenTypeBinarySecurityTokenType)
    {
        if (request.RequestType != nothing && (requestType as XSAnyURI) == RequestTypeInRequestSecurityTokenIssue)
        {
            // section 3.4.4.1.1.1 and section 3.4.4.1.1.2
            ValidationCheckValue(bst.ValueType == BinarySecurityTokenValueTypeInRequestSecurityToken,
                context, true, ReferenceType.Type, "MDE", "ValueType", "BinarySecurityToken_RequestSecurityTokenWstepExtended", 
                BinarySecurityTokenValueTypeInRequestSecurityToken, bst.ValueType);
        }
        else if (request.RequestType != nothing && (requestType as XSAnyURI) == RequestTypeInRequestSecurityTokenRenew)
        {
            // section 3.5.4.1.1.1
            ValidationCheckValue(bst.ValueType == BinarySecurityTokenValueTypeInRequestSecurityTokenRenew,
                context, true, ReferenceType.Type, "MDE", "ValueType", "BinarySecurityToken_RequestSecurityTokenWstepExtended", 
                BinarySecurityTokenValueTypeInRequestSecurityTokenRenew, bst.ValueType);
        }
        ValidationCheckValue(bst.EncodingType == BinarySecurityTokenEncodingTypeInRequestSecurityToken, context, true, ReferenceType.Type,
            "MDE", "EncodingType", "BinarySecurityToken_RequestSecurityTokenWstepExtended",
            BinarySecurityTokenEncodingTypeInRequestSecurityToken, bst.EncodingType);
    }
    if (request.AdditionalContext is ac:AdditionalContextType)
    {
        foreach (var ci in ac.ContextItem)
        {
            // section 3.4.4.1.1.1 and section 3.4.4.1.1.2
            switch (ci.Name)
            {
                case "DeviceType" =>
                    ValidationCheck(ci.Value != nothing && (ci.Value as ValueType).Value == DeviceTypeValue, context,
                        DiagnosisLevel.Error, MDE_DEVICETYPE_VALUE);
                case "ApplicationVersion" =>
                    if (request.RequestType != nothing && (requestType as XSAnyURI) == RequestTypeInRequestSecurityTokenRenew)
                    {
                        ValidationCheck(ci.Value != nothing && (ci.Value as ValueType).Value == ApplicationVersion, context,
                            DiagnosisLevel.Error, MDE_APPLICATIONVERSION_VALUE);
                    }
                default =>
                    continue;
            }
        }
    }
}

void ExtendWSTEPResponse(WSTEP.RequestSecurityTokenResponseCollectionType rstrc, any message context)
{
    foreach (WSTEP.RequestSecurityTokenResponseType rstrcExtended in rstrc.RequestSecurityTokenResponse)
    {
        if (rstrcExtended.TokenType is tokenType:XSAnyURI)
        {
            // section 3.4.4.1.1.3
            ValidationCheckValue(tokenType == TokenTypeInRequestSecurityTokenRST, context, true, ReferenceType.Type, "MDE",
                "TokenType", "RequestSecurityTokenResponseTypeWSTEPExtended", TokenTypeInRequestSecurityTokenRST, tokenType);
        }
        
        if (rstrcExtended.RequestedSecurityToken is rstExtended:WSTEP.RequestedSecurityTokenType &&
            rstExtended.BinarySecurityToken is bst:WSTEP.RequestedSecurityTokenTypeBinarySecurityTokenType)
        {
            if (bst.Value is bin:binary && XmlDecoder<WapProvisioningdocType>(bin) is wapProvisioningdocType:WapProvisioningdocType)
            {
                rstExtended.BinarySecurityToken = new MDE.BinarySecurityTokenType
                {
                    Id = bst.Id,
                    ValueType = bst.ValueType,
                    EncodingType = bst.EncodingType,
                    Value = wapProvisioningdocType,
                };
            }

            // section 3.4.4.1.1.3
            ValidationCheckValue(bst.ValueType == BinarySecurityTokenValueTypeInRequestSecurityTokenResponse,
                context, true, ReferenceType.Type, "MDE", "ValueType", "BinarySecurityTokenType", 
                BinarySecurityTokenValueTypeInRequestSecurityToken + " or " + BinarySecurityTokenValueTypeInRequestSecurityTokenRenew, bst.ValueType);
            ValidationCheckValue(bst.EncodingType == BinarySecurityTokenEncodingTypeInRequestSecurityTokenResponse, context,
                true, ReferenceType.Type, "MDE", "EncodingType", "BinarySecurityTokenType",
                BinarySecurityTokenEncodingTypeInRequestSecurityTokenResponse, bst.EncodingType);
        }
    }
}

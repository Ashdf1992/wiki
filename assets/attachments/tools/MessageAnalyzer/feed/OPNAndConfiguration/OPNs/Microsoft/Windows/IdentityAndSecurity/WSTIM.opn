protocol WSTIM with 
XmlEncodingDefaults{Namespace = WSTIMNamespace},
Documentation
{
    ProtocolName = "WS-Transfer: Identity Management Operations for Directory Access Extensions",
    ShortName = "WSTIM",
    DocumentName = "MS-WSTIM",
    Description = "MS-WSTIM are a set of extensions to the WS-Transfer protocol [WXFR] for representing the protocol operations commonly used for directory access in identity management protocols."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
    [
        new Reference{Name = "MS-WSTIM", Version = "7.0", Date = "02/13/2014", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary =
    [
        new Revision{Class = RevisionClass.Major, Version = "", Date = "08/01/2014"}
    ]
};

using Standard;
using Utility;
using WSTransfer;
using XSD;
using ADDM;

const string WSTIMNamespace = "http://schemas.microsoft.com/2006/11/IdentityManagement/DirectoryAccess";

autostart actor WSTIMExtendsWSTransfer(WSTransfer.ResourceIntermidiateEndpoint node) 
{
    // 3.2.4.1.1.1   BaseObjectSearchRequestMessage
    observe node accepts getReq:WSTransfer.ResourceMessageContract.GetResourceRequest where (getReq.AnyOptionalElement is wrapper:XmlWrapper) && (wrapper.Value is x:xml) && (x != null) && wrapper.Value.NamespaceUri == WSTIMNamespace
    {
        // XmlWrapper wrapper = getReq.AnyOptionalElement as XmlWrapper;
        switch (x)
        {
            case m:WSTIM.BaseObjectSearchRequest from XmlDecoder<WSTIM.BaseObjectSearchRequest> =>
                m.Value = nothing;
                getReq.AnyOptionalElement = m;
            default =>
                ThrowDecodingException("WSTIM", "BaseObjectSearchRequestMessage");
        }
    }

    // 3.2.4.1.1.2   BaseObjectSearchResponseMessage
    observe node issues getRes:WSTransfer.ResourceMessageContract.GetResourceResponse where (getRes.AnyElement.Value is x:xml) && (x != null) && (getRes.AnyElement.Value.NamespaceUri == WSTIMNamespace)
    {
        switch (x)
        {
            case m:WSTIM.BaseObjectSearchResponse from XmlDecoder<WSTIM.BaseObjectSearchResponse> =>
                m.Value = nothing;
                getRes.AnyElement = m;
            default =>
                ThrowDecodingException("WSTIM", "BaseObjectSearchResponseMessage");
        }
    }

    // 3.2.4.2.1.1   ModifyRequestMessage
    observe node accepts putReq:WSTransfer.ResourceMessageContract.PutResourceRequest where (putReq.AnyElement.Value is x:xml) && (x != null) && (putReq.AnyElement.Value.NamespaceUri == WSTIMNamespace)
    {
        switch (x)
        {
            case m:WSTIM.ModifyRequest from XmlDecoder<WSTIM.ModifyRequest> =>
                m.Value = nothing;
                putReq.AnyElement = m;
            default =>
                ThrowDecodingException("WSTIM", "ModifyRequestMessage");
        }
    }

    // 3.3.4.1.1.1   AddRequestMessage
    observe node accepts createReq:WSTransfer.ResourceFactoryMessageContract.CreateRequest  where (createReq.AnyElement.Value is x:xml) && (x != null) && (createReq.AnyElement.Value.NamespaceUri == WSTIMNamespace)
    {
        switch (x)
        {
            case m:WSTIM.AddRequest from XmlDecoder<WSTIM.AddRequest> =>
                m.Value = nothing;
                createReq.AnyElement = m;
            default =>
                ThrowDecodingException("WSTIM", "AddRequestMessage");
        }
    }
}

// 2.2.3.1   AttributeType
type AttributeType
{
    optional xml AnyElement with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Kind= XmlKind.Element};

// 2.2.3.2   AttributeTypeAndValue
pattern AttributeTypeAndValue = AttributeTypeAndValueXmlType with XmlEncoding{Kind= XmlKind.Element};

// 2.2.4.1   AttributeTypeAndValueXmlType
type AttributeTypeAndValueXmlType
{
    AttributeType AttributeType;
    optional ValueXmlType AttributeValue;
};

// 2.2.4.2   ExtensibleType
type ExtensibleType
{
    optional xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
};

// 2.2.4.3   ValueXmlType
type ValueXmlType
{
    optional (ADDM.ValueType | xml) AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
};

// 3.2.4.1.2.1   BaseObjectSearchRequest
type BaseObjectSearchRequest : XmlWrapper
{
    new optional xml Value with Encoding{Ignore = true};

    optional array<AttributeType> AttributeType;
    XSD.XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
};

// 3.2.4.1.2.2   BaseObjectSearchResponse
type BaseObjectSearchResponse : XmlWrapper
{
    new optional xml Value with Encoding{Ignore = true};

    array<PartialAttributeXmlType> PartialAttribute;
};

// 3.2.4.1.3.1   PartialAttributeXmlType
type PartialAttributeXmlType
{
    optional (ADDM.Attribute | ADDM.Object | xml) AnyElement
        with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other},
             Encoding{Decoder = WSTIMAttributeDecoder, SourcePattern = TypeOf<xml>()};
};

optional (ADDM.Attribute | ADDM.Object | xml) WSTIMAttributeDecoder(xml xmlValue)
{
    if (xmlValue is xmlTemp:xml)
    {
        if (AttributeDecoder(xmlTemp) is attr:Attribute)
        {
            return attr;
        }
        else if (ObjectDecoder(xmlTemp) is obj:Object)
        {
            return obj;
        }
    }
    return xmlValue;
}

// 3.2.4.2.2.1   ModifyRequest
type ModifyRequest : XmlWrapper
{
    new optional xml Value with Encoding{Ignore = true};

    optional array<Change> Change;
    XSD.XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
};

// 3.2.4.2.2.2   Change
type Change : AttributeTypeAndValueXmlType
{
    OperationXmlType Operation with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Kind= XmlKind.Element};

// 3.2.4.2.3.1   OperationXmlType
pattern OperationXmlType = enum XSD.NMTOKEN
                           {
                               Add = "add",
                               Delete = "delete",
                               Replace = "replace"
                           };

// 3.3.4.1.2.1   AddRequest
type AddRequest : XmlWrapper
{
    new optional xml Value with Encoding{Ignore = true};

    optional array<AttributeTypeAndValue> AttributeTypeAndValue;
    XSD.XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
};

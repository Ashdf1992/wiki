/*++

Copyright (c) 2013  Microsoft Corporation

Module Name:

    protocol.idl

Abstract:

    IDL for the Windows Client Certificate Enrollment protocol.

Environment:

    

Revision History:

--*/

protocol WCCE with
Documentation
{
    ProtocolName = "Windows Client Certificate Enrollment Protocol",
    ProtocolType = "rpc",
    ShortName = "WCCE",
    DocumentName = "MS-WCCE",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-WCCE", Version = "39.0", Date = "06/30/2015", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "379846", Date = "07/22/2015"}
    ]
};

using Standard;
using Technologies.IDL;
using Technologies.ASN1;
using DTYP;
using ERREF;
using MSRPCE;
using DCOM;
using Utility;
using X509;
using CMS;
using CMC;
using PKCS;

string MODULE_NAME = "WCCE";

endpoint WcceService over MSRPCE.Server provides mutable ICertRequestD
                                        provides mutable ICertRequestD2;

//
// Interface Attributes
//
contract ICertRequestD provides IUnknown
{
    ///
    /// The Request method initiates the certificate issuance process
    ///    
    accepts operation Request
    {
        in DwFlagsPackedData dwFlags with Encoding{Decoder = DwFlagsPackedDataDecoder, SourcePattern = TypeOf<DWORD>()};
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in out DWORD pdwRequestId
                   with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out DWORD pdwDisposition with IDL{IndirectionLevel = 1};
        in string pwszAttributes
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in CERTTRANSBLOB[CERTTRANSBLOBType.Request, dwFlags, 0, 0, 0] pctbRequest with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.CertChain, dwFlags, 0, 0, 0] pctbCertChain with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.Cert, null, 0, 0, 0] pctbEncodedCert with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.DispositionMessage, null, 0, 0, 0] pctbDispositionMessage with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Request, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", RequestId: " + pdwRequestId.ToString() +
                ", Request a certificate renewal from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    ///
    /// The GetCACert method returns property values on the CA.
    /// The main use of this method is to enable clients to diagnose issues and the state of the server.
    ///    
    accepts operation GetCACert
    {
        in DWORD fchain where ValidationCheckEnumValueTooManyItems(InRange<GetCACert_fchain1>(value) || InRange<GetCACert_fchain2>(value & 0xFFFF0000), this, true, ReferenceType.Message,
            MODULE_NAME, "fchain", "GetCACert", "GetCACert", "[MS-WCCE]")
            with DisplayInfo{ToText = FChainToText};
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.GetCACert, null, fchain, 0, 0] pctbOut
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "GetCACert, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", Retrieve property values for the CA functionality Fchain: " + FChainToText(fchain) +
                " from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    ///
    /// The Ping method performs a request response test (ping) to the CA.
    ///        
    accepts operation Ping
    {
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Ping, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", Request a response test from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 5};
}
with IDL{Uuid = {d99e6e70-fc88-11d0-b498-00a0c90312f3},
         Object = true,
         Version = "0.0",
         Pointer_default = PointerKind.UniquePtr,
         Helpstring = "ICertRequest DCOM Interface"};

contract ICertRequestD2 provides ICertRequestD
{
    ///
    /// The Request2 method requests a certificate from the CA.
    /// It is similar to the Request method, but it has an additional parameter, pwszSerialNumber.
    ///    
    accepts operation Request2
    {
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in DwFlagsPackedData dwFlags with Encoding{Decoder = DwFlagsPackedDataDecoder, SourcePattern = TypeOf<DWORD>()};
        in string pwszSerialNumber
               with IDL{Range = new RangePattern{Low = 1, High = 64},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in out DWORD pdwRequestId
                   with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out DWORD pdwDisposition with IDL{IndirectionLevel = 1};
        in string pwszAttributes
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in CERTTRANSBLOB[CERTTRANSBLOBType.Request, dwFlags, 0, 0, 0] pctbRequest
               with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.FullResponse, dwFlags, 0, 0, 0] pctbFullResponse
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.Cert, null, 0, 0, 0] pctbEncodedCert
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.DispositionMessage, null, 0, 0, 0] pctbDispositionMessage
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Request2, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", RequestId: " + pdwRequestId.ToString() + 
                ", SerialNumber: " + pwszSerialNumber.ToString() +
                ", Request a certificate renewal from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 6};
    
    ///
    /// The GetCAProperty method retrieves a property value from the CA.
    ///    
    accepts operation GetCAProperty
    {
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        in GetCAPropertyID PropID where ValidationCheckEnumValueTooManyItems(InRange<GetCAPropertyID>(value), this, true, ReferenceType.Message,
            MODULE_NAME, "PropID", "GetCAProperty", "GetCAProperty", "[MS-WCCE]")
            with Encoding{Decoder = PatternDecoder<GetCAPropertyID>, SourcePattern = TypeOf<IDLLong>()};
        in IDLLong PropIndex;
        in GetCAPropertyType PropType where ValidationCheckEnumValueTooManyItems(InRange<GetCAPropertyType>(value), this, true, ReferenceType.Message,
            MODULE_NAME, "PropType", "GetCAProperty", "GetCAProperty", "[MS-WCCE]")
            with Encoding{Decoder = PatternDecoder<GetCAPropertyType>, SourcePattern = TypeOf<IDLLong>()};
        out CERTTRANSBLOB[CERTTRANSBLOBType.PropertyValue, null, 0, PropID, 0] pctbPropertyValue
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "GetCAProperty, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", Retrieve property values for the CA functionality PropID: " + EnumToString(PropID, "WCCE.GetCAPropertyID") + 
                ", PropIndex: " + PropIndex.ToString() +
                ", PropType: " + EnumToString(PropType, "WCCE.GetCAPropertyType") +
                " from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 7};
    
    ///
    /// The GetCAPropertyInfo method retrieves a set of property structures from the CA.
    ///    
    accepts operation GetCAPropertyInfo
    {
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        out IDLLong pcProperty with IDL{IndirectionLevel = 1};
        out CERTTRANSBLOB[CERTTRANSBLOBType.PropertyInfo, null, 0, 0, pcProperty] pctbPropInfo
                with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "GetCAPropertyInfo, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) + 
                ", Retrieve property values for the CA functionality from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 8};
    
    ///
    /// The Ping2 method pings the CA.
    ///    
    accepts operation Ping2
    {
        in string pwszAuthority
               with IDL{Range = new RangePattern{Low = 1, High = 1536},
                        PointerType = PointerKind.UniquePtr,
                        BaseStringType = TypeOf<wchar_t>(),
                        IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue; // with DisplayInfo{ToText = WcceHResultValuesToText};
        
        override string ToString()
        {
            return "Ping2, ReturnValue: " + WcceHResultValuesToText(ReturnValue as uint) +
                ", Request a response test from Authority: " + pwszAuthority.ToString();
        }
    }
    with IDL{Opnum = 9};
}
with IDL{Uuid = {5422fd3a-d4b8-4cef-a12e-e87d4ca22e90},
         Object = true,
         Version = "0.0",
         Pointer_default = PointerKind.UniquePtr,
         Helpstring = "ICertRequest2 DCOM Interface"};

type CATRANSPROP[binary SourceBuffer]
{
    GetCAPropertyID lPropID
        with Encoding{Decoder = PatternDecoder<GetCAPropertyID>, SourcePattern = TypeOf<IDLLong>()};
    GetCAPropertyType propType
        with Encoding{Decoder = PatternDecoder<GetCAPropertyType>, SourceConverter = BYTEToIDLLong, SourcePattern = TypeOf<BYTE>()};
    BYTE Reserved where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "WCCE", "Reserved", "CATRANSPROP", value);
    CATRANSPROP_propFlags propFlags;
    IDLUlong obwszDisplayName;
    optional [|obwszDisplayName > 0|] string DisplayName with Encoding{Offset = obwszDisplayName, SourceData = SourceBuffer},
        IDL{DoNotGenerate = true};
} with Encoding{EncodingKind = EncodingKind.Binary};

type MarshaledCATRANSPROP[binary SourceBuffer, uint Count]
{
    array<CATRANSPROP[SourceBuffer]> CATRANSPROPs with BinaryEncoding{Length = Count};
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Binary};

pattern CATRANSPROP_propFlags = enum USHORT
{
    $"property is indexed and has multiple value" = 0x0001,
    ...
} with IDL{DoNotGenerate = true};
         
type CAINFO
{
    DWORD cbSize;
    IDLLong CAType;
    DWORD cCASignatureCerts;
    DWORD cCAExchangeCerts;
    DWORD cExitAlgorithms;
    IDLLong lPropIDMax;
    IDLLong lRoleSeparationEnabled;
    DWORD cKRACertUsedCount;
    DWORD cKRACertCount;
    DWORD fAdvancedServer;
}

// decoding pattern for Request 
pattern CERTTRANSBLOB_Type = PKCS.CertificationRequest | CMS.ContentInfo | CMC.PKIData | X509.Certificate |
    X509.CertificateList | CAINFO | KRACertStatusArray | KRACertStatusArray | CRLPublishFlags | DispositionStatusArray |
    MarshaledCATRANSPROP | ERREF.HRESULT | string | uint;

pattern CERTTRANSBLOBType = enum byte
{
    Request = 0,
    FullResponse = 1,
    CertChain = 2,
    Cert = 3,
    DispositionMessage = 4,
    PropertyValue = 5,
    PropertyInfo = 6,
    GetCACert = 7,
};

type CERTTRANSBLOB[CERTTRANSBLOBType Type, DwFlagsPackedData DwFlags, DWORD FChain, IDLLong PropID, IDLLong ItemCount]
{
    ULONG cb;
    (CERTTRANSBLOB_Type | binary) pb with IDL{Size_is = [cb], PointerType = PointerKind.UniquePtr, IndirectionLevel = 1},
        Encoding{Decoder = PbDecoder, SourcePattern = TypeOf<array<byte>>()};
    
    optional (CERTTRANSBLOB_Type | binary) PbDecoder(binary data)
    {
        any pbData = nothing;
        switch (Type)
        {
            case CERTTRANSBLOBType.Request =>
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"PKCS #10" ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<PKCS.CertificationRequest>(data);
                }
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Netscape KEYGEN" ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<SignedPublicKeyAndChallenge>(data);
                }
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.CMS ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<CMS.ContentInfo>(data);
                }
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.CMC ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<CMC.PKIData>(data);
                }
            case CERTTRANSBLOBType.CertChain =>
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.CMS ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<CMS.ContentInfo>(data);
                }
                if (DwFlags.RequestType == DwFlagsPackedData_RequestType.CMC ||
                    (DwFlags.RequestType == DwFlagsPackedData_RequestType.$"Request Type determined by CA" && pbData == nothing))
                {
                    pbData = Asn1BerDecoder<CMC.PKIData>(data);
                }
            case CERTTRANSBLOBType.FullResponse =>
                if ((DwFlags.Flags & SERVER_REQUEST_OPT_FLAGS.Y) > 0)
                {
                    pbData = Asn1BerDecoder<CMC.PKIData>(data);
                }
                else
                {
                    pbData = Asn1BerDecoder<CMS.ContentInfo>(data);
                }
            case CERTTRANSBLOBType.Cert =>
                pbData = Asn1BerDecoder<X509.Certificate>(data);
            case CERTTRANSBLOBType.DispositionMessage =>
                pbData = BinaryStringDecoder(data, TextEncoding.Unicode);
            case CERTTRANSBLOBType.GetCACert =>
                switch (FChain)
                {
                    case (GetCACert_fchain1.GETCERT_FILEVERSION |
                        GetCACert_fchain1.GETCERT_CANAME |
                        GetCACert_fchain1.GETCERT_PARENTCONFIG |
                        GetCACert_fchain1.GETCERT_POLICYVERSION |
                        GetCACert_fchain1.GETCERT_PRODUCTVERSION |
                        GetCACert_fchain1.GETCERT_SANITIZEDCANAME |
                        GetCACert_fchain1.GETCERT_SHAREDFOLDER |
                        GetCACert_fchain2.GETCERT_EXITVERSIONBYINDEX) =>
                        pbData = BinaryStringDecoder(data, TextEncoding.Unicode);
                    case GetCACert_fchain1.GETCERT_CAINFO =>
                        pbData = NdrDecoder<CAINFO>(data);
                    case (GetCACert_fchain1.GETCERT_CURRENTCRL |
                        GetCACert_fchain2.GETCERT_CRLBYINDEX) =>
                        pbData = Asn1BerDecoder<X509.CertificateList>(data);
                    case (GetCACert_fchain1.GETCERT_CASIGCERT |
                        GetCACert_fchain1.GETCERT_CAXCHGCERT |
                        GetCACert_fchain2.GETCERT_CACERTBYINDEX) =>
                        pbData = Asn1BerDecoder<X509.Certificate>(data);
                    case (GetCACert_fchain2.GETCERT_CRLSTATEBYINDEX |
                        GetCACert_fchain2.GETCERT_CACERTSTATEBYINDEX) =>
                        pbData = data;
                    case GetCACert_fchain1.GETCERT_CATYPE =>
                        pbData = BinaryPrimitiveTypeDecoder<uint>(data, Endian.Little);
                    default =>
                        pbData = data;
                }
            case CERTTRANSBLOBType.PropertyValue =>
                pbData = DecodePropertyValue(PropID, cb, data);
            case CERTTRANSBLOBType.PropertyInfo =>
                pbData = BinaryDecoder<MarshaledCATRANSPROP[data, ItemCount as uint]>(data);
            default =>
                return data;
        }

        if (pbData == nothing)
        {
            return data;
        }
        return pbData;
    }
}

typedef BYTE = byte;

type DwFlagsPackedData
{
    byte Padding1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, MODULE_NAME, "Padding1", "dwFlagsPackedData", value);
    SERVER_REQUEST_OPT_FLAGS Flags where ValidationCheckCombinationValue(InRange<SERVER_REQUEST_OPT_FLAGS>(value), null, true,
        ReferenceType.Type, "WCCE", "Flags", "dwFlagsPackedData", "0x10, 0x20, 0x04", value);
    DwFlagsPackedData_RequestType RequestType where ValidationCheckValueInRange(value >= 0x00 && value <= 0x04, null, true, ReferenceType.Type, MODULE_NAME, "RequestType", "dwFlagsPackedData", "0x00", "0x04", value);
    byte Padding2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, MODULE_NAME, "Padding2", "dwFlagsPackedData", value);
} with IDL{DoNotGenerate = true};

pattern SERVER_REQUEST_OPT_FLAGS = flags byte
{
    X = 0x10, // "If this bit is set, the response MUST include the CRLs for all the certificates returned in the pctbCertChain and pctbEncodedCert parameters."
    Y = 0x20, // "If this bit is set, then the response MUST be a CMC full PKI response. If it is not set, the response MUST be a CMS. This bit supported by the ICertRequestD2::Request2 method only."
    Z = 0x04, // "If this bit is set, this is a renewal request on behalf of another user. The processing rules for this type of request are specified in section 3.2.2.6.2.1.2.4."
    ...
} with IDL{DoNotGenerate = true};

pattern DwFlagsPackedData_RequestType = enum byte
{
    $"Request Type determined by CA" = 0x00,
    $"PKCS #10" = 0x01,
    $"Netscape KEYGEN" = 0x02,
    CMS = 0x03,
    CMC = 0x04,
    ...
} with IDL{DoNotGenerate = true};

const map<uint, string> WcceHResultMap =
{
    0x80070002 -> "ERROR_FILE_NOT_FOUND", 
    0x80070003 -> "ERROR_PATH_NOT_FOUND",
    0x80070006 -> "ERROR_INVALID_HANDLE",
    0x80074003 -> "ERROR_INVALID_POINTER",
    0x80074004 -> "CERTSRV_E_PROPERTY_EMPTY",
    0x80070057 -> "E_INVALIDARG",
    0x80090003 -> "NTE_BAD_KEY",
    0x8009000F -> "ERROR_OBJECT_EXISTS",
    0x80091004 -> "CRYPT_E_INVALID_MSG_TYPE",
    0x8009200E -> "CRYPT_E_NO_SIGNER",
    0x8009310B -> "CRYPT_E_ASN1_BADTAG",
    0x80093100 -> "CRYPT_E_ASN1_ERROR",
} with Documentation{Ignore = true};

pattern GetCACert_fchain1 = enum DWORD
{
    GETCERT_CASIGCERT       = 0x00000000,
    GETCERT_CAXCHGCERT      = 0X00000001,
    GETCERT_CURRENTCRL      = 0X6363726C,
    GETCERT_FILEVERSION     = 0x66696C65,
    GETCERT_CAINFO          = 0x696E666F,
    GETCERT_CANAME          = 0x6E616D65,
    GETCERT_PARENTCONFIG    = 0x70617265,
    GETCERT_POLICYVERSION   = 0x706F6C69,
    GETCERT_PRODUCTVERSION  = 0x70726F64,
    GETCERT_SANITIZEDCANAME = 0x73616E69,
    GETCERT_SHAREDFOLDER    = 0x73686172,
    GETCERT_CATYPE          = 0x74797065,
} with IDL{DoNotGenerate = true};

pattern GetCACert_fchain2 = enum DWORD
{
    GETCERT_CRLBYINDEX         = 0x636C0000,
    GETCERT_CACERTBYINDEX      = 0x63740000,
    GETCERT_EXITVERSIONBYINDEX = 0x65780000,
    GETCERT_CRLSTATEBYINDEX    = 0x736C0000,
    GETCERT_CACERTSTATEBYINDEX = 0x73740000,
} with IDL{DoNotGenerate = true};

pattern GetCAPropertyID = enum IDLLong
{
    CR_PROP_FILEVERSION              = 0x00000001,
    CR_PROP_PRODUCTVERSION           = 0x00000002,
    CR_PROP_EXITCOUNT                = 0x00000003,
    CR_PROP_EXITDESCRIPTION          = 0x00000004,
    CR_PROP_POLICYDESCRIPTION        = 0x00000005,
    CR_PROP_CANAME                   = 0x00000006,
    CR_PROP_SANITIZEDCANAME          = 0x00000007,
    CR_PROP_SHAREDFOLDER             = 0x00000008,
    CR_PROP_PARENTCA                 = 0x00000009,
    CR_PROP_CATYPE                   = 0x0000000A,
    CR_PROP_CASIGCERTCOUNT           = 0x0000000B,
    CR_PROP_CASIGCERT                = 0x0000000C,
    CR_PROP_CASIGCERTCHAIN           = 0x0000000D,
    CR_PROP_CAXCHGCERTCOUNT          = 0x0000000E,
    CR_PROP_CAXCHGCERT               = 0x0000000F,
    CR_PROP_CAXCHGCERTCHAIN          = 0x00000010,
    CR_PROP_BASECRL                  = 0x00000011,
    CR_PROP_DELTACRL                 = 0x00000012,
    CR_PROP_CACERTSTATE              = 0x00000013,
    CR_PROP_CRLSTATE                 = 0x00000014,
    CR_PROP_CAPROPIDMAX              = 0x00000015,
    CR_PROP_DNSNAME                  = 0x00000016,
    CR_PROP_ROLESEPARATIONENABLED    = 0x00000017,
    CR_PROP_KRACERTUSEDCOUNT         = 0x00000018,
    CR_PROP_KRACERTCOUNT             = 0x00000019,
    CR_PROP_KRACERT                  = 0x0000001A,
    CR_PROP_KRACERTSTATE             = 0x0000001B,
    CR_PROP_ADVANCEDSERVER           = 0x0000001C,
    CR_PROP_TEMPLATES                = 0x0000001D,
    CR_PROP_BASECRLPUBLISHSTATUS     = 0x0000001E,
    CR_PROP_DELTACRLPUBLISHSTATUS    = 0x0000001F,
    CR_PROP_CASIGCERTCRLCHAIN        = 0x00000020,
    CR_PROP_CAXCHGCERTCRLCHAIN       = 0x00000021,
    CR_PROP_CACERTSTATUSCODE         = 0x00000022,
    CR_PROP_CAFORWARDCROSSCERT       = 0x00000023,
    CR_PROP_CABACKWARDCROSSCERT      = 0x00000024,
    CR_PROP_CAFORWARDCROSSCERTSTATE  = 0x00000025,
    CR_PROP_CABACKWARDCROSSCERTSTATE = 0x00000026,
    CR_PROP_CACERTVERSION            = 0x00000027,
    CR_PROP_SANITIZEDCASHORTNAME     = 0x00000028,
    CR_PROP_CERTCDPURLS              = 0x00000029,
    CR_PROP_CERTAIAURLS              = 0x0000002A,
    CR_PROP_CERTAIAOCSPRLS           = 0x0000002B,
    CR_PROP_LOCALENAME               = 0x0000002C,
    CR_PROP_SUBJECTTEMPLATE_OIDS     = 0x0000002D,
    ...
} with IDL{DoNotGenerate = true};

pattern GetCAPropertyType = enum IDLLong
{
    PROPTYPE_LONG   = 0x00000001,
    PROPTYPE_DATE   = 0x00000002,
    PROPTYPE_BINARY = 0x00000003,
    PROPTYPE_STRING = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern DispositionStatus = enum byte
{
    CA_DISP_INCOMPLETE = 0x00,
    CA_DISP_ERROR      = 0x01,
    CA_DISP_REVOKED    = 0x02,
    CA_DISP_VALID      = 0x03,
    CA_DISP_INVALID    = 0x04,
    ...
} with IDL{DoNotGenerate = true};

type DispositionStatusArray[uint Count]
{
    array<DispositionStatus> DispositionStatusArray with BinaryEncoding{Length = Count};
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Binary};

pattern KRACertStatus = enum byte
{
    KRA_DISP_EXPIRED   = 0x00,
    KRA_DISP_NOTFOUND  = 0x01,
    KRA_DISP_REVOKED   = 0x02,
    KRA_DISP_VALID     = 0x03,
    KRA_DISP_NOTLOADED = 0x04,
    KRA_DISP_INVALID   = 0x05,
    KRA_DISP_UNTRUSTED = 0x06,
    ...
} with IDL{DoNotGenerate = true};

type KRACertStatusArray[uint Count]
{
    array<KRACertStatus> KRACertStatusArray with BinaryEncoding{Length = Count};
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Binary};

type CARevisionArray[uint Count]
{
    array<CARevision> CARevisionArray with BinaryEncoding{Length = Count / 4};
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Binary};

type CARevision
{
    ushort CertificateIndex;
    ushort KeyIndex;
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Binary};

// 2.2.2.6.4   Netscape KEYGEN Tag Request Format
type PublicKeyAndChallenge
{
    X509.SubjectPublicKeyInfo spki;
    IA5String challenge;
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Asn1Ber};

type SignedPublicKeyAndChallenge
{
    PublicKeyAndChallenge publicKeyAndChallenge;
    AlgorithmIdentifier signatureAlgorithm;
    BitString signature;
} with IDL{DoNotGenerate = true},
    Encoding{EncodingKind = EncodingKind.Asn1Ber};

// ----------------------------------------------------------------------------------
// Utilities and Functions
//
string WcceHResultValuesToText(any data)
{
    uint returnValue = data as uint;
    
    if (returnValue in WcceHResultMap)
    {
        return WcceHResultMap[returnValue];
    }
    else
    {
        return HResultValuesToText(returnValue);
    }
}

string FChainToText(any data)
{
    // The fchain parameter MUST be one of the values in the first table that follows,
    // or the two most significant bytes of fchain MUST be one of the values in the second table that follows
    if (data is getCACert_fchain1:GetCACert_fchain1)
    {
        return EnumToString<GetCACert_fchain1>(getCACert_fchain1, true);
    }
    else if (data is dword:DWORD)
    {
        return EnumToString<GetCACert_fchain2>(dword, true);
    }
    return "";
}

optional IDLLong BYTEToIDLLong(BYTE val)
{
    return val as IDLLong;
}

// decode the binary according propId
// See MS-WCCE section 3.2.1.4.3.2
optional any DecodePropertyValue(IDLLong propId, ULONG cb, binary bin)
{
    switch (propId)
    {
        case (GetCAPropertyID.CR_PROP_EXITCOUNT |
            GetCAPropertyID.CR_PROP_CATYPE |
            GetCAPropertyID.CR_PROP_CAXCHGCERTCOUNT |
            GetCAPropertyID.CR_PROP_CAPROPIDMAX |
            GetCAPropertyID.CR_PROP_KRACERTUSEDCOUNT |
            GetCAPropertyID.CR_PROP_ROLESEPARATIONENABLED |
            GetCAPropertyID.CR_PROP_KRACERTCOUNT |
            GetCAPropertyID.CR_PROP_ADVANCEDSERVER |
            GetCAPropertyID.CR_PROP_CASIGCERTCOUNT) =>
            return NdrDecoder<CAINFO>(bin);
        case (GetCAPropertyID.CR_PROP_CACERTSTATE |
            GetCAPropertyID.CR_PROP_CRLSTATE |
            GetCAPropertyID.CR_PROP_CAFORWARDCROSSCERTSTATE |
            GetCAPropertyID.CR_PROP_CABACKWARDCROSSCERTSTATE) =>
            return BinaryDecoder<DispositionStatusArray[cb]>(bin);
        case (GetCAPropertyID.CR_PROP_KRACERTSTATE) =>
            return BinaryDecoder<KRACertStatusArray[cb]>(bin);
        case (GetCAPropertyID.CR_PROP_BASECRLPUBLISHSTATUS |
            GetCAPropertyID.CR_PROP_DELTACRLPUBLISHSTATUS) =>
            return BinaryDecoder<CRLPublishFlags>(bin);
        case (GetCAPropertyID.CR_PROP_CACERTSTATUSCODE) =>
            return BinaryDecoder<ERREF.HRESULT>(bin);
        case (GetCAPropertyID.CR_PROP_CASIGCERT |
            GetCAPropertyID.CR_PROP_CAFORWARDCROSSCERT |
            GetCAPropertyID.CR_PROP_CABACKWARDCROSSCERT |
            GetCAPropertyID.CR_PROP_CAXCHGCERT |
            GetCAPropertyID.CR_PROP_KRACERT) =>
            return Asn1BerDecoder<X509.Certificate>(bin);
        case (GetCAPropertyID.CR_PROP_BASECRL |
            GetCAPropertyID.CR_PROP_DELTACRL) =>
            return Asn1BerDecoder<X509.CertificateList>(bin);
        case (GetCAPropertyID.CR_PROP_CASIGCERTCHAIN |
            GetCAPropertyID.CR_PROP_CASIGCERTCRLCHAIN |
            GetCAPropertyID.CR_PROP_CAXCHGCERTCRLCHAIN |
            GetCAPropertyID.CR_PROP_CAXCHGCERTCHAIN |
            GetCAPropertyID.CR_PROP_CASIGCERTCRLCHAIN) =>
            return Asn1BerDecoder<CMS.ContentInfo>(bin);
        case (GetCAPropertyID.CR_PROP_FILEVERSION |
            GetCAPropertyID.CR_PROP_PRODUCTVERSION |
            GetCAPropertyID.CR_PROP_EXITDESCRIPTION |
            GetCAPropertyID.CR_PROP_POLICYDESCRIPTION |
            GetCAPropertyID.CR_PROP_CANAME |
            GetCAPropertyID.CR_PROP_SANITIZEDCANAME |
            GetCAPropertyID.CR_PROP_SHAREDFOLDER |
            GetCAPropertyID.CR_PROP_PARENTCA |
            GetCAPropertyID.CR_PROP_DNSNAME |
            GetCAPropertyID.CR_PROP_SANITIZEDCASHORTNAME |
            GetCAPropertyID.CR_PROP_CERTCDPURLS |
            GetCAPropertyID.CR_PROP_CERTAIAURLS |
            GetCAPropertyID.CR_PROP_CERTAIAOCSPRLS |
            GetCAPropertyID.CR_PROP_LOCALENAME |
            GetCAPropertyID.CR_PROP_SUBJECTTEMPLATE_OIDS |
            GetCAPropertyID.CR_PROP_TEMPLATES /*TODO: Data does not match TD */) =>
            return BinaryDecoder<string>(bin);
        case GetCAPropertyID.CR_PROP_CACERTVERSION =>
            return BinaryDecoder<KRACertStatusArray[cb]>(bin);
        default =>
            return nothing;
    }
}

// From CSRA, to avoid loop reference
pattern CRLPublishFlags = flags ULONG
{
    CPF_BASE                      = 0x00000001,
    CPF_DELTA                     = 0x00000002,
    CPF_COMPLETE                  = 0x00000004,
    CPF_MANUAL                    = 0x00000040,
    CPF_SHADOW                    = 0x00000008,
    CPF_BADURL_ERROR              = 0x00000020,
    CPF_FILE_ERROR                = 0x00000200,
    CPF_HTTP_ERROR                = 0x00000800,
    CPF_FTP_ERROR                 = 0x00000400,
    CPF_LDAP_ERROR                = 0x00000100,
    CPF_POSTPONED_BASE_LDAP_ERROR = 0x00001000,
    CPF_POSTPONED_BASE_FILE_ERROR = 0x00002000,
    CPF_SIGNATURE_ERROR           = 0x00000080,
    CPF_CASTORE_ERROR             = 0x00000010,
    ...
} with IDL{DoNotGenerate = true};

// section 2.2.2.6 Request Format
optional (PKCS.CertificationRequest | CMS.ContentInfo | CMC.PKIData | WCCE.SignedPublicKeyAndChallenge) DecodeRequestFormat(binary bin)
{
    switch (bin)
    {
        case certificationRequest:PKCS.CertificationRequest from Asn1BerDecoder<PKCS.CertificationRequest> =>
            return certificationRequest;
        case contentInfo:CMS.ContentInfo from Asn1BerDecoder<CMS.ContentInfo> =>
            return contentInfo;
        case pkiData:CMC.PKIData from Asn1BerDecoder<CMC.PKIData> =>
            return pkiData;
        case signedPublicKeyAndChallenge:WCCE.SignedPublicKeyAndChallenge from Asn1BerDecoder<WCCE.SignedPublicKeyAndChallenge> =>
            return signedPublicKeyAndChallenge;
        default =>
            return nothing;
    }
}

// section 2.2.2.8 Response Format
optional (CMS.ContentInfo | CMC.PKIData | X509.Certificate) DecodeResponseFormat(binary bin)
{
    switch (bin)
    {
        case certificate:X509.Certificate from Asn1BerDecoder<X509.Certificate> =>
            return certificate;
        case contentInfo:CMS.ContentInfo from Asn1BerDecoder<CMS.ContentInfo> =>
            return contentInfo;
        case pkiData:CMC.PKIData from Asn1BerDecoder<CMC.PKIData> =>
            return pkiData;
        default =>
            return nothing;
    }
}

optional DwFlagsPackedData DwFlagsPackedDataDecoder(DWORD dwFlagsPackedDataData)
{
    DwFlagsPackedData data = new DwFlagsPackedData
    {
        Padding1 = (dwFlagsPackedDataData >> 24) as byte,
        Flags = (dwFlagsPackedDataData >> 16) as byte,
        RequestType = (dwFlagsPackedDataData >> 8) as byte,
        Padding2 = dwFlagsPackedDataData as byte,
    };

    ValidationCheckReservedZero(data.Padding1 == 0, null, true, ReferenceType.Type, MODULE_NAME, "Padding1", "dwFlagsPackedData", data.Padding1);
    ValidationCheckCombinationValue(InRange<SERVER_REQUEST_OPT_FLAGS>(data.Flags), null, true,
        ReferenceType.Type, "WCCE", "Flags", "dwFlagsPackedData", "0x10, 0x20, 0x04", data.Flags);
    ValidationCheckValueInRange(data.RequestType >= 0x00 && data.RequestType <= 0x04, null, true, ReferenceType.Type, MODULE_NAME, "RequestType", "dwFlagsPackedData", "0x00", "0x04", data.RequestType);
    ValidationCheckReservedZero(data.Padding2 == 0, null, true, ReferenceType.Type, MODULE_NAME, "Padding2", "dwFlagsPackedData", data.Padding2);

    return data;
}

protocol SRVS with
Documentation
{
    ProtocolName = "Server Service Remote Protocol",
    ProtocolType = "rpc",
    ShortName = "SRVS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-SRVS", Version = "32.0", Date = "05/15/2014", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="383702", Date="01/13/2016"}
        ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using Utility;
using ERREF;

endpoint Server
    over MSRPCE.Server
    provides srvsvc;

contract srvsvc
{
    accepts operation Opnum0NotUsedOnWire
    {
    }
    with IDL{Opnum = 0};
    
    accepts operation Opnum1NotUsedOnWire
    {
    }
    with IDL{Opnum = 1};
    
    accepts operation Opnum2NotUsedOnWire
    {
    }
    with IDL{Opnum = 2};
    
    accepts operation Opnum3NotUsedOnWire
    {
    }
    with IDL{Opnum = 3};
    
    accepts operation Opnum4NotUsedOnWire
    {
    }
    with IDL{Opnum = 4};
    
    accepts operation Opnum5NotUsedOnWire
    {
    }
    with IDL{Opnum = 5};
    
    accepts operation Opnum6NotUsedOnWire
    {
    }
    with IDL{Opnum = 6};
    
    accepts operation Opnum7NotUsedOnWire
    {
    }
    with IDL{Opnum = 7};
    
    accepts operation NetrConnectionEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Qualifier
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in out LPCONNECT_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrConnectionEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Qualifier: " + Qualifier +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 8};
    
    accepts operation NetrFileEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string BasePath
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string UserName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in out FILE_ENUM_STRUCT InfoStruct with IDL{IndirectionLevel = 1};
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrFileEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", BasePath: " + BasePath +
                ", UserName: " + UserName +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 9};
    
    accepts operation NetrFileGetInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD FileId;
        in DWORD Level;
        out FILE_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrFileGetInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", FileId: " + FileId.ToString() +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 10};
    
    accepts operation NetrFileClose
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD FileId;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrFileClose, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", FileId: " + FileId.ToString();
        }
    }
    with IDL{Opnum = 11};
    
    accepts operation NetrSessionEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string ClientName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string UserName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in out PSESSION_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrSessionEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", ClientName: " + ClientName +
                ", UserName: " + UserName +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 12};
    
    accepts operation NetrSessionDel
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string ClientName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string UserName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrSessionDel, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", ClientName: " + ClientName +
                ", UserName: " + UserName;
        }
    }
    with IDL{Opnum = 13};
    
    accepts operation NetrShareAdd
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in SHARE_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        in out DWORD ParmErr with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareAdd, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString() +
                ", ParmErr: " + ParmErr.ToString();
        }
    }
    with IDL{Opnum = 14};
    
    accepts operation NetrShareEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in out LPSHARE_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 15};
    
    accepts operation NetrShareGetInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string NetName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Level;
        out SHARE_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareGetInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", NetName: " + NetName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 16};
    
    accepts operation NetrShareSetInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string NetName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Level;
        in SHARE_INFO[Level] ShareInfo with IDL{Switch_Is = Level, IndirectionLevel = 1};
        in out DWORD ParmErr with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareSetInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", NetName: " + NetName +
                ", Level: " + Level.ToString() +
                ", ParmErr: " + ParmErr.ToString();
        }
    }
    with IDL{Opnum = 17};
    
    accepts operation NetrShareDel
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string NetName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Reserved;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareDel, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", NetName: " + NetName +
                ", Reserved: " + Reserved.ToString();
        }
    }
    with IDL{Opnum = 18};
    
    accepts operation NetrShareDelSticky
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string NetName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Reserved;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareDelSticky, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", NetName: " + NetName +
                ", Reserved: " + Reserved.ToString();
        }
    }
    with IDL{Opnum = 19};
    
    accepts operation NetrShareCheck
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Device
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        out ShareTypes Type
              where ValidationCheckEnumValueTooManyItems(InRange<ShareTypes>(value), this, true, ReferenceType.Message, "SRVS", "Type", "NetrShareCheck", "NetrShareCheck", "[MS-SRVS]")
              with IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<ShareTypes>, SourcePattern = TypeOf<DWORD>()};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareCheck, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Device: " + Device.ToString() +
                ", Type: " + Type.ToString();
        }
    }
    with IDL{Opnum = 20};
    
    accepts operation NetrServerGetInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        out _SERVER_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerGetInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString() ;
        }
    }
    with IDL{Opnum = 21};
    
    accepts operation NetrServerSetInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in _SERVER_INFO[Level] ServerInfo with IDL{Switch_Is = Level, IndirectionLevel = 1};
        in out DWORD ParmErr with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerSetInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString() +
                ", ParmErr: " + ParmErr.ToString();
        }
    }
    with IDL{Opnum = 22};
    
    accepts operation NetrServerDiskEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in out DISK_ENUM_CONTAINER DiskInfoStruct
                   with IDL{IndirectionLevel = 1};
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerDiskEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString() +
                ", DiskInfoStruct: " + DiskInfoStruct.ToString() +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 23};
    
    accepts operation NetrServerStatisticsGet
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Service
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Level;
        in DWORD Options;
        out LPSTAT_SERVER_0 InfoStruct with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerStatisticsGet, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Service: " + Service +
                ", Level: " + Level.ToString() +
                ", Options: " + Options.ToString();
        }
    }
    with IDL{Opnum = 24};
    
    accepts operation NetrServerTransportAdd
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in LPSERVER_TRANSPORT_INFO_0 Buffer;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTransportAdd, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 25};
    
    accepts operation NetrServerTransportEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in out LPSERVER_XPORT_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTransportEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 26};
    
    accepts operation NetrServerTransportDel
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in LPSERVER_TRANSPORT_INFO_0 Buffer;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return
                "NetrServerTransportDe, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 27};
    
    accepts operation NetrRemoteTOD
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        out LPTIME_OF_DAY_INFO BufferPtr with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrRemoteTOD, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName;
        }
    }
    with IDL{Opnum = 28};
    
    accepts operation Opnum29NotUsedOnWire
    {
    }
    with IDL{Opnum = 29};
    
    accepts operation NetprPathType
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string PathName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        out PathTypes PathType
              where ValidationCheckCombinationValueTooManyItems(InRange<PathTypes>(value), null, true, ReferenceType.Message, "SRVS", "PathType", "NetprPathType", "NetprPathType", "[MS-SRVS]")
              with IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<PathTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetprPathType, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", PathName: " + PathName +
                ", PathType: " + PathType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 30};
    
    accepts operation NetprPathCanonicalize
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string PathName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        out array<UCHAR> Outbuf with IDL{Size_is = [OutbufLen], IndirectionLevel = 1};
        in DWORD OutbufLen with IDL{Range = new RangePattern {Low = 0, High = 64000}};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in out PathTypes PathType
              where ValidationCheckCombinationValueTooManyItems(InRange<PathTypes>(value), null, true, ReferenceType.Message, "SRVS", "PathType", "NetprPathCanonicalize", "NetprPathCanonicalize", "[MS-SRVS]")
              with IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<PathTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetprPathCanonicalize, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", PathName: " + PathName +
                ", Prefix: " + Prefix +
                ", PathType: " + PathType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 31};
    
    accepts operation NetprPathCompare
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string PathName1
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string PathName2
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in PathTypes PathType
            where ValidationCheckCombinationValueTooManyItems(InRange<PathTypes>(value), null, true, ReferenceType.Message, "SRVS", "PathType", "NetprPathCompare", "NetprPathCompare", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<PathTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NetprPathCompare, ReturnValue: " + ReturnValue.ToString() +
                ", ServerName: " + ServerName +
                ", PathName1: " + PathName1 +
                ", PathName2: " + PathName2 +
                ", PathType: " + PathType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 32};
    
    accepts operation NetprNameValidate
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Name
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in NameTypes NameType
            where ValidationCheckCombinationValueTooManyItems(InRange<NameTypes>(value), null, true, ReferenceType.Message, "SRVS", "NameType", "NetprNameValidate", "NetprNameValidate", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<NameTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetprNameValidate, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Name: " + Name +
                ", NameType: " + NameType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 33};
    
    accepts operation NetprNameCanonicalize
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Name
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        out array<WCHAR> Outbuf with IDL{Size_is = [OutbufLen], IndirectionLevel = 1};
        in DWORD OutbufLen with IDL{Range = new RangePattern {Low = 0, High = 64000}};
        in NameTypes NameType
            where ValidationCheckCombinationValueTooManyItems(InRange<NameTypes>(value), null, true, ReferenceType.Message, "SRVS", "NameType", "NetprNameCanonicalize", "NetprNameCanonicalize", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<NameTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetprNameCanonicalize, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Name: " + Name +
                ", NameType: " + NameType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 34};
    
    accepts operation NetprNameCompare
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string Name1
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string Name2
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in NameTypes NameType
            where ValidationCheckCombinationValueTooManyItems(InRange<NameTypes>(value), null, true, ReferenceType.Message, "SRVS", "NameType", "NetprNameCompare", "NetprNameCompare", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<NameTypes>, SourcePattern = TypeOf<DWORD>()};
        in DWORD Flags;
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NetprNameCompare, ReturnValue: " + ReturnValue.ToString() +
                ", ServerName: " + ServerName +
                ", Name1: " + Name1 +
                ", Name2: " + Name2 +
                ", NameType: " + NameType.ToString() +
                ", Flags: " + Flags.ToString();
        }
    }
    with IDL{Opnum = 35};
    
    accepts operation NetrShareEnumSticky
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in out LPSHARE_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out DWORD TotalEntries with IDL{IndirectionLevel = 1};
        in out DWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareEnumSticky, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 36};
    
    accepts operation NetrShareDelStart
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string NetName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DWORD Reserved;
        out PSHARE_DEL_HANDLE ContextHandle;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return
                "NetrShareDelStart, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", NetName: " + NetName +
                ", Reserved: " + Reserved.ToString();
        }
    }
    with IDL{Opnum = 37};
    
    accepts operation NetrShareDelCommit
    {
        in out PSHARE_DEL_HANDLE ContextHandle;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareDelCommit, ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 38};
    
    accepts operation NetrpGetFileSecurity
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string ShareName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string lpFileName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in SECURITY_INFORMATION RequestedInformation;
        out PADT_SECURITY_DESCRIPTOR SecurityDescriptor with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "NetrpGetFileSecurity, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", ShareName: " + ShareName +
                ", lpFileName: " + lpFileName +
                ", RequestedInformation: " + RequestedInformation.ToString();
        }
    }
    with IDL{Opnum = 39};
    
    accepts operation NetrpSetFileSecurity
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string ShareName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string lpFileName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in SECURITY_INFORMATION SecurityInformation;
        in PADT_SECURITY_DESCRIPTOR SecurityDescriptor;
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "NetrpSetFileSecurity, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", ShareName: " + ShareName +
                ", lpFileName: " + lpFileName;
        }
    }
    with IDL{Opnum = 40};
    
    accepts operation NetrServerTransportAddEx
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in TRANSPORT_INFO[Level] Buffer with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTransportAddEx, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 41};
    
    accepts operation Opnum42NotUsedOnWire
    {
    }
    with IDL{Opnum = 42};
    
    accepts operation NetrDfsGetVersion
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        out DWORD Version with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsGetVersion, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Version: " + Version.ToString();
        }
    }
    with IDL{Opnum = 43};
    
    accepts operation NetrDfsCreateLocalPartition
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string ShareName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in GUID EntryUid with IDL{IndirectionLevel = 1};
        in string EntryPrefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in string ShortName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in LPNET_DFS_ENTRY_ID_CONTAINER RelationInfo;
        in int Force;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsCreateLocalPartition, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", ShareName: " + ShareName +
                ", EntryUid: " + EntryUid.ToString() +
                ", EntryPrefix: " + EntryPrefix +
                ", ShortName: " + ShortName +
                ", Force: " + Force.ToString();
        }
    }
    with IDL{Opnum = 44};
    
    accepts operation NetrDfsDeleteLocalPartition
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in GUID Uid with IDL{IndirectionLevel = 1};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsDeleteLocalPartition, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Uid: " + Uid.ToString() +
                ", Prefix: " + Prefix;
        }
    }
    with IDL{Opnum = 45};
    
    accepts operation NetrDfsSetLocalVolumeState
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in GUID Uid with IDL{IndirectionLevel = 1};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in IDLUlong State;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsSetLocalVolumeState, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Uid: " + Uid.ToString() +
                ", Prefix: " + Prefix +
                ", State: " + State.ToString();
        }
    }
    with IDL{Opnum = 46};
    
    accepts operation Opnum47NotUsedOnWire
    {
    }
    with IDL{Opnum = 47};
    
    accepts operation NetrDfsCreateExitPoint
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in GUID Uid with IDL{IndirectionLevel = 1};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DFSEntryFlags Type
            where ValidationCheckCombinationValueTooManyItems(InRange<DFSEntryFlags>(value), null, true, ReferenceType.Message, "SRVS", "Type", "NetrDfsCreateExitPoint", "NetrDfsCreateExitPoint", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<DFSEntryFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD ShortPrefixLen
               with IDL{Range = new RangePattern {Low = 0, High = 32}};
        out string ShortPrefix
                with IDL{Size_is = [ShortPrefixLen], IndirectionLevel = 1, BaseStringType = TypeOf<array<WCHAR>>()};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsCreateExitPoint, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Uid: " + Uid.ToString() +
                ", Prefix: " + Prefix +
                ", Type: " + Type.ToString() +
                ", ShortPrefixLen: " + ShortPrefixLen.ToString() +
                ", ShortPrefix: " + ShortPrefix;
        }
    }
    with IDL{Opnum = 48};
    
    accepts operation NetrDfsDeleteExitPoint
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in GUID Uid with IDL{IndirectionLevel = 1};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DFSEntryFlags Type
            where ValidationCheckCombinationValueTooManyItems(InRange<DFSEntryFlags>(value), null, true, ReferenceType.Message, "SRVS", "Type", "NetrDfsDeleteExitPoint", "NetrDfsDeleteExitPoint", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<DFSEntryFlags>, SourcePattern = TypeOf<DWORD>()};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsDeleteExitPoint, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Uid: " + Uid.ToString() +
                ", Prefix: " + Prefix +
                ", Type: " + Type.ToString();
        }
    }
    with IDL{Opnum = 49};
    
    accepts operation NetrDfsModifyPrefix
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in GUID Uid with IDL{IndirectionLevel = 1};
        in string Prefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsModifyPrefix, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Uid: " + Uid.ToString() +
                ", Prefix: " + Prefix;
        }
    }
    with IDL{Opnum = 50};
    
    accepts operation NetrDfsFixLocalVolume
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in string VolumeName
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in DFSEntryFlags EntryType
            where ValidationCheckCombinationValueTooManyItems(InRange<DFSEntryFlags>(value), null, true, ReferenceType.Message, "SRVS", "EntryType", "NetrDfsFixLocalVolume", "NetrDfsFixLocalVolume", "[MS-SRVS]")
            with Encoding{Decoder = PatternDecoder<DFSEntryFlags>, SourcePattern = TypeOf<DWORD>()};
        in IDLUlong ServiceType;
        in string StgId
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in GUID EntryUid with IDL{IndirectionLevel = 1};
        in string EntryPrefix
               with IDL{BaseStringType = TypeOf<WCHAR>(),
                                         String = true,
                                         IndirectionLevel = 1};
        in LPNET_DFS_ENTRY_ID_CONTAINER RelationInfo;
        in IDLUlong CreateDisposition;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsFixLocalVolume, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", VolumeName: " + VolumeName +
                ", EntryType: " + EntryType.ToString() +
                ", ServiceType: " + ServiceType.ToString() +
                ", StgId: " + StgId.ToString() +
                ", EntryUid: " + EntryUid.ToString() +
                ", EntryPrefix: " + EntryPrefix +
                ", CreateDisposition: " + CreateDisposition.ToString();
        }
    }
    with IDL{Opnum = 51};
    
    accepts operation NetrDfsManagerReportSiteInfo
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in out LPDFS_SITELIST_INFO ppSiteInfo with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDfsManagerReportSiteInfo, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName;
        }
    }
    with IDL{Opnum = 52};
    
    accepts operation NetrServerTransportDelEx
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in TRANSPORT_INFO[Level] Buffer with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTransportDelEx, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 53};
    
    accepts operation NetrServerAliasAdd
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in SERVER_ALIAS_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAliasAdd, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 54};
    
    accepts operation NetrServerAliasEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in out LPSERVER_ALIAS_ENUM_STRUCT InfoStruct;
        in DWORD PreferedMaximumLength;
        out LPDWORD TotalEntries;
        in out LPDWORD ResumeHandle with IDL{PointerType = PointerKind.UniquePtr};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAliasEnum, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", InfoStruct: " + InfoStruct.ToString() +
                ", PreferedMaximumLength: " + PreferedMaximumLength.ToString() +
                ", TotalEntries: " + TotalEntries.ToString() +
                ", ResumeHandle: " + ResumeHandle.ToString();
        }
    }
    with IDL{Opnum = 55};
    
    accepts operation NetrServerAliasDel
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in SERVER_ALIAS_INFO[Level] InfoStruct with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAliasDel, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 56};
    
    accepts operation NetrShareDelEx
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<SRVSVC_HANDLE>(),
                                         String = true};
        in DWORD Level;
        in SHARE_INFO[Level] ShareInfo with IDL{Switch_Is = Level, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrShareDelEx, ReturnValue: " + NtStatusValuesToText(ReturnValue) +
                ", ServerName: " + ServerName +
                ", Level: " + Level.ToString();
        }
    }
    with IDL{Opnum = 57};
}
with IDL{Uuid = {4b324fc8-1670-01d3-1278-5a47bf6ee188},
                          Version = "3.0",
                          Pointer_default = PointerKind.UniquePtr,
                          Ms_union = true};

typedef SRVSVC_HANDLE = string with IDL{Handle = true,
                              BaseStringType = TypeOf<wchar_t>(),
                              String = true,
                              IndirectionLevel = 1} ;

type _CONNECT_ENUM_STRUCT
{
    DWORD Level;
    CONNECT_ENUM_UNION[Level] ConnectInfo with IDL{Switch_Is = Level};
}

typedef CONNECT_ENUM_STRUCT = _CONNECT_ENUM_STRUCT;
typedef PCONNECT_ENUM_STRUCT = _CONNECT_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPCONNECT_ENUM_STRUCT = _CONNECT_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type CONNECT_ENUM_UNION[DWORD tag]
{
    optional [|tag == 0|] CONNECT_INFO_0_CONTAINER Level0 with IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] CONNECT_INFO_1_CONTAINER Level1 with IDL{Case = [1], IndirectionLevel = 1};
}
with IDL
         {Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type CONNECT_INFO_0_CONTAINER
{
    DWORD EntriesRead;
    CONNECTION_INFO_0 Buffer
        with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

type _CONNECTION_INFO_0
{
    DWORD coni0_id;
}

typedef CONNECTION_INFO_0 = _CONNECTION_INFO_0;
typedef PCONNECTION_INFO_0 = _CONNECTION_INFO_0 with IDL{IndirectionLevel = 1};
typedef LPCONNECTION_INFO_0 = _CONNECTION_INFO_0 with IDL{IndirectionLevel = 1};

type _CONNECT_INFO_1_CONTAINER
{
    DWORD EntriesRead;
    CONNECTION_INFO_1 Buffer with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

typedef CONNECT_INFO_1_CONTAINER = _CONNECT_INFO_1_CONTAINER;
typedef PCONNECT_INFO_1_CONTAINER = _CONNECT_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPCONNECT_INFO_1_CONTAINER = _CONNECT_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};

type _CONNECTION_INFO_1
{
    DWORD coni1_id;
    ShareTypes coni1_type 
        where ValidationCheckEnumValueTooManyItems(InRange<ShareTypes>(value), null, true, ReferenceType.Type, "SRVS", "coni1_type", "_CONNECTION_INFO_1", "CONNECTION_INFO_1", "[MS-SRVS]")
        with Encoding{Decoder = PatternDecoder<ShareTypes>, SourcePattern = TypeOf<DWORD>()};
    DWORD coni1_num_opens;
    DWORD coni1_num_users;
    DWORD coni1_time;
    string coni1_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string coni1_netname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef CONNECTION_INFO_1 = _CONNECTION_INFO_1;
typedef PCONNECTION_INFO_1 = _CONNECTION_INFO_1 with IDL{IndirectionLevel = 1};
typedef LPCONNECTION_INFO_1 = _CONNECTION_INFO_1 with IDL{IndirectionLevel = 1};

type _FILE_ENUM_STRUCT
{
    DWORD Level;
    FILE_ENUM_UNION[Level] FileInfo with IDL{Switch_Is = Level};
}

typedef FILE_ENUM_STRUCT = _FILE_ENUM_STRUCT;
typedef PFILE_ENUM_STRUCT = _FILE_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPFILE_ENUM_STRUCT = _FILE_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type FILE_ENUM_UNION[DWORD tag]
{
    optional [|tag == 2|] FILE_INFO_2_CONTAINER Level2 with IDL{Case = [2], IndirectionLevel = 1};
    optional [|tag == 3|] FILE_INFO_3_CONTAINER Level3 with IDL{Case = [3], IndirectionLevel = 1};
}
with IDL
         {Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type _FILE_INFO_2_CONTAINER
{
    DWORD EntriesRead;
    FILE_INFO_2 Buffer with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

typedef FILE_INFO_2_CONTAINER = _FILE_INFO_2_CONTAINER;
typedef PFILE_INFO_2_CONTAINER = _FILE_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPFILE_INFO_2_CONTAINER = _FILE_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};

type _FILE_INFO_2
{
    DWORD fi2_id;
}

typedef FILE_INFO_2 = _FILE_INFO_2;
typedef PFILE_INFO_2 = _FILE_INFO_2 with IDL{IndirectionLevel = 1};
typedef LPFILE_INFO_2 = _FILE_INFO_2 with IDL{IndirectionLevel = 1};

type _FILE_INFO_3_CONTAINER
{
    DWORD EntriesRead;
    FILE_INFO_3 Buffer with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

typedef FILE_INFO_3_CONTAINER = _FILE_INFO_3_CONTAINER;
typedef PFILE_INFO_3_CONTAINER = _FILE_INFO_3_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPFILE_INFO_3_CONTAINER = _FILE_INFO_3_CONTAINER with IDL{IndirectionLevel = 1};

type _FILE_INFO_3
{
    DWORD fi3_id;
    DWORD fi3_permissions;
    DWORD fi3_num_locks;
    string fi3_pathname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string fi3_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef FILE_INFO_3 = _FILE_INFO_3;
typedef PFILE_INFO_3 = _FILE_INFO_3 with IDL{IndirectionLevel = 1};
typedef LPFILE_INFO_3 = _FILE_INFO_3 with IDL{IndirectionLevel = 1};

type FILE_INFO[DWORD Level]
{
    optional [|Level == 2|] FILE_INFO_2 FileInfo2 with IDL{Case = [2], IndirectionLevel = 1};
    optional [|Level == 3|] FILE_INFO_3 FileInfo3 with IDL{Case = [3], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<IDLUlong>(), UnionKind = UnionKind.NonEncapsulated};

type _SESSION_ENUM_STRUCT
{
    DWORD Level;
    SESSION_ENUM_UNION[Level] SessionInfo with IDL{Switch_Is = Level};
}

typedef SESSION_ENUM_STRUCT = _SESSION_ENUM_STRUCT;
typedef PSESSION_ENUM_STRUCT = _SESSION_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPSESSION_ENUM_STRUCT = _SESSION_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type SESSION_ENUM_UNION[DWORD tag]
{
    optional [|tag == 0|] SESSION_INFO_0_CONTAINER Level0 with IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] SESSION_INFO_1_CONTAINER Level1 with IDL{Case = [1], IndirectionLevel = 1};
    optional [|tag == 2|] SESSION_INFO_2_CONTAINER Level2 with IDL{Case = [2], IndirectionLevel = 1};
    optional [|tag == 10|] SESSION_INFO_10_CONTAINER Level10 with IDL{Case = [10], IndirectionLevel = 1};
    optional [|tag == 502|] SESSION_INFO_502_CONTAINER Level502 with IDL{Case = [502], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type _SESSION_INFO_0_CONTAINER
{
    DWORD EntriesRead;
    array<LPSESSION_INFO_0> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SESSION_INFO_0_CONTAINER = _SESSION_INFO_0_CONTAINER;
typedef PSESSION_INFO_0_CONTAINER = _SESSION_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_0_CONTAINER = _SESSION_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};

type _SESSION_INFO_0
{
    string sesi0_cname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SESSION_INFO_0 = _SESSION_INFO_0;
typedef PSESSION_INFO_0 = _SESSION_INFO_0 with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_0 = _SESSION_INFO_0 with IDL{IndirectionLevel = 1};

type _SESSION_INFO_1_CONTAINER
{
    DWORD EntriesRead;
    array<LPSESSION_INFO_1> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SESSION_INFO_1_CONTAINER = _SESSION_INFO_1_CONTAINER;
typedef PSESSION_INFO_1_CONTAINER = _SESSION_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_1_CONTAINER = _SESSION_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};

type _SESSION_INFO_1
{
    string sesi1_cname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string sesi1_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sesi1_num_opens;
    DWORD sesi1_time;
    DWORD sesi1_idle_time;
    SessionUserFlags sesi1_user_flags
        where ValidationCheckCombinationValue(InRange<SessionUserFlags>(value), null, true, ReferenceType.Type, "SRVS", "sesi1_user_flags", "_SESSION_INFO_1", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<SessionUserFlags>, SourcePattern = TypeOf<DWORD>()};
}

typedef SESSION_INFO_1 = _SESSION_INFO_1;
typedef PSESSION_INFO_1 = _SESSION_INFO_1 with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_1 = _SESSION_INFO_1 with IDL{IndirectionLevel = 1};

type _SESSION_INFO_2_CONTAINER
{
    DWORD EntriesRead;
    array<LPSESSION_INFO_2> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SESSION_INFO_2_CONTAINER = _SESSION_INFO_2_CONTAINER;
typedef PSESSION_INFO_2_CONTAINER = _SESSION_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_2_CONTAINER = _SESSION_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};

type _SESSION_INFO_2
{
    string sesi2_cname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string sesi2_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sesi2_num_opens;
    DWORD sesi2_time;
    DWORD sesi2_idle_time;
    SessionUserFlags sesi2_user_flags
        where ValidationCheckCombinationValue(InRange<SessionUserFlags>(value), null, true, ReferenceType.Type, "SRVS", "sesi2_user_flags", "_SESSION_INFO_2", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<SessionUserFlags>, SourcePattern = TypeOf<DWORD>()};
    string sesi2_cltype_name
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SESSION_INFO_2 = _SESSION_INFO_2;
typedef PSESSION_INFO_2 = _SESSION_INFO_2 with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_2 = _SESSION_INFO_2 with IDL{IndirectionLevel = 1};

type _SESSION_INFO_10_CONTAINER
{
    DWORD EntriesRead;
    array<LPSESSION_INFO_10> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SESSION_INFO_10_CONTAINER = _SESSION_INFO_10_CONTAINER;
typedef PSESSION_INFO_10_CONTAINER = _SESSION_INFO_10_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_10_CONTAINER = _SESSION_INFO_10_CONTAINER with IDL{IndirectionLevel = 1};

type _SESSION_INFO_10
{
    string sesi10_cname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string sesi10_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sesi10_time;
    DWORD sesi10_idle_time;
}

typedef SESSION_INFO_10 = _SESSION_INFO_10;
typedef PSESSION_INFO_10 = _SESSION_INFO_10 with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_10 = _SESSION_INFO_10 with IDL{IndirectionLevel = 1};

type _SESSION_INFO_502_CONTAINER
{
    DWORD EntriesRead;
    array<LPSESSION_INFO_502> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SESSION_INFO_502_CONTAINER = _SESSION_INFO_502_CONTAINER;
typedef PSESSION_INFO_502_CONTAINER = _SESSION_INFO_502_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_502_CONTAINER = _SESSION_INFO_502_CONTAINER with IDL{IndirectionLevel = 1};

type _SESSION_INFO_502
{
    string sesi502_cname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string sesi502_username
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sesi502_num_opens;
    DWORD sesi502_time;
    DWORD sesi502_idle_time;
    SessionUserFlags sesi502_user_flags
        where ValidationCheckCombinationValue(InRange<SessionUserFlags>(value), null, true, ReferenceType.Type, "SRVS", "sesi502_user_flags", "_SESSION_INFO_502", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<SessionUserFlags>, SourcePattern = TypeOf<DWORD>()};
    string sesi502_cltype_name
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string sesi502_transport
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SESSION_INFO_502 = _SESSION_INFO_502;
typedef PSESSION_INFO_502 = _SESSION_INFO_502 with IDL{IndirectionLevel = 1};
typedef LPSESSION_INFO_502 = _SESSION_INFO_502 with IDL{IndirectionLevel = 1};

type SHARE_INFO[DWORD tag]
{
    optional [|tag == 0|] SHARE_INFO_0 ShareInfo0 with IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] SHARE_INFO_1 ShareInfo1 with IDL{Case = [1], IndirectionLevel = 1};
    optional [|tag == 2|] SHARE_INFO_2 ShareInfo2 with IDL{Case = [2], IndirectionLevel = 1};
    optional [|tag == 502|] SHARE_INFO_502_I ShareInfo502 with IDL{Case = [502], IndirectionLevel = 1};
    optional [|tag == 1004|] SHARE_INFO_1004 ShareInfo1004 with IDL{Case = [1004], IndirectionLevel = 1};
    optional [|tag == 1006|] SHARE_INFO_1006 ShareInfo1006 with IDL{Case = [1006], IndirectionLevel = 1};
    optional [|tag == 1501|] SHARE_INFO_1501_I ShareInfo1501 with IDL{Case = [1501], IndirectionLevel = 1};
    optional [|tag == 1005|] SHARE_INFO_1005 ShareInfo1005 with IDL{Case = [1005], IndirectionLevel = 1};
    optional [|tag == 501|] SHARE_INFO_501 ShareInfo501 with IDL{Case = [501], IndirectionLevel = 1};
    optional [|tag == 503|] SHARE_INFO_503_I ShareInfo503 with IDL{Case = [503], IndirectionLevel = 1};
}
with IDL{EmptyDefault = true,
                          Switch_Type = TypeOf<IDLUlong>(),
                          UnionKind = UnionKind.NonEncapsulated};

type _SHARE_INFO_0
{
    string shi0_netname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SHARE_INFO_0 = _SHARE_INFO_0;
typedef PSHARE_INFO_0 = _SHARE_INFO_0 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_0 = _SHARE_INFO_0 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1
{
    string shi1_netname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi1_type;
    string shi1_remark
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SHARE_INFO_1 = _SHARE_INFO_1;
typedef PSHARE_INFO_1 = _SHARE_INFO_1 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1 = _SHARE_INFO_1 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_2
{
    string shi2_netname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi2_type;
    string shi2_remark
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi2_permissions;
    DWORD shi2_max_uses;
    DWORD shi2_current_uses;
    string shi2_path
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string shi2_passwd
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SHARE_INFO_2 = _SHARE_INFO_2;
typedef PSHARE_INFO_2 = _SHARE_INFO_2 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_2 = _SHARE_INFO_2 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_502_I
{
    string shi502_netname
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    ShareTypes shi502_type 
        where ValidationCheckEnumValueTooManyItems(InRange<ShareTypes>(value), null, true, ReferenceType.Type, "SRVS", "shi502_type", "_SHARE_INFO_502_I", "SHARE_INFO_502_I", "[MS-SRVS]")
        with Encoding{Decoder = PatternDecoder<ShareTypes>, SourcePattern = TypeOf<DWORD>()};
    string shi502_remark
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi502_permissions;
    DWORD shi502_max_uses;
    DWORD shi502_current_uses;
    string shi502_path
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string shi502_passwd
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi502_reserved;
    array<byte> shi502_security_descriptor with IDL{Size_is = [shi502_reserved], IndirectionLevel = 1};
}

typedef SHARE_INFO_502_I = _SHARE_INFO_502_I;
typedef PSHARE_INFO_502_I = _SHARE_INFO_502_I with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_502_I = _SHARE_INFO_502_I with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1004
{
    string shi1004_remark
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SHARE_INFO_1004 = _SHARE_INFO_1004;
typedef PSHARE_INFO_1004 = _SHARE_INFO_1004 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1004 = _SHARE_INFO_1004 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1006
{
    DWORD shi1006_max_uses;
}

typedef SHARE_INFO_1006 = _SHARE_INFO_1006;
typedef PSHARE_INFO_1006 = _SHARE_INFO_1006 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1006 = _SHARE_INFO_1006 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1501_I
{
    DWORD shi1501_reserved;
    array<UCHAR> shi1501_security_descriptor
        with IDL{Size_is = [shi1501_reserved], IndirectionLevel = 1};
}

typedef SHARE_INFO_1501_I = _SHARE_INFO_1501_I;
typedef PSHARE_INFO_1501_I = _SHARE_INFO_1501_I with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1501_I = _SHARE_INFO_1501_I with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1005
{
    ClientSideCachingStates shi1005_flags
        where ValidationCheckCombinationValue(InRange<ClientSideCachingStates>(value), null, true, ReferenceType.Type, "SRVS", "shi1005_flags", "_SHARE_INFO_1005", "0x00, 0x10, 0x20, 0x30", value)
        with Encoding{Decoder = PatternDecoder<ClientSideCachingStates>, SourcePattern = TypeOf<DWORD>()};
}

typedef SHARE_INFO_1005 = _SHARE_INFO_1005;
typedef PSHARE_INFO_1005 = _SHARE_INFO_1005 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1005 = _SHARE_INFO_1005 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_501
{
    string shi501_netname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi501_type;
    string shi501_remark
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi501_flags;
}

typedef SHARE_INFO_501 = _SHARE_INFO_501;
typedef PSHARE_INFO_501 = _SHARE_INFO_501 with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_501 = _SHARE_INFO_501 with IDL{IndirectionLevel = 1};

type _SHARE_INFO_503_I
{
    string shi503_netname
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    ShareTypes shi503_type
        where ValidationCheckEnumValueTooManyItems(InRange<ShareTypes>(value), null, true, ReferenceType.Type, "SRVS", "shi503_type", "_SHARE_INFO_503_I", "SHARE_INFO_503_I", "[MS-SRVS]")
        with Encoding{Decoder = PatternDecoder<ShareTypes>, SourcePattern = TypeOf<DWORD>()};
    string shi503_remark
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi503_permissions;
    DWORD shi503_max_uses;
    DWORD shi503_current_uses;
    string shi503_path
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string shi503_passwd
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string shi503_servername
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD shi503_reserved;
    array<byte> shi503_security_descriptor with IDL{Size_is = [shi503_reserved], IndirectionLevel = 1};
}

typedef SHARE_INFO_503_I = _SHARE_INFO_503_I;
typedef PSHARE_INFO_503_I = _SHARE_INFO_503_I with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_503_I = _SHARE_INFO_503_I with IDL{IndirectionLevel = 1};

type _SHARE_ENUM_STRUCT
{
    DWORD Level;
    SHARE_ENUM_UNION[Level] ShareInfo with IDL{Switch_Is = Level};
}

typedef SHARE_ENUM_STRUCT = _SHARE_ENUM_STRUCT;
typedef PSHARE_ENUM_STRUCT = _SHARE_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPSHARE_ENUM_STRUCT = _SHARE_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type SHARE_ENUM_UNION[DWORD tag]
{
    optional [|tag == 0|] SHARE_INFO_0_CONTAINER Level0 with IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] SHARE_INFO_1_CONTAINER Level1 with IDL{Case = [1], IndirectionLevel = 1};
    optional [|tag == 2|] SHARE_INFO_2_CONTAINER Level2 with IDL{Case = [2], IndirectionLevel = 1};
    optional [|tag == 501|] SHARE_INFO_501_CONTAINER Level501 with IDL{Case = [501], IndirectionLevel = 1};
    optional [|tag == 502|] SHARE_INFO_502_CONTAINER Level502 with IDL{Case = [502], IndirectionLevel = 1};
    optional [|tag == 503|] SHARE_INFO_503_CONTAINER Level503 with IDL{Case = [503], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type _SHARE_INFO_0_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_0> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_0_CONTAINER = _SHARE_INFO_0_CONTAINER;
typedef PSHARE_INFO_0_CONTAINER = _SHARE_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_0_CONTAINER = _SHARE_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};

type _SHARE_INFO_1_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_1> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_1_CONTAINER = _SHARE_INFO_1_CONTAINER;
typedef PSHARE_INFO_1_CONTAINER = _SHARE_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_1_CONTAINER = _SHARE_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};

type _SHARE_INFO_2_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_2> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_2_CONTAINER = _SHARE_INFO_2_CONTAINER;
typedef PSHARE_INFO_2_CONTAINER = _SHARE_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_2_CONTAINER = _SHARE_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};

type _SHARE_INFO_501_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_501> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_501_CONTAINER = _SHARE_INFO_501_CONTAINER;
typedef PSHARE_INFO_501_CONTAINER = _SHARE_INFO_501_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_501_CONTAINER = _SHARE_INFO_501_CONTAINER with IDL{IndirectionLevel = 1};

type _SHARE_INFO_502_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_502_I> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_502_CONTAINER = _SHARE_INFO_502_CONTAINER;
typedef PSHARE_INFO_502_CONTAINER = _SHARE_INFO_502_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_502_CONTAINER = _SHARE_INFO_502_CONTAINER with IDL{IndirectionLevel = 1};

type _SHARE_INFO_503_CONTAINER
{
    DWORD EntriesRead;
    array<LPSHARE_INFO_503_I> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SHARE_INFO_503_CONTAINER = _SHARE_INFO_503_CONTAINER;
typedef PSHARE_INFO_503_CONTAINER = _SHARE_INFO_503_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSHARE_INFO_503_CONTAINER = _SHARE_INFO_503_CONTAINER with IDL{IndirectionLevel = 1};

type _SERVER_INFO[DWORD tag]
{
    optional [|tag == 102|] SERVER_INFO_102 ServerInfo102 with IDL{Case = [102], IndirectionLevel = 1};
    optional [|tag == 103|] SERVER_INFO_103 ServerInfo103 with IDL{Case = [103], IndirectionLevel = 1};
    optional [|tag == 502|] SERVER_INFO_502 ServerInfo502 with IDL{Case = [502], IndirectionLevel = 1};
    optional [|tag == 503|] SERVER_INFO_503 ServerInfo503 with IDL{Case = [503], IndirectionLevel = 1};
    optional [|tag == 599|] SERVER_INFO_599 ServerInfo599 with IDL{Case = [599], IndirectionLevel = 1};
    optional [|tag == 1005|] SERVER_INFO_1005 ServerInfo1005 with IDL{Case = [1005], IndirectionLevel = 1};
    optional [|tag == 1107|] SERVER_INFO_1107 ServerInfo1107 with IDL{Case = [1107], IndirectionLevel = 1};
    optional [|tag == 1010|] SERVER_INFO_1010 ServerInfo1010 with IDL{Case = [1010], IndirectionLevel = 1};
    optional [|tag == 1016|] SERVER_INFO_1016 ServerInfo1016 with IDL{Case = [1016], IndirectionLevel = 1};
    optional [|tag == 1017|] SERVER_INFO_1017 ServerInfo1017 with IDL{Case = [1017], IndirectionLevel = 1};
    optional [|tag == 1018|] SERVER_INFO_1018 ServerInfo1018 with IDL{Case = [1018], IndirectionLevel = 1};
    optional [|tag == 1501|] SERVER_INFO_1501 ServerInfo1501 with IDL{Case = [1501], IndirectionLevel = 1};
    optional [|tag == 1502|] SERVER_INFO_1502 ServerInfo1502 with IDL{Case = [1502], IndirectionLevel = 1};
    optional [|tag == 1503|] SERVER_INFO_1503 ServerInfo1503 with IDL{Case = [1503], IndirectionLevel = 1};
    optional [|tag == 1506|] SERVER_INFO_1506 ServerInfo1506 with IDL{Case = [1506], IndirectionLevel = 1};
    optional [|tag == 1510|] SERVER_INFO_1510 ServerInfo1510 with IDL{Case = [1510], IndirectionLevel = 1};
    optional [|tag == 1511|] SERVER_INFO_1511 ServerInfo1511 with IDL{Case = [1511], IndirectionLevel = 1};
    optional [|tag == 1512|] SERVER_INFO_1512 ServerInfo1512 with IDL{Case = [1512], IndirectionLevel = 1};
    optional [|tag == 1513|] SERVER_INFO_1513 ServerInfo1513 with IDL{Case = [1513], IndirectionLevel = 1};
    optional [|tag == 1514|] SERVER_INFO_1514 ServerInfo1514 with IDL{Case = [1514], IndirectionLevel = 1};
    optional [|tag == 1515|] SERVER_INFO_1515 ServerInfo1515 with IDL{Case = [1515], IndirectionLevel = 1};
    optional [|tag == 1516|] SERVER_INFO_1516 ServerInfo1516 with IDL{Case = [1516], IndirectionLevel = 1};
    optional [|tag == 1518|] SERVER_INFO_1518 ServerInfo1518 with IDL{Case = [1518], IndirectionLevel = 1};
    optional [|tag == 1523|] SERVER_INFO_1523 ServerInfo1523 with IDL{Case = [1523], IndirectionLevel = 1};
    optional [|tag == 1528|] SERVER_INFO_1528 ServerInfo1528 with IDL{Case = [1528], IndirectionLevel = 1};
    optional [|tag == 1529|] SERVER_INFO_1529 ServerInfo1529 with IDL{Case = [1529], IndirectionLevel = 1};
    optional [|tag == 1530|] SERVER_INFO_1530 ServerInfo1530 with IDL{Case = [1530], IndirectionLevel = 1};
    optional [|tag == 1533|] SERVER_INFO_1533 ServerInfo1533 with IDL{Case = [1533], IndirectionLevel = 1};
    optional [|tag == 1534|] SERVER_INFO_1534 ServerInfo1534 with IDL{Case = [1534], IndirectionLevel = 1};
    optional [|tag == 1535|] SERVER_INFO_1535 ServerInfo1535 with IDL{Case = [1535], IndirectionLevel = 1};
    optional [|tag == 1536|] SERVER_INFO_1536 ServerInfo1536 with IDL{Case = [1536], IndirectionLevel = 1};
    optional [|tag == 1538|] SERVER_INFO_1538 ServerInfo1538 with IDL{Case = [1538], IndirectionLevel = 1};
    optional [|tag == 1539|] SERVER_INFO_1539 ServerInfo1539 with IDL{Case = [1539], IndirectionLevel = 1};
    optional [|tag == 1540|] SERVER_INFO_1540 ServerInfo1540 with IDL{Case = [1540], IndirectionLevel = 1};
    optional [|tag == 1541|] SERVER_INFO_1541 ServerInfo1541 with IDL{Case = [1541], IndirectionLevel = 1};
    optional [|tag == 1542|] SERVER_INFO_1542 ServerInfo1542 with IDL{Case = [1542], IndirectionLevel = 1};
    optional [|tag == 1543|] SERVER_INFO_1543 ServerInfo1543 with IDL{Case = [1543], IndirectionLevel = 1};
    optional [|tag == 1544|] SERVER_INFO_1544 ServerInfo1544 with IDL{Case = [1544], IndirectionLevel = 1};
    optional [|tag == 1545|] SERVER_INFO_1545 ServerInfo1545 with IDL{Case = [1545], IndirectionLevel = 1};
    optional [|tag == 1546|] SERVER_INFO_1546 ServerInfo1546 with IDL{Case = [1546], IndirectionLevel = 1};
    optional [|tag == 1547|] SERVER_INFO_1547 ServerInfo1547 with IDL{Case = [1547], IndirectionLevel = 1};
    optional [|tag == 1548|] SERVER_INFO_1548 ServerInfo1548 with IDL{Case = [1548], IndirectionLevel = 1};
    optional [|tag == 1549|] SERVER_INFO_1549 ServerInfo1549 with IDL{Case = [1549], IndirectionLevel = 1};
    optional [|tag == 1550|] SERVER_INFO_1550 ServerInfo1550 with IDL{Case = [1550], IndirectionLevel = 1};
    optional [|tag == 1552|] SERVER_INFO_1552 ServerInfo1552 with IDL{Case = [1552], IndirectionLevel = 1};
    optional [|tag == 1553|] SERVER_INFO_1553 ServerInfo1553 with IDL{Case = [1553], IndirectionLevel = 1};
    optional [|tag == 1554|] SERVER_INFO_1554 ServerInfo1554 with IDL{Case = [1554], IndirectionLevel = 1};
    optional [|tag == 1555|] SERVER_INFO_1555 ServerInfo1555 with IDL{Case = [1555], IndirectionLevel = 1};
    optional [|tag == 1556|] SERVER_INFO_1556 ServerInfo1556 with IDL{Case = [1556], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<IDLUlong>(), UnionKind = UnionKind.NonEncapsulated};

type _SERVER_INFO_102
{
    DWORD sv102_platform_id;
    string sv102_name
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv102_version_major;
    DWORD sv102_version_minor;
    DWORD sv102_type;
    string sv102_comment
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv102_users;
    IDLLong sv102_disc;
    int sv102_hidden;
    DWORD sv102_announce;
    DWORD sv102_anndelta;
    DWORD sv102_licenses;
    string sv102_userpath
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SERVER_INFO_102 = _SERVER_INFO_102;
typedef PSERVER_INFO_102 = _SERVER_INFO_102 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_102 = _SERVER_INFO_102 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_103
{
    PlatformIDs sv103_platform_id
        where ValidationCheckCombinationValue(InRange<PlatformIDs>(value), null, true, ReferenceType.Type, "SRVS", "sv103_platform_id", "_SERVER_INFO_103", "300, 400, 500, 600, 700", value)
        with Encoding{Decoder = PatternDecoder<PlatformIDs>, SourcePattern = TypeOf<DWORD>()};
    string sv103_name
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv103_version_major;
    DWORD sv103_version_minor;
    SoftwareTypeFlags sv103_type
        where ValidationCheckCombinationValueTooManyItems(InRange<SoftwareTypeFlags>(value), null, true, ReferenceType.Type, "SRVS", "sv103_type", "_SERVER_INFO_103", "SERVER_INFO_103", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<SoftwareTypeFlags>, SourcePattern = TypeOf<DWORD>()};
    string sv103_comment
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv103_users;
    LONG sv103_disc;
    BOOL sv103_hidden;
    DWORD sv103_announce;
    DWORD sv103_anndelta;
    DWORD sv103_licenses;
    string sv103_userpath
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv103_capabilities;
}

typedef SERVER_INFO_103 = _SERVER_INFO_103;
typedef PSERVER_INFO_103 = _SERVER_INFO_103 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_103 = _SERVER_INFO_103 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_502
{
    DWORD sv502_sessopens;
    DWORD sv502_sessvcs;
    DWORD sv502_opensearch;
    DWORD sv502_sizreqbuf;
    DWORD sv502_initworkitems;
    DWORD sv502_maxworkitems;
    DWORD sv502_rawworkitems;
    DWORD sv502_irpstacksize;
    DWORD sv502_maxrawbuflen;
    DWORD sv502_sessusers;
    DWORD sv502_sessconns;
    DWORD sv502_maxpagedmemoryusage;
    DWORD sv502_maxnonpagedmemoryusage;
    int sv502_enablesoftcompat;
    int sv502_enableforcedlogoff;
    int sv502_timesource;
    int sv502_acceptdownlevelapis;
    int sv502_lmannounce;
}

typedef SERVER_INFO_502 = _SERVER_INFO_502;
typedef PSERVER_INFO_502 = _SERVER_INFO_502 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_502 = _SERVER_INFO_502 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_503
{
    DWORD sv503_sessopens;
    DWORD sv503_sessvcs;
    DWORD sv503_opensearch;
    DWORD sv503_sizreqbuf;
    DWORD sv503_initworkitems;
    DWORD sv503_maxworkitems;
    DWORD sv503_rawworkitems;
    DWORD sv503_irpstacksize;
    DWORD sv503_maxrawbuflen;
    DWORD sv503_sessusers;
    DWORD sv503_sessconns;
    DWORD sv503_maxpagedmemoryusage;
    DWORD sv503_maxnonpagedmemoryusage;
    int sv503_enablesoftcompat;
    int sv503_enableforcedlogoff;
    int sv503_timesource;
    int sv503_acceptdownlevelapis;
    int sv503_lmannounce;
    string sv503_domain
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv503_maxcopyreadlen;
    DWORD sv503_maxcopywritelen;
    DWORD sv503_minkeepsearch;
    DWORD sv503_maxkeepsearch;
    DWORD sv503_minkeepcomplsearch;
    DWORD sv503_maxkeepcomplsearch;
    DWORD sv503_threadcountadd;
    DWORD sv503_numblockthreads;
    DWORD sv503_scavtimeout;
    DWORD sv503_minrcvqueue;
    DWORD sv503_minfreeworkitems;
    DWORD sv503_xactmemsize;
    DWORD sv503_threadpriority;
    DWORD sv503_maxmpxct;
    DWORD sv503_oplockbreakwait;
    DWORD sv503_oplockbreakresponsewait;
    int sv503_enableoplocks;
    int sv503_enableoplockforceclose;
    int sv503_enablefcbopens;
    int sv503_enableraw;
    int sv503_enablesharednetdrives;
    DWORD sv503_minfreeconnections;
    DWORD sv503_maxfreeconnections;
}

typedef SERVER_INFO_503 = _SERVER_INFO_503;
typedef PSERVER_INFO_503 = _SERVER_INFO_503 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_503 = _SERVER_INFO_503 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_599
{
    DWORD sv599_sessopens;
    DWORD sv599_sessvcs;
    DWORD sv599_opensearch;
    DWORD sv599_sizreqbuf;
    DWORD sv599_initworkitems;
    DWORD sv599_maxworkitems;
    DWORD sv599_rawworkitems;
    DWORD sv599_irpstacksize;
    DWORD sv599_maxrawbuflen;
    DWORD sv599_sessusers;
    DWORD sv599_sessconns;
    DWORD sv599_maxpagedmemoryusage;
    DWORD sv599_maxnonpagedmemoryusage;
    int sv599_enablesoftcompat;
    int sv599_enableforcedlogoff;
    int sv599_timesource;
    int sv599_acceptdownlevelapis;
    int sv599_lmannounce;
    string sv599_domain
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD sv599_maxcopyreadlen;
    DWORD sv599_maxcopywritelen;
    DWORD sv599_minkeepsearch;
    DWORD sv599_maxkeepsearch;
    DWORD sv599_minkeepcomplsearch;
    DWORD sv599_maxkeepcomplsearch;
    DWORD sv599_threadcountadd;
    DWORD sv599_numblockthreads;
    DWORD sv599_scavtimeout;
    DWORD sv599_minrcvqueue;
    DWORD sv599_minfreeworkitems;
    DWORD sv599_xactmemsize;
    DWORD sv599_threadpriority;
    DWORD sv599_maxmpxct;
    DWORD sv599_oplockbreakwait;
    DWORD sv599_oplockbreakresponsewait;
    int sv599_enableoplocks;
    int sv599_enableoplockforceclose;
    int sv599_enablefcbopens;
    int sv599_enableraw;
    int sv599_enablesharednetdrives;
    DWORD sv599_minfreeconnections;
    DWORD sv599_maxfreeconnections;
    DWORD sv599_initsesstable;
    DWORD sv599_initconntable;
    DWORD sv599_initfiletable;
    DWORD sv599_initsearchtable;
    DWORD sv599_alertschedule;
    DWORD sv599_errorthreshold;
    DWORD sv599_networkerrorthreshold;
    DWORD sv599_diskspacethreshold;
    DWORD sv599_reserved;
    DWORD sv599_maxlinkdelay;
    DWORD sv599_minlinkthroughput;
    DWORD sv599_linkinfovalidtime;
    DWORD sv599_scavqosinfoupdatetime;
    DWORD sv599_maxworkitemidletime;
}

typedef SERVER_INFO_599 = _SERVER_INFO_599;
typedef PSERVER_INFO_599 = _SERVER_INFO_599 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_599 = _SERVER_INFO_599 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1005
{
    string sv1005_comment
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SERVER_INFO_1005 = _SERVER_INFO_1005;
typedef PSERVER_INFO_1005 = _SERVER_INFO_1005 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1005 = _SERVER_INFO_1005 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1107
{
    DWORD sv1107_users;
}

typedef SERVER_INFO_1107 = _SERVER_INFO_1107;
typedef PSERVER_INFO_1107 = _SERVER_INFO_1107 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1107 = _SERVER_INFO_1107 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1010
{
    IDLLong sv1010_disc;
}

typedef SERVER_INFO_1010 = _SERVER_INFO_1010;
typedef PSERVER_INFO_1010 = _SERVER_INFO_1010 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1010 = _SERVER_INFO_1010 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1016
{
    int sv1016_hidden;
}

typedef SERVER_INFO_1016 = _SERVER_INFO_1016;
typedef PSERVER_INFO_1016 = _SERVER_INFO_1016 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1016 = _SERVER_INFO_1016 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1017
{
    DWORD sv1017_announce;
}

typedef SERVER_INFO_1017 = _SERVER_INFO_1017;
typedef PSERVER_INFO_1017 = _SERVER_INFO_1017 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1017 = _SERVER_INFO_1017 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1018
{
    DWORD sv1018_anndelta;
}

typedef SERVER_INFO_1018 = _SERVER_INFO_1018;
typedef PSERVER_INFO_1018 = _SERVER_INFO_1018 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1018 = _SERVER_INFO_1018 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1501
{
    DWORD sv1501_sessopens;
}

typedef SERVER_INFO_1501 = _SERVER_INFO_1501;
typedef PSERVER_INFO_1501 = _SERVER_INFO_1501 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1501 = _SERVER_INFO_1501 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1502
{
    DWORD sv1502_sessvcs;
}

typedef SERVER_INFO_1502 = _SERVER_INFO_1502;
typedef PSERVER_INFO_1502 = _SERVER_INFO_1502 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1502 = _SERVER_INFO_1502 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1503
{
    DWORD sv1503_opensearch;
}

typedef SERVER_INFO_1503 = _SERVER_INFO_1503;
typedef PSERVER_INFO_1503 = _SERVER_INFO_1503 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1503 = _SERVER_INFO_1503 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1506
{
    DWORD sv1506_maxworkitems;
}

typedef SERVER_INFO_1506 = _SERVER_INFO_1506;
typedef PSERVER_INFO_1506 = _SERVER_INFO_1506 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1506 = _SERVER_INFO_1506 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1510
{
    DWORD sv1510_sessusers;
}

typedef SERVER_INFO_1510 = _SERVER_INFO_1510;
typedef PSERVER_INFO_1510 = _SERVER_INFO_1510 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1510 = _SERVER_INFO_1510 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1511
{
    DWORD sv1511_sessconns;
}

typedef SERVER_INFO_1511 = _SERVER_INFO_1511;
typedef PSERVER_INFO_1511 = _SERVER_INFO_1511 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1511 = _SERVER_INFO_1511 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1512
{
    DWORD sv1512_maxnonpagedmemoryusage;
}

typedef SERVER_INFO_1512 = _SERVER_INFO_1512;
typedef PSERVER_INFO_1512 = _SERVER_INFO_1512 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1512 = _SERVER_INFO_1512 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1513
{
    DWORD sv1513_maxpagedmemoryusage;
}

typedef SERVER_INFO_1513 = _SERVER_INFO_1513;
typedef PSERVER_INFO_1513 = _SERVER_INFO_1513 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1513 = _SERVER_INFO_1513 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1514
{
    int sv1514_enablesoftcompat;
}

typedef SERVER_INFO_1514 = _SERVER_INFO_1514;
typedef PSERVER_INFO_1514 = _SERVER_INFO_1514 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1514 = _SERVER_INFO_1514 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1515
{
    int sv1515_enableforcedlogoff;
}

typedef SERVER_INFO_1515 = _SERVER_INFO_1515;
typedef PSERVER_INFO_1515 = _SERVER_INFO_1515 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1515 = _SERVER_INFO_1515 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1516
{
    int sv1516_timesource;
}

typedef SERVER_INFO_1516 = _SERVER_INFO_1516;
typedef PSERVER_INFO_1516 = _SERVER_INFO_1516 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1516 = _SERVER_INFO_1516 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1518
{
    int sv1518_lmannounce;
}

typedef SERVER_INFO_1518 = _SERVER_INFO_1518;
typedef PSERVER_INFO_1518 = _SERVER_INFO_1518 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1518 = _SERVER_INFO_1518 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1523
{
    DWORD sv1523_maxkeepsearch;
}

typedef SERVER_INFO_1523 = _SERVER_INFO_1523;
typedef PSERVER_INFO_1523 = _SERVER_INFO_1523 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1523 = _SERVER_INFO_1523 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1528
{
    DWORD sv1528_scavtimeout;
}

typedef SERVER_INFO_1528 = _SERVER_INFO_1528;
typedef PSERVER_INFO_1528 = _SERVER_INFO_1528 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1528 = _SERVER_INFO_1528 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1529
{
    DWORD sv1529_minrcvqueue;
}

typedef SERVER_INFO_1529 = _SERVER_INFO_1529;
typedef PSERVER_INFO_1529 = _SERVER_INFO_1529 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1529 = _SERVER_INFO_1529 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1530
{
    DWORD sv1530_minfreeworkitems;
}

typedef SERVER_INFO_1530 = _SERVER_INFO_1530;
typedef PSERVER_INFO_1530 = _SERVER_INFO_1530 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1530 = _SERVER_INFO_1530 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1533
{
    DWORD sv1533_maxmpxct;
}

typedef SERVER_INFO_1533 = _SERVER_INFO_1533;
typedef PSERVER_INFO_1533 = _SERVER_INFO_1533 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1533 = _SERVER_INFO_1533 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1534
{
    DWORD sv1534_oplockbreakwait;
}

typedef SERVER_INFO_1534 = _SERVER_INFO_1534;
typedef PSERVER_INFO_1534 = _SERVER_INFO_1534 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1534 = _SERVER_INFO_1534 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1535
{
    DWORD sv1535_oplockbreakresponsewait;
}

typedef SERVER_INFO_1535 = _SERVER_INFO_1535;
typedef PSERVER_INFO_1535 = _SERVER_INFO_1535 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1535 = _SERVER_INFO_1535 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1536
{
    int sv1536_enableoplocks;
}

typedef SERVER_INFO_1536 = _SERVER_INFO_1536;
typedef PSERVER_INFO_1536 = _SERVER_INFO_1536 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1536 = _SERVER_INFO_1536 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1538
{
    int sv1538_enablefcbopens;
}

typedef SERVER_INFO_1538 = _SERVER_INFO_1538;
typedef PSERVER_INFO_1538 = _SERVER_INFO_1538 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1538 = _SERVER_INFO_1538 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1539
{
    int sv1539_enableraw;
}

typedef SERVER_INFO_1539 = _SERVER_INFO_1539;
typedef PSERVER_INFO_1539 = _SERVER_INFO_1539 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1539 = _SERVER_INFO_1539 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1540
{
    int sv1540_enablesharednetdrives;
}

typedef SERVER_INFO_1540 = _SERVER_INFO_1540;
typedef PSERVER_INFO_1540 = _SERVER_INFO_1540 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1540 = _SERVER_INFO_1540 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1541
{
    int sv1541_minfreeconnections;
}

typedef SERVER_INFO_1541 = _SERVER_INFO_1541;
typedef PSERVER_INFO_1541 = _SERVER_INFO_1541 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1541 = _SERVER_INFO_1541 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1542
{
    int sv1542_maxfreeconnections;
}

typedef SERVER_INFO_1542 = _SERVER_INFO_1542;
typedef PSERVER_INFO_1542 = _SERVER_INFO_1542 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1542 = _SERVER_INFO_1542 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1543
{
    DWORD sv1543_initsesstable;
}

typedef SERVER_INFO_1543 = _SERVER_INFO_1543;
typedef PSERVER_INFO_1543 = _SERVER_INFO_1543 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1543 = _SERVER_INFO_1543 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1544
{
    DWORD sv1544_initconntable;
}

typedef SERVER_INFO_1544 = _SERVER_INFO_1544;
typedef PSERVER_INFO_1544 = _SERVER_INFO_1544 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1544 = _SERVER_INFO_1544 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1545
{
    DWORD sv1545_initfiletable;
}

typedef SERVER_INFO_1545 = _SERVER_INFO_1545;
typedef PSERVER_INFO_1545 = _SERVER_INFO_1545 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1545 = _SERVER_INFO_1545 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1546
{
    DWORD sv1546_initsearchtable;
}

typedef SERVER_INFO_1546 = _SERVER_INFO_1546;
typedef PSERVER_INFO_1546 = _SERVER_INFO_1546 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1546 = _SERVER_INFO_1546 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1547
{
    DWORD sv1547_alertschedule;
}

typedef SERVER_INFO_1547 = _SERVER_INFO_1547;
typedef PSERVER_INFO_1547 = _SERVER_INFO_1547 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1547 = _SERVER_INFO_1547 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1548
{
    DWORD sv1548_errorthreshold;
}

typedef SERVER_INFO_1548 = _SERVER_INFO_1548;
typedef PSERVER_INFO_1548 = _SERVER_INFO_1548 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1548 = _SERVER_INFO_1548 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1549
{
    DWORD sv1549_networkerrorthreshold;
}

typedef SERVER_INFO_1549 = _SERVER_INFO_1549;
typedef PSERVER_INFO_1549 = _SERVER_INFO_1549 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1549 = _SERVER_INFO_1549 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1550
{
    DWORD sv1550_diskspacethreshold;
}

typedef SERVER_INFO_1550 = _SERVER_INFO_1550;
typedef PSERVER_INFO_1550 = _SERVER_INFO_1550 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1550 = _SERVER_INFO_1550 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1552
{
    DWORD sv1552_maxlinkdelay;
}

typedef SERVER_INFO_1552 = _SERVER_INFO_1552;
typedef PSERVER_INFO_1552 = _SERVER_INFO_1552 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1552 = _SERVER_INFO_1552 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1553
{
    DWORD sv1553_minlinkthroughput;
}

typedef SERVER_INFO_1553 = _SERVER_INFO_1553;
typedef PSERVER_INFO_1553 = _SERVER_INFO_1553 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1553 = _SERVER_INFO_1553 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1554
{
    DWORD sv1554_linkinfovalidtime;
}

typedef SERVER_INFO_1554 = _SERVER_INFO_1554;
typedef PSERVER_INFO_1554 = _SERVER_INFO_1554 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1554 = _SERVER_INFO_1554 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1555
{
    DWORD sv1555_scavqosinfoupdatetime;
}

typedef SERVER_INFO_1555 = _SERVER_INFO_1555;
typedef PSERVER_INFO_1555 = _SERVER_INFO_1555 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1555 = _SERVER_INFO_1555 with IDL{IndirectionLevel = 1};

type _SERVER_INFO_1556
{
    DWORD sv1556_maxworkitemidletime;
}

typedef SERVER_INFO_1556 = _SERVER_INFO_1556;
typedef PSERVER_INFO_1556 = _SERVER_INFO_1556 with IDL{IndirectionLevel = 1};
typedef LPSERVER_INFO_1556 = _SERVER_INFO_1556 with IDL{IndirectionLevel = 1};

type _DISK_ENUM_CONTAINER
{
    DWORD EntriesRead;
    DISK_INFO Buffer with IDL{Size_is = [EntriesRead],
                                               Length_is = [EntriesRead],
                                               IndirectionLevel = 1};
}

typedef DISK_ENUM_CONTAINER = _DISK_ENUM_CONTAINER;
typedef PDISK_ENUM_CONTAINER = _DISK_ENUM_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPDISK_ENUM_CONTAINER = _DISK_ENUM_CONTAINER with IDL{IndirectionLevel = 1};

type _DISK_INFO
{
    string Disk with IDL{Dimensions = [3], BaseStringType = TypeOf<WCHAR>(), String = true};
}

typedef DISK_INFO = _DISK_INFO;
typedef PDISK_INFO = _DISK_INFO with IDL{IndirectionLevel = 1};
typedef LPDISK_INFO = _DISK_INFO with IDL{IndirectionLevel = 1};

type _STAT_SERVER_0
{
    DWORD sts0_start;
    DWORD sts0_fopens;
    DWORD sts0_devopens;
    DWORD sts0_jobsqueued;
    DWORD sts0_sopens;
    DWORD sts0_stimedout;
    DWORD sts0_serrorout;
    DWORD sts0_pwerrors;
    DWORD sts0_permerrors;
    DWORD sts0_syserrors;
    DWORD sts0_bytessent_low;
    DWORD sts0_bytessent_high;
    DWORD sts0_bytesrcvd_low;
    DWORD sts0_bytesrcvd_high;
    DWORD sts0_avresponse;
    DWORD sts0_reqbufneed;
    DWORD sts0_bigbufneed;
}

typedef STAT_SERVER_0 = _STAT_SERVER_0;
typedef PSTAT_SERVER_0 = _STAT_SERVER_0 with IDL{IndirectionLevel = 1};
typedef LPSTAT_SERVER_0 = _STAT_SERVER_0 with IDL{IndirectionLevel = 1};

type _SERVER_TRANSPORT_INFO_0
{
    DWORD svti0_numberofvcs;
    string svti0_transportname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    array<UCHAR> svti0_transportaddress with IDL{Size_is = [svti0_transportaddresslength], IndirectionLevel = 1};
    DWORD svti0_transportaddresslength;
    string svti0_networkaddress
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SERVER_TRANSPORT_INFO_0 = _SERVER_TRANSPORT_INFO_0;
typedef PSERVER_TRANSPORT_INFO_0 = _SERVER_TRANSPORT_INFO_0 with IDL{IndirectionLevel = 1};
typedef LPSERVER_TRANSPORT_INFO_0 = _SERVER_TRANSPORT_INFO_0 with IDL{IndirectionLevel = 1};

type _SERVER_XPORT_ENUM_STRUCT
{
    DWORD Level;
    SERVER_XPORT_ENUM_UNION[Level] XportInfo
        with IDL{Switch_Is = Level};
}

typedef SERVER_XPORT_ENUM_STRUCT = _SERVER_XPORT_ENUM_STRUCT;
typedef PSERVER_XPORT_ENUM_STRUCT = _SERVER_XPORT_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPSERVER_XPORT_ENUM_STRUCT = _SERVER_XPORT_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type SERVER_XPORT_ENUM_UNION[DWORD tag]
{
    optional [|tag == 0|] SERVER_XPORT_INFO_0_CONTAINER Level0
        with IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] SERVER_XPORT_INFO_1_CONTAINER Level1
        with IDL{Case = [1], IndirectionLevel = 1};
    optional [|tag == 2|] SERVER_XPORT_INFO_2_CONTAINER Level2
        with IDL{Case = [2], IndirectionLevel = 1};
    optional [|tag == 3|] SERVER_XPORT_INFO_3_CONTAINER Level3
        with IDL{Case = [3], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type _SERVER_XPORT_INFO_0_CONTAINER
{
    DWORD EntriesRead;
    array<LPSERVER_TRANSPORT_INFO_0> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SERVER_XPORT_INFO_0_CONTAINER = _SERVER_XPORT_INFO_0_CONTAINER;
typedef PSERVER_XPORT_INFO_0_CONTAINER = _SERVER_XPORT_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSERVER_XPORT_INFO_0_CONTAINER = _SERVER_XPORT_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};

type _SERVER_XPORT_INFO_1_CONTAINER
{
    DWORD EntriesRead;
    array<LPSERVER_TRANSPORT_INFO_1> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SERVER_XPORT_INFO_1_CONTAINER = _SERVER_XPORT_INFO_1_CONTAINER;
typedef PSERVER_XPORT_INFO_1_CONTAINER = _SERVER_XPORT_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSERVER_XPORT_INFO_1_CONTAINER = _SERVER_XPORT_INFO_1_CONTAINER with IDL{IndirectionLevel = 1};

type _SERVER_TRANSPORT_INFO_1
{
    DWORD svti1_numberofvcs;
    string svti1_transportname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    array<UCHAR> svti1_transportaddress
        with IDL
                 {Size_is = [svti1_transportaddresslength], IndirectionLevel = 1};
    DWORD svti1_transportaddresslength;
    string svti1_networkaddress
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string svti1_domain
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef SERVER_TRANSPORT_INFO_1 = _SERVER_TRANSPORT_INFO_1;
typedef PSERVER_TRANSPORT_INFO_1 = _SERVER_TRANSPORT_INFO_1 with IDL{IndirectionLevel = 1};
typedef LPSERVER_TRANSPORT_INFO_1 = _SERVER_TRANSPORT_INFO_1 with IDL{IndirectionLevel = 1};

type _SERVER_XPORT_INFO_2_CONTAINER
{
    DWORD EntriesRead;
    array<LPSERVER_TRANSPORT_INFO_2> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SERVER_XPORT_INFO_2_CONTAINER = _SERVER_XPORT_INFO_2_CONTAINER;
typedef PSERVER_XPORT_INFO_2_CONTAINER = _SERVER_XPORT_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSERVER_XPORT_INFO_2_CONTAINER = _SERVER_XPORT_INFO_2_CONTAINER with IDL{IndirectionLevel = 1};

type _SERVER_TRANSPORT_INFO_2
{
    DWORD svti2_numberofvcs;
    string svti2_transportname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    array<UCHAR> svti2_transportaddress
        with IDL
                 {Size_is = [svti2_transportaddresslength], IndirectionLevel = 1};
    DWORD svti2_transportaddresslength;
    string svti2_networkaddress
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string svti2_domain
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    IDLUlong svti2_flags;
}

typedef SERVER_TRANSPORT_INFO_2 = _SERVER_TRANSPORT_INFO_2;
typedef PSERVER_TRANSPORT_INFO_2 = _SERVER_TRANSPORT_INFO_2 with IDL{IndirectionLevel = 1};
typedef LPSERVER_TRANSPORT_INFO_2 = _SERVER_TRANSPORT_INFO_2 with IDL{IndirectionLevel = 1};

type _SERVER_XPORT_INFO_3_CONTAINER
{
    DWORD EntriesRead;
    array<LPSERVER_TRANSPORT_INFO_0> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef SERVER_XPORT_INFO_3_CONTAINER = _SERVER_XPORT_INFO_3_CONTAINER;
typedef PSERVER_XPORT_INFO_3_CONTAINER = _SERVER_XPORT_INFO_3_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSERVER_XPORT_INFO_3_CONTAINER = _SERVER_XPORT_INFO_3_CONTAINER with IDL{IndirectionLevel = 1};

type _SERVER_TRANSPORT_INFO_3
{
    DWORD svti3_numberofvcs;
    string svti3_transportname
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    array<UCHAR> svti3_transportaddress
        with IDL
                 {Size_is = [svti3_transportaddresslength], IndirectionLevel = 1};
    DWORD svti3_transportaddresslength;
    string svti3_networkaddress
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string svti3_domain
        with IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    IDLUlong svti3_flags;
    DWORD svti3_passwordlength;
    array<char> svti3_password with IDL{Dimensions = [256]};
}

typedef SERVER_TRANSPORT_INFO_3 = _SERVER_TRANSPORT_INFO_3;
typedef PSERVER_TRANSPORT_INFO_3 = _SERVER_TRANSPORT_INFO_3 with IDL{IndirectionLevel = 1};
typedef LPSERVER_TRANSPORT_INFO_3 = _SERVER_TRANSPORT_INFO_3 with IDL{IndirectionLevel = 1};

type _TIME_OF_DAY_INFO
{
    DWORD tod_elapsedt;
    DWORD tod_msecs;
    DWORD tod_hours;
    DWORD tod_mins;
    DWORD tod_secs;
    DWORD tod_hunds;
    IDLLong tod_timezone;
    DWORD tod_tinterval;
    DWORD tod_day;
    DWORD tod_month;
    DWORD tod_year;
    DWORD tod_weekday;
}

typedef TIME_OF_DAY_INFO = _TIME_OF_DAY_INFO;
typedef PTIME_OF_DAY_INFO = _TIME_OF_DAY_INFO with IDL{IndirectionLevel = 1};
typedef LPTIME_OF_DAY_INFO = _TIME_OF_DAY_INFO with IDL{IndirectionLevel = 1};

typedef SHARE_DEL_HANDLE = ContextHandle ;
typedef PSHARE_DEL_HANDLE = SHARE_DEL_HANDLE with IDL{IndirectionLevel = 1};

type _ADT_SECURITY_DESCRIPTOR
{
    DWORD Length;
    array<UCHAR> Buffer with IDL{Size_is = [Length], IndirectionLevel = 1};
}

typedef ADT_SECURITY_DESCRIPTOR = _ADT_SECURITY_DESCRIPTOR;
typedef PADT_SECURITY_DESCRIPTOR = _ADT_SECURITY_DESCRIPTOR with IDL{IndirectionLevel = 1};
typedef LPADT_SECURITY_DESCRIPTOR = _ADT_SECURITY_DESCRIPTOR with IDL{IndirectionLevel = 1};

type TRANSPORT_INFO[DWORD tag]
{
    optional [|tag == 0|] SERVER_TRANSPORT_INFO_0 Transport0 with IDL{Case = [0]};
    optional [|tag == 1|] SERVER_TRANSPORT_INFO_1 Transport1 with IDL{Case = [1]};
    optional [|tag == 2|] SERVER_TRANSPORT_INFO_2 Transport2 with IDL{Case = [2]};
    optional [|tag == 3|] SERVER_TRANSPORT_INFO_3 Transport3 with IDL{Case = [3]};
}
with IDL{Switch_Type = TypeOf<IDLUlong>(), UnionKind = UnionKind.NonEncapsulated};

type _NET_DFS_ENTRY_ID_CONTAINER
{
    IDLUlong Count;
    array<LPNET_DFS_ENTRY_ID> Buffer with IDL{Size_is = [Count]};
}

typedef NET_DFS_ENTRY_ID_CONTAINER = _NET_DFS_ENTRY_ID_CONTAINER;
typedef PNET_DFS_ENTRY_ID_CONTAINER = _NET_DFS_ENTRY_ID_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPNET_DFS_ENTRY_ID_CONTAINER = _NET_DFS_ENTRY_ID_CONTAINER with IDL{IndirectionLevel = 1};

type _NET_DFS_ENTRY_ID
{
    GUID Uid;
    string Prefix with IDL{BaseStringType = TypeOf<WCHAR>(),
                                            String = true,
                                            IndirectionLevel = 1};
}

typedef NET_DFS_ENTRY_ID = _NET_DFS_ENTRY_ID;
typedef PNET_DFS_ENTRY_ID = _NET_DFS_ENTRY_ID with IDL{IndirectionLevel = 1};
typedef LPNET_DFS_ENTRY_ID = _NET_DFS_ENTRY_ID with IDL{IndirectionLevel = 1};

type _DFS_SITELIST_INFO
{
    IDLUlong cSites;
    array<DFS_SITENAME_INFO> Site with IDL{Size_is = [cSites], Dimensions = [null]};
}

typedef DFS_SITELIST_INFO = _DFS_SITELIST_INFO;
typedef PDFS_SITELIST_INFO = _DFS_SITELIST_INFO with IDL{IndirectionLevel = 1};
typedef LPDFS_SITELIST_INFO = _DFS_SITELIST_INFO with IDL{IndirectionLevel = 1};

type _DFS_SITENAME_INFO
{
    IDLUlong SiteFlags;
    string SiteName
        with IDL{PointerType = PointerKind.UniquePtr,
                                  BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
}

typedef DFS_SITENAME_INFO = _DFS_SITENAME_INFO;
typedef PDFS_SITENAME_INFO = _DFS_SITENAME_INFO with IDL{IndirectionLevel = 1};
typedef LPDFS_SITENAME_INFO = _DFS_SITENAME_INFO with IDL{IndirectionLevel = 1};

type SERVER_ALIAS_INFO[DWORD tag]
{
    optional [|tag == 0|] SERVER_ALIAS_INFO_0 ServerAliasInfo0 with IDL{Case = [0], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<IDLUlong>(), UnionKind = UnionKind.NonEncapsulated};

type _SERVER_ALIAS_INFO_0
{
    string srvai0_alias
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    string srvai0_target
        with IDL{BaseStringType = TypeOf<WCHAR>(),
                                  String = true,
                                  IndirectionLevel = 1};
    BOOLEAN srvai0_default;
    ULONG srvai0_reserved;
}

typedef SERVER_ALIAS_INFO_0 = _SERVER_ALIAS_INFO_0;
typedef PSERVER_ALIAS_INFO_0 = _SERVER_ALIAS_INFO_0 with IDL{IndirectionLevel = 1};
typedef LPSERVER_ALIAS_INFO_0 = _SERVER_ALIAS_INFO_0 with IDL{IndirectionLevel = 1};

typedef BOOLEAN = BYTE ;

type _SERVER_ALIAS_ENUM_STRUCT
{
    DWORD Level;
    SERVER_ALIAS_ENUM_UNION[Level] ServerAliasInfo with IDL{Switch_Is = Level, EmbedType = true};
}

typedef SERVER_ALIAS_ENUM_STRUCT = _SERVER_ALIAS_ENUM_STRUCT;
typedef PSERVER_ALIAS_ENUM_STRUCT = _SERVER_ALIAS_ENUM_STRUCT with IDL{IndirectionLevel = 1};
typedef LPSERVER_ALIAS_ENUM_STRUCT = _SERVER_ALIAS_ENUM_STRUCT with IDL{IndirectionLevel = 1};

type SERVER_ALIAS_ENUM_UNION[DWORD tag]
{
    optional [|tag == 0|] SERVER_ALIAS_INFO_0_CONTAINER Level0 with IDL{Case = [0], IndirectionLevel = 1};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type _SERVER_ALIAS_INFO_0_CONTAINER
{
    DWORD EntriesRead;
    SERVER_ALIAS_INFO_0 Buffer with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

typedef SERVER_ALIAS_INFO_0_CONTAINER = _SERVER_ALIAS_INFO_0_CONTAINER;
typedef PSERVER_ALIAS_INFO_0_CONTAINER = _SERVER_ALIAS_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};
typedef LPSERVER_ALIAS_INFO_0_CONTAINER = _SERVER_ALIAS_INFO_0_CONTAINER with IDL{IndirectionLevel = 1};

pattern ShareTypes = enum DWORD
{
    STYPE_DISKTREE      = 0x00000000,
    STYPE_PRINTQ        = 0x00000001,
    STYPE_DEVICE        = 0x00000002,
    STYPE_IPC           = 0x00000003,
    STYPE_CLUSTER_FS    = 0x02000000,
    STYPE_CLUSTER_SOFS  = 0x04000000,
    STYPE_CLUSTER_DFS   = 0x08000000,
    ...
};

pattern SessionUserFlags = enum DWORD
{
    SESS_GUEST          = 0x00000001,
    SESS_NOENCRYPTION   = 0x00000002,
    ...
};

pattern ClientSideCachingStates = enum DWORD
{
    CSC_CACHE_MANUAL_REINT  = 0x00,
    CSC_CACHE_AUTO_REINT    = 0x10,
    CSC_CACHE_VD            = 0x20,
    CSC_CACHE_NONE          = 0x30,
    ...
};

pattern PlatformIDs = enum DWORD
{
    PLATFORM_ID_DOS = 300,
    PLATFORM_ID_OS2 = 400,
    PLATFORM_ID_NT  = 500,
    PLATFORM_ID_OSF = 600,
    PLATFORM_ID_VMS = 700
    ...
};

pattern SoftwareTypeFlags = enum DWORD
{
    SV_TYPE_WORKSTATION         = 0x00000001,
    SV_TYPE_SERVER              = 0x00000002,
    SV_TYPE_SQLSERVER           = 0x00000004,
    SV_TYPE_DOMAIN_CTRL         = 0x00000008,
    SV_TYPE_DOMAIN_BAKCTRL      = 0x00000010,
    SV_TYPE_TIME_SOURCE         = 0x00000020,
    SV_TYPE_AFP                 = 0x00000040,
    SV_TYPE_NOVELL              = 0x00000080,
    SV_TYPE_DOMAIN_MEMBER       = 0x00000100,
    SV_TYPE_PRINTQ_SERVER       = 0x00000200,
    SV_TYPE_DIALIN_SERVER       = 0x00000400,
    SV_TYPE_XENIX_SERVER        = 0x00000800,
    SV_TYPE_NT                  = 0x00001000,
    SV_TYPE_WFW                 = 0x00002000,
    SV_TYPE_SERVER_MFPN         = 0x00004000,
    SV_TYPE_SERVER_NT           = 0x00008000,
    SV_TYPE_POTENTIAL_BROWSER   = 0x00010000,
    SV_TYPE_BACKUP_BROWSER      = 0x00020000,
    SV_TYPE_MASTER_BROWSER      = 0x00040000,
    SV_TYPE_DOMAIN_MASTER       = 0x00080000,
    SV_TYPE_WINDOWS             = 0x00400000,
    SV_TYPE_DFS                 = 0x00800000,
    SV_TYPE_CLUSTER_NT          = 0x01000000,
    SV_TYPE_TERMINALSERVER      = 0x02000000,
    SV_TYPE_CLUSTER_VS_NT       = 0x04000000,
    SV_TYPE_DCE                 = 0x10000000,
    SV_TYPE_ALTERNATE_XPORT     = 0x20000000,
    SV_TYPE_LOCAL_LIST_ONLY     = 0x40000000,
    SV_TYPE_DOMAIN_ENUM         = 0x80000000,
    SV_TYPE_ALL                 = 0xFFFFFFFF,
    ...
};

pattern NameTypes = enum DWORD
{
    NAMETYPE_USER           = 1,
    NAMETYPE_PASSWORD       = 2,
    NAMETYPE_GROUP          = 3,
    NAMETYPE_COMPUTER       = 4,
    NAMETYPE_EVENT          = 5,
    NAMETYPE_DOMAIN         = 6,
    NAMETYPE_SERVICE        = 7,
    NAMETYPE_NET            = 8,
    NAMETYPE_SHARE          = 9,
    NAMETYPE_MESSAGE        = 10,
    NAMETYPE_MESSAGEDEST    = 11,
    NAMETYPE_SHAREPASSWORD  = 12,
    NAMETYPE_WORKGROUP      = 13,
    ...
    
};

pattern PathTypes = enum DWORD
{
    ITYPE_UNC_COMPNAME      = 4144,
    ITYPE_UNC_WC            = 4145,
    ITYPE_UNC               = 4096,
    ITYPE_UNC_WC_PATH       = 4097,
    ITYPE_UNC_SYS_SEM       = 6400,
    ITYPE_UNC_SYS_SHMEM     = 6656,
    ITYPE_UNC_SYS_MSLOT     = 6144,
    ITYPE_UNC_SYS_PIPE      = 6912,
    ITYPE_UNC_SYS_QUEUE     = 7680,
    ITYPE_PATH_ABSND        = 8194,
    ITYPE_PATH_ABSD         = 8198,
    ITYPE_PATH_RELND        = 8192,
    ITYPE_PATH_RELD         = 8196,
    ITYPE_PATH_ABSND_WC     = 8195,
    ITYPE_PATH_ABSD_WC      = 8199,
    ITYPE_PATH_RELND_WC     = 8193,
    ITYPE_PATH_RELD_WC      = 8197,
    ITYPE_PATH_SYS_SEM      = 10498,
    ITYPE_PATH_SYS_SHMEM    = 10754,
    ITYPE_PATH_SYS_MSLOT    = 10242,
    ITYPE_PATH_SYS_PIPE     = 11010,
    ITYPE_PATH_SYS_COMM     = 11266,
    ITYPE_PATH_SYS_PRINT    = 11522,
    ITYPE_PATH_SYS_QUEUE    = 11778,
    ITYPE_PATH_SYS_SEM_M    = 43266,
    ITYPE_PATH_SYS_SHMEM_M  = 43522,
    ITYPE_PATH_SYS_MSLOT_M  = 43010,
    ITYPE_PATH_SYS_PIPE_M   = 43778,
    ITYPE_PATH_SYS_COMM_M   = 44034,
    ITYPE_PATH_SYS_PRINT_M  = 44290,
    ITYPE_PATH_SYS_QUEUE_M  = 44546,
    ITYPE_DEVICE_DISK       = 16384,
    ITYPE_DEVICE_LPT        = 16400,
    ITYPE_DEVICE_COM        = 16416,
    ITYPE_DEVICE_CON        = 16448,
    ITYPE_DEVICE_NUL        = 16464,
    ...
};

pattern DFSEntryFlags = enum IDLUlong
{
    PKT_ENTRY_TYPE_CAIRO            = 0x0001,
    PKT_ENTRY_TYPE_MACHINE          = 0x0002,
    PKT_ENTRY_TYPE_NONCAIRO         = 0x0004,
    PKT_ENTRY_TYPE_LEAFONLY         = 0x0008,
    PKT_ENTRY_TYPE_OUTSIDE_MY_DOM0x = 0010,
    PKT_ENTRY_TYPE_INSITE_ONLY      = 0x0020,
    PKT_ENTRY_TYPE_REFERRAL_SVC     = 0x0080,
    PKT_ENTRY_TYPE_PERMANENT        = 0x0100,
    PKT_ENTRY_TYPE_LOCAL0x          = 0400,
    PKT_ENTRY_TYPE_LOCAL_XPOINT     = 0x0800,
    PKT_ENTRY_TYPE_MACH_SHARE       = 0x1000,
    PKT_ENTRY_TYPE_OFFLINE          = 0x2000,
    ...
};

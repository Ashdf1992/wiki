protocol TSCH with
Documentation
{
    ProtocolName = "Task Scheduler Service Remoting Protocol",
    ProtocolType = "rpc",
    ShortName = "TSCH",
    DocumentName = "MS-TSCH",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference{Name = "MS-TSCH", Version = "22.0", Date = "06/30/2015"}
    ],
    RevisionSummary = 
    [
        new Revision{Class = RevisionClass.Major, Version = "", Date = "10/13/2015"}
    ]
};

using Technologies.IDL;
using DTYP;
using Utility;
using MSRPCE;
using Diagnostics;
using ERREF;

endpoint ATSvcService over MSRPCE.Server provides ATSvc;
endpoint ITaskSchedulerServiceService over MSRPCE.Server provides ITaskSchedulerService;
endpoint SaSecService over MSRPCE.Server provides SaSec;

// ----------------------------------------- ATSvc ---------------------------------------------
contract ATSvc
{
    accepts operation NetrJobAdd
    {
        in string ServerName
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<ATSVC_HANDLE>(),
                String = true
            };
        in AT_INFO pAtInfo with Technologies.IDL.IDL{IndirectionLevel = 1};
        out IDLUlong pJobId with Technologies.IDL.IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrJobAdd, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) +
                ", ServerName: " + CovertToDisplayStringInSummary(ServerName) + ", pJobId: " + pJobId.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation NetrJobDel
    {
        in string ServerName
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<ATSVC_HANDLE>(),
                String = true
            };
        in DWORD MinJobId;
        in DWORD MaxJobId;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrJobDel, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) +
                ", ServerName: " + CovertToDisplayStringInSummary(ServerName);
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation NetrJobEnum
    {
        in string ServerName
               with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<ATSVC_HANDLE>(), String = true};
        in out AT_ENUM_CONTAINER pEnumContainer with IDL{IndirectionLevel = 1};
        in DWORD PreferedMaximumLength;
        out IDLUlong pTotalEntries with IDL{IndirectionLevel = 1};
        in out IDLUlong pResumeHandle with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrJobEnum, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) +
                ", ServerName: " + CovertToDisplayStringInSummary(ServerName) +
                ", pTotalEntries: " + pTotalEntries.ToString() +
                ", pResumeHandle: " + pResumeHandle.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation NetrJobGetInfo
    {
        in string ServerName
            with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<ATSVC_HANDLE>(), String = true};
        in DWORD JobId;
        out AT_INFO ppAtInfo with Technologies.IDL.IDL{IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrJobGetInfo, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) +
                ", ServerName: " + CovertToDisplayStringInSummary(ServerName) + ", JobId: " + JobId.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 3};
}
with Technologies.IDL.IDL
{
    Uuid = {1ff70682-0a51-30e8-076d-740be8cee98b},
    Version = "1.0",
    Pointer_default = PointerKind.UniquePtr,
    Ms_union = true
};

typedef ATSVC_HANDLE = wchar_t with Technologies.IDL.IDL{Handle = true, IndirectionLevel = 1} ;

type AT_INFO
{
    DWORD_PTR JobTime where ValidationCheckValueInRange((value is uint && (value as uint) >= 0 && (value as uint) <= 86399999) || (value is ulong && (value as ulong) >= 0 && (value as ulong) <= 86399999),
        null, true, ReferenceType.Type, "TSCH", "JobTime", "AT_INFO", 0, 86399999, value)
        with DisplayInfo{ToText = JobTimeToString};
    DaysOfMonthFlags DaysOfMonth with Encoding{Decoder = PatternDecoder<DaysOfMonthFlags>, SourcePattern = TypeOf<DWORD>()};
    DaysOfWeekFlags DaysOfWeek with Encoding{Decoder = PatternDecoder<DaysOfWeekFlags>, SourcePattern = TypeOf<UCHAR>()};
    AtInfoFlags Flags with Encoding{Decoder = PatternDecoder<AtInfoFlags>, SourcePattern = TypeOf<UCHAR>()};
    string Command with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
}

string JobTimeToString(any v)
{
    if (v is numUint:uint)
    {
        uint hour = numUint / (60 * 60 * 1000);
        numUint -= hour * (60 * 60 * 1000);
        uint min = numUint / (60 * 1000);
        numUint -= min * (60 * 1000);
        uint s = numUint / 1000;
        uint ms = numUint - s * 1000;

        if (ms == 0)
        {
            return Format("{0:D2}:{1:D2}:{2:D2}", [hour, min, s]);
        }
        else
        {
            return Format("{0:D2}:{1:D2}:{2:D2}.{3:D3}", [hour, min, s, ms]);
        }
    }
    else if (v is numUlong:ulong)
    {
        ulong hour = numUlong / (60 * 60 * 1000);
        numUlong -= hour * (60 * 60 * 1000);
        ulong min = numUlong / 60 * 1000;
        numUlong -= min * (60 * 1000);
        ulong s = numUlong / 1000;
        ulong ms = numUlong - s * 1000;

        if (ms == 0)
        {
            return Format("{0:D2}:{1:D2}:{2:D2}", [hour, min, s]);
        }
        else
        {
            return Format("{0:D2}:{1:D2}:{2:D2}.{3:D3}", [hour, min, s, ms]);
        }
    }
    else
    {
        return v.ToString();
    }
}

pattern DaysOfMonthFlags = flags DWORD
{
    $"1"    = 0x00000001,
    $"2"    = 0x00000002,
    $"3"    = 0x00000004,
    $"4"    = 0x00000008,
    $"5"    = 0x00000010,
    $"6"    = 0x00000020,
    $"7"    = 0x00000040,
    $"8"    = 0x00000080,
    $"9"    = 0x00000100,
    $"10"   = 0x00000200,
    $"11"   = 0x00000400,
    $"12"   = 0x00000800,
    $"13"   = 0x00001000,
    $"14"   = 0x00002000,
    $"15"   = 0x00004000,
    $"16"   = 0x00008000,
    $"17"   = 0x00010000,
    $"18"   = 0x00020000,
    $"19"   = 0x00040000,
    $"20"   = 0x00080000,
    $"21"   = 0x00100000,
    $"22"   = 0x00200000,
    $"23"   = 0x00400000,
    $"24"   = 0x00800000,
    $"25"   = 0x01000000,
    $"26"   = 0x02000000,
    $"27"   = 0x04000000,
    $"28"   = 0x08000000,
    $"29"   = 0x10000000,
    $"30"   = 0x20000000,
    $"31"   = 0x40000000,
    ...
};

pattern DaysOfWeekFlags = flags UCHAR
{
    Monday = 0x01,
    Tuesday = 0x02,
    Wednesday = 0x04,
    Thursday = 0x08,
    Friday = 0x10,
    Saturday = 0x20,
    Sunday = 0x40,
    ...
};

pattern AtInfoFlags = flags UCHAR
{
    JOB_RUN_PERIODICALLY = 1,
    JOB_EXEC_ERROR = 2,
    JOB_RUNS_TODAY = 4,
    JOB_ADD_CURRENT_DATE = 8,
    JOB_NONINTERACTIVE = 16,
    ...
};

type AT_ENUM_CONTAINER
{
    DWORD EntriesRead;
    array<AT_ENUM> Buffer with IDL{Size_is = [EntriesRead], IndirectionLevel = 1};
}

type AT_ENUM
{
    DWORD JobId;
    DWORD_PTR JobTime where ValidationCheckValueInRange((value is uint && (value as uint) >= 0 && (value as uint) <= 86399999) || (value is ulong && (value as ulong) >= 0 && (value as ulong) <= 86399999),
        null, true, ReferenceType.Type, "TSCH", "JobTime", "AT_ENUM", 0, 86399999, value)
        with DisplayInfo{ToText = JobTimeToString};
    DaysOfMonthFlags DaysOfMonth with Encoding{Decoder = PatternDecoder<DaysOfMonthFlags>, SourcePattern = TypeOf<DWORD>()};
    DaysOfWeekFlags DaysOfWeek with Encoding{Decoder = PatternDecoder<DaysOfWeekFlags>, SourcePattern = TypeOf<UCHAR>()};
    AtInfoFlags Flags with Encoding{Decoder = PatternDecoder<AtInfoFlags>, SourcePattern = TypeOf<UCHAR>()};
    string Command with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
}

// ----------------------------------------- SaSec ---------------------------------------------
contract SaSec
{
    accepts operation SASetAccountInformation
    {
        in string Handle with
            IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<SASEC_HANDLE>(), String = true};
        in string pwszJobName
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string pwszAccount
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string pwszPassword
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in SASetAccountInformationDwJobFlags dwJobFlags where ValidationCheckCombinationValue(InRange<SASetAccountInformationDwJobFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "dwJobFlags", "SASetAccountInformation", "0x00002000", value)
            with Encoding{Decoder = PatternDecoder<SASetAccountInformationDwJobFlags>, SourcePattern = TypeOf<DWORD>()};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SASetAccountInformation, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", pwszJobName: " + CovertToDisplayStringInSummary(pwszJobName) +
                ", pwszAccount: " + CovertToDisplayStringInSummary(pwszAccount) +
                ", pwszPassword: " + CovertToDisplayStringInSummary(pwszPassword) + ", dwJobFlags: " +
                EnumToStringInSummary<SASetAccountInformationDwJobFlags>(dwJobFlags);
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation SASetNSAccountInformation
    {
        in string Handle
            with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<SASEC_HANDLE>(), String = true};
        in string pwszAccount with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in string pwszPassword
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SASetNSAccountInformation, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", pwszAccount: " + CovertToDisplayStringInSummary(pwszAccount) +
                ", pwszPassword: " + CovertToDisplayStringInSummary(pwszPassword);
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation SAGetNSAccountInformation
    {
        in string Handle
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<SASEC_HANDLE>(),
                String = true
            };
        in DWORD ccBufferSize with IDL{Range = new RangePattern {Low = 0, High = 273}};
        in out array<wchar_t> wszBuffer with IDL{Size_is = [ccBufferSize], Dimensions = [null]};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SAGetNSAccountInformation, ReturnValue: " + HResultValuesToText(ReturnValue as uint);
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation SAGetAccountInformation
    {
        in string Handle with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<SASEC_HANDLE>(), String = true};
        in string pwszJobName with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD ccBufferSize with IDL{Range = new RangePattern {Low = 0, High = 273}};
        in out array<wchar_t> wszBuffer with IDL{Size_is = [ccBufferSize], Dimensions = [null]};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SAGetAccountInformation, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", pwszJobName: " + CovertToDisplayStringInSummary(pwszJobName);
        }
    }
    with Technologies.IDL.IDL{Opnum = 3};
}
with Technologies.IDL.IDL
{
    Uuid = {378e52b0-c0a9-11cf-822d-00aa0051e40f},
    Version = "1.0",
    Pointer_default = PointerKind.UniquePtr,
    Ms_union = true
};

typedef SASEC_HANDLE = wchar_t with Technologies.IDL.IDL{Handle = true, IndirectionLevel = 1};

pattern SASetAccountInformationDwJobFlags = flags DWORD
{
    TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = 0x00002000,
    ...
};

// ----------------------------------------- SchRpc ---------------------------------------------
contract ITaskSchedulerService
{
    accepts operation SchRpcHighestVersion
    {
        in optional handle_t IDL_handle;
        out SchRpcHighestVersionEnum pVersion where ValidationCheckEnumValue(InRange<SchRpcHighestVersionEnum>(value),
            this, true, ReferenceType.Message, "TSCH", "pVersion", "SchRpcHighestVersion", "0x00010002, 0x00010003, 0x00010004", value)
            with IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<SchRpcHighestVersionEnum>, SourcePattern = TypeOf<DWORD>()};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcHighestVersion, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", pVersion: " + EnumToStringInSummary<SchRpcHighestVersionEnum>(pVersion);
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation SchRpcRegisterTask
    {
        in optional handle_t IDL_handle;
        in string path
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in (xml | string) @xml
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1},
            Encoding{Decoder = StringToXmlDecoder, SourcePattern = TypeOf<string>()};
        in SchRpcRegisterTaskFlags @flags where ValidationCheckCombinationValueTooManyItems(InRange<SchRpcRegisterTaskFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcRegisterTask", "SchRpcRegisterTask", "MS-TSCH")
            with Encoding{Decoder = PatternDecoder<SchRpcRegisterTaskFlags>, SourcePattern = TypeOf<DWORD>()};
        in string sddl
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in TaskLogonType logonType where ValidationCheckEnumValueTooManyItems(InRange<TaskLogonType>(value),
            this, true, ReferenceType.Message, "TSCH", "logonType", "SchRpcRegisterTask", "TASK_LOGON_TYPE", "MS-TSCH")
            with Encoding{Decoder = PatternDecoder<TaskLogonType>, SourcePattern = TypeOf<DWORD>()};
        in DWORD cCreds where ValidationCheckValueInRange(value == 0 || value == 1,
            this, true, ReferenceType.Message, "TSCH", "cCreds", "SchRpcRegisterTask", 0, 1, value);
        in array<TASK_USER_CRED> pCreds
            with IDL{Size_is = [cCreds], PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out string pActualPath
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        out TASK_XML_ERROR_INFO pErrorInfo with IDL{IndirectionLevel = 2};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcRegisterTask, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcRegisterTaskFlags>(@flags) +
                ", logonType: " + EnumToStringInSummary<TaskLogonType>(logonType) +
                ", cCreds: " + cCreds.ToString() + ", pActualPath: " + CovertToDisplayStringInSummary(pActualPath);
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation SchRpcRetrieveTask
    {
        in optional handle_t IDL_handle;
        in string path
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string lpcwszLanguagesBuffer
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in IDLUlong pulNumLanguages with IDL{IndirectionLevel = 1};
        // WORKAROUND: 4950398
        // The code should be below
        // out (xml | string) pXml with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2},
        //     Encoding{Decoder = StringToXmlDecoder, SourcePattern = TypeOf<string>()};
        out string pXml with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcRetrieveTask, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation SchRpcCreateFolder
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string sddl
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcCreateFolder", value);
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcCreateFolder, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 3};
    
    accepts operation SchRpcSetSecurity
    {
        in optional handle_t IDL_handle;
        in string path
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string sddl
            with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in SchRpcSetSecurityFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcSetSecurityFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcSetSecurity", "0x00000010, 0x20000000, 0x40000000", value)
            with Encoding{Decoder = PatternDecoder<SchRpcSetSecurityFlags>, SourcePattern = TypeOf<DWORD>()};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcSetSecurity, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcSetSecurityFlags>(@flags);
        }
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation SchRpcGetSecurity
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD securityInformation;
        out string sddl with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcGetSecurity, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 5};
    
    accepts operation SchRpcEnumFolders
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in SchRpcEnumFoldersFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcEnumFoldersFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcEnumFolders", "0x00000001", value)
            with Encoding{Decoder = PatternDecoder<SchRpcEnumFoldersFlags>, SourcePattern = TypeOf<DWORD>()};
        in out DWORD pStartIndex with IDL{IndirectionLevel = 1};
        in DWORD cRequested;
        out DWORD pcNames with IDL{IndirectionLevel = 1};
        out array<string> pNames
            with IDL
            {
                Size_is = [null, pcNames, null],
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 3
            };
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcEnumFolders, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcEnumFoldersFlags>(@flags) +
                ", pStartIndex: " + pStartIndex.ToString() + ", cRequested: " + cRequested.ToString() +
                ", pcNames: " + pcNames.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 6};
    
    accepts operation SchRpcEnumTasks
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in SchRpcEnumTasksFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcEnumTasksFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcEnumTasks", "0x00000001", value)
            with Encoding{Decoder = PatternDecoder<SchRpcEnumTasksFlags>, SourcePattern = TypeOf<DWORD>()};
        in out DWORD startIndex with IDL{IndirectionLevel = 1};
        in DWORD cRequested;
        out DWORD pcNames with IDL{IndirectionLevel = 1};
        out array<string> pNames
            with IDL
            {
                Size_is = [null, pcNames, null],
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 3
            };
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcEnumTasks, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcEnumTasksFlags>(@flags) +
                ", startIndex: " + startIndex.ToString() + ", cRequested: " + cRequested.ToString() +
                ", pcNames: " + pcNames.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 7};
    
    accepts operation SchRpcEnumInstances
    {
        in optional handle_t IDL_handle;
        in string path
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in SchRpcEnumInstancesFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcEnumInstancesFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcEnumInstances", "0x00000001", value)
            with Encoding{Decoder = PatternDecoder<SchRpcEnumInstancesFlags>, SourcePattern = TypeOf<DWORD>()};
        out DWORD pcGuids with IDL{IndirectionLevel = 1};
        out array<GUID> pGuids with IDL{Size_is = [null, pcGuids], IndirectionLevel = 2};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcEnumInstances, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcEnumInstancesFlags>(@flags) +
                ", pcGuids: " + pcGuids.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 8};
    
    accepts operation SchRpcGetInstanceInfo
    {
        in optional handle_t IDL_handle;
        in GUID @guid with Technologies.IDL.IDL{IndirectionLevel = 1};
        out string pPath with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        out TaskState pState where ValidationCheckEnumValueTooManyItems(InRange<TaskState>(value),
            this, true, ReferenceType.Message, "TSCH", "pState", "SchRpcGetInstanceInfo", "TASK_STATE", "MS-TSCH")
            with IDL{IndirectionLevel = 1},
            Encoding{Decoder = PatternDecoder<TaskState>, SourcePattern = TypeOf<DWORD>()};
        out string pCurrentAction with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        out string pInfo with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 2};
        out DWORD pcGroupInstances with IDL{IndirectionLevel = 1};
        out array<GUID> pGroupInstances with IDL{Size_is = [null, pcGroupInstances], IndirectionLevel = 2};
        out DWORD pEnginePID with IDL{IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcGetInstanceInfo, ReturnValue: " + HResultValuesToText(ReturnValue as uint) + ", guid: " + @guid.ToString() +
                ", pPath: " + CovertToDisplayStringInSummary(pPath) + ", pState: " + EnumToStringInSummary<TaskState>(pState);
        }
    }
    with Technologies.IDL.IDL{Opnum = 9};
    
    accepts operation SchRpcStopInstance
    {
        in optional handle_t IDL_handle;
        in GUID @guid with IDL{IndirectionLevel = 1};
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcStopInstance", value);
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcStopInstance, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", guid: " + @guid.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 10};
    
    accepts operation SchRpcStop
    {
        in optional handle_t IDL_handle;
        in string path 
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcStop", value);
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcStop, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 11};
    
    accepts operation SchRpcRun
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD cArgs;
        in array<string> pArgs
            with IDL
            {
                Size_is = [cArgs, null],
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 2
            };
        in SchRpcRunFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcRunFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcRun", "0x00000001, 0x00000002, 0x00000004, 0x00000008", value)
            with Encoding{Decoder = PatternDecoder<SchRpcRunFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD sessionId;
        in string user
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<wchar_t>(),
                String = true,
                IndirectionLevel = 1
            };
        out GUID pGuid with IDL{IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcRun, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", cArgs: " + cArgs.ToString() + ", flags: " + EnumToStringInSummary<SchRpcRunFlags>(@flags) +
                ", sessionId: " + sessionId.ToString() + ", user: " + CovertToDisplayStringInSummary(user) + ", pGuid: " + pGuid.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 12};
    
    accepts operation SchRpcDelete
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcDelete", value);
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcDelete, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 13};
    
    accepts operation SchRpcRename
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in string newName with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcRename", value);
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcRename, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", newName: " + CovertToDisplayStringInSummary(newName);
        }
    }
    with Technologies.IDL.IDL{Opnum = 14};
    
    accepts operation SchRpcScheduledRuntimes
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in SYSTEMTIME start with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in SYSTEMTIME end with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD @flags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message,
            "TSCH", "flags", "SchRpcScheduledRuntimes", value);
        in DWORD cRequested;
        out DWORD pcRuntimes with IDL{IndirectionLevel = 1};
        out array<SYSTEMTIME> pRuntimes with IDL{Size_is = [null, pcRuntimes], IndirectionLevel = 2};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcScheduledRuntimes, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", cRequested: " + cRequested.ToString() +
                ", pcRuntimes: " + pcRuntimes.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 15};
    
    accepts operation SchRpcGetLastRunInfo
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        out SYSTEMTIME pLastRuntime with IDL{IndirectionLevel = 1};
        out DWORD pLastReturnCode with IDL{IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcGetLastRunInfo, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", pLastRuntime: " + pLastRuntime.ToString() +
                ", pLastReturnCode: " + pLastReturnCode.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 16};
    
    accepts operation SchRpcGetTaskInfo
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in SchRpcGetTaskInfoFlags @flags where ValidationCheckCombinationValue(InRange<SchRpcGetTaskInfoFlags>(value),
            this, true, ReferenceType.Message, "TSCH", "flags", "SchRpcGetTaskInfo", "0x10000000", value)
            with Encoding{Decoder = PatternDecoder<SchRpcGetTaskInfoFlags>, SourcePattern = TypeOf<DWORD>()};
        out DWORD pEnabled with Technologies.IDL.IDL{IndirectionLevel = 1};
        out TaskState pState where ValidationCheckEnumValueTooManyItems(InRange<TaskState>(value),
            this, true, ReferenceType.Message, "TSCH", "pState", "SchRpcGetTaskInfo", "TASK_STATE", "MS-TSCH")
            with Technologies.IDL.IDL{IndirectionLevel = 1},
            Encoding{Decoder = PatternDecoder<TaskState>, SourcePattern = TypeOf<DWORD>()};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcGetTaskInfo, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", flags: " + EnumToStringInSummary<SchRpcGetTaskInfoFlags>(@flags) +
                ", pState: " + EnumToStringInSummary<TaskState>(pState);
        }
    }
    with Technologies.IDL.IDL{Opnum = 17};
    
    accepts operation SchRpcGetNumberOfMissedRuns
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        out DWORD pNumberOfMissedRuns with IDL{IndirectionLevel = 1};
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcGetNumberOfMissedRuns, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path) + ", pNumberOfMissedRuns: " + pNumberOfMissedRuns.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 18};
    
    accepts operation SchRpcEnableTask
    {
        in optional handle_t IDL_handle;
        in string path with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
        in DWORD enabled;
        result DTYP.HRESULT ReturnValue;
        
        override string ToString()
        {
            return "SchRpcEnableTask, ReturnValue: " + HResultValuesToText(ReturnValue as uint) +
                ", path: " + CovertToDisplayStringInSummary(path);
        }
    }
    with Technologies.IDL.IDL{Opnum = 19};
}
with Technologies.IDL.IDL{Uuid = {86d35949-83c9-4044-b424-db363231fd0c},
                          Version = "1.0",
                          Pointer_default = PointerKind.UniquePtr};

type TASK_USER_CRED
{
    string userId with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(),
                                            String = true,
                                            IndirectionLevel = 1};
    string password
        with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(),
                                  String = true,
                                  IndirectionLevel = 1};
    DWORD @flags;
}

type TASK_XML_ERROR_INFO
{
    DWORD line;
    DWORD column;
    string node with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
    string @value with IDL{BaseStringType = TypeOf<wchar_t>(), String = true, IndirectionLevel = 1};
}

// section 3.2.5.4.1 SchRpcHighestVersion (Opnum 0) 
pattern SchRpcHighestVersionEnum = enum DWORD
{
    $"Version 1.2" = 0x00010002,
    $"Version 1.3" = 0x00010003,
    $"Version 1.4" = 0x00010004,
    ...
};

// section 3.2.5.4.2 SchRpcRegisterTask (Opnum 1)
pattern SchRpcRegisterTaskFlags = flags DWORD
{
    TASK_VALIDATE_ONLY                  = 0x00000001,
    TASK_CREATE                         = 0x00000002,
    TASK_UPDATE                         = 0x00000004,
    TASK_DISABLE                        = 0x00000008,
    TASK_DONT_ADD_PRINCIPAL_ACE         = 0x00000010,
    TASK_IGNORE_REGISTRATION_TRIGGERS   = 0x00000020,
    ...
};

// Section 2.3.9 TASK_LOGON_TYPE
pattern TaskLogonType = enum DWORD
{
    TASK_LOGON_NONE = 0x00000000,
    TASK_LOGON_PASSWORD = 0x00000001,
    TASK_LOGON_S4U = 0x00000002,
    TASK_LOGON_INTERACTIVE_TOKEN = 0x00000003,
    TASK_LOGON_GROUP = 0x00000004,
    TASK_LOGON_SERVICE_ACCOUNT = 0x00000005,
    TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 0x00000006,
    ...
};

// section 3.2.5.4.5 SchRpcSetSecurity
pattern SchRpcSetSecurityFlags = flags DWORD
{
    TASK_DONT_ADD_PRINCIPAL_ACE = 0x00000010,
    SCH_FLAG_FOLDER = 0x20000000,
    SCH_FLAG_TASK = 0x40000000,
    ...
};

// section 3.2.5.4.7 SchRpcEnumFolders (Opnum 6)
pattern SchRpcEnumFoldersFlags = flags DWORD
{
    TASK_ENUM_HIDDEN = 0x00000001,
    ...
};

// section 3.2.5.4.8 SchRpcEnumTasks (Opnum 7)
pattern SchRpcEnumTasksFlags = flags DWORD
{
    TASK_ENUM_HIDDEN = 0x00000001,
    ...
};

// 3.2.5.4.9 SchRpcEnumInstances (Opnum 8)
pattern SchRpcEnumInstancesFlags = flags DWORD
{
    TASK_ENUM_HIDDEN = 0x00000001,
    ...
};

// section 2.3.13 TASK_STATE
pattern TaskState = enum DWORD
{
    TASK_STATE_UNKNOWN = 0x00000000,
    TASK_STATE_DISABLED = 0x00000001,
    TASK_STATE_QUEUED = 0x00000002,
    TASK_STATE_READY = 0x00000003,
    TASK_STATE_RUNNING = 0x00000004,
    ...
};

// section 3.2.5.4.13 SchRpcRun
pattern SchRpcRunFlags = flags DWORD
{
    TASK_RUN_AS_SELF = 0x00000001,
    TASK_RUN_IGNORE_CONSTRAINTS = 0x00000002,
    TASK_RUN_USE_SESSION_ID = 0x00000003,
    TASK_RUN_USER_SID = 0x00000004,
    ...
};

// section 3.2.5.4.18 SchRpcGetTaskInfo (Opnum 17)
pattern SchRpcGetTaskInfoFlags = flags DWORD
{
    TASK_RUN_AS_SELF = 0x00000001,
    TASK_RUN_IGNORE_CONSTRAINTS = 0x00000002,
    TASK_RUN_USE_SESSION_ID = 0x00000003,
    TASK_RUN_USER_SID = 0x00000004,
    ...
};

optional (xml | string) StringToXmlDecoder(string s)
{
    if (s == null)
    {
        return null;
    }

    var ret = BuildXml(s);
    if (ret == null)
    {
        return s;
    }
    else
    {
        return ret;
    }
}

string CovertToDisplayStringInSummary(string str)
{
    if (str == null || str == "")
    {
        return "<Empty>";
    }
    else
    {
        return str;
    }    
}

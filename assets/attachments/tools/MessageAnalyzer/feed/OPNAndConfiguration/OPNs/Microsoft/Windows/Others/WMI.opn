protocol WMI with
Documentation
{
    ProtocolName = "Windows Management Instrumentation Remote Protocol",
    ProtocolType = "rpc",
    ShortName = "WMI",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-WMI", Version = "26.0", Date = "02/13/2014", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="355986", Date="03/17/2014"}
        ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using Utility;
using OthersResources;
using Diagnostics;
using DCOM;
using OAUT;

endpoint Server
    over MSRPCE.Server
    provides IWbemObjectSink
    provides IEnumWbemClassObject
    provides IWbemCallResult
    provides IWbemServices
    provides IWbemBackupRestoreEx
    provides IWbemRemoteRefresher
    provides IWbemRefreshingServices
    provides IWbemWCOSmartEnum
    provides IWbemFetchSmartEnum
    provides IWbemLoginClientID
    provides IWbemLevel1Login
    provides IWbemLoginHelper
    provides IWbemBackupRestore;

contract IWbemLoginHelper provides IUnknown
{
    accepts operation SetEvent
    {
        in LPCSTR sEventToSet
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "sEventToSet", "SetEvent"));
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "SetEvent, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
}
with IDL{Uuid = {541679ab-2e5f-11d3-b34e-00104bcc4b4a}, Object = true};

contract IWbemLoginClientID provides IUnknown
{
    accepts operation SetClientInfo
    {
        in string wszClientMachine
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "SetClientInfo", "SetClientInfo"))
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in IDLLong lClientProcId;
        in IDLLong lReserved
                where ValidationCheckZero(value == 0, this, true, ReferenceType.Message, "WMI", "lReserved", "SetClientInfo", value);
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "SetClientInfo, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
}
with IDL{Uuid = {d4781cd6-e5d3-44df-ad94-930efe48a887}, Object = true};

contract IWbemLevel1Login provides IUnknown
{
    accepts operation EstablishPosition
    {
        in string reserved1
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved1", "EstablishPosition", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in DWORD reserved2
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "reserved2", "EstablishPosition", value);
        out DWORD reserved3 with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue
                where ValidationCheckEnumValue((value as uint) in {0x00000000, 0x80004001}, this, true, ReferenceType.Message, "WMI", "ReturnValue", "EstablishPosition", "0x00000000, 0x80004001", value);
        
        override string ToString()
        {
            return
                "EstablishPosition, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation RequestChallenge
    {
        in string reserved1
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved1", "RequestChallenge", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string reserved2
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved2", "RequestChallenge", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        out array<char> reserved3
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved3", "RequestChallenge", "NULL", value)
                with IDL{Size_is = [16], Length_is = [16], IndirectionLevel = 1};
        result HRESULT ReturnValue
                where ValidationCheckValue(value == 0x8004100c, this, false, ReferenceType.Message, "WMI", "ReturnValue", "RequestChallenge", "0x8004100c", value);
        
        override string ToString()
        {
            return
                "RequestChallenge, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation WBEMLogin
    {
        in string reserved1
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved1", "WBEMLogin", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in string reserved2
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved2", "WBEMLogin", "NULL", value)
                with IDL{BaseStringType = TypeOf<char>(), PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in IDLLong reserved3
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "reserved3", "WBEMLogin", value);
        in MInterfacePointer reserved4
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved4", "WBEMLogin", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PMInterfacePointer reserved5
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "reserved5", "WBEMLogin", "NULL", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue
                where ValidationCheckValue(value == 0x80004001, this, false, ReferenceType.Message, "WMI", "ReturnValue", "WBEMLogin", "0x80004001", value);

        override string ToString()
        {
            return
                "WBEMLogin, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation NTLMLogin
    {
        in string wszNetworkResource
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "wszNetworkResource", "NTLMLogin"))
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string wszPreferredLocale
                with IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "NTLMLogin", value);
        in MInterfacePointer pCtx
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PMInterfacePointer ppNamespace
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
                return
                    "NTLMLogin, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
}
with IDL{Uuid = {f309ad18-d86a-11d0-a075-00c04fb68820},
                          Object = true,
                          Pointer_default = PointerKind.UniquePtr};

contract IWbemWCOSmartEnum provides IUnknown
{
    accepts operation Next
    {
        in GUID proxyGUID
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "proxyGUID", "Next"))
                with IDL{IndirectionLevel = 1};
        in IDLLong lTimeout;
        in ULONG uCount;
        out ULONG puReturned
                with IDL{IndirectionLevel = 1};
        out ULONG pdwBuffSize
                with IDL{IndirectionLevel = 1};
        out array<byte> pBuffer
                with IDL{Size_is = [null, pdwBuffSize], PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Next, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
}
with IDL{Uuid = {423ec01e-2e35-11d2-b604-00104b703efd}, Object = true};

contract IWbemFetchSmartEnum provides IUnknown
{
    accepts operation GetSmartEnum
    {
        out PMInterfacePointer ppSmartEnum
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "ppSmartEnum", "GetSmartEnum"))
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetSmartEnum, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
}
with IDL{Uuid = {1c1c45ee-4395-11d2-b60b-00104b703efd}, Object = true};

contract IWbemRefreshingServices provides IUnknown
{
    accepts operation AddObjectToRefresher
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "AddObjectToRefresher"))
                with IDL{IndirectionLevel = 1};
        in string wszPath
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "wszPath", "AddObjectToRefresher"))
                with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "AddObjectToRefresher", value);
        in MInterfacePointer pContext with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, false, ReferenceType.Message, "WMI", "dwClientRefrVersion", "AddObjectToRefresher", "0x02", value);
        out _WBEM_REFRESH_INFO pInfo
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pInfo", "AddObjectToRefresher"))
                with IDL{IndirectionLevel = 1};
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "dwClientRefrVersion", "AddObjectToRefresher", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "AddObjectToRefresher, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation AddObjectToRefresherByTemplate
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "AddObjectToRefresherByTemplate"))
                with IDL{IndirectionLevel = 1};
        in MInterfacePointer pTemplate
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pTemplate", "AddObjectToRefresherByTemplate"))
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "AddObjectToRefresherByTemplate", value);
        in MInterfacePointer pContext with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, false, ReferenceType.Message, "WMI", "dwClientRefrVersion", "AddObjectToRefresherByTemplate", "0x02", value);
        out _WBEM_REFRESH_INFO pInfo
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pInfo", "AddObjectToRefresherByTemplate"))
                with IDL{IndirectionLevel = 1};
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "pdwSvrRefrVersion", "AddObjectToRefresherByTemplate", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "AddObjectToRefresherByTemplate, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation AddEnumToRefresher
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "AddEnumToRefresher"))
                with IDL{IndirectionLevel = 1};
        in string wszClass
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "wszClass", "AddEnumToRefresher"))
                with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "AddEnumToRefresher", value);
        in MInterfacePointer pContext with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, true, ReferenceType.Message, "WMI", "dwClientRefrVersion", "AddEnumToRefresher", "0x02", value);
        out _WBEM_REFRESH_INFO pInfo
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pInfo", "AddEnumToRefresher"))
                with IDL{IndirectionLevel = 1};
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "pdwSvrRefrVersion", "AddEnumToRefresher", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "AddEnumToRefresher, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation RemoveObjectFromRefresher
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "RemoveObjectFromRefresher"))
                with IDL{IndirectionLevel = 1};
        in IDLLong lId;
        in IDLLong lFlags;
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, true, ReferenceType.Message, "WMI", "dwClientRefrVersion", "RemoveObjectFromRefresher", "0x02", value);
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "pdwSvrRefrVersion", "RemoveObjectFromRefresher", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "RemoveObjectFromRefresher, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation GetRemoteRefresher
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "GetRemoteRefresher"))
                with IDL{IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "GetRemoteRefresher", value);
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, true, ReferenceType.Message, "WMI", "dwClientRefrVersion", "GetRemoteRefresher", "0x02", value);
        out PMInterfacePointer ppRemRefresher
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "ppRemRefresher", "GetRemoteRefresher"))
                with IDL{IndirectionLevel = 1};
        out GUID pGuid
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pGuid", "GetRemoteRefresher"))
                with IDL{IndirectionLevel = 1};
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "pdwSvrRefrVersion", "GetRemoteRefresher", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetRemoteRefresher, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 7};
    
    accepts operation ReconnectRemoteRefresher
    {
        in _WBEM_REFRESHER_ID pRefresherId
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pRefresherId", "ReconnectRemoteRefresher"))
                with IDL{IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "GetRemoteRefresher", value);
        in IDLLong lNumObjects;
        in DWORD dwClientRefrVersion
                where ValidationCheckValue(value == 0x02, this, true, ReferenceType.Message, "WMI", "dwClientRefrVersion", "ReconnectRemoteRefresher", "0x02", value);
        in array<_WBEM_RECONNECT_INFO> apReconnectInfo
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "apReconnectInfo", "ReconnectRemoteRefresher"))
                with IDL{Size_is = [lNumObjects], IndirectionLevel = 1};
        in out array<_WBEM_RECONNECT_RESULTS> apReconnectResults
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "apReconnectResults", "ReconnectRemoteRefresher"))
                with IDL{Size_is = [lNumObjects], IndirectionLevel = 1};
        out DWORD pdwSvrRefrVersion
                where ValidationCheckValue(value == 0x01, this, false, ReferenceType.Message, "WMI", "pdwSvrRefrVersion", "GetRemoteRefresher", "0x01", value)
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ReconnectRemoteRefresher, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 8};
}
with IDL{Uuid = {2c9273e0-1dc3-11d3-b364-00105a1f8177},
         Object = true,
         Version = "0.0",
         Pointer_default = PointerKind.UniquePtr,
         Helpstring = "ICertRequest DCOM Interface"};

contract IWbemRemoteRefresher provides IUnknown
{
    accepts operation RemoteRefresh
    {
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "RemoteRefresh", value);
        out IDLLong plNumObjects with IDL{IndirectionLevel = 1};
        out array<WBEM_REFRESHED_OBJECT> paObjects
                with IDL{Size_is = [null, plNumObjects], PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "RemoteRefresh, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation StopRefreshing
    {
        in IDLLong lNumIds;
        in array<IDLLong> aplIds
                with IDL{Size_is = [lNumIds], IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "StopRefreshing", value);
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "StopRefreshing, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation Opnum5NotUsedOnWire
    {
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "StopRefreshing", value);
        out GUID pGuid with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Opnum5NotUsedOnWire, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
}
with IDL{Uuid = {f1e9c5b2-f59b-11d2-b362-00105a1f8177}, Object = true};

contract IWbemServices provides IUnknown
{
    accepts operation OpenNamespace
    {
        in OAUT.BSTR strNamespace
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strNamespace", "OpenNamespace"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags;
        in MInterfacePointer pCtx
                where ValidationCheckValue(value == null, this, true, ReferenceType.Message, "WMI", "pCtx", "OpenNamespace", "NULL", value)
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppWorkingNamespace
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        in out MInterfacePointer ppResult
                   with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "OpenNamespace, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation CancelAsyncCall
    {
        in MInterfacePointer pSink with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "CancelAsyncCall, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation QueryObjectSink
    {
        in IDLLong lFlags where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "QueryObjectSink", value);
        out PMInterfacePointer ppResponseHandler
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "QueryObjectSink, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation GetObject
    {
        in OAUT.BSTR strObjectPath
                    with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in GetObjectFlags lFlags
                    where ValidationCheckEnumValue(InRange<GetObjectFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "GetObject", "0x00020000, 0x00000010, 0x00000200", value)
                    with Encoding{Decoder = PatternDecoder<GetObjectFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppObject
                   with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        in out MInterfacePointer ppCallResult
                   with IDL{PointerType = PointerKind.UniquePtr,
                                             IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetObject, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation GetObjectAsync
    {
        in OAUT.BSTR strObjectPath
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in GetObjectAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<GetObjectAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "GetObjectAsync", "0x00020000, 0x00000080, 0x00000200", value)
                with Encoding{Decoder = PatternDecoder<GetObjectAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
               with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetObjectAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 7};
    
    accepts operation PutClass
    {
        in MInterfacePointer pObject
               with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PutClassFlags lFlags
                where ValidationCheckEnumValue(InRange<PutClassFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "PutClass", "0x00020000, 0x00000010, 0x00000001, 0x00000002, 0x00000040, 0x00000020", value)
                with Encoding{Decoder = PatternDecoder<PutClassFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppCallResult
                   with IDL{PointerType = PointerKind.UniquePtr,
                                             IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "PutClass, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 8};
    
    accepts operation PutClassAsync
    {
        in MInterfacePointer pObject
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PutClassAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<PutClassAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "PutClassAsync", "0x00020000, 0x00000001, 0x00000002, 0x00000040, 0x00000020, 0x00000080", value)
                with Encoding{Decoder = PatternDecoder<PutClassAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "PutClassAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 9};
    
    accepts operation DeleteClass
    {
        in OAUT.BSTR strClass
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strClass", "DeleteClass"))
                with IDL{Const=true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000010, this, true, ReferenceType.Message, "WMI", "lFlags", "DeleteClass", "0x00000010", value);
        in MInterfacePointer pCtx
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppCallResult
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "DeleteClass, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 10};
    
    accepts operation DeleteClassAsync
    {
        in OAUT.BSTR strClass
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strClass", "DeleteClassAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000080, this, true, ReferenceType.Message, "WMI", "lFlags", "DeleteClassAsync", "0x00000080", value);
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "DeleteClassAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 11};
    
    accepts operation CreateClassEnum
    {
        in OAUT.BSTR strSuperclass
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in CreateClassEnumFlags lFlags
                where ValidationCheckEnumValue(InRange<CreateClassEnumFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "CreateClassEnum", "0x00020000, 0x00000010, 0x00000001, 0x00000020", value)
                with Encoding{Decoder = PatternDecoder<CreateClassEnumFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer ppEnum
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "CreateClassEnum, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 12};
    
    accepts operation CreateClassEnumAsync
    {
        in OAUT.BSTR strSuperclass
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in CreateClassEnumAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<CreateClassEnumAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "CreateClassEnumAsync", "0x00020000, 0x00000010, 0x00000001, 0x00000080", value)
                with Encoding{Decoder = PatternDecoder<CreateClassEnumAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "CreateClassEnumAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 13};
    
    accepts operation PutInstance
    {
        in MInterfacePointer pInst
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PutInstanceFlags lFlags
                where ValidationCheckEnumValue(InRange<PutInstanceFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "PutInstanceFlags", "0x00020000, 0x00000010, 0x00000001, 0x00000002", value)
                with Encoding{Decoder = PatternDecoder<PutInstanceFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppCallResult
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "PutInstance, lFlags, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 14};
    
    accepts operation PutInstanceAsync
    {
        in MInterfacePointer pInst
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PutInstanceAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<PutInstanceAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "PutInstanceAsync", "0x00020000, 0x00000001, 0x00000002, 0x00000080", value)
                with Encoding{Decoder = PatternDecoder<PutInstanceAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "PutInstanceAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 15};
    
    accepts operation DeleteInstance
    {
        in OAUT.BSTR strObjectPath
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strObjectPath", "DeleteInstance"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000010, this, true, ReferenceType.Message, "WMI", "lFlags", "DeleteInstance", "0x00000010", value);
        in MInterfacePointer pCtx
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppCallResult
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "DeleteInstance, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 16};
    
    accepts operation DeleteInstanceAsync
    {
        in OAUT.BSTR strObjectPath
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strObjectPath", "DeleteInstanceAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000080, this, true, ReferenceType.Message, "WMI", "lFlags", "DeleteInstanceAsync", "0x00000080", value);
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
               with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "DeleteInstanceAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 17};
    
    accepts operation CreateInstanceEnum
    {
        in OAUT.BSTR strSuperClass
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strSuperClass", "CreateInstanceEnum"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in CreateInstanceEnumFlags lFlags
                where ValidationCheckEnumValue(InRange<CreateInstanceEnumFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "CreateInstanceEnum", "0x00020000, 0x00000010, 0x00000200, 0x00000001, 0x00000020", value)
                with Encoding{Decoder = PatternDecoder<CreateInstanceEnumFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PMInterfacePointer ppEnum
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "CreateInstanceEnum, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 18};
    
    accepts operation CreateInstanceEnumAsync
    {
        in OAUT.BSTR strSuperClass
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strSuperClass", "CreateInstanceEnumAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in CreateInstanceEnumAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<CreateInstanceEnumAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "CreateInstanceEnumAsync", "0x00020000, 0x00000080, 0x00000200, 0x00000001", value)
                with Encoding{Decoder = PatternDecoder<CreateInstanceEnumAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "CreateInstanceEnumAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 19};
    
    accepts operation ExecQuery
    {
        in OAUT.BSTR strQueryLanguage
                    where ValidationCheckValue(value.asData == "WQL", this, true, ReferenceType.Message, "WMI", "strQueryLanguage", "ExecQuery", "WQL", value)
                    with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strQuery
                    where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strQuery", "ExecQuery"))
                    with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in ExecQueryFlags lFlags
                    where ValidationCheckEnumValue(InRange<ExecQueryFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "ExecQuery", "0x00020000, 0x00000010, 0x00000200, 0x00000002, 0x00000020", value)
                    with Encoding{Decoder = PatternDecoder<ExecQueryFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PMInterfacePointer ppEnum
                    where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "ppEnum", "ExecQuery"))
                    with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecQuery, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 20};
    
    accepts operation ExecQueryAsync
    {
        in OAUT.BSTR strQueryLanguage
                where ValidationCheckValue(value.asData == "WQL", this, true, ReferenceType.Message, "WMI", "strQueryLanguage", "ExecQueryAsync", "WQL", value)
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strQuery
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strQuery", "ExecQueryAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in ExecQueryAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<ExecQueryAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "ExecQueryAsync", "0x00020000, 0x00000080, 0x00000002, 0x00000200", value)
                with Encoding{Decoder = PatternDecoder<ExecQueryAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pResponseHandler", "ExecQueryAsync"))
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecQueryAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 21};
    
    accepts operation ExecNotificationQuery
    {
        in OAUT.BSTR strQueryLanguage
                where ValidationCheckValue(value.asData == "WQL", this, true, ReferenceType.Message, "WMI", "strQueryLanguage", "ExecNotificationQuery", "WQL", value)
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strQuery
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strQuery", "ExecNotificationQuery"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in ExecNotificationQueryFlags lFlags
                where ValidationCheckEnumValue(InRange<ExecNotificationQueryFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "ExecNotificationQuery", "0x00020000, 0x00000010, 0x00000200", value)
                with Encoding{Decoder = PatternDecoder<ExecNotificationQueryFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PMInterfacePointer ppEnum
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "ppEnum", "ExecNotificationQuery"))
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecNotificationQuery, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 22};
    
    accepts operation ExecNotificationQueryAsync
    {
        in OAUT.BSTR strQueryLanguage
                where ValidationCheckValue(value.asData == "WQL", this, true, ReferenceType.Message, "WMI", "strQueryLanguage", "ExecNotificationQueryAsync", "WQL", value)
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strQuery
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strQuery", "ExecNotificationQueryAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in ExecNotificationQueryAsyncFlags lFlags
                where ValidationCheckEnumValue(InRange<ExecNotificationQueryAsyncFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "ExecNotificationQueryAsync", "0x00020000, 0x00000080", value)
                with Encoding{Decoder = PatternDecoder<ExecNotificationQueryAsyncFlags>, SourcePattern = TypeOf<IDLLong>()};
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pResponseHandler
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "pResponseHandler", "ExecNotificationQueryAsync"))
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecNotificationQueryAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 23};
    
    accepts operation ExecMethod
    {
        in OAUT.BSTR strObjectPath
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strObjectPath", "ExecMethod"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strMethodName
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strMethodName", "ExecMethod"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000010, this, true, ReferenceType.Message, "WMI", "lFlags", "ExecMethod", "0x00000010", value);
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pInParams
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out MInterfacePointer ppOutParams
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        in out MInterfacePointer ppCallResult
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 2};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecMethod, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 24};
    
    accepts operation ExecMethodAsync
    {
        in OAUT.BSTR strObjectPath
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strObjectPath", "ExecMethodAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in OAUT.BSTR strMethodName
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strMethodName", "ExecMethodAsync"))
                with IDL{Const = true, PointerType = PointerKind.UniquePtr};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000080, this, true, ReferenceType.Message, "WMI", "lFlags", "ExecMethod", "0x00000080", value);
        in MInterfacePointer pCtx with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in MInterfacePointer pInParams
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PMInterfacePointer pResponseHandler
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "ExecMethodAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 25};
}
with IDL{Uuid = {9556dc99-828c-11cf-a37e-00aa003240c7},
                          Object = true,
                          Pointer_default = PointerKind.UniquePtr};

optional (IDLOBjectArray | ObjectArray) apObjArrayDecoder(stream s)
{
    if (s.PeekBytes(0, 4) == $[00000000] || s.PeekBytes(0, 4) == $[FFFFFFFF])
    {
        if (BinaryDecoder<ObjectArray>(s) is apObjArrayType:ObjectArray)
        {
            return apObjArrayType;
        }
    }
    else
    {
        if(NdrDecoder<IDLOBjectArray>(s) is apObjArrayType: IDLOBjectArray)
        {
            return apObjArrayType;
        }
    }
    return nothing;
}

contract IWbemObjectSink provides IUnknown
{
    accepts operation Indicate
    {
        in (IDLOBjectArray | ObjectArray) apObjArray with Encoding{Decoder = apObjArrayDecoder};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Indicate, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation SetStatus
    {
        in SetStatusFlags lFlags
                where ValidationCheckEnumValue(InRange<SetStatusFlags>(value), this, true, ReferenceType.Message, "WMI", "lFlags", "SetStatus", "0x00000000, 0x00000002", value)
                with Encoding{Decoder = PatternDecoder<SetStatusFlags>, SourcePattern = TypeOf<IDLLong>()};
        in HRESULT hResult;
        in OAUT.BSTR strParam with IDL{PointerType = PointerKind.UniquePtr};
        in MInterfacePointer pObjParam
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "SetStatus, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
}
with IDL{Uuid = {7c857801-7381-11cf-884d-00aa004b2e24}, Object = true};

contract IWbemBackupRestore provides IUnknown
{
    accepts operation Backup
    {
        in string strBackupToFile
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strBackupToFile", "Backup"))
                with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckReservedZero(value == 0, this, true, ReferenceType.Message, "WMI", "lFlags", "Backup", value);
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Backup, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation Restore
    {
        in string strRestoreFromFile
                where ValidationCheck(value != null, this, () => Format(WMI_NOT_NULL, "strRestoreFromFile", "Restore"))
                with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in IDLLong lFlags
                where ValidationCheckValue(value == 0x00000001, this, true, ReferenceType.Message, "WMI", "lFlags", "Restore", "0x00000001", value);
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Restore, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
}
with IDL{Uuid = {c49e32c7-bc8b-11d2-85d4-00105a1f8304}, Object = true};

contract IEnumWbemClassObject provides IUnknown
{
    accepts operation Reset
    {
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Reset, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation Next
    {
        in IDLLong lTimeout;
        in ULONG uCount;
        out array<MInterfacePointer> apObjects
                with IDL{PointerType = PointerKind.UniquePtr,
                                          Size_is = [uCount, null],
                                          Length_is = [puReturned],
                                          IndirectionLevel = 2};
        out ULONG puReturned with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Nex, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation NextAsync
    {
        in ULONG uCount;
        in MInterfacePointer pSink with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "NextAsync, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation Clone
    {
        out PMInterfacePointer ppEnum
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Clone, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation Skip
    {
        in IDLLong lTimeout;
        in ULONG nCount;
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "Skip, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 7};
}
with IDL{Uuid = {027947e1-d731-11ce-a357-000000000001}, Object = true};

contract IWbemCallResult provides IUnknown
{
    accepts operation GetResultObject
    {
        in IDLLong lTimeout;
        out PMInterfacePointer ppResultObject
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetResultObject, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation GetResultString
    {
        in IDLLong lTimeout;
        out OAUT.BSTR pstrResultString
                with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetResultString, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation GetResultServices
    {
        in IDLLong lTimeout;
        out PMInterfacePointer ppServices
                with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetResultServices, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation GetCallStatus
    {
        in IDLLong lTimeout;
        out IDLLong plStatus with IDL{IndirectionLevel = 1};
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return
                "GetCallStatus, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
}
with IDL{Uuid = {44aca675-e8fc-11d0-a07c-00c04fb68820}, Object = true};

contract IWbemBackupRestoreEx provides IWbemBackupRestore
{
    accepts operation Pause
    {
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Pause, ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation Resume
    {
        result HRESULT ReturnValue;
        
        override string ToString()
        {
            return "Resume" + ", ReturnValue: " + ReturnValue.ToString();
        }
    }
    with IDL{Opnum = 6};
}
with IDL
         {Uuid = {a359dec5-e813-4834-8a2a-ba7f1d777d76}, Object = true};

typedef HRESULT = IDLLong;

type WBEM_REFRESHED_OBJECT
{
    IDLLong m_lRequestId;
    WBEM_INSTANCE_BLOB_TYPE m_lBlobType;
    IDLLong m_lBlobLength;
    array<byte> m_pbBlob
        with IDL{Size_is = [m_lBlobLength], IndirectionLevel = 1};
}

pattern WBEM_INSTANCE_BLOB_TYPE = enum
{
    WBEM_BLOB_TYPE_ALL = 2,
    WBEM_BLOB_TYPE_ERROR = 3,
    WBEM_BLOB_TYPE_ENUM = 4
    ...
} with IDL{V1_enum = true};

type _WBEM_REFRESHER_ID
{
    string m_szMachineName
        with IDL{BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD m_dwProcessId;
    GUID m_guidRefresherId;
};

type _WBEM_REFRESH_INFO
{
    IDLLong m_lType;
    WBEM_REFRESH_INFO_UNION[m_lType] m_Info
        with IDL{Switch_Is = m_lType};
    IDLLong m_lCancelId;
};

typedef WBEM_REFRESH_INFO_UNION = _WBEM_REFRESH_INFO_UNION
    with IDL{Switch_Type = TypeOf<long>()} ;

type _WBEM_REFRESH_INFO_UNION[IDLLong tag]
{
    optional [|tag in {3}|] _WBEM_REFRESH_INFO_REMOTE m_Remote
        with IDL{Case = [3]};
    optional [|tag in {6}|] _WBEM_REFRESH_INFO_NON_HIPERF m_NonHiPerf
        with IDL{Case = [6]};
    optional [|tag in {0}|] HRESULT m_hres with IDL{Case = [0]};
}
with IDL{Switch_Type = TypeOf<IDLLong>(),
                          UnionKind = UnionKind.NonEncapsulated};

type _WBEM_REFRESH_INFO_REMOTE
{
    MInterfacePointer m_pRefresher
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
    MInterfacePointer m_pTemplate with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
    GUID m_Guid;
};

type _WBEM_REFRESH_INFO_NON_HIPERF
{
    string m_wszNamespace
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    MInterfacePointer m_pTemplate with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
};

type _WBEM_RECONNECT_INFO
{
    IDLLong m_lType;
    string m_pwcsPath
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
};

type _WBEM_RECONNECT_RESULTS
{
    IDLLong m_lId;
    HRESULT m_hr;
};

type ObjectArray
{
    dwByteOrdering dwByteOrdering where value == 0x00000000;
    string abSignature
                where ValidationCheckValue(value == "WBEMDATA", null, true, ReferenceType.Message, "WMI", "lFlags", "Restore", "0x00000001", value)
                with BinaryEncoding{Endian = Endian.Little, Length = 8, TextEncoding = TextEncoding.ASCII};
    uint dwSizeOfHeader1;
    uint dwDataSize1;
    uint dwFlags where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "WMI", "dwFlags", "ObjectArray", value);
    byte bVersion where ValidationCheckValue(value == 1, null, true, ReferenceType.Message, "WMI", "bVersion", "ObjectArray", "1", value);
    bPacketType bPacketType
                where ValidationCheckEnumValue(InRange<bPacketType>(value), null, true, ReferenceType.Message, "WMI", "bPacketType", "bPacketType", "0x00000000, 0x00000001", value);
    uint dwSizeOfHeader2 where ValidationCheckValue(value == 8, null, true, ReferenceType.Message, "WMI", "dwSizeOfHeader2", "ObjectArray", "1", value);
    uint dwDataSize2;
    uint dwSizeOfHeader3;
    uint dwDataSize3;
    uint dwNumObjects;
    optional [|dwNumObjects != 0|] array<WBEM_DATAPACKET_OBJECT> wbemObjects with BinaryEncoding{Length = dwNumObjects};
}with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

type WBEM_DATAPACKET_OBJECT
{
    uint dwSizeOfHeader where ValidationCheckValue(value == 0x00000009, null, true, ReferenceType.Message, "WMI", "dwSizeOfHeader", "WBEM_DATAPACKET_OBJECT", "0x00000009", value);
    uint dwSizeOfData;
    bObjectType bObjectType
                where ValidationCheckEnumValue(InRange<bPacketType>(value), null, true, ReferenceType.Message, "WMI", "bObjectType", "WBEM_DATAPACKET_OBJECT", "1, 2, 3", value);
    optional ([|dwSizeOfData != 0 && bObjectType == 3|] array<WBEMOBJECT_INSTANCE_NOCLASS>
             | [|dwSizeOfData != 0 && bObjectType == 2|] array<WBEMOBJECT_INSTANCE>
             | [|dwSizeOfData != 0 && bObjectType == 1|] array<WBEMOBJECT_CLASS>) Object with BinaryEncoding{WidthForComposedType = (dwSizeOfData * 8) as int};
}with Encoding{EncodingKind = EncodingKind.Binary}, IDL{DoNotGenerate = true};

type WBEMOBJECT_CLASS
{
    uint dwSizeOfHeader where ValidationCheckValue(value == 0x00000008, null, true, ReferenceType.Message, "WMI", "dwSizeOfHeader", "WBEM_DATAPACKET_OBJECT", "0x00000008", value);
    uint dwSizeOfData;
    optional [|dwSizeOfData != 0|]binary ObjectData with BinaryEncoding{Length = dwSizeOfData};
}

type WBEMOBJECT_INSTANCE
{
    uint dwSizeOfHeader where ValidationCheckValue(value == 0x00000018, null, true, ReferenceType.Message, "WMI", "dwSizeOfHeader", "WBEM_DATAPACKET_OBJECT", "0x00000018", value);
    uint dwSizeOfData;
    GUID classID;
    optional [|dwSizeOfData != 0|]binary ObjectData with BinaryEncoding{Length = dwSizeOfData};
}

type WBEMOBJECT_INSTANCE_NOCLASS
{
    uint dwSizeOfHeader where ValidationCheckValue(value == 0x00000018, null, true, ReferenceType.Message, "WMI", "dwSizeOfHeader", "WBEM_DATAPACKET_OBJECT", "0x00000018", value);
    uint dwSizeOfData;
    GUID classID;
    optional [|dwSizeOfData != 0|]binary ObjectData with BinaryEncoding{Length = dwSizeOfData};
}

type IDLOBjectArray
{
    IDLLong lObjectCount;
    array<PMInterfacePointerWorkaround> DCOMObjectArray
            with IDL{Size_is = [lObjectCount]};
} with IDL{DoNotGenerate = true};

// workaround for bug 73789: decode typedef array which element is a pointer failed
type PMInterfacePointerWorkaround
{
    PMInterfacePointer PMInterfacePointer with IDL{PointerType = PointerKind.UniquePtr};
}

pattern dwByteOrdering = enum uint
{
    little_endian = 0x00000000,
    ...
} with IDL{DoNotGenerate = true};

pattern bPacketType = enum byte
{
    Indicate = 0x00000000,
    Next     = 0x00000001,
    ...
} with IDL{DoNotGenerate = true};

pattern bObjectType = enum byte
{
    WBEMOBJECT_CLASS            = 1,
    WBEMOBJECT_INSTANCE         = 2,
    WBEMOBJECT_INSTANCE_NOCLASS = 3,
    ...
} with IDL{DoNotGenerate = true};

pattern SetStatusFlags = flags IDLLong
{
    WBEM_STATUS_COMPLETE = 0x00000000,
    WBEM_STATUS_PROGRESS = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

pattern GetObjectFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    ...
} with IDL{DoNotGenerate = true};

pattern GetObjectAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    ...
} with IDL{DoNotGenerate = true};

pattern PutClassFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_UPDATE_ONLY               = 0x00000001,
    WBEM_FLAG_CREATE_ONLY               = 0x00000002,
    WBEM_FLAG_UPDATE_FORCE_MODE         = 0x00000040,
    WBEM_FLAG_UPDATE_SAFE_MODE          = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern PutClassAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_UPDATE_ONLY               = 0x00000001,
    WBEM_FLAG_CREATE_ONLY               = 0x00000002,
    WBEM_FLAG_UPDATE_FORCE_MODE         = 0x00000040,
    WBEM_FLAG_UPDATE_SAFE_MODE          = 0x00000020,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    ...
} with IDL{DoNotGenerate = true};

pattern CreateClassEnumFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_SHALLOW                   = 0x00000001,
    WBEM_FLAG_FORWARD_ONLY              = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern CreateClassEnumAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    WBEM_FLAG_SHALLOW                   = 0x00000001,
    ...
} with IDL{DoNotGenerate = true};

pattern PutInstanceFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_UPDATE_ONLY               = 0x00000001,
    WBEM_FLAG_CREATE_ONLY               = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

pattern PutInstanceAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_UPDATE_ONLY               = 0x00000001,
    WBEM_FLAG_CREATE_ONLY               = 0x00000002,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    ...
} with IDL{DoNotGenerate = true};

pattern CreateInstanceEnumFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    WBEM_FLAG_SHALLOW                   = 0x00000001,
    WBEM_FLAG_FORWARD_ONLY              = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern CreateInstanceEnumAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    WBEM_FLAG_SHALLOW                   = 0x00000001,
    ...
} with IDL{DoNotGenerate = true};

pattern ExecQueryFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    WBEM_FLAG_PROTOTYPE                 = 0x00000002,
    WBEM_FLAG_FORWARD_ONLY              = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern ExecQueryAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    WBEM_FLAG_PROTOTYPE                 = 0x00000002,
    WBEM_FLAG_DIRECT_READ               = 0x00000200,
    ...
} with IDL{DoNotGenerate = true};

pattern ExecNotificationQueryFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_RETURN_IMMEDIATELY        = 0x00000010,
    WBEM_FLAG_FORWARD_ONLY              = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern ExecNotificationQueryAsyncFlags = flags IDLLong
{
    WBEM_FLAG_USE_AMENDED_QUALIFIERS    = 0x00020000,
    WBEM_FLAG_SEND_STATUS               = 0x00000080,
    ...
} with IDL{DoNotGenerate = true};

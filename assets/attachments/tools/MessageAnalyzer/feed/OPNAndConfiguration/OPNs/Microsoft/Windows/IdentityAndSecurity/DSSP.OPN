protocol DSSP with 
Standard.Documentation
{
    ProtocolName = "Directory Services Setup Remote Protocol",
    ProtocolType = "rpc",
    ShortName = "DSSP",
    DocumentName = "MS-DSSP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
    new Reference {Name = "DSSP", Version = "10.0", Date = "08/08/2013", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
    new Revision {Class = RevisionClass.Major, Version = "357149", Date = "12/04/2013"}
    ]
};

using Technologies.IDL;
using DTYP;
using ERREF;
using MSRPCE;
using Utility;
using IdentityAndSecurityResources;

endpoint DssetupService over MSRPCE.Server provides dssetup;

contract dssetup
{
    accepts operation DsRolerGetPrimaryDomainInformation
    {
        in optional handle_t hBinding;
        in DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel;
        out DSROLER_PRIMARY_DOMAIN_INFORMATION[InfoLevel] DomainInfo
                with Technologies.IDL.IDL
                         {Switch_Is = InfoLevel, IndirectionLevel = 2};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "DsRolerGetPrimaryDomainInformation, ReturnValue: " + DsspHResultValuesToText(ReturnValue) + ", InfoLevel: " + EnumToString(InfoLevel, "DSSP.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL");
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation Opnum1NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation Opnum2NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation Opnum3NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 3};
    
    accepts operation Opnum4NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation Opnum5NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 5};
    
    accepts operation Opnum6NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 6};
    
    accepts operation Opnum7NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 7};
    
    accepts operation Opnum8NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 8};
    
    accepts operation Opnum9NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 9};
    
    accepts operation Opnum10NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 10};
    
    accepts operation Opnum11NotUsedOnWire
    {
    }
    with Technologies.IDL.IDL{Opnum = 11};
}
with Technologies.IDL.IDL{Uuid = {3919286a-b10c-11d0-9ba8-00c04fd92ef5},
                          Version = "0.0",
                          Pointer_default = PointerKind.UniquePtr};

pattern DSROLE_PRIMARY_DOMAIN_INFO_LEVEL = enum 
                                           {
                                               DsRolePrimaryDomainInfoBasic = 1,
                                               DsRoleUpgradeStatus = 2,
                                               DsRoleOperationState = 3
                                           };

type DSROLER_PRIMARY_DOMAIN_INFORMATION[DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel]
{
    optional [|InfoLevel in {1}|] DSROLER_PRIMARY_DOMAIN_INFO_BASIC DomainInfoBasic
        with Technologies.IDL.IDL{Case = [1]};
    optional [|InfoLevel in {2}|] DSROLE_UPGRADE_STATUS_INFO UpgradStatusInfo
        with Technologies.IDL.IDL{Case = [2]};
    optional [|InfoLevel in {3}|] DSROLE_OPERATION_STATE_INFO OperationStateInfo
        with Technologies.IDL.IDL{Case = [3]};
}
with Technologies.IDL.IDL{EmptyDefault = true,
Switch_Type = TypeOf<DSROLE_PRIMARY_DOMAIN_INFO_LEVEL>(),
UnionKind = UnionKind.NonEncapsulated};

type DSROLER_PRIMARY_DOMAIN_INFO_BASIC
{
    DSROLE_MACHINE_ROLE MachineRole;
    __uint32 Flags where ValidationCheckCombinationValueIncludeZero(InRange<DSROLER_PRIMARY_DOMAIN_INFO_BASIC_flags>(value),
         null, true, ReferenceType.Type, "DSSP", "Flags", "DSROLER_PRIMARY_DOMAIN_INFO_BASIC", "0x00000001, 0x00000002, 0x00000008, 0x01000000",value);
    string DomainNameFlat 
        with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                  BaseStringType = TypeOf<wchar_t>(),
                                  IndirectionLevel = 1};
    string DomainNameDns where ValidationCheck((MachineRole in {0,2}) ? value == null : value != null, null, DiagnosisLevel.Error,
        DSSP_STR_CHECK_DOMAINNAMEDNS_IN_DSROLER_PRIMARY_DOMAIN_INFO_BASIC)
        with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                  BaseStringType = TypeOf<wchar_t>(),
                                  IndirectionLevel = 1};
    string DomainForestName where ValidationCheck((MachineRole in {0,2}) ? value == null : true, null, DiagnosisLevel.Error,
        DSSP_STR_CHECK_DOMAINFORESTNAME_IN_DSROLER_PRIMARY_DOMAIN_INFO_BASIC)
        with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                  BaseStringType = TypeOf<wchar_t>(),
                                  IndirectionLevel = 1};
    GUID DomainGuid;
}

pattern DSROLE_MACHINE_ROLE = enum 
                              {
                                  DsRole_RoleStandaloneWorkstation = 0,
                                  DsRole_RoleMemberWorkstation = 1,
                                  DsRole_RoleStandaloneServer = 2,
                                  DsRole_RoleMemberServer = 3,
                                  DsRole_RoleBackupDomainController = 4,
                                  DsRole_RolePrimaryDomainController = 5
                              };

type DSROLE_UPGRADE_STATUS_INFO
{
    __uint32 OperationState where ValidationCheckEnumValue(InRange<DSROLE_UPGRADE_STATUS_INFO_OperationState>(value),
        null, true, ReferenceType.Type, "DSSP", "OperationState", "DSROLE_UPGRADE_STATUS_INFO", "0x00000000, 0x00000004", value);
    DSROLE_SERVER_STATE PreviousServerState;
}

pattern DSROLE_SERVER_STATE = enum 
                              {
                                  DsRoleServerUnknown = 0,
                                  DsRoleServerPrimary = 1,
                                  DsRoleServerBackup = 2
                              };

type DSROLE_OPERATION_STATE_INFO
{
    DSROLE_OPERATION_STATE OperationState;
}

pattern DSROLE_OPERATION_STATE = enum 
                                 {
                                     DsRoleOperationIdle = 0,
                                     DsRoleOperationActive = 1,
                                     DsRoleOperationNeedReboot = 2
                                 };
                                 
string DsspHResultValuesToText(DWORD hResult)
{
    if (hResult in DsspHResultMap)
    {
        return DsspHResultMap[hResult];
    }
    else
    {
        return HResultValuesToText(hResult);
    }
}

const map<uint, string> DsspHResultMap =
{
    0x00000057 -> "ERROR_INVALID_PARAMETER", 
    0x00000008 -> "ERROR_NOT_ENOUGH_MEMORY",
} with Documentation{Ignore = true};

// 2.2.1   DSROLER_PRIMARY_DOMAIN_INFO_BASIC
pattern DSROLER_PRIMARY_DOMAIN_INFO_BASIC_flags = flags DWORD
{
    DSROLE_PRIMARY_DS_RUNNING = 0x00000001,
    DSROLE_PRIMARY_DS_MIXED_MODE = 0x00000002,
    DSROLE_PRIMARY_DS_READONLY = 0x00000008,
    DSROLE_PRIMARY_DOMAIN_GUID_PRESENT = 0x01000000,
} with IDL{DoNotGenerate = true};

//2.2.5   DSROLE_UPGRADE_STATUS_INFO
pattern DSROLE_UPGRADE_STATUS_INFO_OperationState = enum DWORD
{
    DSROLE_NO_UPGRADE_IN_PROGRESS = 0x00000000, //The name of this value is not a definition in TD
    DSROLE_UPGRADE_IN_PROGRESS = 0x00000004,
} with IDL{DoNotGenerate = true};


protocol ASF
    with BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Advanced Systems Format (ASF) Specification",
    ShortName = "ASF",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "Advanced System Format", Link = "http://msdn.microsoft.com/en-us/library/bb643323.aspx"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

using Standard;
using HTTP;
using Utility;

endpoint Server over HTTP.Server accepts File issues File;
client endpoint Client connected to Server;

autostart actor ASFOverHTTP(HTTP.Server server)
{
    process server accepts req:HttpContract.Request where req.Headers.ContentTypeContains("video/x-ms-asf")
    {            
        switch (req.Payload)
        {
            case f:File from BinaryDecoder<File> =>
                dispatch endpoint ASF.Server accepts f;
            default => 
                ThrowDecodingException("ASF");
        }
    }
    
    process server issues res:HttpContract.Response where res.Headers.ContentTypeContains("video/x-ms-asf")
    {
        switch (res.Payload)
        {
            case f:File from BinaryDecoder<File> =>
                dispatch endpoint ASF.Server issues f;
            default => 
                ThrowDecodingException("ASF");
        }
    }
}

message File
{
    HeaderObject Header;
    DataObject Data;
    IndexObject Indexes;
}

//**************************Header Object********************************//
type HeaderObject
{
    HeaderOfHeaderObject Header;
    array<ChildObjectOfHeaderObject> ChildObjects with BinaryEncoding{Length = Header.NumberOfHeaderObjects};
}

type HeaderOfHeaderObject
{
    (guid where value == {75B22630-668E-11CF-A6D9-00AA0062CE6C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 30, null, "ASF: The ObjectSize in type HeaderOfHeaderObject must be at least 30 bytes.");
    uint NumberOfHeaderObjects;
    byte Reserved1 where ValidationCheck(value == 1, null, "This Reserved1 field must be set to the value 0x01.");
    byte Reserved2 where ValidationCheck(value == 2, null, "This Reserved1 field must be set to the value 0x02.");
}

type ChildObjectOfHeaderObject
{
    (FilePropertiesObject | StreamPropertiesObject | HeaderExtensionObject |
     CodecListObject | ScriptCommandObject | MarkerObject | BitrateMutualExclusionObject |
     ErrorCorrectionObject | ContentDescriptionObject | ExtendedContentDescriptionObject |
     StreamBitratePropertiesObject | ContentBrandingObject | ContentEncryptionObject |
     ExtendedContentEncryptionObject | DigitalSignatureObject | PaddingObject) ChildObject;
}

type FilePropertiesObject
{
    (guid where value == {8CABDCA1-A947-11CF-8EE4-00C00C205365}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 104, null, "ASF: The ObjectSize in type FilePropertiesObject must be at least 104 bytes.");
    guid FileId;
    ulong FileSize;
    ulong CreationDate;
    ulong DataPacketCount;
    ulong PlayDuration;
    ulong SendDuration;
    ulong Preroll;
    FilePropertiesObjectFlags Flags;
    uint MaxDataPacketSize;
    uint MinDataPacketSize;
    uint MaxBitrate;
}

type FilePropertiesObjectFlags
{
    byte Reserved1 with BinaryEncoding{Width = 6};
    byte Seekable with BinaryEncoding{Width = 1};
    byte Broadcast with BinaryEncoding{Width = 1};
    uint Reserved2 with BinaryEncoding{Width = 24};
}

type StreamPropertiesObject
{
    (guid where value == {B7DC0791-A9B7-11CF-8EE6-00C00C205365}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 78, null, "ASF: The ObjectSize in type StreamPropertiesObject must be at least 78 bytes.");
    guid StreamType;
    guid ErrorCorrectionType;
    ulong TimeOffset;
    uint TypeSpecificDataLength;
    uint ErrorCorrectionDataLength;
    StreamPropertiesObjectFlags Flags;
    uint Reserved where ValidationCheck(value == 0, null, "This value should be set to zero.");
    ( [|StreamType == {F8699E40-5B4D-11CF-A8FD-00805F5C442B}|] AudioMediaType
    | [|StreamType == {BC19EFC0-5B4D-11CF-A8FD-00805F5C442B}|] VideoMediaType
    | [|StreamType == {B61BE100-5B4E-11CF-A8FD-00805F5C442B}|] JpegMediaType
    | [|StreamType == {35907DE0-E415-11CF-A917-00805F5C442B}|] DegradableJpegMediaType
    | [|StreamType == {91BD222C-F21C-497A-8B6D-5AA86BFC0185} || StreamType == {3AFB65E2-47EF-40F2-AC2C-70A90D71D343}|] FileTransferMediaType
    | [|StreamType == {59DACFC0-59E6-11D0-A3AC-00A0C90348F6}|] Blob[0]
    | Blob[TypeSpecificDataLength]) TypeSpecificData;
    ( [|ErrorCorrectionType == {BFC3CD50-618F-11CF-8BB2-00AA00B4E220}|] SpreadAudioError
    | Blob[TypeSpecificDataLength]) ErrorCorrectionData;
}

type StreamPropertiesObjectFlags
{
    byte Reserved1 with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte EncryptedContent with BinaryEncoding{Width = 1};
    byte Reserved2 with BinaryEncoding{Width = 7};
}

type HeaderExtensionObject
{
    (guid where value == {5FBF03B5-A92E-11CF-8EE3-00C00C205365}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 46, null, "ASF: The ObjectSize in type HeaderExtensionObject must be set to 46 bytes.");
    guid Reserved1 where ValidationCheck(value == {ABD3D211-A9BA-11cf-8EE6-00C00C205365}, null, "This value should be set to {ABD3D211-A9BA-11cf-8EE6-00C00C205365}.");
    ushort Reserved2 where ValidationCheck(value == 6, null, "This value should be set to 6.");
    uint HeaderExtensionDataSize;
    array<ChildOfHeaderExtensionObject> HeaderExtensionData;
}

type CodecListObject
{
    (guid where value == {86D15240-311D-11D0-A3A4-00A0C90348F6}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 44, null, "ASF: The ObjectSize in type CodecListObject must be at least 44 bytes.");
    guid Reserved where ValidationCheck(value == {86D15241-311D-11D0-A3A4-00A0C90348F6}, null, "This value should be set to {86D15241-311D-11D0-A3A4-00A0C90348F6}.");
    uint CodecEntriesCount;
    array<CodecEntry> CodecEntries with BinaryEncoding{Length = CodecEntriesCount};
}

type CodecEntry
{
    ushort Type;
    ushort CodecNameLength;
    string CodecName with BinaryEncoding{Length = CodecNameLength};
    ushort CodecDescriptionLength;
    string CodecDescription with BinaryEncoding{Length = CodecDescriptionLength};
    ushort CodecInformationLength;
    string CodecInformation with BinaryEncoding{Length = CodecInformationLength};
}

type ScriptCommandObject
{
    (guid where value == {1EFB1A30-0B62-11D0-A39B-00A0C90348F6}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 44, null, "ASF: The ObjectSize in type ScriptCommandObject must be at least 44 bytes.");
    guid Reserved where ValidationCheck(value == {4B1ACBE3-100B-11D0-A39B-00A0C90348F6}, null, "This value should be set to {4B1ACBE3-100B-11D0-A39B-00A0C90348F6}.");
    ushort CommandsCount;
    ushort CommandTypesCount;
    array<CommandType> CommandTypes with BinaryEncoding{Length = CommandTypesCount};
    array<Command> Commands with BinaryEncoding{Length = CommandsCount};
}

type CommandType
{
    ushort CommandTypeNameLength;
    string CommandTypeName with BinaryEncoding{Length = CommandTypeNameLength};
}

type Command
{
    uint PresentationTime;
    ushort TypeIndex;
    ushort CommandNameLength;
    string CommandName with BinaryEncoding{Length = CommandNameLength};
}

type MarkerObject
{
    (guid where value == {F487CD01-A951-11CF-8EE6-00C00C205365}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 48, null, "ASF: The ObjectSize in type MarkerObject must be at least 48 bytes.");
    guid Reserved1 where ValidationCheck(value == {4CFEDB20-75F6-11CF-9C0F-00A0C90349CB}, null, "This value should be set to {4CFEDB20-75F6-11CF-9C0F-00A0C90349CB}.");
    uint MarkersCount;
    ushort Reserved2;
    ushort NameLength;
    string Name with BinaryEncoding{Length = NameLength};
    array<Marker> Markers with BinaryEncoding{Length = MarkersCount};
}

type Marker
{
    ulong Offset;
    ulong PresentationTime;
    ushort EntryLength;
    uint SendTime;
    uint Flags where ValidationCheck(value == 0, null, "This value should be set to zero.");
    uint MarkerDescriptionLength;
    string MarkerDescription with BinaryEncoding{Length = MarkerDescriptionLength};
}

type BitrateMutualExclusionObject
{
    (guid where value == {D6E229DC-35DA-11D1-9034-00A0C90349BE}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 42, null, "ASF: The ObjectSize in type BitrateMutualExclusionObject must be at least 42 bytes.");
    guid ExclusionType;
    ushort StreamNumbersCount;
    array<ushort> StreamNumbers with BinaryEncoding{Length = StreamNumbersCount};
}

type ErrorCorrectionObject
{
    (guid where value == {75B22635-668E-11CF-A6D9-00AA0062CE6C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 44, null, "ASF: The ObjectSize in type ErrorCorrectionObject must be at least 44 bytes.");
    guid ErrorCorrectionType;
    uint ErrorCorrectionDataLength;
    binary ErrorCorrectionData with BinaryEncoding{Length = ErrorCorrectionDataLength};
}

type ContentDescriptionObject
{
    (guid where value == {75B22633-668E-11CF-A6D9-00AA0062CE6C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type ContentDescriptionObject must be at least 34 bytes.");
    ushort TitleLength;
    ushort AuthorLength;
    ushort CopyrightLength;
    ushort DescriptionLength;
    ushort RatingLength;
    string Title with BinaryEncoding{Length = TitleLength};
    string Author with BinaryEncoding{Length = AuthorLength};
    string Copyright with BinaryEncoding{Length = CopyrightLength};
    string Description with BinaryEncoding{Length = DescriptionLength};
    string Rating with BinaryEncoding{Length = RatingLength};
}

type ExtendedContentDescriptionObject
{
    (guid where value == {D2D0A440-E307-11D2-97F0-00A0C95EA850}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type ExtendedContentDescriptionObject must be at least 26 bytes.");
    ushort ContentDescriptorsCount;
    array<ContentDescriptor> ContentDescriptors with BinaryEncoding{Length = ContentDescriptorsCount};
}

type ContentDescriptor
{
    ushort DescriptorNameLength;
    string DescriptorName with BinaryEncoding{Length = DescriptorNameLength};
    ushort DescriptorValueDataType;
    ushort DescriptorValueLength;
    DescriptorValue[DescriptorValueDataType, DescriptorValueLength] DescriptorValue;
}

type StreamBitratePropertiesObject
{
    (guid where value == {7BF875CE-468D-11D1-8D82-006097C9A2B2}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type StreamBitratePropertiesObject must be at least 26 bytes.");
    ushort BitrateRecordsCount;
    array<BitrateRecord> BitrateRecords with BinaryEncoding{Length = BitrateRecordsCount};
}

type BitrateRecord
{
    BitrateRecordFlags Flags;
    uint AverageBitrate;
}

type BitrateRecordFlags
{
    byte Reserved1 with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte Reserved2;
}

type ContentBrandingObject
{
    (guid where value == {2211B3FA-BD23-11D2-B4B7-00A0C955FC6E}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 40, null, "ASF: The ObjectSize in type ContentBrandingObject must be at least 40 bytes.");
    uint BannerImageType;
    uint BannerImageDataSize;
    binary BannerImageData with BinaryEncoding{Length = BannerImageDataSize};
    uint BannerImageURLLength;
    string BannerImageURL with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = BannerImageURLLength};
    uint CopyrightURLLength;
    string CopyrightURL with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = CopyrightURLLength};
}

type ContentEncryptionObject
{
    (guid where value == {2211B3FB-BD23-11D2-B4B7-00A0C955FC6E}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 40, null, "ASF: The ObjectSize in type ContentEncryptionObject must be at least 40 bytes.");
    uint SecretDataLength;
    binary SecretData with BinaryEncoding{Length = SecretDataLength};
    uint ProtectionTypeLength;
    string ProtectionType with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = ProtectionTypeLength};
    uint KeyIDLength;
    string KeyID with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = KeyIDLength};
    uint LicenseURLLength;
    string LicenseURL with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = LicenseURLLength};
}

type ExtendedContentEncryptionObject
{
    (guid where value == {298AE614-2622-4C17-B935-DAE07EE9289C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 24, null, "ASF: The ObjectSize in type ExtendedContentEncryptionObject must be at least 24 bytes.");
    uint DataSize;
    binary Data with BinaryEncoding{Length = DataSize};
}

type DigitalSignatureObject
{
    (guid where value == {2211B3FC-BD23-11D2-B4B7-00A0C955FC6E}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 32, null, "ASF: The ObjectSize in type DigitalSignatureObject must be greater than 32 bytes.");
    uint SignatureType where ValidationCheck(value == 2, null, "This Signature Type field should be 2.");
    uint SignatureDataLength;
    binary SignatureData with BinaryEncoding{Length = SignatureDataLength};
}

type PaddingObject
{
    (guid where value == {1806D474-CADF-4509-A4BA-9AABCB96AAE8}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 24, null, "ASF: The ObjectSize in type PaddingObject must be at least 24 bytes.");
    binary PaddingData with BinaryEncoding{Length = (ObjectSize - 24) as long};
}

//*********************************Header Extension objects**********************************//
type ChildOfHeaderExtensionObject
{
    (ExtendedStreamPropertiesObject | AdvancedMutualExclusionObject | GroupMutualExclusionObject |
     StreamPrioritizationObject | BandwidthSharingObject | LanguageListObject | MetadataObject |
     DescriptionRecord | MetadataLibraryObject | IndexParametersObject | MediaObjectIndexParametersObject |
     TimecodeIndexParametersObject | CompatibilityObject | AdvancedContentEncryptionObject |
     ContentEncryptionRecord | EncryptedObjectRecord) Child;
}

type ExtendedStreamPropertiesObject
{
    (guid where value == {14E6A5CB-C672-4332-8399-A96952065B5A}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 88, null, "ASF: The ObjectSize in type ExtendedStreamPropertiesObject must be at least 88 bytes.");
    ulong StartTime;
    ulong EndTime;
    uint DataBitrate;
    uint BufferSize;
    uint InitialBufferFullness;
    uint AlternateDataBitrate;
    uint AlternateBufferSize;
    uint AlternateInitialBufferFullness;
    uint MaximumObjectSize;
    ExtendedStreamPropertiesFlags Flags;
    ushort StreamNumber;
    ushort StreamLanguageIDIndex;
    ulong AverageTimePerFrame;
    ushort StreamNameCount;
    ushort PayloadExtensionSystemCount;
    array<StreamName> StreamNames with BinaryEncoding{Length = StreamNameCount};
    array<PayloadExtensionSystem> PayloadExtensionSystems with BinaryEncoding{Length = PayloadExtensionSystemCount};
    optional StreamPropertiesObject StreamPropertiesObject;
}

type ExtendedStreamPropertiesFlags
{
    byte Reserved1 with BinaryEncoding{Width = 4};
    byte ResendLiveCleanpoints with BinaryEncoding{Width = 1};
    byte NoCleanpoints with BinaryEncoding{Width = 1};
    byte Seekable with BinaryEncoding{Width = 1};
    byte Reliable with BinaryEncoding{Width = 1};
    uint Reserved2 with BinaryEncoding{Width = 24};
}

type StreamName
{
    ushort LanguageIDIndex;
    ushort StreamNameLength;
    string StreamName with BinaryEncoding{Length = StreamNameLength};
}

type PayloadExtensionSystem
{
    guid ExtensionSystemID;
    ushort ExtensionDataSize;
    uint ExtensionSystemInfoLength;
    optional [|ExtensionSystemInfoLength > 0|] binary ExtensionSystemInfo with BinaryEncoding{Length = ExtensionSystemInfoLength};
}

type AdvancedMutualExclusionObject
{
    (guid where value == {A08649CF-4775-4670-8A16-6E35357566CD}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 42, null, "ASF: The ObjectSize in type AdvancedMutualExclusionObject must be at least 42 bytes.");
    guid ExclusionType;
    ushort StreamNumbersCount;
    array<ushort> StreamNumbers with BinaryEncoding{Length = StreamNumbersCount};
}

type GroupMutualExclusionObject
{
    (guid where value == {D1465A40-5A79-4338-B71B-E36B8FD6C249}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 42, null, "ASF: The ObjectSize in type GroupMutualExclusionObject must be at least 42 bytes.");
    guid ExclusionType;
    ushort RecordCount;
    array<Record> Records with BinaryEncoding{Length = RecordCount};
}

type Record
{
    ushort StreamCount;
    array<ushort> StreamNumbers with BinaryEncoding{Length = StreamCount};
}

type StreamPrioritizationObject
{
    (guid where value == {D4FED15B-88D3-454F-81F0-ED5C45999E24}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type StreamPrioritizationObject must be at least 26 bytes.");
    ushort PriorityRecordsCount where ValidationCheck(value >= 2, null, "PriorityRecordsCount value is at least 2.");
    array<PriorityRecord> PriorityRecords with BinaryEncoding{Length = PriorityRecordsCount};
}

type PriorityRecord
{
    ushort StreamCount;
    PriorityFlags Flags;
}

type PriorityFlags
{
    byte Reserved1 with BinaryEncoding{Width = 7};
    byte Mandatory with BinaryEncoding{Width = 1};
    byte Reserved2;
}

type BandwidthSharingObject
{
    (guid where value == {A69609E6-517B-11D2-B6AF-00C04FD908E9}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 50, null, "ASF: The ObjectSize in type BandwidthSharingObject must be at least 50 bytes.");
    guid SharingType;
    uint DataBitrate;
    uint BufferSize;
    ushort StreamNumbersCount where ValidationCheck(value >= 2, null, "PriorityRecordsCount value is at least 2.");
    array<ushort> PriorityRecords with BinaryEncoding{Length = StreamNumbersCount};
}

type LanguageListObject
{
    (guid where value == {7C4346A9-EFE0-4BFC-B229-393EDE415C85}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type LanguageListObject must be at least 26 bytes.");
    ushort LanguageIDRecordsCount;
    array<LanguageIDRecord> LanguageIDRecords with BinaryEncoding{Length = LanguageIDRecordsCount};
}

type LanguageIDRecord
{
    byte LanguageIDLength;
    string LanguageID with BinaryEncoding{Length = LanguageIDLength};
}

type MetadataObject
{
    (guid where value == {C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type MetadataObject must be at least 26 bytes.");
    ushort DescriptionRecordsCount;
    array<DescriptionRecord> DescriptionRecords with BinaryEncoding{Length = DescriptionRecordsCount};
}

type DescriptionRecord
{
    ushort LanguageListIndex;
    ushort StreamNumber;
    ushort NameLength;
    ushort DataType;
    uint DataLength;
    string Name with BinaryEncoding{Length = NameLength};
    MetadataDataType[DataType, DataLength] Data;
}

type MetadataLibraryObject
{
    (guid where value == {44231C94-9498-49D1-A141-1D134E457054}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type MetadataLibraryObject must be at least 26 bytes.");
    ushort DescriptionRecordsCount;
    array<DescriptionRecord> DescriptionRecords with BinaryEncoding{Length = DescriptionRecordsCount};
}

type IndexParametersObject
{
    (guid where value == {D6E229DF-35DA-11D1-9034-00A0C90349BE}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type IndexParametersObject must be at least 34 bytes.");
    uint IndexEntryTimeInterval;
    ushort IndexSpecifiersCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
}

type IndexSpecifier
{
    ushort StreamNumber;
    ushort IndexType;
}

type MediaObjectIndexParametersObject
{
    (guid where value == {6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type MediaObjectIndexParametersObject must be at least 34 bytes.");
    uint IndexEntryCountInterval;
    ushort IndexSpecifiersCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
}

type TimecodeIndexParametersObject
{
    (guid where value == {F55E496D-9797-4B5D-8C8B-604DFE9BFB24}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type TimecodeIndexParametersObject must be at least 34 bytes.");
    uint IndexEntryCountInterval;
    ushort IndexSpecifiersCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
}

type CompatibilityObject
{
    (guid where value == {26F18B5D-4584-47EC-9F5F-0E651F0452C9}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 28, null, "ASF: The ObjectSize in type CompatibilityObject must be at least 28 bytes.");
    byte Profile where ValidationCheck(value == 2, null, "Profile value should be set to 2.");
    byte Mode where ValidationCheck(value == 1, null, "Mode Value should be set to 1.");
}

type AdvancedContentEncryptionObject
{
    (guid where value == {43058533-6981-49E6-9B74-AD12CB86D58C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 26, null, "ASF: The ObjectSize in type AdvancedContentEncryptionObject must be at least 26 bytes.");
    ushort ContentEncryptionRecordsCount;
    array<ContentEncryptionRecord> ContentEncryptionRecords with BinaryEncoding{Length = ContentEncryptionRecordsCount};
}

type ContentEncryptionRecord
{
    guid SystemID;
    uint SystemVersion;
    ushort EncryptedObjectRecordCount;
    array<EncryptedObjectRecord> EncryptedObjectRecords with BinaryEncoding{Length = EncryptedObjectRecordCount};
    uint DataSize;
    binary Data with BinaryEncoding{Length = DataSize};
}

type EncryptedObjectRecord
{
    ushort EncryptedObjectIDType where ValidationCheck(value == 1, null, "The Object ID type should be set to 0x0001.");
    ushort EncryptedObjectIDLength where ValidationCheck(value == 2, null, "The Object ID length should be set to 0x0002.");
    ushort EncryptedObjectID;
}

//*********************************Data object**********************************//
type DataObject
{
    (guid where value == {75B22636-668E-11CF-A6D9-00AA0062CE6C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 50, null, "ASF: The ObjectSize in type DataObject must be at least 50 bytes.");
    guid FileId;
    ulong TotalDataPackets;
    ushort Reserved;
    array<DataPacket> DataPackets with BinaryEncoding{Length = TotalDataPackets as long};
}

type DataPacket
{
    optional ErrorCorrectionData ErrorCorrectionData;
    PayloadParsingInformation PayloadParsingInfo;
}

type ErrorCorrectionData
{
    ErrorCorrectionDataFlags Flags;
    byte Number with BinaryEncoding{Width = 4};
    byte Type with BinaryEncoding{Width = 4};
    byte Cycle;
}

type ErrorCorrectionDataFlags
{
    (byte where value == 1) ErrorCorrectionPresent with BinaryEncoding{Width = 1};
    byte ErrorCorrectionLengthType where ValidationCheck(value == 0, null, "ErrorCorrectionLengthType should be zero.") with BinaryEncoding{Width = 2};
    byte OpaqueDataPresent with BinaryEncoding{Width = 1};
    byte ErrorCorrectionDataLength where ValidationCheck(value == 2, null, "ErrorCorrectionDataLength should be 2.") with BinaryEncoding{Width = 4};
}

type PayloadParsingInformation
{
    LengthTypeFlags LengthTypeFlags;
    PropertyFlags PropertyFlags;
    ( [|LengthTypeFlags.PacketLengthType == 1|] byte
    | [|LengthTypeFlags.PacketLengthType == 2|] ushort
    | [|LengthTypeFlags.PacketLengthType == 3|] uint
    | Blob[0]) PacketLength;
    ( [|LengthTypeFlags.SequenceType == 1|] byte
    | [|LengthTypeFlags.SequenceType == 2|] ushort
    | [|LengthTypeFlags.SequenceType == 3|] uint
    | Blob[0]) Sequence;
    ( [|LengthTypeFlags.PaddingLengthType == 1|] byte
    | [|LengthTypeFlags.PaddingLengthType == 2|] ushort
    | [|LengthTypeFlags.PaddingLengthType == 3|] uint
    | Blob[0]) PaddingLength;
    uint SendTime;
    ushort Duration;
    ( [|LengthTypeFlags.MultiplePayloadsPresent == 1|] MultiPayloads |
    SinglePayloadwithCompressedData[GetPaylodLength()] | SinglePayload[GetPaylodLength()]) Payload;
    binary Padding with BinaryEncoding{Length = PaddingLength as long};
    
    uint GetPaylodLength()
    {
        uint length = ((PacketLength as uint) - (PaddingLength as uint) - 8) as uint;
        
        if (LengthTypeFlags.PacketLengthType > 0)
        {
            length -= (typeToMap[LengthTypeFlags.PacketLengthType]) as uint;
        }
        if (LengthTypeFlags.PaddingLengthType > 0)
        {
            length -= (typeToMap[LengthTypeFlags.PaddingLengthType]) as uint;
        }
        return length;
    }
}

const map<uint, uint> typeToMap = 
{
    1 -> 1,
    2 -> 2,
    3 -> 4,
};

type LengthTypeFlags
{
    byte ErrorCorrectionPresent with BinaryEncoding{Width = 1};
    byte PacketLengthType with BinaryEncoding{Width = 2};
    byte PaddingLengthType with BinaryEncoding{Width = 2};
    byte SequenceType where ValidationCheck(value == 0, null, "SequenceType should be zero.") with BinaryEncoding{Width = 2};
    byte MultiplePayloadsPresent with BinaryEncoding{Width = 1};
}

type PropertyFlags
{
    byte StreamNumberLengthType where ValidationCheck(value == 1, null, "StreamNumberLengthType should be 1.") with BinaryEncoding{Width = 2};
    byte MediaObjectNumberLengthType where ValidationCheck(value == 1, null, "MediaObjectNumberLengthType should be 1.") with BinaryEncoding{Width = 2};
    byte OffsetIntoMediaObjectLengthType where ValidationCheck(value == 3, null, "OffsetIntoMediaObjectLengthType should be 3.") with BinaryEncoding{Width = 2};
    byte ReplicatedDataLengthType where ValidationCheck(value == 1, null, "ReplicatedDataLengthType should be 1.") with BinaryEncoding{Width = 2};
}

type SinglePayload[uint Count]
{
    byte KeyFrame with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte MediaObjectNumber;
    uint OffsetIntoMediaObject;
    byte ReplicatedDataLength;
    binary ReplicatedData with BinaryEncoding{Length = ReplicatedDataLength};
    binary PayloadData with BinaryEncoding{Length = (Count - ReplicatedDataLength - 7)};
}

type SinglePayloadwithCompressedData[uint Count]
{
    byte KeyFrame with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte MediaObjectNumber;
    uint PresentationTime;
    (byte where value == 1) ReplicatedDataLength;
    ulong PresentationTimeDelta;
    binary PayloadData with BinaryEncoding{Length = (Count - 15)};
}

type SubPayload
{
    ulong DataLength;
    binary Data with BinaryEncoding{Length = DataLength as long};
}

type MultiPayloads
{
    byte PayloadLengthType where ValidationCheck(value == 2, null, "StreamNumberLengthType should be 2.") with BinaryEncoding{Width = 2};
    byte NumberOfPayloads with BinaryEncoding{Width = 6};
    array<SubMultiPayload> Payloads with BinaryEncoding{Length = NumberOfPayloads};
}

type SubMultiPayload
{
    (SubMultiPayloadwithCompressedData | SubMultiPayloadNoCompressed) SubPayload;
}

type SubMultiPayloadNoCompressed
{
    byte KeyFrame with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte MediaObjectNumber;
    uint OffsetIntoMediaObject;
    byte ReplicatedDataLength;
    binary ReplicatedData with BinaryEncoding{Length = ReplicatedDataLength};
    ushort PayloadLength;
    binary PayloadData with BinaryEncoding{Length = PayloadLength};
}

type SubMultiPayloadwithCompressedData
{
    byte KeyFrame with BinaryEncoding{Width = 1};
    byte StreamNumber with BinaryEncoding{Width = 7};
    byte MediaObjectNumber;
    uint PresentationTime;
    (byte where value == 1) ReplicatedDataLength;
    ulong PresentationTimeDelta;
    ushort PayloadLength;
    binary PayloadData with BinaryEncoding{Length = PayloadLength};
}

type IndexObject
{
    (TopLevelSimpleIndexObject | TopLevelIndexObject | TopLevelMediaObjectIndexObject | TopLevelTimecodeIndexObject) Index;
}


type TopLevelSimpleIndexObject
{
    (guid where value == {33000890-E5B1-11CF-89F4-00A0C90349CB}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 56, null, "ASF: The ObjectSize in type TopLevelSimpleIndexObject must be at least 56 bytes.");
    guid FileId;
    ulong IndexEntryTimeInterval;
    uint MaximumPacketCount;
    uint IndexEntriesCount;
    array<IndexEntry> IndexEntries with BinaryEncoding{Length = IndexEntriesCount};
}

type IndexEntry
{
    uint PacketNumber;
    ushort PacketCount;
}

type TopLevelIndexObject
{
    (guid where value == {D6E229D3-35DA-11D1-9034-00A0C90349BE}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type TopLevelIndexObject must be at least 34 bytes.");
    uint IndexEntryTimeInterval;
    ushort IndexSpecifiersCount;
    uint IndexBlocksCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
    array<IndexBlock[IndexSpecifiersCount]> IndexBlocks with BinaryEncoding{Length = IndexBlocksCount};
}

type IndexBlock[uint IndexSpecifiersCount]
{
    uint IndexEntryCount;
    array<uint> BlockPositions with BinaryEncoding{Length = IndexSpecifiersCount};
    array<IndexEntry1[IndexSpecifiersCount]> IndexEntries with BinaryEncoding{Length = IndexEntryCount};
}

type IndexEntry1[uint IndexSpecifiersCount]
{
    array<uint> Offsets with BinaryEncoding{Length = IndexSpecifiersCount};
}

type TopLevelMediaObjectIndexObject
{
    (guid where value == {FEB103F8-12AD-4C64-840F-2A1D2F7AD48C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type TopLevelMediaObjectIndexObject must be at least 34 bytes.");
    uint IndexEntryTimeInterval;
    ushort IndexSpecifiersCount;
    uint IndexBlocksCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
    array<IndexBlock[IndexSpecifiersCount]> IndexBlocks with BinaryEncoding{Length = IndexBlocksCount};
}

type TopLevelTimecodeIndexObject
{
    (guid where value == {3CB73FD0-0C4A-4803-953D-EDF7B6228F0C}) ObjectId;
    ulong ObjectSize where ValidationCheck(value >= 34, null, "ASF: The ObjectSize in type TopLevelTimecodeIndexObject must be at least 34 bytes.");
    uint Reserved;
    ushort IndexSpecifiersCount;
    uint IndexBlocksCount;
    array<IndexSpecifier> IndexSpecifiers with BinaryEncoding{Length = IndexSpecifiersCount};
    array<TimecodeIndexBlock[IndexSpecifiersCount]> IndexBlocks with BinaryEncoding{Length = IndexBlocksCount};
}

type TimecodeIndexBlock[uint IndexSpecifiersCount]
{
    uint IndexEntryCount;
    ushort TimecodeRange;
    array<uint> BlockPositions with BinaryEncoding{Length = IndexSpecifiersCount};
    array<TimecodeIndexEntry[IndexSpecifiersCount]> IndexEntries with BinaryEncoding{Length = IndexEntryCount};
}

type TimecodeIndexEntry[uint IndexSpecifiersCount]
{
    uint Timecode;
    array<uint> Offsets with BinaryEncoding{Length = IndexSpecifiersCount};
}

type AudioMediaType
{
    ushort FormatTag;
    ushort NumberofChannels;
    uint SamplesPerSecond;
    uint AvgBytesPerSec;
    ushort BlockAlignment;
    ushort BitsPerSample;
    ushort CodecSpecificDataSize;
    binary CodecSpecificData with BinaryEncoding{Length = CodecSpecificDataSize};
}

type SpreadAudioError
{
    byte Span where ValidationCheck(value == 1, null, "This Span value should be set to 1.");
    ushort VirtualPacketLength;
    ushort VirtualChunkLength;
    ushort SilenceDataLength where ValidationCheck(value == 1, null, "This SilenceDataLength value should be set to 1.");
    binary SilenceData with BinaryEncoding{Length = SilenceDataLength};
}

type VideoMediaType
{
    uint EncodedImageWidth;
    uint EncodedImageHeight;
    byte ReservedFlags;
    ushort FormatDataSize;
    BitmapInfoHeader[FormatDataSize] BitmapInfoHeader;
}

type BitmapInfoHeader[uint Size]
{
    uint FormatDataSize;
    uint ImageWidth;
    uint ImageHeight;
    ushort Reserved;
    ushort BitsPerPixelCount;
    uint CompressionID;
    uint ImageSize;
    uint HorizontalPixelsPerMeter;
    uint VerticalPixelsPerMeter;
    uint ColorsUsedCount;
    uint ImportantColorsCount;
    binary CodecSpecificData with BinaryEncoding{Length = (Size - 40)};
}

type JpegMediaType
{
    uint ImageWidth;
    uint ImageHeight;
    uint Reserved;
}

type DegradableJpegMediaType
{
    uint ImageWidth;
    uint ImageHeight;
    ushort Reserved1;
    ushort Reserved2;
    ushort Reserved3;
    ushort InterchangeDataLength;
    binary InterchangeData with BinaryEncoding{Length = (InterchangeDataLength == 0 ? 1 : InterchangeDataLength)};
}

type FileTransferMediaType
{
    guid MajorMediaType;
    guid MediaSubtype;
    uint FixedSizeSamples;
    uint TemporalCompression;
    uint SampleSize;
    guid FormatType;
    uint FormatDataSize;
    ([|FormatType == {DA1E6B13-8359-4050-B398-388E965BF00C}|] WebStreams | Blob[FormatDataSize]) FormatData;
}

type WebStreams
{
    ushort WebStreamFormatDataSize where ValidationCheck(value == 8, null, "This WebStreamFormatDataSize value should be set to 8.");
    ushort FixedSampleHeaderSize where ValidationCheck(value == 10, null, "This FixedSampleHeaderSize value should be set to 10.");
    ushort VersionNumber where ValidationCheck(value == 1, null, "This VersionNumber value should be set to 1.");
    ushort Reserved where ValidationCheck(value == 0, null, "This Reserved value should be set to zero.");
}

type UnicodeStringType[uint Count]
{
    string Str with BinaryEncoding{Length = Count};
}

type DescriptorValue[uint Type, uint Size]
{
    ( [|Type == 5|] ushort
    | [|Type == 4|] ulong
    | [|Type == 3 || Type == 2|] uint
    | [|Type == 1|] Blob[Size]
    | [|Type == 0|] UnicodeStringType[Size]) Value;
}

type MetadataDataType[uint Type, uint Size]
{
    ( [|Type == 6|] guid
    | [|Type == 5 || Type == 2|] ushort
    | [|Type == 4|] ulong
    | [|Type == 3|] uint
    | [|Type == 1|] Blob[Size]
    | [|Type == 0|] UnicodeStringType[Size]) Value;
}

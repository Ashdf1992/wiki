protocol DHA with
XmlEncodingDefaults{Namespace = ""},
Documentation
{
    ProtocolName = "Device Health Attestation Protocol",
    ShortName = "DHA",
    DocumentName = "MS-DHA",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-DHA", Version = "3.0", Date = "09/15/2017", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = [new Revision {Class = RevisionClass.Major, Version = "", Date = ""}]
};

using HTTP;
using Utility;
using Standard;

const string HealthCertificateRequestV1Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/request/v1";
const string HealthCertificateRequestV3Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/request/v3";
const string HealthCertificateRequestV4Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/request/v4";
const string HealthCertificateResponseV1Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/response/v1";
const string HealthCertificateResponseV3Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/response/v3";
const string HealthCertificateValidationRequestV1Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/request/v1";
const string HealthCertificateValidationRequestV3Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/request/v3";
const string HealthCertificateValidationRequestV4Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/request/v4";
const string HealthCertificateValidationResponseV1Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/response/v1";
const string HealthCertificateValidationResponseV3Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/response/v3";
const string HealthCertificateValidationResponseV4Namespace = "http://schemas.microsoft.com/windows/security/healthcertificate/validation/response/v4";

const string GetHealthCertificateEndpointV1 = "//devicehealthattestation/gethealthcertificate/v1";
const string GetHealthCertificateEndpointV3 = "//devicehealthattestation/gethealthcertificate/v3";
const string GetHealthCertificateEndpointV4 = "//devicehealthattestation/gethealthcertificate/v4";
const string ValidateCertificateEndpointV1 = "//devicehealthattestation/validatehealthcertificate/v1";
const string ValidateCertificateEndpointV3 = "//devicehealthattestation/validatehealthcertificate/v3";
const string ValidateCertificateEndpointV4 = "//devicehealthattestation/validatehealthcertificate/v4";

pattern GetHealthCertificateEndpointPattern = GetHealthCertificateEndpointV1 | GetHealthCertificateEndpointV3 | GetHealthCertificateEndpointV4;
pattern ValidateCertificateEndpointPattern = ValidateCertificateEndpointV1 | ValidateCertificateEndpointV3 | ValidateCertificateEndpointV4;

// ------------------------------------- Endpoint & Actor---------------------------------------//
endpoint Server
    over HTTP.Server
    provides DHAContract;

autostart actor DHAServerOverHTTP(HTTP.Server server)
{
    bool isHealthCertificateRequestRecieved = false;
    bool isHealthCertificateValidationRequestRecieved = false;
    process server accepts req:HttpContract.Request where req.Payload.Count > 0 && IsHealthCertificateRequest(req)
    {
        string certificateRequestUri = GetNamespaceUri(req.Payload);
        //ThrowDecodingException("DHA", "HealthCertificateRequest" + (HealthCertificateRequestRecievedVerNum as string));
        switch (certificateRequestUri)
        {
            case HealthCertificateRequestV1Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateRequestV1>(req.Payload) is healthCertificateRequestV1:DHAContract.HealthCertificateRequestV1)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateRequestV1;
                else
                    ThrowDecodingException("DHA", "HealthCertificateRequestV1");
            case HealthCertificateRequestV3Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateRequestV3>(req.Payload) is healthCertificateRequestV3:DHAContract.HealthCertificateRequestV3)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateRequestV3;
                else
                    ThrowDecodingException("DHA", "HealthCertificateRequestV3");
            case HealthCertificateRequestV4Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateRequestV4>(req.Payload) is healthCertificateRequestV4:DHAContract.HealthCertificateRequestV4)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateRequestV4;
                else
                    ThrowDecodingException("DHA", "HealthCertificateRequestV4");
            default =>
                ThrowDecodingException("DHA", "HealthCertificateRequest");
        }
    }

    process server issues res:HttpContract.Response where IsHealthCertificateResponse(res)
    {
        string healthCertificateResponseUri = GetNamespaceUri(res.Payload);
        switch (healthCertificateResponseUri)
        {
            case HealthCertificateResponseV1Namespace =>
                if (XmlDecoder<DHAContract.HealthCertificateResponseV1>(res.Payload) is healthCertificateResponseV1:DHAContract.HealthCertificateResponseV1)
                    dispatch (endpoint DHA.Server over server) issues healthCertificateResponseV1;
                else
                    ThrowDecodingException("DHA", "HealthCertificateResponseV1");
            // The is no new schema for the v4 response. It is the same as the schema for v3.
            case HealthCertificateResponseV3Namespace =>
                if (XmlDecoder<DHAContract.HealthCertificateResponseV3>(res.Payload) is healthCertificateResponseV3:DHAContract.HealthCertificateResponseV3)
                    dispatch (endpoint DHA.Server over server) issues healthCertificateResponseV3;
                else
                    ThrowDecodingException("DHA", "HealthCertificateResponseV3");
            default =>
                ThrowDecodingException("DHA", "HealthCertificateResponse");
        }
    }

    process server accepts req:HttpContract.Request where req.Payload.Count > 0 && req.Method == "POST" &&
        IsHealthCertificateValidationRequest(req)
    {
        string healthCertificateRequestUri = GetNamespaceUri(req.Payload);

        switch (healthCertificateRequestUri)
        {
            case HealthCertificateValidationRequestV1Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateValidationRequestV1>(req.Payload) is healthCertificateValidationRequestV1:DHAContract.HealthCertificateValidationRequestV1)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateValidationRequestV1;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationRequestV1");
            case HealthCertificateValidationRequestV3Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateValidationRequestV3>(req.Payload) is healthCertificateValidationRequestV3:DHAContract.HealthCertificateValidationRequestV3)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateValidationRequestV3;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationRequestV3");
            case HealthCertificateValidationRequestV4Namespace => 
                if (XmlDecoder<DHAContract.HealthCertificateValidationRequestV4>(req.Payload) is healthCertificateValidationRequestV4:DHAContract.HealthCertificateValidationRequestV4)
                    dispatch (endpoint DHA.Server over server) accepts healthCertificateValidationRequestV4;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationRequestV4");
            default =>
                ThrowDecodingException("DHA", "HealthCertificateValidationRequest");
        }
    }

    process server issues res:HttpContract.Response where IsHealthCertificateValidationResponse(res)
    {
        string healthCertificateResponseUri = GetNamespaceUri(res.Payload);
        switch (healthCertificateResponseUri)
        {
            case HealthCertificateValidationResponseV1Namespace =>
                if (XmlDecoder<DHAContract.HealthCertificateValidationResponseV1>(res.Payload) is healthCertificateValidationResponseV1:DHAContract.HealthCertificateValidationResponseV1)
                    dispatch (endpoint DHA.Server over server) issues healthCertificateValidationResponseV1;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationResponseV1");
            case HealthCertificateValidationResponseV3Namespace =>
                if (XmlDecoder<DHAContract.HealthCertificateValidationResponseV3>(res.Payload) is healthCertificateValidationResponseV3:DHAContract.HealthCertificateValidationResponseV3)
                    dispatch (endpoint DHA.Server over server) issues healthCertificateValidationResponseV3;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationResponseV3");
            case HealthCertificateValidationResponseV4Namespace =>
                if (XmlDecoder<DHAContract.HealthCertificateValidationResponseV4>(res.Payload) is healthCertificateValidationResponseV4:DHAContract.HealthCertificateValidationResponseV4)
                    dispatch (endpoint DHA.Server over server) issues healthCertificateValidationResponseV4;
                else
                    ThrowDecodingException("DHA", "HealthCertificateValidationResponseV4");
            default => // TODO: update the exception message
                ThrowDecodingException("DHA", "HealthCertificateValidationResponse");
        }
    }

    bool IsHealthCertificateRequest(HttpContract.Request request)
    {
        if (request.Method == "POST" && request.Uri.AbsPath is GetHealthCertificateEndpointPattern)
        {
            isHealthCertificateRequestRecieved = true;
            return true;
        }
        else
        {
            isHealthCertificateRequestRecieved = false;
            return false;
        }
    }

    bool IsHealthCertificateResponse(HttpContract.Response response)
    {
        bool tmpValue = isHealthCertificateRequestRecieved;
        isHealthCertificateRequestRecieved = false; // reset
        return tmpValue && response.Payload.Count > 0 && response.StatusCode == 200;
    }

    bool IsHealthCertificateValidationRequest(HttpContract.Request request)
    {
        if (request.Method == "POST" && request.Uri.AbsPath is ValidateCertificateEndpointPattern)
        {
            isHealthCertificateValidationRequestRecieved = true;
            return true;
        }
        else
        {
           isHealthCertificateValidationRequestRecieved = false;
           return false;
        }
    }

    bool IsHealthCertificateValidationResponse(HttpContract.Response response)
    {
        bool tmpValue = isHealthCertificateValidationRequestRecieved;
        isHealthCertificateValidationRequestRecieved = false; // reset
        return tmpValue && response.Payload.Count > 0 && response.StatusCode == 200;
    }

    string GetNamespaceUri(binary payload)
    {
        var xmlPayload = BuildXml(payload);
        if (xmlPayload == null)
            return "";

        xml xmlData= xmlPayload as xml;
        if (xmlData.Children.Count > 0)
        {
            foreach (xml child in xmlData.Children)
            {
                // skip <?xml version="1.0" encoding="utf-8"?>
                if (child.Name == nothing)
                {
                    continue;
                }
                XmlName name = child.Name as XmlName;
                return child.NamespaceUri as string;
            }
        }

        return "";
    }
}

// -------------------------------------- Constracts -------------------------------------------//
contract DHAContract
{
    // section 6.1
    accepts HealthCertificateRequestV1
    {
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateRequestV1", 1, value);
        optional string AIKCertificate where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKCertificate", "HealthCertificateRequestV1", 1, value);
        optional string RSASigningKey where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKPublic", "HealthCertificateRequestV1", 1, value);
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 1, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateRequestV1", 1, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

        override string ToString()
        {
            return "HealthCertificateRequestV1, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateRequestV1Namespace};
    // section 6.2
    accepts HealthCertificateRequestV3
    {
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateRequestV3", 1, value);
        optional string AIKCertificate where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKCertificate", "HealthCertificateRequestV3", 1, value);
        optional string AIKPublic where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKPublic", "HealthCertificateRequestV3", 1, value);
        optional EKCertificates_TV3 EKCertificates;
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 3, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateRequestV3", 3, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

        override string ToString()
        {
            return "HealthCertificateRequestV3, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateRequestV3Namespace};
    // section 6.3
    accepts HealthCertificateRequestV4
    {
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateRequestV4", 1, value);
        optional string AIKCertificate where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKCertificate", "HealthCertificateRequestV4", 1, value);
        optional string AIKPublic where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, this, true, ReferenceType.Message,
            "DHA", "AIKPublic", "HealthCertificateRequestV4", 1, value);
        optional EKCertificates_TV4 EKCertificates;
        TCGLogs_T TCGLogs;
        SystemProperties_T SystemProperties;
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 4, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateRequestV4", 4, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

        override string ToString()
        {
            return "HealthCertificateRequestV4, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

    // section 6.4
    issues HealthCertificateResponseV1 : ResponseCommon_TV1["HealthCertificateResponseV1"] 
    {
        optional array<HealthCertificateBlob_TV1> HealthCertificateBlob;

        override string ToString()
        {
            return "HealthCertificateResponseV1, " + base.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateResponseV1Namespace};
    // section 6.5
    issues HealthCertificateResponseV3 : ResponseCommon_TV3["HealthCertificateResponseV3"] 
    {
        optional array<HealthCertificateBlob_TV3> HealthCertificateBlob;

        override string ToString()
        {
            return "HealthCertificateResponseV3, " + base.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateResponseV3Namespace};

    // section 6.7
    accepts HealthCertificateValidationRequestV1
    {
        binary Nonce with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateValidationRequestV1", 1, value);
        string HealthCertificateBlob where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "HealthCertificateBlob", "HealthCertificateValidationRequestV1", 1, value);
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 1, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateValidationRequestV1", 1, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
        
        override string ToString()
        {
            return "HealthCertificateValidationRequestV1, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationRequestV1Namespace};
    // section 6.8
    accepts HealthCertificateValidationRequestV3
    {
        binary Nonce with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateValidationRequestV3", 1, value);
        string HealthCertificateBlob where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "HealthCertificateBlob", "HealthCertificateValidationRequestV3", 1, value);
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 3, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateValidationRequestV3", 3, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
        
        override string ToString()
        {
            return "HealthCertificateValidationRequestV3, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationRequestV3Namespace};
    // section 6.9
    accepts HealthCertificateValidationRequestV4
    {
        optional binary Nonce with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateValidationRequestV4", 1, value);
        string HealthCertificateBlob where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "HealthCertificateBlob", "HealthCertificateValidationRequestV4", 1, value);
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 4, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateValidationRequestV4", 4, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
        
        override string ToString()
        {
            return "HealthCertificateValidationRequestV4, ProtocolVersion: " + ProtocolVersion.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationRequestV4Namespace};

    // section 6.10
    issues HealthCertificateValidationResponseV1
    {
        binary Nonce with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
        string Claims where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "Claims", "HealthCertificateValidationResponseV1", 1, value);
        string HealthCertificateBlob where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, this, true, ReferenceType.Message,
            "DHA", "HealthCertificateBlob", "HealthCertificateValidationResponseV1", 1, value);
        int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 1, this, true, ReferenceType.Message,
            "DHA", "ProtocolVersion", "HealthCertificateValidationResponseV1", 1, value)
            with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

        override string ToString()
        {
            return "HealthCertificateValidationResponseV1, " + base.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV1Namespace};
    // section 6.11
    issues HealthCertificateValidationResponseV3 : ResponseCommon_TV3["HealthCertificateValidationResponseV3"]
    {
        optional HealthCertificatePublicProperties_TV3 HealthCertificateProperties;
        optional HealthStatusMismatchFlags_T HealthStatusMismatchFlags;

        override string ToString()
        {
            return "HealthCertificateValidationResponseV3, " + base.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV3Namespace};
    // section 6.12
    issues HealthCertificateValidationResponseV4 : ResponseCommon_TV4["HealthCertificateValidationResponseV4"]
    {
        optional HealthCertificatePublicProperties_TV4 HealthCertificateProperties;
        optional HealthStatusMismatchFlags_T HealthStatusMismatchFlags;

        override string ToString()
        {
            return "HealthCertificateValidationResponseV4, " + base.ToString();
        }
    } with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};
}

optional binary HexBinaryDecoder(string strValue)
{
    return ("$[" + strValue + "]")as binary;
}

//----------------------------------------- Types ---------------------------------------------//
// section 6.2
type EKCertificates_TV3
{
    string EKCertificate;
    optional array<string> EKIntermediateCA;
    string KAClaim where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "KAClaim", "EKCertificates_TV3", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string AIKPublic where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "AIKPublic", "EKCertificates_TV3", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

    override string ToString()
    {
        return "EKCertificates_T";
    }
} with XmlEncodingDefaults{Namespace = HealthCertificateRequestV3Namespace};
// section 6.3
type EKCertificates_TV4
{
    string EKCertificate;
    optional array<string> EKIntermediateCA;
    string KAClaim where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "KAClaim", "EKCertificates_TV4", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string AIKPublic where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "AIKPublic", "EKCertificates_TV4", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

    override string ToString()
    {
        return "EKCertificates_T";
    }
} with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

// section 6.3
type TCGLogs_T
{
    array<Log> Log;
} with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

// section 6.3
type Log
{
    optional string LogType where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "type", "Log", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string LogState where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "state", "Log", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}  with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

// section 6.3
type SystemProperties_T
{
    array<SystemProperty> SystemProperty;
} with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

// section 6.3
type SystemProperty
{
    optional string name where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "name", "SystemProperties_T", 1, value);
} with XmlEncodingDefaults{Namespace = HealthCertificateRequestV4Namespace};

// section 6.4
message ResponseCommon_TV1[string MessageName]
{
    int ErrorCode with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string ErrorMessage with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

    override string ToString()
    {
        string summaryLine = "ErrorCode: " + ErrorCode.ToString();
        if (ErrorMessage is errorMessageStr:string)
        {
            summaryLine += ", ErrorMessage: " + errorMessageStr;
        }
        return summaryLine;
    }
}
// section 6.5 & 6.11
message ResponseCommon_TV3[string MessageName]
{
    int ErrorCode with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    // TDI: #7003 and related Windows bug #10647719
    optional string ErrorMessage with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 3, this, true, ReferenceType.Message,
        "DHA", "ProtocolVersion", MessageName, 3, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

    override string ToString()
    {
        string summaryLine = "ErrorCode: " + ErrorCode.ToString();
        if (ErrorMessage is errorMessageStr:string)
        {
            summaryLine += ", ErrorMessage: " + errorMessageStr;
        }
        return summaryLine;
    }
}
// section 6.12
message ResponseCommon_TV4[string MessageName]
{
    int ErrorCode with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string ErrorMessage with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    int ProtocolVersion where ValidationCheckGreaterThanOrEqualTo(value >= 4, this, true, ReferenceType.Message,
        "DHA", "ProtocolVersion", MessageName, 4, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};

    override string ToString()
    {
        string summaryLine = "ErrorCode: " + ErrorCode.ToString();
        if (ErrorMessage is errorMessageStr:string)
        {
            summaryLine += ", ErrorMessage: " + errorMessageStr;
        }
        return summaryLine;
    }
}

// section 6.4
type HealthCertificateResponseDataV1
{
    HealthCertificateBlob_TV1 HealthCertificateBlob;
} with XmlEncodingDefaults{Namespace = HealthCertificateResponseV1Namespace};
// section 6.5
type HealthCertificateResponseDataV3
{
    HealthCertificateBlob_TV3 HealthCertificateBlob;
} with XmlEncodingDefaults{Namespace = HealthCertificateResponseV3Namespace};

// section 6.4
type HealthCertificateBlob_TV1
{
    optional string IV where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "IV", "HealthCertificateBlob_TV1", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string EKChallenge where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "EKChallenge", "HealthCertificateBlob_TV1", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Blob with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncodingDefaults{Namespace = HealthCertificateResponseV1Namespace};
// section 6.5
type HealthCertificateBlob_TV3
{
    optional string IV where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "IV", "HealthCertificateBlob_TV3", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string EKChallenge where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "EKChallenge", "HealthCertificateBlob_TV3", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Blob with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncodingDefaults{Namespace = HealthCertificateResponseV3Namespace};

// section 6.11
type HealthCertificatePublicProperties_TV3
{
    DateTime Issued;
    bool AIKPresent;
    uint ResetCount;
    uint RestartCount;
    uint DEPPolicy;
    uint BitlockerStatus;
    uint BootManagerRevListVersion;
    uint CodeIntegrityRevListVersion;
    bool SecureBootEnabled;
    bool BootDebuggingEnabled;
    bool OSKernelDebuggingEnabled;
    bool CodeIntegrityEnabled;
    bool TestSigningEnabled;
    bool SafeMode;
    bool WinPE;
    bool ELAMDriverLoaded;
    bool VSMEnabled;
    uint PCRHashAlgorithmID;
    uint BootAppSVN;
    uint BootManagerSVN;
    uint TpmVersion;
    binary PCR0 with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary CIPolicy with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary SBCHash with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary BootRevListInfo with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary OSRevListInfo with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV3Namespace};
// section 6.12
type HealthCertificatePublicProperties_TV4
{
    DateTime Issued;
    bool AIKPresent;
    string AttestationMethod;
    bool BitlockerEnabledAtBoot;
    BitlockerUnlockFlags_T BitlockerProtector;
    uint BootAppSVN;
    bool BootDebuggingDisabled;
    uint BootManagerSVN;
    optional binary BootRevListInfo with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    bool CodeIntegrityEnabled;
    optional binary CodeIntegrityPolicy with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    bool CrashDumpEncryptionEnabled;
    bool CredentialGuardEnabled;
    uint DataExecutionPreventionPolicy;
    optional binary ELAMDriverHash with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    bool ELAMDriverLoaded;
    string ELAMDriverName;
    string ELAMSignerName;
    bool FlightSigningNotEnabled;
    bool MemoryScrubbingProtectionEnabled;
    bool NoSecureBootCustomPolicy;
    bool NotBootedIntoSafeMode;
    bool NotBootedIntoWinPE;
    bool OSKernelDebuggingDisabled;
    optional binary OSRevListInfo with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    bool PageFileEncryptionEnabled;
    PCRS_T PCRS;
    bool ProductionSignedBootManager;
    PubKeyInfo_T PublicAIK;
    PubKeyInfo_T PublicEK;
    uint ResetCount;
    uint RestartCount;
    optional binary SecureBootCustomPolicyHash with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    bool SecureBootEnabled;
    bool TestSigningDisabled;
    string TpmVersion;
    SignerThumbprintList_T UefiSignersUsedDuringBoot;
    PubKeyInfo_T VBSDecryptionPublicKey;
    bool VBSIOMMUEnabled;
    bool VBSMemoryScrubbingProtectionEnabled;
    PubKeyInfo_T VBSSigningPublicKey;
    bool VirtualizationBasedSecurityEnabled;
    optional binary WindowsBootManagerHash with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary WindowsOSLoaderHash with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    SystemProperties_T SystemProperties;
    HealthProperty_T HealthProperty;
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.11
type HealthStatusMismatchFlags_T
{
    bool ResumeCount;
    bool RebootCount;
    bool PCR;
    bool BootAppSVN;
    bool BootManagerSVNChain;
    bool BootAppSVNChain;
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV3Namespace};

// section 6.12
type BitlockerUnlockFlags_T
{
    array<UnlockType> UnlockTypes;
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type UnlockType
{
    optional string unlockType where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "UnlockType", "BitlockerUnlockFlags_T", 1, value);
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type PCRS_T
{
    array<PCR> PCRs;
    string hashAlgorithm where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "hashAlgorithm", "PCRS_T", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type PCR
{
    uint n where ValidationCheckGreaterThanOrEqualTo(value >= 1, null, true, ReferenceType.Type,
        "DHA", "n", "PCR", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type PubKeyInfo_T
{
    optional binary Modulus with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
    optional binary Exponent with Encoding{Decoder = HexBinaryDecoder, SourcePattern = TypeOf<string>()};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type SignerThumbprintList_T
{
    array<SignerThumbprint> SignerThumbprints;
    string hashAlgorithm where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "hashAlgorithm", "SignerThumbprintList_T", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type SignerThumbprint
{
    string name where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "name", "SignerThumbprint", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string owner where ValidationCheckGreaterThanOrEqualTo(value.Count >= 1, null, true, ReferenceType.Type,
        "DHA", "owner", "SignerThumbprint", 1, value)
        with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

// section 6.12
type HealthProperty_T
{
    optional string Name where ValidationCheckGreaterThanOrEqualTo(value == nothing || (value as string).Count >= 1, null, true, ReferenceType.Type,
        "DHA", "Name", "HealthProperty_T", 1, value);
} with XmlEncodingDefaults{Namespace = HealthCertificateValidationResponseV4Namespace};

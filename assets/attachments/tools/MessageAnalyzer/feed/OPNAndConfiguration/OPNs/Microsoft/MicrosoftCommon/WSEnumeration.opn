protocol WSEnumeration with 
XmlEncodingDefaults{Namespace = WSEnumerateNamespace},
Documentation
{
    ProtocolName = "Web Service Enumeration",
    ShortName = "WSEnumeration",
    Description = "WS-Enumeration is a simple SOAP-based protocol for enumeration that allows the data source to provide a session abstraction, called an enumeration context, to a consumer that represents a logical cursor through a sequence of data items.  The consumer can then request XML element information items using this enumeration context over the span of one or more SOAP messages."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "Web Service Enumeration", Link = "http://www.w3.org/Submission/WS-Enumeration/"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="370732", Date="11/07/2014"}
        ]
};
    
using SOAP;
using Standard;
using XSD;
using WSA2004;
using Technologies.SOAP;
using Utility;

endpoint IntermediateServer 
    over SOAP.Server  
    provides mutable MessageContract
    consumes mutable DataSource;
client endpoint IntermediateClient connected to IntermediateServer;

// Actor: WSEnumerationParser
autostart actor WSEnumerationOverSOAP(SOAP.Server node)
{
    MessageContract.Release @release = null;

    //Enumerate request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationEnumerateAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.Enumerate from XmlDecoder<MessageContract.Enumerate> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSEnumeration", "Enumerate");
        }
    }
    
    // Enumerate response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationEnumerateResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.EnumerateResponse from XmlDecoder<MessageContract.EnumerateResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSEnumeration", "EnumerateResponse");
        }    
    }
    
     // Pull request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationPullAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.Pull from XmlDecoder<MessageContract.Pull> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSEnumeration", "Pull");
        }    
    }   
    
    // Pull response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationPullResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.PullResponse from XmlDecoder<MessageContract.PullResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSEnumeration", "PullResponse");
        }
    }
    
    // Renew request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationRenewAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.Renew from XmlDecoder<MessageContract.Renew> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSEnumeration", "Renew");
        }    
    }       

    // Renew response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationRenewResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.RenewResponse from XmlDecoder<MessageContract.RenewResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSEnumeration", "RenewResponse");
        }    
    }
    
    // GetStatus request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationGetstatusAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.GetStatus from XmlDecoder<MessageContract.GetStatus> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSEnumeration", "GetStatus");
        }    
    }       

    // GetStatus response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationGetstatusResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.GetStatusResponse from XmlDecoder<MessageContract.GetStatusResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSEnumeration", "GetStatusResponse");
        }    
    }
    
    // Release request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationReleaseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.Release from XmlDecoder<MessageContract.Release> =>
                @release = m;
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSEnumeration", "Release");
        }    
    }       

    // Release response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationReleaseResponseAction
    {
        if (@release != null)
        {
            MessageContract.ReleaseResponse m = new MessageContract.ReleaseResponse{};
            dispatch (endpoint IntermediateServer over node) issues m;
            @release = null;
        }
    }
    
    // Send EnumerationEnd
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEnumerationEnumerationendAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.EnumerationEnd from XmlDecoder<MessageContract.EnumerationEnd> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSEnumeration", "EnumerationEnd");
        }    
    }
}

// Contract: DataSource
// Description: 
contract DataSource
{
    accepts virtual operation EnumerateOp
        with SoapMessageInfo{
                Action = WSEnumerationEnumerateAction,
                ReplyAction = WSEnumerationEnumerateResponseAction}
    {
        in MessageContract.Enumerate Request = req;
        out MessageContract.EnumerateResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "EnumerateOp";
        }
    }
    =
    accepts MessageContract.Enumerate{value is var req}
    issues MessageContract.EnumerateResponse{value is var res};
    
    accepts virtual operation PullOp
        with SoapMessageInfo{
                Action = WSEnumerationPullAction,
                ReplyAction = WSEnumerationPullResponseAction}
    {
        in MessageContract.Pull Request = req;
        out MessageContract.PullResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "PullOp";
        }
    }
    =
    accepts MessageContract.Pull{value is var req}
    issues MessageContract.PullResponse{value is var res};

    accepts virtual operation RenewOp
        with SoapMessageInfo{
        Action = WSEnumerationRenewAction,
        ReplyAction = WSEnumerationRenewResponseAction}
    {
        in MessageContract.Renew Request = req;
        out MessageContract.RenewResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "RenewOp";
        }
    }
    =
    accepts MessageContract.Renew{value is var req}
    issues MessageContract.RenewResponse{value is var res};
    
    accepts virtual operation GetStatusOp
        with SoapMessageInfo{
                Action = WSEnumerationGetstatusAction,
                ReplyAction = WSEnumerationGetstatusResponseAction}
    {
        in MessageContract.GetStatus Request = req;
        out MessageContract.GetStatusResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "GetStatusOp";
        }
    } 
    =
    accepts MessageContract.GetStatus{value is var req}
    issues MessageContract.GetStatusResponse{value is var res};
    
    accepts virtual operation ReleaseOp
        with SoapMessageInfo{
                Action = WSEnumerationReleaseAction,
                ReplyAction = WSEnumerationReleaseResponseAction}
    {
        in MessageContract.Release Request = req;
        out MessageContract.ReleaseResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "ReleaseOp";
        }
    }
    =
    accepts MessageContract.Release{value is var req}
    issues MessageContract.ReleaseResponse{value is var res};

    accepts virtual operation EnumerationEndOp
        with SoapMessageInfo{
                ReplyAction = WSEnumerationEnumerationendAction}
    {
        out MessageContract.EnumerationEnd EnumerationEnd = end;
        
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "EnumerationEndOp";
        }
    } 
    =
    issues MessageContract.EnumerationEnd{value is var end};
}

//Types and global elements
// Future Reference: mixed = true
type FilterType
{
    XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string Text with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true ,Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute,Namespace = XmlNamespaceIndicator.Other};
}

pattern PositiveDurationType = XSDuration where ValidationCheck(value >= "P0Y0M0DT0H0M0S", null, "WSEnumeration: PositiveDurationType must be not less than P0Y0M0DT0H0M0S.");     // Future Reference: Use syntax or a certain method to do ValidationCheck

pattern NonNegativeDurationType = XSDuration where ValidationCheck(value >= "P0Y0M0DT0H0M0S", null, "WSEnumeration: NonNegativeDurationType must be not less than P0Y0M0DT0H0M0S.");

pattern ExpirationType = NonNegativeDurationType | XSDatatime;

// Future Reference: mixed = true
type EnumerationContextType
{
    optional string Text with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} 

type ItemListType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
}

type FileType
{
    string name with XmlEncoding{Name = "name", Kind = XmlKind.Attribute, Namespace = ""};
    string size with XmlEncoding{Name = "size", Kind = XmlKind.Attribute, Namespace = ""};
} 

type LanguageSpecificStringType
{
    string Base with XmlEncoding{Kind = XmlKind.Text};
    XSLanguage Language with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    xml AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute,Namespace = XmlNamespaceIndicator.Other};
}

contract MessageContract
{
    // Enumerate request
    accepts message Enumerate
    {
        EnumerateType Enumerate;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "EnumerateRequest"
            + (this.Enumerate.Expires == nothing ? "" : ", Expires: " + (this.Enumerate.Expires as string));
        }
    }

    // Enumerate response
    issues message EnumerateResponse
    {
        EnumerateResponseType EnumerateResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this)  + "EnumerateResponse"
            + (this.EnumerateResponse.Expires == nothing ? "" : ", Expires: " + (this.EnumerateResponse.Expires as string));
        }
    } with XmlEncoding{AnonymousType = true};

    // Pull request   
    accepts message Pull
    {
        PullType Pull;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "PullRequest"
            + (this.Pull.MaxTime == nothing ? "" : ", MaxTime: " + (this.Pull.MaxTime as string))
            + (this.Pull.MaxElements == nothing ? "" : ", MaxElements: " + (this.Pull.MaxElements as string))
            + (this.Pull.MaxCharacters == nothing ? "" : ", MaxCharacters: " + (this.Pull.MaxCharacters as string));
        }
    } with XmlEncoding{AnonymousType = true}; 

    // Pull response
    issues message PullResponse
    {
        PullResponseType PullResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "PullResponse" 
            + (this.PullResponse.EndOfSequence == nothing ? "" : ", EndOfSequence: " + (this.PullResponse.EndOfSequence as string));
        }
    } with XmlEncoding{AnonymousType = true};      

    // Renew request
    accepts message Renew
    {
        RenewType Renew;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "RenewRequest"
            + (this.Renew.Expires == nothing ? "" : ", Expires: " + (this.Renew.Expires as string));
        }
    } with XmlEncoding{AnonymousType = true};

    // Renew responese
    issues message RenewResponse
    {
        RenewResponseType RenewResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "RenewResponse"
            + (this.RenewResponse.Expires == nothing ? "" : ", Expires: " + (this.RenewResponse.Expires as string));
        }
    } with XmlEncoding{AnonymousType = true};

    // GetStatus request
    accepts message GetStatus
    {
        GetStatusType GetStatus;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetStatusRequest";
        }
    } with XmlEncoding{AnonymousType = true};

    // GetStust response
    issues message GetStatusResponse
    {
        GetStatusResponseType GetStatusResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetStatusResponse";
        }
    } with XmlEncoding{AnonymousType = true};

    // Release request
    accepts message Release
    {
        ReleaseType Release;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "ReleaseRequest";
        }
    } with XmlEncoding{AnonymousType = true};

    // Release response has an empty body
    issues message ReleaseResponse
    {
        ReleaseResponseType ReleaseResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "ReleaseResponse";
        }
    }

    // Enumerationend message
    issues message EnumerationEnd
    {
        EnumerationEndType EnumerationEnd;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "EnumerationEnd"
            + (this.EnumerationEnd.Code == nothing ? "" : ", Code: " + (this.EnumerationEnd.Code as string))
            + (this.EnumerationEnd.Reason == nothing ? "" : ", Reason: " + (this.EnumerationEnd.Reason as string));
        }
    } with XmlEncoding{AnonymousType = true};
}

// Used for a fault response    
pattern SupportedDialect = XSAnyURI;   

pattern EnumerationEndCodeType = enum XSAnyURI
{
    ShuttingDown = "http://schemas.xmlsoap.org/ws/2004/09/enumeration/SourceShuttingDown",
    Cancelling = "http://schemas.xmlsoap.org/ws/2004/09/enumeration/SourceCancelling",
    ...
};

pattern OpenEnumerationEndCodeType = EnumerationEndCodeType | XSAnyURI;

const string WSEnumerateNamespace = "http://schemas.xmlsoap.org/ws/2004/09/enumeration";

// Enumerate
const string WSEnumerationEnumerateAction = WSEnumerateNamespace + "/Enumerate";
const string WSEnumerationEnumerateResponseAction = WSEnumerationEnumerateAction + "Response";

// Pull
const string WSEnumerationPullAction = WSEnumerateNamespace + "/Pull";
const string WSEnumerationPullResponseAction = WSEnumerationPullAction + "Response";

// Renew
const string WSEnumerationRenewAction = WSEnumerateNamespace + "/Renew";
const string WSEnumerationRenewResponseAction = WSEnumerationRenewAction + "Response";

// GetStatus
const string WSEnumerationGetstatusAction = WSEnumerateNamespace + "/GetStatus";
const string WSEnumerationGetstatusResponseAction = WSEnumerationGetstatusAction + "Response";
 
// Release
const string WSEnumerationReleaseAction = WSEnumerateNamespace + "/Release";
const string WSEnumerationReleaseResponseAction = WSEnumerationReleaseAction + "Response";

// EnumerateEnd
const string WSEnumerationEnumerationendAction = WSEnumerateNamespace + "/EnumerationEnd";

// Enumerate request
type EnumerateType
{
     optional EndpointReferenceType EndTo;
     optional ExpirationType Expires;
     optional FilterType Filter;
     optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
     optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

// Enumerate response
type EnumerateResponseType
{
    optional ExpirationType Expires;
    EnumerationContextType EnumerationContext;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// Pull request   
type PullType
{
    EnumerationContextType EnumerationContext;
    optional PositiveDurationType MaxTime;
    optional XSPositiveInteger MaxElements;
    optional XSPositiveInteger MaxCharacters;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{AnonymousType = true}; 

// Pull response
type PullResponseType
{
    optional EnumerationContextType EnumerationContext;
    optional ItemListType Items;
    optional xml EndOfSequence;
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};      

// Renew request
type RenewType
{
    EnumerationContextType EnumerationContext;
    optional ExpirationType Expires;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// Renew responese
type RenewResponseType
{
    optional ExpirationType Expires;
    optional EnumerationContextType EnumerationContext;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// GetStatus request
type GetStatusType
{
    EnumerationContextType EnumerationContext;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// GetStust response
type GetStatusResponseType
{
    optional ExpirationType Expires;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other}; 
} with XmlEncoding{AnonymousType = true};

// Release request
type ReleaseType
{
    EnumerationContextType EnumerationContext;
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// Release response has an empty body
type ReleaseResponseType
{
    // Empty body.
}

// Enumerationend message
type EnumerationEndType
{
    EnumerationContextType EnumerationContext;
    OpenEnumerationEndCodeType Code;
    optional array<LanguageSpecificStringType> Reason;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};


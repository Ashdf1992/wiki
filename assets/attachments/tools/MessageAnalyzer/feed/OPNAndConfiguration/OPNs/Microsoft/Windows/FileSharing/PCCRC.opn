module PCCRC with 
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Peer Content Caching and Retrieval: Content Identification",
    ShortName = "PCCRC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-PCCRC", Version = "4.0", Date = "01/31/2013", ProgramName = ProgramName.WSPP},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

//2.3 Content Information Data Structure Version 1.0
type ContentInformationVersion10
{   
    ushort Version where value == 0x0100;
    HashAlgo dwHashAlgo;
    uint dwOffsetInFirstSegment;
    uint dwReadBytesInLastSegment;
    uint cSegments;
    array<ContentInformationVersion10_SegmentDescription[dwHashAlgo]> segments with BinaryEncoding{Length = cSegments};
    array<SegmentContentBlocks[dwHashAlgo]> blocks where ValidationCheck(value.Count == cSegments, null, "PCCRC: ContentInformationVersion10.blocks Count should be " + (cSegments as string) + ", but its actual Count is " + (value.Count as string) + ".");
    optional binary Padding;
}

// 2.3.1.1 SegmentDescription
type ContentInformationVersion10_SegmentDescription[uint dwHashAlgo]
{
    ulong ullOffsetInContent;
    uint cbSegment;
    uint cbBlockSize;
    binary SegmentHashOfData with BinaryEncoding{Length = GetLengthByHashAlgo(dwHashAlgo)};
    binary SegmentSecret with BinaryEncoding{Length = GetLengthByHashAlgo(dwHashAlgo)};
}

// 2.3.1.2 SegmentContentBlocks
type SegmentContentBlocks[uint dwHashAlgo]
{
    (uint where value != 0) cBlocks;
    binary BlockHashes with BinaryEncoding{Length = cBlocks * GetLengthByHashAlgo(dwHashAlgo)};
}

// 2.4 Content Information Data Structure Version 2.0
type ContentInformationVersion20
{
    byte bMinorVersion where ValidationCheck(value == 0, null, "bMinorVersion must be 0x00.");
    byte bMajorVersion where ValidationCheck(value == 2, null, "bMajorVersion must be 0x02.");
    byte bHashAlgo where ValidationCheck(value == 4, null, "bHashAlgo must be 0x04.");
    ulong ullStartInContent;
    ulong ullIndexOfFirstSegment;
    uint dwOffsetInFirstSegment;
    ulong ullLengthOfRange;
    array<ChunkDescription> chunks;
} with BinaryEncodingDefaults{Endian = Endian.Big};

// 2.4.1.1 ChunkDescription
type ChunkDescription
{
    byte bChunkType where ValidationCheck(value == 0, null, "bChunkType must be set to zero.");
    uint dwChunkDataLength with BinaryEncoding{Endian = Endian.Big};
    array<ContentInformationVersion20_SegmentDescription> chunkData with BinaryEncoding{Length = dwChunkDataLength / 68};
}

// 2.4.1.2 SegmentDescription
type ContentInformationVersion20_SegmentDescription
{
    uint cbSegment with BinaryEncoding{Endian = Endian.Big};
    binary SegmentHashOfData with BinaryEncoding{Length = 32};
    binary SegmentSecret with BinaryEncoding{Length = 32};
}

pattern HashAlgo = enum uint
{ 
     Sha256 = 0x0000800C,
     Sha384 = 0x0000800D,
     Sha512 = 0X0000800E
};

uint GetLengthByHashAlgo(uint dwHashAlgo)
{
     switch(dwHashAlgo)
     {
        case HashAlgo.Sha256 => 
             return 32;
        case HashAlgo.Sha384 => 
             return 48;
        case HashAlgo.Sha512 =>
             return 64;
         default =>
             return 0;
     }
}

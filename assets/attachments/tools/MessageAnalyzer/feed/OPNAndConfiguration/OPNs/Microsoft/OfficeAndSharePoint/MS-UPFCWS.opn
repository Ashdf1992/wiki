protocol MSUPFCWS with
Documentation
{
    ProtocolName = "User Activity Feed Cache Web Service Protocol",
    ShortName = "MS-UPFCWS",
    DocumentName = "MS-UPFCWS",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-UPFCWS", Version = "1.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSUPFCWS";

const map<string, string> WsaActionsMap =
{
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntry" -> "AddFeedEntry",
    "http://tempuri.org/IFeedCacheService/AddFeedEntryResponse" -> "AddFeedEntry",
    "http://tempuri.org/IFeedCacheService/AddFeedEntryFeedCacheFaultFault" -> "AddFeedEntry",
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntries" -> "AddFeedEntries",
    "http://tempuri.org/IFeedCacheService/AddFeedEntriesResponse" -> "AddFeedEntries",
    "http://tempuri.org/IFeedCacheService/AddFeedEntriesFeedCacheFaultFault" -> "AddFeedEntries",
    "http://Microsoft.Office.Server.UserProfiles/RemoveFeedEntry" -> "RemoveFeedEntry",
    "http://tempuri.org/IFeedCacheService/RemoveFeedEntryResponse" -> "RemoveFeedEntry",
    "http://tempuri.org/IFeedCacheService/RemoveFeedEntryFeedCacheFaultFault" -> "RemoveFeedEntry",
    "http://Microsoft.Office.Server.UserProfiles/RemoveEntityFeed" -> "RemoveEntityFeed",
    "http://tempuri.org/IFeedCacheService/RemoveEntityFeedResponse" -> "RemoveEntityFeed",
    "http://tempuri.org/IFeedCacheService/RemoveEntityFeedFeedCacheFaultFault" -> "RemoveEntityFeed",
    "http://Microsoft.Office.Server.UserProfiles/RemoveInternalRegions" -> "RemoveInternalRegions",
    "http://tempuri.org/IFeedCacheService/RemoveInternalRegionsResponse" -> "RemoveInternalRegions",
    "http://tempuri.org/IFeedCacheService/RemoveInternalRegionsFeedCacheFaultFault" -> "RemoveInternalRegions",
    "http://Microsoft.Office.Server.UserProfiles/GetConsolidatedFeed" -> "GetConsolidatedFeed",
    "http://tempuri.org/IFeedCacheService/GetConsolidatedFeedResponse" -> "GetConsolidatedFeed",
    "http://tempuri.org/IFeedCacheService/GetConsolidatedFeedFeedCacheFaultFault" -> "GetConsolidatedFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetPublishedFeed" -> "GetPublishedFeed",
    "http://tempuri.org/IFeedCacheService/GetPublishedFeedResponse" -> "GetPublishedFeed",
    "http://tempuri.org/IFeedCacheService/GetPublishedFeedFeedCacheFaultFault" -> "GetPublishedFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetCategoricalFeed" -> "GetCategoricalFeed",
    "http://tempuri.org/IFeedCacheService/GetCategoricalFeedResponse" -> "GetCategoricalFeed",
    "http://tempuri.org/IFeedCacheService/GetCategoricalFeedFeedCacheFaultFault" -> "GetCategoricalFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetThreadEntries" -> "GetEntries",
    "http://tempuri.org/IFeedCacheService/GetEntriesResponse" -> "GetEntries",
    "http://tempuri.org/IFeedCacheService/GetEntriesFeedCacheFaultFault" -> "GetEntries",
    "http://Microsoft.Office.Server.UserProfiles/NewEntityFollower" -> "NewEntityFollower",
    "http://tempuri.org/IFeedCacheService/NewEntityFollowerResponse" -> "NewEntityFollower",
    "http://tempuri.org/IFeedCacheService/NewEntityFollowerFeedCacheFaultFault" -> "NewEntityFollower",
    "http://Microsoft.Office.Server.UserProfiles/IsEntityActivelyFollowed" -> "IsEntityActivelyFollowed",
    "http://tempuri.org/IFeedCacheService/IsEntityActivelyFollowedResponse" -> "IsEntityActivelyFollowed",
    "http://tempuri.org/IFeedCacheService/IsEntityActivelyFollowedFeedCacheFaultFault" -> "IsEntityActivelyFollowed",
    "http://Microsoft.Office.Server.UserProfiles/RefreshFollowedEntities" -> "RefreshFollowedEntities",
    "http://tempuri.org/IFeedCacheService/RefreshFollowedEntitiesResponse" -> "RefreshFollowedEntities",
    "http://tempuri.org/IFeedCacheService/RefreshFollowedEntitiesFeedCacheFaultFault" -> "RefreshFollowedEntities",
    "http://Microsoft.Office.Server.UserProfiles/BulkLMTUpdate" -> "BulkLMTUpdate",
    "http://tempuri.org/IFeedCacheService/BulkLMTUpdateResponse" -> "BulkLMTUpdate",
    "http://tempuri.org/IFeedCacheService/BulkLMTUpdateFeedCacheFaultFault" -> "BulkLMTUpdate",
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntriesForRepop" -> "AddFeedEntriesForRepop",
    "http://tempuri.org/IFeedCacheService/AddFeedEntriesForRepopResponse" -> "AddFeedEntriesForRepop",
    "http://tempuri.org/IFeedCacheService/AddFeedEntriesForRepopFeedCacheFaultFault" -> "AddFeedEntriesForRepop",
    "http://Microsoft.Office.Server.UserProfiles/IsRepopulationNeeded" -> "IsRepopulationNeeded",
    "http://tempuri.org/IFeedCacheService/IsRepopulationNeededResponse" -> "IsRepopulationNeeded",
    "http://tempuri.org/IFeedCacheService/IsRepopulationNeededFeedCacheFaultFault" -> "IsRepopulationNeeded",
    "http://Microsoft.Office.Server.UserProfiles/GetFeeds" -> "GetFeeds",
    "http://tempuri.org/IFeedCacheService/GetFeedsResponse" -> "GetFeeds",
    "http://tempuri.org/IFeedCacheService/GetFeedsFeedCacheFaultFault" -> "GetFeeds"
};

const map<string, string> SoapActionsMap = {
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntry" -> "AddFeedEntry",
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntries" -> "AddFeedEntries",
    "http://Microsoft.Office.Server.UserProfiles/RemoveFeedEntry" -> "RemoveFeedEntry",
    "http://Microsoft.Office.Server.UserProfiles/RemoveEntityFeed" -> "RemoveEntityFeed",
    "http://Microsoft.Office.Server.UserProfiles/RemoveInternalRegions" -> "RemoveInternalRegions",
    "http://Microsoft.Office.Server.UserProfiles/GetConsolidatedFeed" -> "GetConsolidatedFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetPublishedFeed" -> "GetPublishedFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetCategoricalFeed" -> "GetCategoricalFeed",
    "http://Microsoft.Office.Server.UserProfiles/GetThreadEntries" -> "GetEntries",
    "http://Microsoft.Office.Server.UserProfiles/NewEntityFollower" -> "NewEntityFollower",
    "http://Microsoft.Office.Server.UserProfiles/IsEntityActivelyFollowed" -> "IsEntityActivelyFollowed",
    "http://Microsoft.Office.Server.UserProfiles/RefreshFollowedEntities" -> "RefreshFollowedEntities",
    "http://Microsoft.Office.Server.UserProfiles/BulkLMTUpdate" -> "BulkLMTUpdate",
    "http://Microsoft.Office.Server.UserProfiles/AddFeedEntriesForRepop" -> "AddFeedEntriesForRepop",
    "http://Microsoft.Office.Server.UserProfiles/IsRepopulationNeeded" -> "IsRepopulationNeeded",
    "http://Microsoft.Office.Server.UserProfiles/GetFeeds" -> "GetFeeds"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    optional string WsaAction;
    optional string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        if (soapMsg.WsaAction != "")
            this.WsaAction = soapMsg.WsaAction;
            
        if (soapMsg.SoapAction != "")
            this.SoapAction = soapMsg.SoapAction;
            
        this.ContainsFault = soapMsg.ContainsFault;

        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        if (this.WsaAction is wsaAcction:string)
            return WsaActionsMap[wsaAcction];
            
        if (this.SoapAction is soapAcction:string)
            return SoapActionsMap[soapAcction];
            
        return "Unknown";
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}

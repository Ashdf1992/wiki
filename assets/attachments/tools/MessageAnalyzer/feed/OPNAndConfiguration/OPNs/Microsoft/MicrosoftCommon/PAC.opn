module PAC with
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Privilege Attribute Certificate Data Structure",
    ShortName = "PAC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference{Name = "MS-PAC", Version = "16.0", Date = "08/08/2013", ProgramName = ProgramName.WSPP},
    ],
    RevisionSummary = 
      [
         new Revision{Class = RevisionClass.Major, Version = "383625", Date = "01/08/2016"} 
      ]
};

using Standard;
using DTYP;
using Utility;
using Technologies.IDL;
using MicrosoftCommonResources;

// WORKAROUND: After task #58360 completed, may need to simplify the code.

// 2.2.1 KERB_SID_AND_ATTRIBUTES
type KERB_SID_AND_ATTRIBUTES
{
    PISID Sid;
    ULONG Attributes where ValidationCheckCombinationValueIncludeZeroTooManyItems(InRange<KERB_SID_AND_ATTRIBUTES_Attributes>(value),
         null, true, ReferenceType.Type, "PAC", "Attributes", "KERB_SID_AND_ATTRIBUTES", "KERB_SID_AND_ATTRIBUTES", "MS-PAC");
}
typedef PKERB_SID_AND_ATTRIBUTES = KERB_SID_AND_ATTRIBUTES with IDL{IndirectionLevel = 1};

pattern KERB_SID_AND_ATTRIBUTES_Attributes = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x20000000,
} with IDL{DoNotGenerate = true};

// 2.2.2 GROUP_MEMBERSHIP
type GROUP_MEMBERSHIP
{
    ULONG RelativeId;
    ULONG Attributes where ValidationCheckCombinationValueIncludeZeroTooManyItems(InRange<KERB_SID_AND_ATTRIBUTES_Attributes>(value),
         null, true, ReferenceType.Type, "PAC", "Attributes", "GROUP_MEMBERSHIP", "GROUP_MEMBERSHIP", "MS-PAC");
}
typedef PGROUP_MEMBERSHIP = GROUP_MEMBERSHIP with IDL{IndirectionLevel = 1};

// 2.2.3 DOMAIN_GROUP_MEMBERSHIP
type DOMAIN_GROUP_MEMBERSHIP
{
    PISID DomainId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds 
        with IDL{Size_is = [GroupCount]};
}
typedef PDOMAIN_GROUP_MEMBERSHIP = DOMAIN_GROUP_MEMBERSHIP with IDL{IndirectionLevel = 1};

// 2.3 PACTYPE
type PACTYPE
{
    ULONG cBuffers with BinaryEncoding{Endian = Endian.Little};
    ULONG Version where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "PAC", "Version", "PACTYPE", value)
        with BinaryEncoding{Endian = Endian.Little};
    array<PAC_INFO_BUFFER> Buffers with BinaryEncoding{Length = cBuffers};
    array<BufferRefTypes> BuffersRef with Encoding{Ignore = true};
}

pattern BufferRefTypes = KERB_VALIDATION_INFO 
                        | PAC_CREDENTIAL_INFO
                        | PAC_SIGNATURE_DATA
                        | PAC_CLIENT_INFO
                        | S4U_DELEGATION_INFO
                        | UPN_DNS_INFO
                        | PAC_CLIENT_CLAIMS_INFO
                        | PAC_DEVICE_INFO
                        | PAC_DEVICE_CLAIMS_INFO;

// 2.4 PAC_INFO_BUFFER
type PAC_INFO_BUFFER
{
    PAC_INFO_BUFFER_UlType ulType where ValidationCheckEnumValueTooManyItems(InRange<PAC_INFO_BUFFER_UlType>(value),
        null, true, ReferenceType.Type, "PAC", "ulType", "PAC_INFO_BUFFER", "PAC_INFO_BUFFER", "MS-PAC")
        with BinaryEncoding{Endian = Endian.Little};
    ULONG cbBufferSize with BinaryEncoding{Endian = Endian.Little};
    ULONG64 Offset where ValidationCheck(value % 8 == 0, null, DiagnosisLevel.Error, PAC_STR_CHECK_OFFSET_IN_PAC_INFO_BUFFER)
        with BinaryEncoding{Endian = Endian.Little};
}

pattern PAC_INFO_BUFFER_UlType = enum ULONG
{
        LogonInformation = 0x00000001,
        CredentialsInformation = 0x00000002,
        ServerChecksum = 0x00000006,
        KDCChecksum = 0x00000007,
        ClientNameTicketInformation = 0x0000000A,
        ConstrainedDelegationInformation = 0x0000000B,
        UPNAndDNSInformation = 0x0000000C,
        ClientClaimsInformation = 0x0000000D,
        DeviceInformation = 0x0000000E,
        DeviceClaimsInformation = 0x0000000F,
        ...
};

map<PAC_INFO_BUFFER_UlType, string> PAC_INFO_BUFFER_UlType2TypeNameMap = 
{
    PAC_INFO_BUFFER_UlType.LogonInformation -> "KERB_VALIDATION_INFO", 
    PAC_INFO_BUFFER_UlType.CredentialsInformation -> "PAC_CREDENTIAL_INFO",
    PAC_INFO_BUFFER_UlType.ServerChecksum -> "PAC_SIGNATURE_DATA",
    PAC_INFO_BUFFER_UlType.KDCChecksum -> "PAC_SIGNATURE_DATA",
    PAC_INFO_BUFFER_UlType.ClientNameTicketInformation -> "PAC_CLIENT_INFO",
    PAC_INFO_BUFFER_UlType.ConstrainedDelegationInformation -> "S4U_DELEGATION_INFO",
    PAC_INFO_BUFFER_UlType.UPNAndDNSInformation -> "UPN_DNS_INFO",
    PAC_INFO_BUFFER_UlType.ClientClaimsInformation -> "PAC_CLIENT_CLAIMS_INFO",
    PAC_INFO_BUFFER_UlType.DeviceInformation -> "PAC_DEVICE_INFO",
    PAC_INFO_BUFFER_UlType.DeviceClaimsInformation -> "PAC_DEVICE_CLAIMS_INFO"
};

type CYTHER_BLOCK
{
    array<CHAR> data with IDL{Dimensions = [8]};
}

type USER_SESSION_KEY
{
    array<CYTHER_BLOCK> data with IDL{Dimensions = [2]};
}

pattern KERB_VALIDATION_INFO_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000008,
    D = 0x00000020,
    E = 0x00000040,
    F = 0x00000080,
    G = 0x00000100,
    H = 0x00000200,
    I = 0x00000400,
    J = 0x00000800,
    K = 0x00001000,
    L = 0x00002000,
} with IDL{DoNotGenerate = true};

// 2.5 KERB_VALIDATION_INFO
type KERB_VALIDATION_INFO
{
    FILETIME LogonTime;
    FILETIME LogoffTime;
    FILETIME KickOffTime;
    FILETIME PasswordLastSet;
    FILETIME PasswordCanChange;
    FILETIME PasswordMustChange;
    RPC_UNICODE_STRING EffectiveName; 
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
        with IDL{Size_is = [GroupCount]};
    ULONG UserFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems(InRange<KERB_VALIDATION_INFO_Flags>(value),
         null, true, ReferenceType.Type, "PAC", "UserFlags", "KERB_VALIDATION_INFO", "KERB_VALIDATION_INFO", "MS-PAC");
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    PISID LogonDomainId;
    array<ULONG> Reserved1 with IDL{Dimensions = [2]};
    ULONG UserAccountControl;
    ULONG SubAuthStatus;
    FILETIME LastSuccessfulILogon;
    FILETIME LastFailedILogon;
    ULONG FailedILogonCount;
    ULONG Reserved3;
    ULONG SidCount where ValidationCheck((value != 0 && (UserFlags & KERB_VALIDATION_INFO_Flags.D) != 0) || (value == 0), null, DiagnosisLevel.Error,
        PAC_STR_CHECK_SIDCOUNT_IN_KERB_VALIDATION_INFO);
    array<PKERB_SID_AND_ATTRIBUTES> ExtraSids where ValidationCheck((value != null && (UserFlags & KERB_VALIDATION_INFO_Flags.D) != 0) || (value == null), null, DiagnosisLevel.Error,
        PAC_STR_CHECK_EXTRASIDS_IN_KERB_VALIDATION_INFO)
        with IDL{Size_is = [SidCount]};
    PISID ResourceGroupDomainSid where ValidationCheck((value != null && (UserFlags & KERB_VALIDATION_INFO_Flags.H) != 0) || (value == null), null, DiagnosisLevel.Error,
        PAC_STR_CHECK_RESOURCEGROUPDOMAINSID_IN_KERB_VALIDATION_INFO);
    ULONG ResourceGroupCount where ValidationCheck((value != 0 && (UserFlags & KERB_VALIDATION_INFO_Flags.H) != 0) || (value == 0), null, DiagnosisLevel.Error,
        PAC_STR_CHECK_RESOURCEGROUPCOUNT_IN_KERB_VALIDATION_INFO);
    array<PGROUP_MEMBERSHIP> ResourceGroupIds where ValidationCheck((value != null && (UserFlags & KERB_VALIDATION_INFO_Flags.H) != 0) || (value == null), null, DiagnosisLevel.Error,
        PAC_STR_CHECK_RESOURCEGROUPIDS_IN_KERB_VALIDATION_INFO)
        with IDL{Size_is = [ResourceGroupCount]};
}

// 2.6.1 PAC_CREDENTIAL_INFO
type PAC_CREDENTIAL_INFO
{
    ULONG Version where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "PAC", "Version", "PAC_CREDENTIAL_INFO", value)
        with BinaryEncoding{Endian = Endian.Little};
    PAC_CREDENTIAL_INFO_EncrytionType EncrytionType where ValidationCheckEnumValueTooManyItems(InRange<PAC_CREDENTIAL_INFO_EncrytionType>(value),
        null, true, ReferenceType.Type, "PAC", "EncrytionType", "PAC_CREDENTIAL_INFO", "PAC_CREDENTIAL_INFO", "MS-PAC")
        with BinaryEncoding{Endian = Endian.Little};
    PAC_CREDENTIAL_DATA SerializedData with Encoding{Ignore = true};
}

pattern PAC_CREDENTIAL_INFO_EncrytionType = enum ULONG
{
    DES = 0x00000001,
    DESInCBCModeWithMD5 = 0x00000003,
    AES128_CTS_HMAC_SHA1_96 = 0x00000011,
    AES256_CTS_HMAC_SHA1_96 = 0x00000012,
    RC4WithHMACKey = 0x00000017,
    ...
};

// 2.6.2 PAC_CREDENTIAL_DATA
type PAC_CREDENTIAL_DATA
{
    ULONG CredentialCount;
    array<SECPKG_SUPPLEMENTAL_CRED> Credentials
        with IDL{Size_is = [CredentialCount], Dimensions = [null]};
}

// 2.6.3 SECPKG_SUPPLEMENTAL_CRED
type SECPKG_SUPPLEMENTAL_CRED
{
    RPC_UNICODE_STRING PackageName;
    ULONG CredentialSize;
    array<byte> Credentials
        with IDL{Size_is = [CredentialSize], IndirectionLevel = 1};
}

optional PAC_CREDENTIAL_INFO PAC_CREDENTIAL_INFODecoder(stream s)
{
    var val = BinaryDecoder<PAC_CREDENTIAL_INFO>(s);
    if (val is nothing)
    {
        return nothing;
    }
    var pacCredentialInfo = val as PAC_CREDENTIAL_INFO;
    
    int staBitPos = s.BitPosition;
    var data = NdrDecoder<PAC_CREDENTIAL_DATA>(s);
    if (data is nothing)
    {
        return nothing;
    }
    pacCredentialInfo.SerializedData = data as PAC_CREDENTIAL_DATA;
    pacCredentialInfo.AssignFieldEncodingInfo("SerializedData", staBitPos, s.BitPosition - staBitPos);
    
    return pacCredentialInfo;
}

//2.6.4 NTLM_SUPPLEMENTAL_CREDENTIAL
type NTLM_SUPPLEMENTAL_CREDENTIAL
{
    ULONG Version where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "PAC", "Version", "NTLM_SUPPLEMENTAL_CREDENTIAL", value);
    ULONG Flags where ValidationCheckCombinationValue(InRange<NTLM_SUPPLEMENTAL_CREDENTIAL_Flags>(value) && value != 0,
         null, true, ReferenceType.Type, "PAC", "Flags", "NTLM_SUPPLEMENTAL_CREDENTIAL", "0x00000001, 0x00000002", value);
    array<BYTE> LmPassword
        with IDL{Dimensions = [16]};
    array<BYTE> NtPassword
        with IDL{Dimensions = [16]};
}

pattern NTLM_SUPPLEMENTAL_CREDENTIAL_Flags = flags ULONG
{
    L = 0x00000001,
    N = 0x00000002,
} with IDL{DoNotGenerate = true};

// 2.7 PAC_CLIENT_INFO
type PAC_CLIENT_INFO
{
    FILETIME ClientId with BinaryEncoding{Endian = Endian.Little};
    USHORT NameLength with BinaryEncoding{Endian = Endian.Little};
    string Name with BinaryEncoding{Length = (NameLength) / 2,Endian = Endian.Little};
}

// 2.8 PAC_SIGNATURE_DATA
type PAC_SIGNATURE_DATA 
{
    PAC_SIGNATURE_DATA_SignatureType SignatureType where ValidationCheckEnumValue(InRange<PAC_SIGNATURE_DATA_SignatureType>(value),
         null, true, ReferenceType.Type, "PAC", "SignatureType", "PAC_SIGNATURE_DATA", "0xffffff76, 0x0000000f, 0x00000010", value)
         with BinaryEncoding{Endian = Endian.Little};
    array<BYTE> Signature with BinaryEncoding{Length = ((SignatureType == PAC_SIGNATURE_DATA_SignatureType.KERB_CHECKSUM_HMAC_MD5) ? 16 : 12)};
    optional USHORT RODCIdentifier with BinaryEncoding{Endian = Endian.Little};
}

pattern PAC_SIGNATURE_DATA_SignatureType = enum ULONG
{
    KERB_CHECKSUM_HMAC_MD5 = 0xffffff76,
    HMAC_SHA1_96_AES128 = 0x0000000f,
    HMAC_SHA1_96_AES256 = 0x00000010,
    ...
};

// 2.9 S4U_DELEGATION_INFO
type S4U_DELEGATION_INFO
{
    RPC_UNICODE_STRING S4U2proxyTarget;
    ULONG TransitedListSize;
    array<PRPC_UNICODE_STRING> S4UTransitedServices 
        with IDL{Size_is = [TransitedListSize]};
}

// 2.10 UPN_DNS_INFO
type UPN_DNS_INFO
{
    USHORT UpnLength with BinaryEncoding{Endian = Endian.Little};
    USHORT UpnOffset with BinaryEncoding{Endian = Endian.Little};
    USHORT DnsDomainNameLength with BinaryEncoding{Endian = Endian.Little};
    USHORT DnsDomainNameOffset with BinaryEncoding{Endian = Endian.Little};
    UPN_DNS_INFO_Flags Flags where ValidationCheckCombinationValueIncludeZero(InRange<UPN_DNS_INFO_Flags>(value),
         null, true, ReferenceType.Type, "PAC", "Flags", "UPN_DNS_INFO", "0x01000000", value)
         with BinaryEncoding{Endian = Endian.Little};
    string UPN with Encoding{Ignore = true},BinaryEncoding{Endian = Endian.Little};
    string DnsDomainName with Encoding{Ignore = true},BinaryEncoding{Endian = Endian.Little};
}

pattern UPN_DNS_INFO_Flags = flags ULONG
{
    U = 0x01000000,
};

optional UPN_DNS_INFO UPN_DNS_INFODecoder(binary binaryValue)
{
    var val = BinaryDecoder<UPN_DNS_INFO>(binaryValue);
    if (val is nothing)
    {
        return nothing;
    }
    var upnDnsInfo = val as UPN_DNS_INFO;
    
    var data1 = BinaryDecoder<string>(binaryValue.Segment(upnDnsInfo.UpnOffset as int, upnDnsInfo.UpnLength as int));
    if (data1 is nothing)
    {
        return nothing;
    }
    upnDnsInfo.UPN = data1 as string;
    upnDnsInfo.AssignFieldEncodingInfo("UPN", (upnDnsInfo.UpnOffset as int) * 8, (upnDnsInfo.UpnLength as int) * 8);
    
    var data2 = BinaryDecoder<string>(binaryValue.Segment(upnDnsInfo.DnsDomainNameOffset as int, upnDnsInfo.DnsDomainNameLength as int));
    if (data2 is nothing)
    {
        return nothing;
    }
    upnDnsInfo.DnsDomainName = data2 as string;
    upnDnsInfo.AssignFieldEncodingInfo("DnsDomainName", (upnDnsInfo.DnsDomainNameOffset as int) * 8, (upnDnsInfo.DnsDomainNameLength as int) * 8);
    
    return upnDnsInfo;

}

// 2.11 PAC_CLIENT_CLAIMS_INFO
type PAC_CLIENT_CLAIMS_INFO
{
    CLAIMS_SET_METADATA Claims with Encoding{Ignore = true};
}

optional PAC_CLIENT_CLAIMS_INFO PAC_CLIENT_CLAIMS_INFODecoder(stream s)
{
    var val = BinaryDecoder<PAC_CLIENT_CLAIMS_INFO>(s);
    if (val is nothing)
    {
        return nothing;
    }
    var pacClientClaimsInfo = val as PAC_CLIENT_CLAIMS_INFO;
    
    int staBitPos = s.BitPosition;
    var data = NdrDecoder<CLAIMS_SET_METADATA>(s);
    if (data is nothing)
    {
        return nothing;
    }
    pacClientClaimsInfo.Claims = data as CLAIMS_SET_METADATA;
    pacClientClaimsInfo.AssignFieldEncodingInfo("Claims", staBitPos, s.BitPosition - staBitPos);
    
    return pacClientClaimsInfo;
}

// 2.12 PAC_DEVICE_INFO
type PAC_DEVICE_INFO
{
    ULONG UserId;
    ULONG PrimaryGroupId;
    PISID AccountDomainId;
    ULONG AccountGroupCount;
    array<PGROUP_MEMBERSHIP> AccountGroupIds 
        with IDL{Size_is = [AccountGroupCount]};
    ULONG SidCount;
    array<PKERB_SID_AND_ATTRIBUTES> ExtraSids   
        with IDL{Size_is = [SidCount]};
    ULONG DomainGroupCount;
    array<PDOMAIN_GROUP_MEMBERSHIP> DomainGroup
        with IDL{Size_is = [DomainGroupCount]};
}

// 2.13 PAC_DEVICE_CLAIMS_INFO
type PAC_DEVICE_CLAIMS_INFO
{
    CLAIMS_SET_METADATA Claims with Encoding{Ignore = true};
}

optional PAC_DEVICE_CLAIMS_INFO PAC_DEVICE_CLAIMS_INFODecoder(stream s)
{
    var val = BinaryDecoder<PAC_DEVICE_CLAIMS_INFO>(s);
    if (val is nothing)
    {
        return nothing;
    }
    var pacDeviceClaimsInfo = val as PAC_DEVICE_CLAIMS_INFO;
    
    int staBitPos = s.BitPosition;
    var data = NdrDecoder<CLAIMS_SET_METADATA>(s);
    if (data is nothing)
    {
        return nothing;
    }
    pacDeviceClaimsInfo.Claims = data as CLAIMS_SET_METADATA;
    pacDeviceClaimsInfo.AssignFieldEncodingInfo("Claims", staBitPos, s.BitPosition - staBitPos);
    
    return pacDeviceClaimsInfo;
}

typedef PISID = RPC_SID with IDL{IndirectionLevel = 1};

// -------------------------------------
// Copy from ADTS.opn
// -------------------------------------
// 2.2.18.4 CLAIMS_COMPRESSION_FORMAT
pattern CLAIMS_COMPRESSION_FORMAT = enum 
{
    COMPRESSION_FORMAT_NONE = 0,
    COMPRESSION_FORMAT_LZNT1 = 2,
    COMPRESSION_FORMAT_XPRESS = 3,
    COMPRESSION_FORMAT_XPRESS_HUFF = 4,
    ...
};

// 2.2.18.8 CLAIMS_SET_METADATA
type CLAIMS_SET_METADATA
{
    ULONG ulClaimsSetSize;
    array<BYTE> ClaimsSet with IDL{Size_is = [ulClaimsSetSize], IndirectionLevel = 1};
    CLAIMS_COMPRESSION_FORMAT usCompressionFormat where ValidationCheckEnumValue(InRange<CLAIMS_COMPRESSION_FORMAT>(value),
        null, true, ReferenceType.Type, "ADTS", "usCompressionFormat", "CLAIMS_SET_METADATA", "0, 2, 3, 4", value);
    ULONG ulUncompressedClaimsSetSize;
    USHORT usReservedType;
    ULONG ulReservedFieldSize;
    array<BYTE> ReservedField with IDL{Size_is = [ulReservedFieldSize], IndirectionLevel = 1};
};

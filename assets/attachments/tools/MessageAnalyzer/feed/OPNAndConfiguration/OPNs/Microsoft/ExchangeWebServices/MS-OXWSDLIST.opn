protocol MSOXWSDLIST with
Documentation
{
    ProtocolName = "Distribution List Creation and Usage Web Service Protocol",
    ShortName = "MS-OXWSDLIST",
    DocumentName = "MS-OXWSDLIST",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2016 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-OXWSDLIST", Version = "5.1"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="14/09/2015"},
        ]
};

using SOAP;

const map<string, string> SoapActionsMap =
{
    "http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL" -> "ExpandDL"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer)
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        RequestMessage msg = new RequestMessage();
        msg.Initialize(soapMsg);
        dispatch (endpoint Server over soapServer) accepts msg;
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        ResponseMessage msg = new ResponseMessage();
        msg.Initialize(soapMsg);
        dispatch (endpoint Server over soapServer) issues msg;
    }
}

message MessageBase
{
    string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        this.SoapAction = soapMsg.SoapAction as string;
        this.ContainsFault = soapMsg.ContainsFault;
        
        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        return SoapActionsMap[this.SoapAction];
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}
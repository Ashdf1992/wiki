/*++

Copyright (c) 2011  Microsoft Corporation

Module Name:

    protocol.idl

Abstract:

    IDL for the File Server VSS Agent protocol.

Environment:

    

Revision History:

--*/

protocol FSRVP with
    Documentation
    {
        ProtocolName = "File Server Remote VSS Protocol",
        ShortName = "FSRVP",
        DocumentName = "MS-FSRVP",
        ProtocolType = "rpc",
        Description = ""
    },
    OPNAuthoring
    {
        Copyright = "(c) Microsoft Corporation",
        References = 
        [
            new Reference{Name = "MS-FSRVP", Version = "11.0", Date = "06/01/2017", ProgramName = ProgramName.MCPP},
        ],
        RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "355026", Date = "10/10/2013"}
        ]
    };

using Technologies.IDL;
using DTYP;
using ERREF;
using MSRPCE;
using Utility;

typedef PFSSAGENT_SHARE_MAPPING = FSSAGENT_SHARE_MAPPING with IDL{IndirectionLevel = 1};
typedef PFSSAGENT_SHARE_MAPPING_1 = FSSAGENT_SHARE_MAPPING_1 with IDL{IndirectionLevel = 1};

///////////////////////////////////////////////
// Types for FSRVPServerSequenceValidation

// Per ShadowCopySet
type ShadowCopySet
{
    GUID ShadowCopySetId;
    FSRVP.FsrvpStatus Status;
    ulong Context;
    map<GUID, ShadowCopy> ShadowCopyList;
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// The status of the shadow copy set.
pattern FsrvpStatus = enum USHORT
{
    None = 0,
    Started = 1,
    Added = 2,
    CreationInProgress = 3,
    Committed = 4,
    Exposed = 5,
    Recovered = 6,
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// Per ShadowCopy
type ShadowCopy
{
    GUID ShadowCopyId;
    string VolumeName;
    DateTime CreationTimeStamp;
    map<string, MappedShare> ShareMappingList;
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// Per MappedShare
type MappedShare
{
    string ShareName;
    string ShadowCopyShareName;
    bool IsExposed;
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// Fsrvp Message Sequence Timer
type FsrvpTimer
{
    FsrvpTimer(DateTime startTime, TimeSpan timeout)
    {
        StartTime = startTime;
        Timeout = timeout;
    }
    
    // The time when this timer is started.
    DateTime StartTime;
    // The timeout which this timer expires.
    TimeSpan Timeout;
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// This type is used to hold all the ADM variables
type ServerGlobal
{
    ServerGlobal()
    {
        validationEnabled = true;
        CurrentContext = 0;
        ContextIsSet = false;
        GlobalShadowCopySetTable = {};
        timer = null;
    }
    
    bool validationEnabled = false;
    ulong CurrentContext = 0;
    // WORKAROUND: workaround for TDI #67814
    bool ContextIsSet = false;
    map<GUID, ShadowCopySet> GlobalShadowCopySetTable;
    FsrvpTimer timer;
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

///////////////////////////////////////////////

endpoint FileServerVssAgentService over MSRPCE.Server provides FileServerVssAgent
{
    // Hold all the ADM variable, for sequence validation
    ServerGlobal global;
}
//
// Interface Attributes
//
contract FileServerVssAgent
{
    ///  
    /// Get the Server supported version range <MinVersion, MaxVersion>  
    /// Windows Server 8 compatiable Agent should return both  
    /// as FSRVP_RPC_VERSION_1  
    /// 
    accepts operation GetSupportedVersion
    {    
        out DWORD MinVersion with IDL{IndirectionLevel = 1};
        out DWORD MaxVersion with IDL{IndirectionLevel = 1};
        result DWORD hresult;
        
        override string ToString()
        {
            return "GetSupportedVersion, ReturnValue: " + FsrvpHResultValuesToText(hresult) 
                + ", MinVersion: " + ConvertVersionValuesToString(MinVersion) + ", MaxVersion: " + ConvertVersionValuesToString(MaxVersion);
        }
    }
    with IDL {Opnum = 0};
    
    ///  
    /// Sets the context that is then applicable for all following shadowcopy  
    /// operations.  
    ///
    accepts operation SetContext
    {
        in optional handle_t hBinding;
        in IDLUlong Context;    
        result DWORD hresult;
        
        override string ToString()
        {
            return "SetContext, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", Context: "+ ConvertContextValuesToString(Context);
        }
    }
    with IDL {Opnum = 1};
    
    //////////////////////////////////////////////////////////////////////////  
    ///                                                                    ///  
    /// ShadowCopy Creation Methods                                        ///  
    ///                                                                    ///  
    //////////////////////////////////////////////////////////////////////////  
  
    ///  
    /// File Share ShadowCopy Provider calls StartShadowCopySet() from  
    /// BeginPrepareSnapshot() once for every unique file server in the  
    /// application server's shadowcopy set.  
    ///  
    /// The ClientShadowCopySetId is the file share shadowcopy set id assigned  
    /// on the application server.   
    ///  
    /// Through an output parameter, this method returns the shadowcopy set ID  
    /// that was created on the file server.  
    ///  
    accepts operation StartShadowCopySet
    {
        in optional handle_t hBinding; 
        in GUID ClientShadowCopySetId;    
        out GUID pShadowCopySetId with IDL{IndirectionLevel = 1};
        result DWORD hresult;
        
        override string ToString()
        {
            return "StartShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) 
                + ", ClientShadowCopySetId: " + ClientShadowCopySetId.ToString() + ", pShadowCopySetId: " + pShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 2};
    
    ///  
    /// This is called for each UNC path that should be added to the shadowcopy  
    /// set on the file server. This method should check if the underlying volume  
    /// shadowcopy has already been added to the file server shadowcopy set. If not,  
    /// the volume will be added to the file server shadowcopy set and a share  
    /// mapping will be added for the shadowcopy. Otherwise, the file server shadowcopy  
    /// in the set will be re-used and only a share mapping will be added to metadata  
    /// store for tracking.The ClientShadowCopyId is the file share shadowcopy ID   
    /// assigned on application server for the shadowcopy share.   
    ///
    accepts operation AddToShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ClientShadowCopyId;
        in GUID ShadowCopySetId;
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>()};
        out GUID pShadowCopyId with IDL{IndirectionLevel = 1};
        result DWORD hresult;
        
        override string ToString()
        {
            return "AddToShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShareName: " + ShareName.ToString()
                + ", ClientShadowCopyId: " + ClientShadowCopyId.ToString() + ", ShadowCopySetId: " + ShadowCopySetId.ToString() + ", pShadowCopyId: " + pShadowCopyId.ToString();
        }
    }
    with IDL {Opnum = 3};
    
    ///  
    /// This call synchronously commits the shadowcopies on the file server.  
    ///
    accepts operation CommitShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;
        in IDLUlong TimeOutInMilliseconds;
        result DWORD hresult;
        
        override string ToString()
        {
            return "CommitShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 4};
    
    ///  
    /// This call exposes part of the file server volume shadowcopy as a share.  
    ///  
    /// When it returns, the file share shadowcopy property is available for  
    /// autorecovery or backup (for non-autorecovery).  
    ///  
    /// File share provider will query the shadowcopy properties by GetShareMapping()  
    /// method and update the corresponding file share shadowcopy provider metadata.  
    ///  
    /// The file share shadowcopy will be ReadWrite if the autorecovery context is  
    /// chosen. Otherwise, the shadowcopy share will be ReadOnly.  
    ///
    accepts operation ExposeShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;
        in IDLUlong TimeOutInMilliseconds;
        result DWORD hresult;
        
        override string ToString()
        {
            return "ExposeShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 5};
    
    ///  
    /// This call signals the completion of autorecovery by the writers on the application  
    /// server side.  File share shadowcopy agent is now safe to seal the shadowcopy as ReadOnly.  
    /// 
    accepts operation RecoveryCompleteShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;    
        result DWORD hresult;
        
        override string ToString()
        {
            return "RecoveryCompleteShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 6};
    
    ///  
    /// This call aborts the shadowcopy creation sequence and resets the file share shadowcopy  
    /// agent for subsequent shadowcopy operations.  
    ///  
    accepts operation AbortShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;
        result DWORD hresult;
        
        override string ToString()
        {
            return "AbortShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 7};
    
    //////////////////////////////////////////////////////////////////////////  
    ///                                                                    ///  
    ///   Share Mapping Methods                                            ///  
    ///                                                                    ///  
    ////////////////////////////////////////////////////////////////////////// 
    
    ///  
    /// This call will check if a UNC path supports shadowcopies.  
    ///  
    /// In the case of a scaleout (active-active) share, where a single scope name is  
    /// exposed through multiple cluster nodes simultaneously, the OwnerMachineName  
    /// on return will be the name of a cluster node that is capable of creating the  
    /// shadowcopy for this path.  
    ///  
    /// OwnerMachineName must be initialized with NULL when passed in from client.  
    /// The memory is allocated by the RPC server. The client is responsible to free  
    /// it by calling MIDL_user_free explicitly.  
    ///
    accepts operation IsPathSupported
    {
        in optional handle_t hBinding;
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>()};
        out BOOL SupportedByThisProvider with IDL{IndirectionLevel = 1}, DisplayInfo{ToText = BOOL2String};
        out string OwnerMachineName with IDL{BaseStringType = TypeOf<LPWSTR>(), IndirectionLevel = 1};
        result DWORD hresult;
        
        override string ToString()
        {
            return "IsPathSupported, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShareName: " + ShareName + ", OwnerMachineName: " + OwnerMachineName;
        }
    }
    with IDL {Opnum = 8};
    
    ///  
    /// This method returns if a UNC path has been shadowcopied on the file server  
    /// or not.  
    /// 
    accepts operation IsPathShadowCopied
    {
        in optional handle_t hBinding;
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>()}; 
        out BOOL ShadowCopyPresent with IDL{IndirectionLevel = 1}, DisplayInfo{ToText = BOOL2String};
        out IDLLong ShadowCopyCompatibility with IDL{IndirectionLevel = 1};
        result DWORD hresult;
        
        override string ToString()
        {
            return "IsPathShadowCopied, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShareName: " + ShareName
                + ", ShadowCopyCompatibility: " + ConvertCompatibilityValuesToString(ShadowCopyCompatibility);
        }
    }
    with IDL {Opnum = 9};
    
    ///  
    /// This method gets file share shadowcopy information, i.e. the sharemapping  
    /// by given a file server shadowcopy set id, file server shadowcopy id and the  
    /// file share name.   
    /// Pointer to the buffer that receives the data.   
    /// The format of this data depends on the value of the level parameter.  
    /// The client is responsible to free the memory by calling  
    /// MIDL_user_free().  
    ///
    accepts operation GetShareMapping
    {
        in optional handle_t hBinding;
        in GUID ShadowCopyId;
        in GUID ShadowCopySetId;
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>()};
        in DWORD Level where ValidationCheck(value == 1, this, "FSRVP: The Level in Message GetShareMapping must be 1.");
        out PFSSAGENT_SHARE_MAPPING[Level] ShareMapping with IDL {Switch_Is = Level};
        result DWORD hresult;
        
        override string ToString()
        {
            return "GetShareMapping, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShareName: " + ShareName
                + ", ShadowCopyId: " + ShadowCopyId.ToString() + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 10};
    
    ///  
    /// This method is called by file share provider on the application server to  
    /// delete a file share shadowcopy, by specifing file server shadowcopy set id,  
    /// file server shadowcopy id and the file share name.  
    /// 
    accepts operation DeleteShareMapping
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;
        in GUID ShadowCopyId;
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>()};
        result DWORD hresult;
        
        override string ToString()
        {
            return "DeleteShareMapping, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShareName: " + ShareName
                + ", ShadowCopyId: " + ShadowCopyId.ToString() + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 11};
    
    ///  
    /// This call waits until all the shadowcopy preparation is done on the file server.  
    /// It is used to avoid the long preparation time on file server break the  
    /// 60 seconds freeze/thaw window on the application server  
    /// It must be called between the last AddToShadowCopySet and CommitShadowCopySet  
    ///
    accepts operation PrepareShadowCopySet
    {
        in optional handle_t hBinding;
        in GUID ShadowCopySetId;
        in IDLUlong TimeOutInMilliseconds;
        result DWORD hresult;
        
        override string ToString()
        {
            return "PrepareShadowCopySet, ReturnValue: " + FsrvpHResultValuesToText(hresult) + ", ShadowCopySetId: " + ShadowCopySetId.ToString();
        }
    }
    with IDL {Opnum = 12};
}
with IDL {
        Uuid = {A8E0653C-2744-4389-A61D-7373DF8B2292},
        Version = "1.0",
        Pointer_default = PointerKind.UniquePtr,
        Ms_union = true
    };

// Define the mapping from snapshot share to snapshot volume on the 
// file server.
public type FSSAGENT_SHARE_MAPPING_1
{
    GUID ShadowCopySetId;
    GUID ShadowCopyId;
    string ShareNameUNC with IDL{BaseStringType = TypeOf<LPWSTR>()};
    string ShadowCopyShareName with IDL{BaseStringType = TypeOf<LPWSTR>()};
    LONGLONG CreationTimestamp;
}

public type FSSAGENT_SHARE_MAPPING[IDLUlong Tag]
{
    optional [|Tag == 1|] PFSSAGENT_SHARE_MAPPING_1 ShareMapping1 with IDL{Case = [1]};
} with IDL {UnionKind = UnionKind.NonEncapsulated, EmptyDefault = true , Switch_Type = TypeOf<ULONG>()};

string FsrvpHResultValuesToText(DWORD hResult)
{
    if (hResult in FsrvpHResultMap)
    {
        return FsrvpHResultMap[hResult];
    }
    else
    {
        return HResultValuesToText(hResult);
    }
}

const map<uint, string> FsrvpHResultMap =
{
    0x80042301 -> "FSRVP_E_BAD_STATE", 
    0x80042316 -> "FSRVP_E_SHADOW_COPY_SET_IN_PROGRESS",
    0x8004230C -> "FSRVP_E_ NOT_SUPPORTED",
    0x00000102 -> "FSRVP_E_WAIT_TIMEOUT",
    0xFFFFFFFF -> "FSRVP_E_WAIT_FAILED",
    0x8004230D -> "FSRVP_E_OBJECT_ALREADY_EXISTS",
    0x80042308 -> "FSRVP_E_OBJECT_NOT_FOUND",
    0x8004231B -> "FSRVP_E_UNSUPPORTED_CONTEXT",
    0x80042501 -> "FSRVP_E_SHADOWCOPYSET_ID_MISMATCH",
} with Documentation{Ignore = true};

string ConvertContextValuesToString(IDLUlong context)
{
    string strContext;
    switch(context)
    {
        case CONTEXT_VALUES.CTX_BACKUP =>
        case CONTEXT_VALUES.CTX_FILE_SHARE_BACKUP =>
        case CONTEXT_VALUES.CTX_NAS_ROLLBACK =>
        case CONTEXT_VALUES.CTX_APP_ROLLBACK =>
            strContext = EnumToString(context, "FSRVP.CONTEXT_VALUES");
            
        case CONTEXT_VALUES.CTX_BACKUP_ATTR_AUTO_RECOVERY =>
            strContext = "CTX_BACKUP|ATTR_AUTO_RECOVERY";
        case CONTEXT_VALUES.CTX_FILE_SHARE_BACKUP_ATTR_AUTO_RECOVERY =>
            strContext = "CTX_FILE_SHARE_BACKUP|ATTR_AUTO_RECOVERY";
        case CONTEXT_VALUES.CTX_NAS_ROLLBACK_ATTR_AUTO_RECOVERY =>
            strContext = "CTX_NAS_ROLLBACK|ATTR_AUTO_RECOVERY";
        case CONTEXT_VALUES.CTX_APP_ROLLBACK_ATTR_AUTO_RECOVERY =>
            strContext = "CTX_APP_ROLLBACK|ATTR_AUTO_RECOVERY";
        
        default =>
            strContext = "Unknown (" + DecToHexFormat(context as uint) + ")";
    }
    return strContext;
}

string ConvertVersionValuesToString(DWORD version)
{
    string strVersion;
    switch(version)
    {
        case FSRVP_VERSION_VALUES.FSRVP_RPC_VERSION_1 =>
            strVersion = "FSRVP_RPC_VERSION_1";
        default =>
            strVersion = "Unknown (" + version.ToString() + ")";
    }
    return strVersion;
}

string ConvertCompatibilityValuesToString(IDLLong compatibility)
{
    string strCompatibility;
    switch(compatibility)
    {
        case SHADOW_COPY_COMPATIBILITY_VALUES.DISABLE_DEFRAG =>
            strCompatibility = "DISABLE_DEFRAG";
        case SHADOW_COPY_COMPATIBILITY_VALUES.DISABLE_CONTENTINDEX =>
            strCompatibility = "DISABLE_CONTENTINDEX";
        default =>
            strCompatibility = "Unknown (" + DecToHexFormat(compatibility) + ")";
    }
    return strCompatibility;
}

pattern CONTEXT_VALUES = enum IDLUlong
{
    CTX_BACKUP = 0x00000000,
    CTX_FILE_SHARE_BACKUP = 0x00000010,
    CTX_NAS_ROLLBACK = 0x00000019,
    CTX_APP_ROLLBACK = 0x00000009,
    
    // ATTR_AUTO_RECOVERY(0x00400000) attribute could be included in any of the above contexts, section 2.2.2.2
    CTX_BACKUP_ATTR_AUTO_RECOVERY = 0x00400000,
    CTX_FILE_SHARE_BACKUP_ATTR_AUTO_RECOVERY = 0x00400010,
    CTX_NAS_ROLLBACK_ATTR_AUTO_RECOVERY = 0x00400019,
    CTX_APP_ROLLBACK_ATTR_AUTO_RECOVERY = 0x00400009,
}with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

pattern SHADOW_COPY_COMPATIBILITY_VALUES = enum IDLLong
{
    DISABLE_DEFRAG = 0x00000001,
    DISABLE_CONTENTINDEX = 0x00000002,
}with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

pattern FSRVP_VERSION_VALUES = enum DWORD
{
    FSRVP_RPC_VERSION_1 = 0x00000001,
}with IDL{DoNotGenerate = true}, Documentation{Ignore = true};
    


module ScenarioValidationUtility;

using Standard;

// ---------------------------------------------Scenario Validation Model--------------------------------------------- //
annotation int any message#ScenarioValidationFailedLevel;

abstract type ScenarioValidation
{
    abstract bool CheckAndUpdate(array<any> abstractDataModel, array<any> configs, array<any message> msgs);
}

// Design Pattern: Decorator
type EmptyScenarioValidation : ScenarioValidation
{
    override bool CheckAndUpdate(array<any> abstractDataModel, array<any> configs, array<any message> msgs)
    {
        return true;
    }
}

type ScenarioValidationDecorator : ScenarioValidation
{
    ScenarioValidation validation = null;

    ScenarioValidationDecorator(ScenarioValidation _validation)
    {
        validation = _validation;
    }

    override bool CheckAndUpdate(array<any> abstractDataModel, array<any> configs, array<any message> msgs)
    {
        assert validation != null;
        if (validation.CheckAndUpdate(abstractDataModel, configs, msgs) && !IsUnattainableCase(abstractDataModel, configs, msgs))
        {
            return MyCheckAndUpdate(abstractDataModel, configs, msgs);
        }
        else
        {
            return false;
        }
    }

    virtual bool MyCheckAndUpdate(array<any> abstractDataModel, array<any> configs, array<any message> msgs)
    {
        return true;
    };

    // case 1: depend on some ADM we cann't implement
    virtual bool IsUnattainableCase(array<any> abstractDataModel, array<any> configs, array<any message> msgs)
    {
        return false;
    }
}

// For connection disconnect, disable the following validation for this message and the connection
// For error response, if we need update ADM, disable the validation for this message and the connection;
//                     if we needn't update ADM, don't disable the validation for this message and the connection;
// For other ValidationCheck fail, don't disable any validation
void SequenceValidationCheckFail(any message context, DiagnosisLevel level, string description, (void)(any) disableValidationForThisConnection, any arg)
{
    ValidationCheck(false, context, level, description);
    context#ScenarioValidationFailedLevel = level;

    if (disableValidationForThisConnection != null)
        disableValidationForThisConnection(arg);
}

bool get IsScenarioValidationFailed(this any message context)
{
    if (context#ScenarioValidationFailedLevel == nothing)
    {
        return false;
    }
    else
    {
        return true;
    }
}

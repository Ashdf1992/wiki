module MSOXCNOTIF with
Documentation
{
	ProtocolName = "Core Notifications Protocol",
	ShortName = "MS-OXCNOTIF",
	DocumentName = "MS-OXCNOTIF",
	ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
    [
        new Reference{Name = "MS-OXCNOTIF", Version = "15.0"},
    ],
    RevisionSummary =    
    [
        new Revision{Class=RevisionClass.Major, Version="1.3.1", Date="08/31/2015"},
    ]
};

using DTYP;
using Utility;
using MSOXCDATA;
using Standard;
using Diagnostics;

// Section 2.2.1.2.1.1   RopRegisterNotification ROP Request Buffer
pattern NotificationTypesO15 = enum byte
{
	NewMail = 0x02,
	ObjectCreated = 0x04,
	ObjectDeleted = 0x08,
	ObjectModified = 0x10,
	ObjectMoved = 0x20,
	ObjectCopied = 0x40,
	SearchComplete = 0x80,
	...
};

// Section 2.2.1.2.1.1   RopRegisterNotification ROP Request Buffer (O16 Open Specification updated NotificationTypes from 1 byte to 2 bytes)
pattern NotificationTypesO16 = enum ushort
{
	NewMail = 0x0002,
	ObjectCreated = 0x0004,
	ObjectDeleted = 0x0008,
	ObjectModified = 0x0010,
	ObjectMoved = 0x0020,
	ObjectCopied = 0x0040,
	SearchComplete = 0x0080,
	TableModified = 0x0100,
	Extended = 0x0400,
	...
};

pattern NotificationTypes = NotificationTypesO15 | NotificationTypesO16;	

type NotificationFlagsT
{
    ushort NotificationDataAvailability with BinaryEncoding{Width = 4}, DisplayInfo{ToText = NotificationDataAvailabilityToText};
    ushort NotificationType with BinaryEncoding{Width = 12}, DisplayInfo{ToText = NotificationTypeToText};
	
	string NotificationDataAvailabilityToText(any data)
	{
		ushort val = data as ushort;
		string str;
		if((val & 0x1000) !=0)
			str += "T ";
		if((val & 0x2000) !=0)
			str += "U ";
		if((val & 0x4000) !=0)
			str += "S ";
		if((val & 0x8000) !=0)
			str += "M ";	
        return str;
	} 
	  
	string NotificationTypeToText(any data)
    {
        ushort val = data as ushort;
		string str;
		if(val ==0x0002)
			str = "NewMail";
		else if (val ==0x0004)
			str = "ObjectCreated";
		else if (val ==0x0008)
			str = "ObjectDeleted";
		else if (val ==0x0010)
			str = "ObjectModified";
		else if (val ==0x0020)
			str = "ObjectMoved";
		else if (val ==0x0040)
			str = "ObjectCopied";
		else if (val ==0x0080)
			str = "SearchComplete";
		else if (val ==0x0100)
			str = "TableModified";
		else if (val ==0x0400)
			str = "Extended";

        return str;
    }   
};

type NotificationFlags
{
    NotificationFlagsT Value with Encoding{Decoder = NotificationFlagsTDecoder}; 
    
    optional NotificationFlagsT NotificationFlagsTDecoder(stream s)
    {
        ushort val = BinaryDecoder<ushort>(s) as ushort;
        
        NotificationFlagsT yyIns = new NotificationFlagsT();
        yyIns.NotificationDataAvailability = (val& 0xf000) as ushort;
        yyIns.NotificationType = (val& 0x0fff) as ushort;
        return yyIns;
    }
}

pattern TableEventType = enum ushort
{
	TableChanged = 0x0001,
	TableRowAdded = 0x0003,
	TableRowDeleted = 0x0004,
	TableRowModified = 0x0005,
	TableRestrictionChanged = 0x0007,
	...
};

typedef NotificationTypesEnum = NotificationTypes;
typedef TableEventTypeEnum = TableEventType;

// Section 2.2.1.4.1.2  NotificationData Structure
type NotificationData[array<PropertyTag> propTags]
{
	NotificationFlags NotificationFlags;
	optional [| NotificationFlags.Value.NotificationType == 0x0100 |] TableEventType TableEventType;
	
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowDeleted || TableEventType == TableEventTypeEnum.TableRowModified)|] MSOXCDATA.FolderID TableRowFolderID;
	
	
	optional [| ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0) && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowDeleted || TableEventType == TableEventTypeEnum.TableRowModified)|] MSOXCDATA.MessageID TableRowMessageID;
	
	
	optional [| ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0) && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowDeleted || TableEventType == TableEventTypeEnum.TableRowModified)|] uint TableRowInstance; 
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified)|] MSOXCDATA.FolderID InsertAfterTableRowFolderID;
	
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0)&& (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified)|] MSOXCDATA.MessageID InsertAfterTableRowID;
	
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0) && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified)|] uint InsertAfterTableRowInstance;	
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified)|] ushort TableRowDataSize;
	
	optional [| NotificationFlags.Value.NotificationType == 0x0100 && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified)|] PropertyRow[propTags] TableRowData with BinaryEncoding{Length = GetTableRowDataSize()}; 
	
	optional [| NotificationFlags.Value.NotificationType != 0x0100 && NotificationFlags.Value.NotificationType != 0x0400|] MSOXCDATA.FolderID FolderId; 
	optional [| NotificationFlags.Value.NotificationType != 0x0100 && NotificationFlags.Value.NotificationType != 0x0400 && ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0)|] MSOXCDATA.MessageID MessageId; 
	optional [| (NotificationFlags.Value.NotificationType == 0x0004 || NotificationFlags.Value.NotificationType == 0x0008 || NotificationFlags.Value.NotificationType == 0x0020 || NotificationFlags.Value.NotificationType == 0x0040) && ( ((NotificationFlags.Value.NotificationDataAvailability) & 0xC000) == 0xC000 || ((NotificationFlags.Value.NotificationDataAvailability) & 0xC000) == 0) |] MSOXCDATA.FolderID ParentFolderId;
	 
	optional [| NotificationFlags.Value.NotificationType == 0x0020 || NotificationFlags.Value.NotificationType == 0x0040|] MSOXCDATA.FolderID OldFolderId;
	optional [| (NotificationFlags.Value.NotificationType == 0x0020 || NotificationFlags.Value.NotificationType == 0x0040) && ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) != 0)|] MSOXCDATA.MessageID OldMessageId;
	optional [| (NotificationFlags.Value.NotificationType == 0x0020 || NotificationFlags.Value.NotificationType == 0x0040) && ((NotificationFlags.Value.NotificationDataAvailability & 0x8000) == 0)|] MSOXCDATA.MessageID OldParentFolderId;	
	optional [| NotificationFlags.Value.NotificationType == 0x0004 || NotificationFlags.Value.NotificationType == 0x0010 |] ushort TagCount;
	
	optional [| (NotificationFlags.Value.NotificationType == 0x0004 || NotificationFlags.Value.NotificationType == 0x0010) && (TagCount != 0x0000 && TagCount != 0xFFFF ) |] array<PropertyTag> Tags with BinaryEncoding{Length = GetTagCount()};   
	optional [| (NotificationFlags.Value.NotificationDataAvailability & 0x1000 ) != 0 |] uint TotalMessageCount;
	optional [| (NotificationFlags.Value.NotificationDataAvailability & 0x2000) != 0 |] uint UnreadMessageCount;
	optional [| NotificationFlags.Value.NotificationType == 0x0002 |] uint MessageFlags;
	optional [| NotificationFlags.Value.NotificationType == 0x0002 |] byte UnicodeFlag;

	optional [| NotificationFlags.Value.NotificationType == 0x0002 |] string MessageClass with BinaryEncoding{ TextEncoding = TextEncoding.ASCII}; //  A null-terminated string containing the message class of the new mail. The string is in Unicode if the UnicodeFlag field is set to TRUE (0x01). The string is in ASCII if UnicodeFlag is set to FALSE (0x00). 

	ushort GetTableRowDataSize()
	{
		if (NotificationFlags.Value.NotificationType == 0x0100 && (TableEventType == TableEventTypeEnum.TableRowAdded || TableEventType == TableEventTypeEnum.TableRowModified))
			return TableRowDataSize as ushort;	
		return 0;
	}
	
	ushort GetTagCount()
	{
		if(NotificationFlags.Value.NotificationType == 0x0004 || NotificationFlags.Value.NotificationType == 0x0010 )
			return TagCount as ushort;
		return 0;
	}
};
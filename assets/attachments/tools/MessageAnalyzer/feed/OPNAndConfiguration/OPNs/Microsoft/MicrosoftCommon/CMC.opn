module CMC with Documentation
{
    ProtocolName = "Enrollment Message Syntax",
    ShortName = "CMC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2797"},
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="369482", Date="10/15/2014"}
        ]
};

using Standard;
using Technologies.ASN1;
using X509;
using CMS;

const array<int> idPkix = [1, 3, 6, 1, 5, 5, 7];
const array<int> idCmc = idCmc + [7];
const array<int> idCmcStatusInfo = idCmc + [1];
const array<int> idCmcIdentification = idCmc + [2];
const array<int> idCmcIdentityProof = idCmc + [3];
const array<int> idCmcDataReturn = idCmc + [4];
const array<int> idCmcTransactionId = idCmc + [5];
const array<int> idCmcSenderNonce = idCmc + [6];
const array<int> idCmcRecipientNonce = idCmc + [7];
const array<int> idCmcAddExtensions = idCmc + [8];
const array<int> idCmcEncryptedPOP = idCmc + [9];
const array<int> idCmcDecryptedPOP = idCmc + [10];
const array<int> idCmcLraPOPWitness = idCmc + [11];
const array<int> idCmcGetCert = idCmc + [15];
const array<int> idCmcGetCRL = idCmc + [16];
const array<int> idCmcRevokeRequest = idCmc + [17];
const array<int> idCmcRegInfo = idCmc + [18];
const array<int> idCmcResponseInfo = idCmc + [19];
const array<int> idCmcQueryPending = idCmc + [21];
const array<int> idCmcPopLinkRandom = idCmc + [22];
const array<int> idCmcPopLinkWitness = idCmc + [23];
const array<int> idCmcconfirmCertAcceptance = idCmc + [24];

type PKIData
{
    optional array<TaggedAttribute> ControlSequence;
    optional array<TaggedRequest> ReqSequence;
    optional array<TaggedContentInfo> CmsSequence;
    optional array<OtherMsg> OtherMsgSequence;

    invariant ControlSequence != nothing || ReqSequence != nothing || CmsSequence != nothing || OtherMsgSequence != nothing;
}

type TaggedAttribute
{
    BodyPartID BodyPartID;
    ObjectIdentifier AttrType;
    set<([|AttrType == idCmcStatusInfo|] CMCStatusInfo
        | [|AttrType == idCmcIdentification|] UTF8String
        | [|AttrType == idCmcIdentityProof|] OctetString
        | [|AttrType == idCmcDataReturn|] OctetString
        | [|AttrType == idCmcTransactionId|] Integer
        | [|AttrType == idCmcSenderNonce|] OctetString
        | [|AttrType == idCmcRecipientNonce|] OctetString
        | [|AttrType == idCmcAddExtensions|] AddExtensions
        | [|AttrType == idCmcEncryptedPOP|] EncryptedPOP
        | [|AttrType == idCmcDecryptedPOP|] DecryptedPOP
        | [|AttrType == idCmcLraPOPWitness|] LraPopWitness
        | [|AttrType == idCmcGetCert|] GetCert
        | [|AttrType == idCmcGetCRL|] GetCRL
        | [|AttrType == idCmcRevokeRequest|] RevRequest
        | [|AttrType == idCmcRegInfo|] OctetString
        | [|AttrType == idCmcResponseInfo|] OctetString
        | [|AttrType == idCmcQueryPending|] OctetString
        | [|AttrType == idCmcPopLinkRandom|] OctetString
        | [|AttrType == idCmcPopLinkWitness|] OctetString
        | [|AttrType == idCmcconfirmCertAcceptance|] CMCCertId)> AttrValues;
}

pattern TaggedRequestTcr = TaggedCertificationRequest
    with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};

pattern TaggedRequestCrm = X509.CertReqMsg
    with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};

pattern TaggedRequest = TaggedRequestTcr | TaggedRequestCrm;

type TaggedCertificationRequest
{
    BodyPartID BodyPartID;
    CertificationRequest CertificationRequest;
}

type CertificationRequest
{
    CertificationRequestInfo CertificationRequestInfo;
    X509.AlgorithmIdentifier SignatureAlgorithm;
    BitString Signature;
}

type CertificationRequestInfo
{
    Integer Version;
    X509.Name Subject;
    SubjectPublicKeyInfo SubjectPublicKeyInfo;
    set<any> Attributes with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
}

type TaggedContentInfo
{
    BodyPartID BodyPartID;
    CMS.ContentInfo ContentInfo;
}

type SubjectPublicKeyInfo
{
    AlgorithmIdentifier Algorithm;
    BitString SubjectPublicKey;
}

type OtherMsg
{
    BodyPartID BodyPartID;
    ObjectIdentifier OtherMsgType;
    any OtherMsgValue;
}

type ResponseBody
{
    optional array<TaggedAttribute> ControlSequence;
    optional array<TaggedContentInfo> CmsSequence;
    optional array<OtherMsg> OtherMsgSequence;
}

pattern OtherInfoFailInfo = CMCFailInfo;

pattern OtherInfoPendInfo = PendInfo;

type CMCStatusInfo
{
    CMCStatus CMCStatus;
    array<Integer> BodyList where value.Count >= 1;
    optional string StatusString;
    optional (OtherInfoFailInfo | OtherInfoPendInfo) OtherInfo;
}

type PendInfo
{
    Integer PendToken;
    DateTime PendTime;
}

pattern CMCStatus = enum Integer
{
    Success = 0, Failed = 2, Pending = 3, NoSupport = 4, ConfirmRequired = 5
};

pattern CMCFailInfo = enum Integer
{
    BadAlg = 0,
    BadMessageCheck = 1,
    BadRequest = 2,
    BadTime = 3,
    BadCertId = 4,
    UnsuportedExt = 5,
    MustArchiveKeys = 6,
    BadIdentity = 7,
    PopRequired = 8,
    PopFailed = 9,
    NoKeyReuse = 10,
    InternalCAError = 11,
    TryLater = 12
};

type AddExtensions
{
    BodyPartID PkiDataReference;
    array<BodyPartID> CertReferences;
    array<X509.Extension> Extensions;
}

type EncryptedPOP
{
    TaggedRequest Request;
    CMS.ContentInfo Cms;
    X509.AlgorithmIdentifier ThePOPAlgID;
    X509.AlgorithmIdentifier WitnessAlgID;
    OctetString Witness;
}

type DecryptedPOP
{
    BodyPartID BodyPartID;
    X509.AlgorithmIdentifier ThePOPAlgID;
    OctetString ThePOP;
}

type LraPopWitness
{
    BodyPartID PkiDataBodyid;
    array<BodyPartID> BodyIds;
}

type GetCert
{
    X509.GeneralName IssuerName;
    Integer SerialNumber;
}

type GetCRL
{
    X509.Name IssuerName;
    optional X509.GeneralName CRLName;
    optional DateTime Time;
    optional X509.ReasonFlags Reasons;
}

type RevRequest
{
    X509.Name IssuerName;
    Integer SerialNumber;
    X509.CrlReason Reason;
    optional DateTime InvalidityDate;
    optional OctetString Passphrase;
    optional string Comment;
}

pattern BodyPartID = Integer;

pattern CMCCertId = X509.IssuerSerial;

pattern NoSignatureValue = OctetString;

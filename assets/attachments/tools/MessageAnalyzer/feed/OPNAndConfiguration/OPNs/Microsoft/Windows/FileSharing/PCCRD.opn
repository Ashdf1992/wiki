protocol PCCRD with 
XmlEncodingDefaults{Namespace = PCCRDNamespace},
Documentation
{
    ProtocolName = "Peer Content Caching and Retrieval Discovery Protocol",
    ShortName = "PCCRD",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-PCCRD", Version = "8.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "366681", Date = "07/24/2014"}
        ]
};

using Standard;
using Utility;
using WSA2004;
using WSDiscovery;
using Diagnostics;
using FileSharingResources;

// Actor
autostart actor PCCRDOverWSDiscovery(WSDiscovery.Server server)
{
    // SOAP over UDP, no need to consider issues direction.
    observe server issues probeMatch:ProbeMatchesMessage 
        where probeMatch.ProbeMatchesMsg.ProbeMatches.Count > 0
    {
        for (int i = 0; i < probeMatch.ProbeMatchesMsg.ProbeMatches.Count; i++)
        {
            var match = probeMatch.ProbeMatchesMsg.ProbeMatches[i];
            (PeerDistDataV1 | PeerDistDataV2) peerDistData;
            if (match.AnyElements is anyElements:array<xml>)
            {
                array<xml> leftAnyElements = [];
                foreach (xml x in anyElements)
                {
                    if (x.NamespaceUri == PCCRDNamespace 
                        && x.Name is name:XmlName && name.LocalName == PeerDistDataElementName)
                    {
                        if (match.Types == V1Type)
                        {
                            switch (x)
                            {
                                case v1:PeerDistDataV1 from XmlDecoder<PeerDistDataV1> =>
                                    peerDistData = v1;
                                default =>
                                    ValidationCheckDecodingFailure(probeMatch, "PCCRD", "PeerDistData");
                                    return;
                            }
                        }
                        else if(match.Types == V2Type)
                        {
                            switch (x)
                            {
                                case v2:PeerDistDataV2 from XmlDecoder<PeerDistDataV2> =>
                                    peerDistData = v2;
                                default =>
                                    ValidationCheckDecodingFailure(probeMatch, "PCCRD", "PeerDistData");
                                    return;
                            }
                        }
                        else
                        {
                            ValidationCheck(false, probeMatch, Format(PCCRD_UNKNOWN_MESSAGE_TYPE, match.Types));
                            return;
                        }
                    }
                    else
                    {
                        leftAnyElements += [x];
                    }
                }
                var matchEx = new ProbeMatchTypeEx
                {
                    EndpointReference = match.EndpointReference,
                    Types = match.Types,
                    Scopes = match.Scopes,
                    XAddrs = match.XAddrs,
                    MetadataVersion = match.MetadataVersion,
                    AnyElements = leftAnyElements.Count > 0 ? leftAnyElements : nothing, 
                    AnyAttribute = match.AnyAttribute,
                    PeerDistData = peerDistData
                };
                probeMatch.ProbeMatchesMsg.ProbeMatches[i] = matchEx;
            }
        }
    }
}

type ProbeMatchTypeEx : WSDiscovery.ProbeMatchType
{
    (PeerDistDataV1 | PeerDistDataV2) PeerDistData;
}

// Type
type PeerDistDataV1
{
    BlockCountType BlockCount;
}
type BlockCountType
{
    string Count with XmlEncoding{Kind = XmlKind.Text};
}

type PeerDistDataV2
{
    SegmentAgesType SegmentAges;
}
type SegmentAgesType
{
    string Ages with XmlEncoding{Kind = XmlKind.Text};
}

const string PeerDistDataElementName = "PeerDistData";
const string V1Type = "PeerDist:PeerDistData";
const string V2Type = "PeerDist:PeerDistDataV2";
const string PCCRDNamespace = "http://schemas.microsoft.com/p2p/2007/09/PeerDistributionDiscovery";

protocol FSVCA with
// TDI: In TD, no endian is specified 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "File Set Version Comparison Algorithms",
    ShortName = "FSVCA",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-FSVCA", Version = "2.0", Date = "07/14/2016", ProgramName = ProgramName.WSPP},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "", Date = "03/10/2014"}
        ]
};

using Utility;
using Diagnostics;
using DTYP;
using OthersResources;

// section 2.1 SYNC_GID
type SYNC_GID
{
    FileType IsFileOrDirectory with BinaryEncoding{Width= 1};
    ulong ItemOrder with BinaryEncoding{Width= 63};
    GUID UniqueId; // TDI: In TD, it is 32 bytes, but it is 16 bytes actually.
};

pattern FileType = enum byte
{
    Directory = 0,
    File = 1,
    ...
};

// 2.2 REPLICA_GID
type REPLICA_GID
{
    GUID UniqueId;
}

// section 2.3
type SYNC_KNOWLEDGE
{
    uint Version where ValidationCheckValue(value == 5, null, true, ReferenceType.Type, "FSVCA", "Version", "SYNC_KNOWLEDGE", 5, value);
    uint Reserved1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved1", "SYNC_KNOWLEDGE", value);
    uint Reserved2 where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "Reserved2", "SYNC_KNOWLEDGE", 1, value);
    uint Reserved3 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved3", "SYNC_KNOWLEDGE", value);
    REPLICA_KEY_MAP ReplicaKeyMap;
    uint SectionSignature where ValidationCheckValue(value == 24, null, true, ReferenceType.Type, "FSVCA", "SectionSignature", "SYNC_KNOWLEDGE", 24, value);
    byte AreReplicaGidsVariableLength 
        where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "AreReplicaGidsVariableLength", "SYNC_KNOWLEDGE", value);
    ushort ReplicaGidLength where ValidationCheckValue(value == 16, null, true, ReferenceType.Type, "FSVCA", "ReplicaGidLength", "SYNC_KNOWLEDGE", 16, value);
    byte AreSyncGidsVariableLength
        where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "AreSyncGidsVariableLength", "SYNC_KNOWLEDGE", value);
    ushort SyncGidLength where ValidationCheckValue(value == 24, null, true, ReferenceType.Type, "FSVCA", "SyncGidLength", "SYNC_KNOWLEDGE", 24, value);
    byte Reserved4 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved4", "SYNC_KNOWLEDGE", value);
    ushort Reserved5 where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "Reserved5", "SYNC_KNOWLEDGE", 1, value); // TDI: In TD, the type of the field is uint
    uint ClockVectorTableSignature
        where ValidationCheckValue(value == 21, null, true, ReferenceType.Type, "FSVCA", "ClockVectorTableSignature", "SYNC_KNOWLEDGE", 21, value);
    VECTOR_CLOCK_VECTOR ClockVectorTable;
    uint RangeSetTableSignature
        where ValidationCheckValue(value == 23, null, true, ReferenceType.Type, "FSVCA", "RangeSetTableSignature", "SYNC_KNOWLEDGE", 23, value);
    VECTOR_RANGE_SET RangeSetTable;
    uint Reserved6 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved6", "SYNC_KNOWLEDGE", value);
    uint Reserved7 where ValidationCheckValue(value == 25, null, true, ReferenceType.Type, "FSVCA", "Reserved7", "SYNC_KNOWLEDGE", 25, value);
    byte Reserved8 where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "Reserved8", "SYNC_KNOWLEDGE", 1, value);
    uint Reserved9 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved9", "SYNC_KNOWLEDGE", value);
}

// 2.4 REPLICA_KEY_MAP 
type REPLICA_KEY_MAP
{
    uint Signature where ValidationCheckValue(value == 5, null, true, ReferenceType.Type, "FSVCA", "Signature", "REPLICA_KEY_MAP", 5, value);
    byte AreReplicaGidsVariableLength
        where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "AreReplicaGidsVariableLength", "REPLICA_KEY_MAP", value);
    ushort ReplicaGidLength where ValidationCheckValue(value == 16, null, true, ReferenceType.Type, "FSVCA", "ReplicaGidLength", "REPLICA_KEY_MAP", 16, value);
    VECTOR_REPLICA_KEY ReplicaKeys;
}

// 2.5 VECTOR_REPLICA_KEY
type VECTOR_REPLICA_KEY 
{
    uint NumEntries;
    array<REPLICA_GID> ReplicaGids with BinaryEncoding{Length = NumEntries};
}

// 2.6 VECTOR_CLOCK_VECTOR
type VECTOR_CLOCK_VECTOR
{
    uint NumEntries;
    array<CLOCK_VECTOR> ClockVectorEntries with BinaryEncoding{Length = NumEntries};
}

// 2.7 CLOCK_VECTOR
type CLOCK_VECTOR
{
    uint Signature where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "Signature", "CLOCK_VECTOR", 1, value);
    VECTOR_CLOCK_VECTOR_ELEMENT ClockVectorElementEntries;
}

// 2.8 VECTOR_CLOCK_VECTOR_ELEMENT
type VECTOR_CLOCK_VECTOR_ELEMENT
{
    uint NumEntries;
    array<CLOCK_VECTOR_ELEMENT> ClockVectorElements with BinaryEncoding{Length = NumEntries};
}

// 2.9 CLOCK_VECTOR_ELEMENT
type CLOCK_VECTOR_ELEMENT
{
    uint ReplicaKey;
    ulong TickCount;
}

// 2.10 VECTOR_RANGE_SET
type VECTOR_RANGE_SET
{
    uint NumEntries where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "NumEntries", "VECTOR_RANGE_SET", 1, value);
    array<RANGE_SET> RangeSet with BinaryEncoding{Length = NumEntries};
}

// 2.11 RANGE_SET
type RANGE_SET
{
    uint RangeSetSignature where ValidationCheckValue(value == 22, null, true, ReferenceType.Type, "FSVCA", "RangeSetSignature", "RANGE_SET", 22, value);
    VECTOR_RANGE Ranges;
}

// 2.12 VECTOR_RANGE
type VECTOR_RANGE
{
    uint NumEntries where ValidationCheckGreaterThanOrEqualTo(value >= 1, null, true, ReferenceType.Type, "FSVCA", "NumEntries", "VECTOR_RANGE", 1, value);
    array<RANGE> Ranges with BinaryEncoding{Length = NumEntries};
}

// 2.13 RANGE
type RANGE
{
    SYNC_GID SyncGid;
    uint ClockTableVectorIndex;
}

// 2.14 SYNC_CHANGE_INFORMATION
type SYNC_CHANGE_INFORMATION
{
    ulong Version where ValidationCheckValue(value == 5, null, true, ReferenceType.Type, "FSVCA", "Version", "SYNC_CHANGE_INFORMATION", 5, value);
    uint Reserved1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved1", "SYNC_CHANGE_INFORMATION", value);
    uint DestinationKnowledgeSize;
    optional [|DestinationKnowledgeSize > 0|] SYNC_KNOWLEDGE DestinationKnowledge;
    uint ForgettenKnowledge;
    optional [|ForgettenKnowledge > 0|] SYNC_KNOWLEDGE ForgottenKnowledge;
    uint Reserved2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved2", "SYNC_CHANGE_INFORMATION", value);
    uint Reserved3 where ValidationCheckValue(value == 1, null, true, ReferenceType.Type, "FSVCA", "Reserved3", "SYNC_CHANGE_INFORMATION", 1, value);
    uint MadeWithKnowledgeSize;
    optional [|MadeWithKnowledgeSize > 0|] SYNC_KNOWLEDGE MadeWithKnowledge;
    VECTOR_CHANGE_SET_ENTRY ChangeSetList;
    uint RecoverySectionLength;
    optional [|RecoverySectionLength == 16|] SYNC_GID LowerRecoveryBound;
    uint WorkEstimateForSyncSession where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "WorkEstimateForSyncSession", "SYNC_CHANGE_INFORMATION", value);
    uint WorkEstimateForChangeBatch where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "WorkEstimateForChangeBatch", "SYNC_CHANGE_INFORMATION", value);
    LastChangeBatchIndicator IsLastChangeBatch where ValidationCheckEnumValue(InRange<LastChangeBatchIndicator>(value), null, true, ReferenceType.Type,
        "FSVCA", "WorkEstimateForChangeBatch", "SYNC_CHANGE_INFORMATION", "0, 1", value);
    RecoverySynchronizationIndicator IsRecoverySynchronization where ValidationCheckEnumValue(InRange<RecoverySynchronizationIndicator>(value), null, true, ReferenceType.Type,
        "FSVCA", "IsRecoverySynchronization", "SYNC_CHANGE_INFORMATION", "0, 1", value) &&
        ValidationCheck((value == 1 && RecoverySectionLength == 16) || RecoverySectionLength == 0, null, DiagnosisLevel.Error, FSVCA_RECOVERY_SECTION_LENGTH);
    byte IsFiltered where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "IsFiltered", "SYNC_CHANGE_INFORMATION", value);
}

pattern LastChangeBatchIndicator = enum byte
{
    NotLastSet = 0,
    LastSet = 1,
    ...
};

pattern RecoverySynchronizationIndicator = enum byte
{
    NotRecoverySynchronization = 0,
    RecoverySynchronization = 1,
    ...
};

// 2.15 VECTOR_CHANGE_SET_ENTRY
type VECTOR_CHANGE_SET_ENTRY
{
    uint NumEntries;
    array<CHANGE_SET_ENTRY> ChangeSetEntries with BinaryEncoding{Length = NumEntries};
}

// 2.16 CHANGE_SET_ENTRY
type CHANGE_SET_ENTRY
{
    uint ChangeDataSize;
    ulong ChangeDataFormat where ValidationCheckValue(value == 7, null, true, ReferenceType.Type, "FSVCA", "ChangeDataFormat", "VECTOR_CHANGE_SET_ENTRY", 7, value);
    REPLICA_GID ReplicaGid;
    CLOCK_VECTOR_ELEMENT ChangeVersion;
    CLOCK_VECTOR_ELEMENT OriginalChangeVersion;
    CLOCK_VECTOR_ELEMENT CreateVersion;
    SYNC_GID SyncGid;
    byte WinnerExists;
    optional [|WinnerExists == 1|] SYNC_GID WinnerSyncGid;
    SyncChangeFlags SyncChangeFlags where ValidationCheckCombinationValueIncludeZero(InRange<SyncChangeFlags>(value), null, true, ReferenceType.Type,
        "FSVCA", "SyncChangeFlags", "VECTOR_CHANGE_SET_ENTRY", "0x01, 0x10000, 0x20000", value) &&
        ValidationCheckValue((value == 0x10000 || value == 0x20000) /* not check for the first one and last one*/ || OriginalChangeVersion.ReplicaKey == ChangeVersion.ReplicaKey, null, true, ReferenceType.Type,
        "FSVCA", "OriginalChangeVersion.ReplicaKey", "VECTOR_CHANGE_SET_ENTRY", ChangeVersion.ReplicaKey, OriginalChangeVersion.ReplicaKey) &&
        ValidationCheckValue((value == 0x10000 || value == 0x20000) /* not check for the first one and last one*/ || OriginalChangeVersion.TickCount == ChangeVersion.TickCount, null, true, ReferenceType.Type,
        "FSVCA", "OriginalChangeVersion.TickCount", "VECTOR_CHANGE_SET_ENTRY", ChangeVersion.TickCount, OriginalChangeVersion.TickCount);
    uint WorkEstimate where ValidationCheckValue((SyncChangeFlags == 0x10000 || SyncChangeFlags == 0x20000) /* not check for the first one and last one*/ || value == 1,
        null, false, ReferenceType.Type, "FSVCA", "WorkEstimate", "VECTOR_CHANGE_SET_ENTRY", 1, value);
    ushort Reserved1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved1", "VECTOR_CHANGE_SET_ENTRY", value);
    LearnKnowledgeProjectedEnum IsLearnKnowledgeProjected where ValidationCheckEnumValue(InRange<LearnKnowledgeProjectedEnum>(value), null, true, ReferenceType.Type,
        "FSVCA", "IsLearnKnowledgeProjected", "VECTOR_CHANGE_SET_ENTRY", "0, 1", value);
    uint Reserved2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved2", "VECTOR_CHANGE_SET_ENTRY", value);
    uint Reserved3 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved3", "VECTOR_CHANGE_SET_ENTRY", value);
    uint Reserved4 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved4", "VECTOR_CHANGE_SET_ENTRY", value);
    uint Reserved5 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved5", "VECTOR_CHANGE_SET_ENTRY", value);
    byte Reserved6 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "FSVCA", "Reserved6", "VECTOR_CHANGE_SET_ENTRY", value);
}

pattern SyncChangeFlags = enum uint
{
    $"File Item" = 0x00000000,
    $"Deleted item" = 0x00000001,
    $"Beginning of a range of changes" = 0x00010000,
    $"End of a range of changes" = 0x00020000,
    ...
};

pattern LearnKnowledgeProjectedEnum = enum byte
{
    $"Regular sync session" = 0,
    $"Change batch during a full enumeration sync session" = 1,
    ...
};


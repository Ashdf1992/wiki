protocol RSMC with 
XmlEncodingDefaults{Namespace = MultiPointNamespace},
Documentation
{
    DocumentName = "MS-RSMC",
    ProtocolName = "Remote Session Monitoring and Control Protocol",
    ShortName = "RSMC"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RSMC", Version = "4.0", Date = "06/01/2017", ProgramName = ProgramName.MCPP},
        ]
};
using Technologies.WSDL;
using Technologies.SOAP;
using SOAP;
using Utility;
using Standard;
using X509;

contract IMultiPointCertificateRequest
{
    accepts operation GetProtocolVersion
    {
        in GetProtocolVersionType GetProtocolVersion;
        
        out GetProtocolVersionResponseType GetProtocolVersionResponse;

        override string ToString()
        {
            return "GetProtocolVersion, " + GetProtocolVersionResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCertificateRequest/GetProtocolVersion",
              ReplyAction = RMAction + "/IMultiPointCertificateRequest/GetProtocolVersionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RequestSslCertificate
    {
        in RequestSslCertificateRequestBody RequestSslCertificate;
        
        out RequestSslCertificateResponseBody RequestSslCertificateResponse;

        override string ToString()
        {
            return "RequestSslCertificate, " + RequestSslCertificateResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCertificateRequest/RequestSslCertificate",
              ReplyAction = RMAction + "/IMultiPointCertificateRequest/RequestSslCertificateResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointCertificateRequestEndpoint
    over SOAP.Server provides IMultiPointCertificateRequest
    with Technologies.WSDL.WsdlInfo{Name = "IMultiPointCertificateRequest",
                                    Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type GetProtocolVersionType
{
    override string ToString()
    {
        return "GetProtocolVersionType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetProtocolVersionResponseType
{
    GetProtocolVersionPProtocolVersion pProtocolVersion;
    override string ToString()
    {
        return "pProtocolVersion: " + 
            EnumToStringInSummary<GetProtocolVersionPProtocolVersion>(pProtocolVersion);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetProtocolVersionPProtocolVersion = enum uint
{
    $"initial version" = 0,
    ...
};

type WmsFaultType
{
    uint hr with Standard.XmlEncoding{Kind = XmlKind.Text};
    override string ToString()
    {
        return "hr: " + hr.ToString();
    }
};

type RequestSslCertificateRequestBody
{
    override string ToString()
    {
        return "RequestSslCertificateRequestBody";
    }
};

type RequestSslCertificateResponseBody
{
    uint pSslPort;
    
    string pwsSslCertificateThumbprint;
    
    X509.Certificate ppSslCertificate
        with Standard.XmlEncoding{Namespace = MultiPointNamespace,
                                  ArrayItemNamespace = MultiPointNamespace,
                                  IsWrapped = true,
                                  ArrayItemName = "prgData"}, 
        Encoding{Decoder = Asn1BerDecoder<X509.Certificate>, SourcePattern = TypeOf<array<byte>>()};

    override string ToString()
    {
        string summary = "pSslPort: " + pSslPort.ToString();
        if (pwsSslCertificateThumbprint.Count > 0)
        {
            summary += ", pwsSslCertificateThumbprint: " + pwsSslCertificateThumbprint;
        }
        return summary;
    }
};

contract IMultiPointCredentialRequest
{
    accepts operation SetSslCertificate
    {
        in SetSslCertificateRequestBody SetSslCertificate;
        
        out SetSslCertificateResponseBody SetSslCertificateResponse;

        override string ToString()
        {
            return "SetSslCertificate, " + SetSslCertificate.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCredentialRequest/SetSslCertificate",
              ReplyAction = RMAction + "/IMultiPointCredentialRequest/SetSslCertificateResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RequestWmsControlCredentials
    {
        in RequestWmsControlCredentialsRequestBody RequestWmsControlCredentials;
        
        out RequestWmsControlCredentialsResponseBody
                RequestWmsControlCredentialsResponse;

        override string ToString()
        {
            string summary = "RequestWmsControlCredentials";
            if (RequestWmsControlCredentialsResponse != null && RequestWmsControlCredentialsResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCredentialRequest/RequestWmsControlCredentials",
              ReplyAction = RMAction + "/IMultiPointCredentialRequest/RequestWmsControlCredentialsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointCredentialRequestEndpoint
    over SOAP.Server provides IMultiPointCredentialRequest
    with Technologies.WSDL.WsdlInfo{Name = "IMultiPointCredentialRequest",
                                    Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type SetSslCertificateRequestBody
{
    string wsHostName;
    
    uint SslPort;
    
    string wsSslCertificateThumbprint;
    
    X509.Certificate pSslCertificate
        with Standard.XmlEncoding{Namespace = MultiPointNamespace,
                                  ArrayItemNamespace = MultiPointNamespace,
                                  IsWrapped = true,
                                  ArrayItemName = "prgData"}, 
        Encoding{Decoder = Asn1BerDecoder<X509.Certificate>, SourcePattern = TypeOf<array<byte>>()};

    override string ToString()
    {
        string summary = "wsHostName: " + 
            wsHostName + ", SslPort: " + SslPort.ToString();
        if (wsSslCertificateThumbprint.Count > 0)
        {
            summary += ", wsSslCertificateThumbprint: " + wsSslCertificateThumbprint;
        }
        return summary;
    }
};

type SetSslCertificateResponseBody
{
    override string ToString()
    {
        return "SetSslCertificateResponseBody";
    }
};

type RequestWmsControlCredentialsRequestBody
{
    override string ToString()
    {
        return "RequestWmsControlCredentialsRequestBody";
    }
};

type RequestWmsControlCredentialsResponseBody
{
    string pwsWmsControlPassword;
    override string ToString()
    {
        string summary = EmptyString;
        if (pwsWmsControlPassword.Count > 0)
        {
            summary += "pwsWmsControlPassword: " + pwsWmsControlPassword;
        }
        return summary;
    }
};

contract IMultiPointSystemOnlineEventSink
{
    accepts operation OnManagedServerOfflineNotify
    {
        in OnManagedServerOfflineNotifyRequestBody OnManagedServerOfflineNotify;
        
        out OnManagedServerOfflineNotifyResponseBody
                OnManagedServerOfflineNotifyResponse;

        override string ToString()
        {
            string summary = "OnManagedServerOfflineNotify";
            if (OnManagedServerOfflineNotify.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSystemOnlineEventSink/OnManagedServerOfflineNotify",
              ReplyAction = RMAction + "/IMultiPointSystemOnlineEventSink/OnManagedServerOfflineNotify"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnManagedServerOnlineNotify
    {
        in OnManagedServerOnlineNotifyRequestBody OnManagedServerOnlineNotify;
        
        out OnManagedServerOnlineNotifyResponseBody
                OnManagedServerOnlineNotifyResponse;

        override string ToString()
        {
            string summary = "OnManagedServerOnlineNotify";
            if (OnManagedServerOnlineNotify.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSystemOnlineEventSink/OnManagedServerOnlineNotify",
              ReplyAction = RMAction + "/IMultiPointSystemOnlineEventSink/OnManagedServerOnlineNotify"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointSystemOnlineEventSinkEndpoint
    over SOAP.Server provides IMultiPointSystemOnlineEventSink
    with Technologies.WSDL.WsdlInfo{Name = "IMultiPointSystemOnlineEventSink",
                                    Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type OnManagedServerOfflineNotifyRequestBody
{
    string wsWmsSystemHostName;
    override string ToString()
    {
        string summary = EmptyString;
        if (wsWmsSystemHostName.Count > 0)
        {
            summary += "wsWmsSystemHostName: " + wsWmsSystemHostName;
        }
        return summary;
    }
};

type OnManagedServerOfflineNotifyResponseBody
{
    override string ToString()
    {
        return "OnManagedServerOfflineNotifyResponseBody";
    }
};

type OnManagedServerOnlineNotifyRequestBody
{
    string wsWmsSystemHostName;
    
    string wsWmsSystemIpAddress;

    override string ToString()
    {
        string summary = EmptyString;
        if (wsWmsSystemHostName.Count > 0)
        {
            summary += "wsWmsSystemHostName: " + wsWmsSystemHostName + ", ";
        }
        if (wsWmsSystemIpAddress.Count > 0)
        {
            summary += "wsWmsSystemIpAddress: " + wsWmsSystemIpAddress + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type OnManagedServerOnlineNotifyResponseBody
{
    override string ToString()
    {
        return "OnManagedServerOnlineNotifyResponseBody";
    }
};

contract IMultiPointServer
{
    accepts operation GetAllSessions
    {
        in GetAllSessionsRequestBody GetAllSessions;
        
        out GetAllSessionsResponseBody GetAllSessionsResponse;

        override string ToString()
        {
            return "GetAllSessions, " + GetAllSessionsResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetAllSessions",
              ReplyAction = RMAction + "/IMultiPointServer/GetAllSessionsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetClientVersion
    {
        in GetClientVersionRequestBody GetClientVersion;
        
        out GetClientVersionResponseBody GetClientVersionResponse;

        override string ToString()
        {
            string summary = "GetClientVersion";
            if (GetClientVersionResponse != null && GetClientVersionResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetClientVersion",
              ReplyAction = RMAction + "/IMultiPointServer/GetClientVersionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetPeerWmsServerList
    {
        in GetPeerWmsServerListRequestBody GetPeerWmsServerList;
        
        out GetPeerWmsServerListResponseBody GetPeerWmsServerListResponse;

        override string ToString()
        {
            string summary = "GetPeerWmsServerList";
            if (GetPeerWmsServerListResponse != null && GetPeerWmsServerListResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetPeerWmsServerList",
              ReplyAction = RMAction + "/IMultiPointServer/GetPeerWmsServerListResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetPeerWmsConnectorList
    {
        in GetPeerWmsConnectorListRequestBody GetPeerWmsConnectorList;
        
        out GetPeerWmsConnectorListResponseBody GetPeerWmsConnectorListResponse;

        override string ToString()
        {
            string summary = "GetPeerWmsConnectorList";
            if (GetPeerWmsConnectorListResponse != null && GetPeerWmsConnectorListResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetPeerWmsConnectorList",
              ReplyAction = RMAction + "/IMultiPointServer/GetPeerWmsConnectorListResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetServerVersion
    {
        in GetServerVersionRequestBody GetServerVersion;
        
        out GetServerVersionResponseBody GetServerVersionResponse;

        override string ToString()
        {
            string summary = "GetServerVersion";
            if (GetServerVersionResponse != null && GetServerVersionResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetServerVersion",
              ReplyAction = RMAction + "/IMultiPointServer/GetServerVersionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetSystemAlertStatus
    {
        in GetSystemAlertStatusType GetSystemAlertStatus;
        
        out GetSystemAlertStatusResponseType GetSystemAlertStatusResponse;

        override string ToString()
        {
            string summary = "GetSystemAlertStatus, " + GetSystemAlertStatus.ToString();
            if (GetSystemAlertStatusResponse != null && GetSystemAlertStatusResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetSystemAlertStatus",
              ReplyAction = RMAction + "/IMultiPointServer/GetSystemAlertStatusResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetSystemMode
    {
        in GetSystemModeType GetSystemMode;
        
        out GetSystemModeResponseType GetSystemModeResponse;

        override string ToString()
        {
            string summary = "GetSystemMode";
            if (GetSystemModeResponse != null && GetSystemModeResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetSystemMode",
              ReplyAction = RMAction + "/IMultiPointServer/GetSystemModeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetVirtualMachineIpAddress
    {
        in GetVirtualMachineIpAddressRequestBody GetVirtualMachineIpAddress;
        
        out GetVirtualMachineIpAddressResponseBody
                GetVirtualMachineIpAddressResponse;

        override string ToString()
        {
            string summary = "GetVirtualMachineIpAddress";
            if (GetVirtualMachineIpAddress.ToString() is str1:string && str1.Count > 0)
            {
                summary += ", " + str1;
            }
            if (GetVirtualMachineIpAddressResponse != null && GetVirtualMachineIpAddressResponse.ToString() is str2:string && str2.Count > 0)
            {
                summary += ", " + str2;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetVirtualMachineIpAddress",
              ReplyAction = RMAction + "/IMultiPointServer/GetVirtualMachineIpAddressResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Reboot
    {
        in RebootType Reboot;
        
        out RebootResponseType RebootResponse;

        override string ToString()
        {
            return "Reboot";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/Reboot",
              ReplyAction = RMAction + "/IMultiPointServer/RebootResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RegisterChatEventSink
    {
        in RegisterChatEventSinkRequestBody RegisterChatEventSink;
        
        out RegisterChatEventSinkResponseBody RegisterChatEventSinkResponse;

        override string ToString()
        {
            string summary = "RegisterChatEventSink, " + RegisterChatEventSink.ToString();
            if (RegisterChatEventSinkResponse != null && RegisterChatEventSinkResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/RegisterChatEventSink",
              ReplyAction = RMAction + "/IMultiPointServer/RegisterChatEventSinkResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RegisterCoreEventSink
    {
        in RegisterCoreEventSinkRequestBody RegisterCoreEventSink;
        
        out RegisterCoreEventSinkResponseBody RegisterCoreEventSinkResponse;

        override string ToString()
        {
            string summary = "RegisterCoreEventSink, " + RegisterCoreEventSink.ToString();
            if (RegisterCoreEventSinkResponse != null && RegisterCoreEventSinkResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/RegisterCoreEventSink",
              ReplyAction = RMAction + "/IMultiPointServer/RegisterCoreEventSinkResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Shutdown
    {
        in ShutdownType Shutdown;
        
        out ShutdownResponseType ShutdownResponse;

        override string ToString()
        {
            return "Shutdown";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/Shutdown",
              ReplyAction = RMAction + "/IMultiPointServer/ShutdownResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation UnregisterChatEventSink
    {
        in UnregisterChatEventSinkType UnregisterChatEventSink;
        
        out UnregisterChatEventSinkResponseType UnregisterChatEventSinkResponse;

        override string ToString()
        {
            return "UnregisterChatEventSink, " + UnregisterChatEventSink.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/UnregisterChatEventSink",
              ReplyAction = RMAction + "/IMultiPointServer/UnregisterChatEventSinkResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation UnregisterCoreEventSink
    {
        in UnregisterCoreEventSinkType UnregisterCoreEventSink;
        
        out UnregisterCoreEventSinkResponseType UnregisterCoreEventSinkResponse;

        override string ToString()
        {
            return "UnregisterCoreEventSink, " + UnregisterCoreEventSink.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/UnregisterCoreEventSink",
              ReplyAction = RMAction + "/IMultiPointServer/UnregisterCoreEventSinkResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation CanModifyWau
    {
        in CanModifyWauType CanModifyWau;
        
        out CanModifyWauResponseType CanModifyWauResponse;

        override string ToString()
        {
            return "CanModifyWau, " + CanModifyWauResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/CanModifyWau",
              ReplyAction = RMAction + "/IMultiPointServer/CanModifyWauResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableCeip
    {
        in EnableCeipType EnableCeip;
        
        out EnableCeipResponseType EnableCeipResponse;

        override string ToString()
        {
            return "EnableCeip, " + EnableCeip.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/EnableCeip",
              ReplyAction = RMAction + "/IMultiPointServer/EnableCeipResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableWau
    {
        in EnableWauType EnableWau;
        
        out EnableWauResponseType EnableWauResponse;

        override string ToString()
        {
            return "EnableWau, " + EnableWau.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/EnableWau",
              ReplyAction = RMAction + "/IMultiPointServer/EnableWauResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableWer
    {
        in EnableWerType EnableWer;
        
        out EnableWerResponseType EnableWerResponse;

        override string ToString()
        {
            return "EnableWer, " + EnableWer.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/EnableWer",
              ReplyAction = RMAction + "/IMultiPointServer/EnableWerResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetLicenseCount
    {
        in GetLicenseCountType GetLicenseCount;
        
        out GetLicenseCountResponseType GetLicenseCountResponse;

        override string ToString()
        {
            return "GetLicenseCount, " + GetLicenseCountResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetLicenseCount",
              ReplyAction = RMAction + "/IMultiPointServer/GetLicenseCountResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetManagedSystemsType
    {
        in GetManagedSystemsTypeType GetManagedSystemsType;
        
        out GetManagedSystemsTypeResponseType GetManagedSystemsTypeResponse;

        override string ToString()
        {
            return "GetManagedSystemsType, " + GetManagedSystemsTypeResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetManagedSystemsType",
              ReplyAction = RMAction + "/IMultiPointServer/GetManagedSystemsTypeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetNetJoinStatus
    {
        in GetNetJoinStatusRequestBody GetNetJoinStatus;
        
        out GetNetJoinStatusResponseBody GetNetJoinStatusResponse;

        override string ToString()
        {
            string summary = "GetNetJoinStatus, " + GetNetJoinStatusResponse.ToString();
            if (GetNetJoinStatusResponse != null && GetNetJoinStatusResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetNetJoinStatus",
              ReplyAction = RMAction + "/IMultiPointServer/GetNetJoinStatusResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetVirtualMachineHostname
    {
        in GetVirtualMachineHostnameRequestBody GetVirtualMachineHostname;
        
        out GetVirtualMachineHostnameResponseBody
                GetVirtualMachineHostnameResponse;

        override string ToString()
        {
            string summary = "GetVirtualMachineHostname";
            if (GetVirtualMachineHostnameResponse != null && GetVirtualMachineHostnameResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetVirtualMachineHostname",
              ReplyAction = RMAction + "/IMultiPointServer/GetVirtualMachineHostnameResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetWmsWebLimiting
    {
        in GetWmsWebLimitingRequestBody GetWmsWebLimiting;
        
        out GetWmsWebLimitingResponseBody GetWmsWebLimitingResponse;

        override string ToString()
        {
            return "GetWmsWebLimiting, " + GetWmsWebLimitingResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/GetWmsWebLimiting",
              ReplyAction = RMAction + "/IMultiPointServer/GetWmsWebLimitingResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsBootToConsoleMode
    {
        in IsBootToConsoleModeType IsBootToConsoleMode;
        
        out IsBootToConsoleModeResponseType IsBootToConsoleModeResponse;

        override string ToString()
        {
            return "IsBootToConsoleMode, " + IsBootToConsoleModeResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsBootToConsoleMode",
              ReplyAction = RMAction + "/IMultiPointServer/IsBootToConsoleModeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsCeipEnabled
    {
        in IsCeipEnabledType IsCeipEnabled;
        
        out IsCeipEnabledResponseType IsCeipEnabledResponse;

        override string ToString()
        {
            return "IsCeipEnabled, " + IsCeipEnabledResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsCeipEnabled",
              ReplyAction = RMAction + "/IMultiPointServer/IsCeipEnabledResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsDesktopMonitoringAllowed
    {
        in IsDesktopMonitoringAllowedType IsDesktopMonitoringAllowed;
        
        out IsDesktopMonitoringAllowedResponseType IsDesktopMonitoringAllowedResponse;

        override string ToString()
        {
            return "IsDesktopMonitoringAllowed, " + IsDesktopMonitoringAllowedResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsDesktopMonitoringAllowed",
              ReplyAction = RMAction + "/IMultiPointServer/IsDesktopMonitoringAllowedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsHypervisorPresent
    {
        in IsHypervisorPresentType IsHypervisorPresent;
        
        out IsHypervisorPresentResponseType IsHypervisorPresentResponse;

        override string ToString()
        {
            return "IsHypervisorPresent, " + IsHypervisorPresentResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsHypervisorPresent",
              ReplyAction = RMAction + "/IMultiPointServer/IsHypervisorPresentResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsSingleSessionPerUser
    {
        in IsSingleSessionPerUserType IsSingleSessionPerUser;
        
        out IsSingleSessionPerUserResponseType IsSingleSessionPerUserResponse;

        override string ToString()
        {
            return "IsSingleSessionPerUser, " + IsSingleSessionPerUserResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsSingleSessionPerUser",
              ReplyAction = RMAction + "/IMultiPointServer/IsSingleSessionPerUserResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsSuppressPrivacyNotificationSet
    {
        in IsSuppressPrivacyNotificationSetType IsSuppressPrivacyNotificationSet;
        
        out IsSuppressPrivacyNotificationSetResponseType IsSuppressPrivacyNotificationSetResponse;

        override string ToString()
        {
            return "IsSuppressPrivacyNotificationSet, " + IsSuppressPrivacyNotificationSetResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsSuppressPrivacyNotificationSet",
              ReplyAction = RMAction + "/IMultiPointServer/IsSuppressPrivacyNotificationSetResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsVirtualIpPerSessionEnabled
    {
        in IsVirtualIpPerSessionEnabledType IsVirtualIpPerSessionEnabled;
        
        out IsVirtualIpPerSessionEnabledResponseType IsVirtualIpPerSessionEnabledResponse;

        override string ToString()
        {
            return "IsVirtualIpPerSessionEnabled, " + IsVirtualIpPerSessionEnabledResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsVirtualIpPerSessionEnabled",
              ReplyAction = RMAction + "/IMultiPointServer/IsVirtualIpPerSessionEnabledResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsWauEnabled
    {
        in IsWauEnabledType IsWauEnabled;
        
        out IsWauEnabledResponseType IsWauEnabledResponse;

        override string ToString()
        {
            return "IsWauEnabled, " + IsWauEnabledResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsWauEnabled",
              ReplyAction = RMAction + "/IMultiPointServer/IsWauEnabledResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsWerEnabled
    {
        in IsWerEnabledType IsWerEnabled;
        
        out IsWerEnabledResponseType IsWerEnabledResponse;

        override string ToString()
        {
            return "IsWerEnabled, " + IsWerEnabledResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/IsWerEnabled",
              ReplyAction = RMAction + "/IMultiPointServer/IsWerEnabledResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation LoadWindowsEdition
    {
        in LoadWindowsEditionRequestBody LoadWindowsEdition;
        
        out LoadWindowsEditionResponseBody LoadWindowsEditionResponse;

        override string ToString()
        {
            string summary = "LoadWindowsEdition";
            if (LoadWindowsEditionResponse != null && LoadWindowsEditionResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/LoadWindowsEdition",
              ReplyAction = RMAction + "/IMultiPointServer/LoadWindowsEditionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetBlockAllMessage
    {
        in SetBlockAllMessageType SetBlockAllMessage;
        
        out SetBlockAllMessageResponseType SetBlockAllMessageResponse;

        override string ToString()
        {
            return "SetBlockAllMessage";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/SetBlockAllMessage",
              ReplyAction = RMAction + "/IMultiPointServer/SetBlockAllMessageResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetBootToConsoleMode
    {
        in SetBootToConsoleModeType SetBootToConsoleMode;
        
        out SetBootToConsoleModeResponseType SetBootToConsoleModeResponse;

        override string ToString()
        {
            return "SetBootToConsoleMode, " + SetBootToConsoleMode.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/SetBootToConsoleMode",
              ReplyAction = RMAction + "/IMultiPointServer/SetBootToConsoleModeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetSuppressPrivacyNotification
    {
        in SetSuppressPrivacyNotificationType SetSuppressPrivacyNotification;
        
        out SetSuppressPrivacyNotificationResponseType SetSuppressPrivacyNotificationResponse;

        override string ToString()
        {
            return "SetSuppressPrivacyNotification, " + SetSuppressPrivacyNotification.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/SetSuppressPrivacyNotification",
              ReplyAction = RMAction + "/IMultiPointServer/SetSuppressPrivacyNotificationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ValidateAutoLogonAccount
    {
        in ValidateAutoLogonAccountRequestBody ValidateAutoLogonAccount;
        
        out ValidateAutoLogonAccountResponseBody
                ValidateAutoLogonAccountResponse;

        override string ToString()
        {
            return "ValidateAutoLogonAccount, " + ValidateAutoLogonAccount.ToString() + 
                ", " + ValidateAutoLogonAccountResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/ValidateAutoLogonAccount",
              ReplyAction = RMAction + "/IMultiPointServer/ValidateAutoLogonAccountResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableVirtualIpPerSession
    {
        in EnableVirtualIpPerSessionType EnableVirtualIpPerSession;
        
        out EnableVirtualIpPerSessionResponseType EnableVirtualIpPerSessionResponse;

        override string ToString()
        {
            return "EnableVirtualIpPerSession, " + EnableVirtualIpPerSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/EnableVirtualIpPerSession",
              ReplyAction = RMAction + "/IMultiPointServer/EnableVirtualIpPerSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetDesktopMonitoring
    {
        in SetDesktopMonitoringType SetDesktopMonitoring;
        
        out SetDesktopMonitoringResponseType SetDesktopMonitoringResponse;

        override string ToString()
        {
            return "SetDesktopMonitoring, " + SetDesktopMonitoring.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/SetDesktopMonitoring",
              ReplyAction = RMAction + "/IMultiPointServer/SetDesktopMonitoringResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetSingleSessionPerUser
    {
        in SetSingleSessionPerUserType SetSingleSessionPerUser;
        
        out SetSingleSessionPerUserResponseType SetSingleSessionPerUserResponse;

        override string ToString()
        {
            return "SetSingleSessionPerUser, " + SetSingleSessionPerUser.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointServer/SetSingleSessionPerUser",
              ReplyAction = RMAction + "/IMultiPointServer/SetSingleSessionPerUserResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointServerEndpoint over SOAP.Server provides IMultiPointServer
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointServer", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type GetAllSessionsRequestBody
{
    override string ToString()
    {
        return "GetAllSessionsRequestBody";
    }
};

type GetAllSessionsResponseBody
{
    int pcSessionInfo;
    
    array<WMS_SESSION_INFO_WS> pprgWmsSessionInfoWs
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgWmsSessionInfoWs"};

    override string ToString()
    {
        string summary = "pcSessionInfo: " + 
            pcSessionInfo.ToString();
        if (pprgWmsSessionInfoWs.Count > 0)
        {
            int i = 0;
            summary += ", pprgWmsSessionInfoWs: [";
            foreach (WMS_SESSION_INFO_WS info in pprgWmsSessionInfoWs)
            {
                if (i > 3)
                {
                    summary += "...";
                    break;
                }
                if (i > 0)
                {
                    summary += ", ";
                }
                summary += info.id.ToString();
                i++;
            }
            summary += "]";
        }
        return summary;
    }
};

type WMS_SESSION_INFO_WS
{
    ulong id;
    uint state;
    string wsUserName;
    string wsDomain;
    string wsWinStation;
    bool fIsRail;

    override string ToString()
    {
        return "id : " + id.ToString() + ", state: " + state.ToString() + 
            ", wsUserName: " + wsUserName + ", wsDomain: " + wsDomain +
            ", wsWinStation: " + wsWinStation;
    }
};

type GetClientVersionRequestBody
{
    override string ToString()
    {
        return "GetClientVersionRequestBody";
    }
};

type GetClientVersionResponseBody
{
    optional string pwsVersion;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsVersion is version:string && version.Count > 0)
        {
            summary += "pwsVersion: " + version;
        }
        return summary;
    }
};

type GetPeerWmsServerListRequestBody
{
    override string ToString()
    {
        return "GetPeerWmsServerListRequestBody";
    }
};

type GetPeerWmsServerListResponseBody
{
    optional array<string> prgwsIpAddressList
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgData"};
    
    optional array<string> prgwsServerList
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgData"};

    override string ToString()
    {
        string summary = EmptyString;
        if (prgwsServerList is arr:array<string> && DisplayThreeItems(arr) is str1:string && str1.Count > 0)
        {
            summary += "prgwsServerList: " + str1;
        }
        return summary;
    }
};

type GetPeerWmsConnectorListRequestBody
{
    override string ToString()
    {
        return "GetPeerWmsConnectorListRequestBody";
    }
};

type GetPeerWmsConnectorListResponseBody
{
    optional array<string> prgwsIpAddressList
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgData"};
    
    optional array<string> prgwsConnectorList
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgData"};

    override string ToString()
    {
        string summary = EmptyString;
        if (prgwsIpAddressList is ipAddrArr:array<string> && DisplayThreeItems(ipAddrArr) is str1:string && str1.Count > 0)
        {
            summary += "prgwsIpAddressList: " + str1 + ", ";
        }
        if (prgwsConnectorList is arr:array<string> && DisplayThreeItems(arr) is str2:string && str2.Count > 0)
        {
            summary += "prgwsConnectorList: " + str2 + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type GetServerVersionRequestBody
{
    override string ToString()
    {
        return "GetServerVersionRequestBody";
    }
};

type GetServerVersionResponseBody
{
    optional string pwsVersion;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsVersion is version:string && version.Count > 0)
        {
            summary += "pwsVersion: " + version;
        }
        return summary;
    }
};

type GetSystemAlertStatusType
{
    GetSystemAlertStatusEType eType;

    override string ToString()
    {
        return "eType: " + 
            EnumToStringInSummary<GetSystemAlertStatusEType>(eType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetSystemAlertStatusEType = enum uint
{
    $"Standard Vga Adapter Only" = 0,
    $"No potential station hubs" = 1,
    $"Safe mode" = 2,
    $"Keyboard or mouse on root hub" = 3,
    $"Monitors without potential station hubs" = 4,
    $"Disk protection first threshold crossed" = 5,
    $"Disk protection second threshold crossed" = 6,
    ...
};

type GetSystemAlertStatusResponseType
{
    optional GetSystemAlertStatusResponsePeSeverity peSeverity;
    
    optional GetSystemAlertStatusResponsePeStatus peStatus;

    override string ToString()
    {
        string summary = EmptyString;
        if (peSeverity is serverity:GetSystemAlertStatusResponsePeSeverity)
        {
            summary += "peSeverity: " + 
                EnumToStringInSummary<GetSystemAlertStatusResponsePeSeverity>(serverity) + ", ";
        }
        if (peStatus is status:GetSystemAlertStatusResponsePeStatus)
        {
            summary += "peStatus: " + 
                EnumToStringInSummary<GetSystemAlertStatusResponsePeStatus>(status) + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetSystemAlertStatusResponsePeSeverity = enum uint
{
    unknown = 0,
    yellow = 1,
    red = 2,
    fatal = 3,
    ...
};

pattern GetSystemAlertStatusResponsePeStatus = enum uint
{
    cleared = 0,
    $"set" = 1,
    $"no change" = 2,
    ...
};

type GetSystemModeType
{
    override string ToString()
    {
        return "GetSystemModeType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetSystemModeResponseType
{
    optional GetSystemModeResponsePeType peType;

    override string ToString()
    {
        string summary = EmptyString;
        if (peType is petype:GetSystemModeResponsePeType)
        {
            summary += "peType: " + 
                EnumToStringInSummary<GetSystemModeResponsePeType>(petype);
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetSystemModeResponsePeType = enum uint
{
    MultiStation = 0,
    $"Maintenance/console" = 1,
    ...
};

type GetVirtualMachineIpAddressRequestBody
{
    string bstrVirtualMachineHostName;

    override string ToString()
    {
        string summary = EmptyString;
        if (bstrVirtualMachineHostName.Count > 0)
        {
            summary += "bstrVirtualMachineHostName: " + bstrVirtualMachineHostName;
        }
        return summary;
    }
};

type GetVirtualMachineIpAddressResponseBody
{
    optional string pbstrVirtualMachineIpAddress;

    override string ToString()
    {
        string summary = EmptyString;
        if (pbstrVirtualMachineIpAddress is ipAddr:string && ipAddr.Count > 0)
        {
            summary += "pbstrVirtualMachineIpAddress: " + ipAddr;
        }
        return summary;
    }
};

type RebootType
{
    override string ToString()
    {
        return "RebootType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RebootResponseType
{
    override string ToString()
    {
        return "RebootResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RegisterChatEventSinkRequestBody
{
    string bstrUriSinkEndpoint;

    string bstrServerName;

    uint idSession;
    
    string bstrTeacherName;

    override string ToString()
    {
        return "bstrUriSinkEndpoint: " + bstrUriSinkEndpoint;
    }
};

type RegisterChatEventSinkResponseBody
{
    optional ulong pullCookie;

    override string ToString()
    {
        string summary = EmptyString;
        if (pullCookie is cookie:ulong)
        {
            summary += "pullCookie: " + cookie.ToString();
        }
        return summary;
    }
};

type RegisterCoreEventSinkRequestBody
{
    string bstrUriSinkEndpoint;

    override string ToString()
    {
        return "bstrUriSinkEndpoint: " + 
            bstrUriSinkEndpoint;
    }
};

type RegisterCoreEventSinkResponseBody
{
    optional ulong pullCookie;

    override string ToString()
    {
        string summary = EmptyString;
        if (pullCookie is cookie:ulong)
        {
            summary += "pullCookie: " + cookie.ToString();
        }
        return summary;
    }
};

type ShutdownType
{
    override string ToString()
    {
        return "ShutdownType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ShutdownResponseType
{
    override string ToString()
    {
        return "ShutdownResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type UnregisterChatEventSinkType
{
    ulong ullCookie;

    override string ToString()
    {
        return "ullCookie: " + 
            ullCookie.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type UnregisterChatEventSinkResponseType
{
    override string ToString()
    {
        return "UnregisterChatEventSinkResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type UnregisterCoreEventSinkType
{
    ulong ullCookie;

    override string ToString()
    {
        return "ullCookie:" + 
            ullCookie.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type UnregisterCoreEventSinkResponseType
{
    override string ToString()
    {
        return "UnregisterCoreEventSinkResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type CanModifyWauType
{
    override string ToString()
    {
        return "CanModifyWauType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type CanModifyWauResponseType
{
    bool pfCanModifyWau;

    override string ToString()
    {
        return "pfCanModifyWau:" + pfCanModifyWau.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableCeipType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableCeipResponseType
{
    override string ToString()
    {
        return "EnableCeipResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableWauType
{
    EnableWauEWauSetting eWauSetting;

    override string ToString()
    {
        return "eWauSetting: " + 
            EnumToStringInSummary<EnableWauEWauSetting>(eWauSetting);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern EnableWauEWauSetting = enum uint
{
    Disabled = 0,
    $"Important Only" = 1,
    Recommended = 2,
    ...
};

type EnableWauResponseType
{
    override string ToString()
    {
        return "EnableWauResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableWerType
{
    bool fEnable;

    override string ToString()
    {
        return "fEnable: " + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableWerResponseType
{
    override string ToString()
    {
        return "EnableWerResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetLicenseCountType
{
    override string ToString()
    {
        return "GetLicenseCountType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetLicenseCountResponseType
{
    uint pcLicenses;

    override string ToString()
    {
        return "pcLicenses: " + DecToHexFormat(pcLicenses);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetManagedSystemsTypeType
{
    override string ToString()
    {
        return "GetManagedSystemsTypeType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetManagedSystemsTypeResponseType
{
    GetManagedSystemsTypeResponsePEWmsRemoteManagementHostType pEWmsRemoteManagementHostType;

    override string ToString()
    {
        return "pEWmsRemoteManagementHostType: " + 
            EnumToStringInSummary<GetManagedSystemsTypeResponsePEWmsRemoteManagementHostType>(pEWmsRemoteManagementHostType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetManagedSystemsTypeResponsePEWmsRemoteManagementHostType = enum uint
{
    $"MultiPoint Server" = 2,
    $"Personal Computer" = 3,
    ...
};

type GetNetJoinStatusRequestBody
{
    override string ToString()
    {
        return "GetNetJoinStatusRequestBody";
    }
};

type GetNetJoinStatusResponseBody
{
    GetNetJoinStatusResponseBodyPeNetJoinStatus peNetJoinStatus;
    
    string pwsDomainName;

    override string ToString()
    {
        string summary = "peNetJoinStatus: " + 
            EnumToStringInSummary<GetNetJoinStatusResponseBodyPeNetJoinStatus>(peNetJoinStatus);
        if (pwsDomainName.Count > 0)
        {
            summary += ", pwsDomainName: " + pwsDomainName;
        }
        return summary;
    }
};

pattern GetNetJoinStatusResponseBodyPeNetJoinStatus = enum uint
{
    Unknown = 0,
    unjoined = 1,
    workgroup = 2,
    domain = 3,
    ...
};

type GetVirtualMachineHostnameRequestBody
{
    override string ToString()
    {
        return "GetVirtualMachineHostnameRequestBody";
    }
};

type GetVirtualMachineHostnameResponseBody
{
    string pwsVirtualMachineHostname;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsVirtualMachineHostname.Count > 0)
        {
            summary += "pwsVirtualMachineHostname: " + pwsVirtualMachineHostname;
        }
        return summary;
    }
};

type GetWmsWebLimitingRequestBody
{
    override string ToString()
    {
        return "GetWmsWebLimitingRequestBody";
    }
};

type GetWmsWebLimitingResponseBody
{
    bool pfIsInLimiting;

    bool pfIsAllowList;
    
    string pwsAllowList;
    
    string pwsBlockList;

    override string ToString()
    {
        return "pfIsInLimiting: " + 
            pfIsInLimiting.ToString() + 
            ", pfIsAllowList: " + pfIsAllowList.ToString();
    }
};

type IsBootToConsoleModeType
{
    override string ToString()
    {
        return "IsBootToConsoleModeType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsBootToConsoleModeResponseType
{
    bool pfBootToConsoleMode;

    override string ToString()
    {
        return "pfBootToConsoleMode: " + 
            pfBootToConsoleMode.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsCeipEnabledType
{
    override string ToString()
    {
        return "IsCeipEnabledType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsCeipEnabledResponseType
{
    bool pfEnabled;

    override string ToString()
    {
        return "pfEnabled: " + 
            pfEnabled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsDesktopMonitoringAllowedType
{
    override string ToString()
    {
        return "IsDesktopMonitoringAllowedType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsDesktopMonitoringAllowedResponseType
{
    bool pfDesktopMonitoringAllowed;

    override string ToString()
    {
        return "pfDesktopMonitoringAllowed: " + 
            pfDesktopMonitoringAllowed.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsHypervisorPresentType
{
    override string ToString()
    {
        return "IsHypervisorPresentType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsHypervisorPresentResponseType
{
    bool pfHypervisorPresent;
    override string ToString()
    {
        return "pfHypervisorPresent: " + 
            pfHypervisorPresent.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsSingleSessionPerUserType
{
    override string ToString()
    {
        return "IsSingleSessionPerUserType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsSingleSessionPerUserResponseType
{
    bool pfSingleSessionPerUser;

    override string ToString()
    {
        return "pfSingleSessionPerUser: " + 
            pfSingleSessionPerUser.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsSuppressPrivacyNotificationSetType
{
    override string ToString()
    {
        return "IsSuppressPrivacyNotificationSetType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsSuppressPrivacyNotificationSetResponseType
{
    bool pfSuppressPrivacyNotificationSet;

    override string ToString()
    {
        return "pfSuppressPrivacyNotificationSet: " + 
            pfSuppressPrivacyNotificationSet.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsVirtualIpPerSessionEnabledType
{
    override string ToString()
    {
        return "IsVirtualIpPerSessionEnabledType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsVirtualIpPerSessionEnabledResponseType
{
    bool pfEnabled;

    override string ToString()
    {
        return "pfEnabled: " + 
            pfEnabled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsWauEnabledType
{
    override string ToString()
    {
        return "IsWauEnabledType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsWauEnabledResponseType
{
    IsWauEnabledResponsePeWauSetting peWauSetting;

    override string ToString()
    {
        return "peWauSetting: " + 
            EnumToStringInSummary<IsWauEnabledResponsePeWauSetting>(peWauSetting);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern IsWauEnabledResponsePeWauSetting = enum uint
{
    Disabled = 0,
    $"Important Only" = 1,
    Recommended = 2,
    ...
};

type IsWerEnabledType
{
    override string ToString()
    {
        return "IsWerEnabledType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsWerEnabledResponseType
{
    bool pfEnabled;

    override string ToString()
    {
        return "pfEnabled: " + 
            pfEnabled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type LoadWindowsEditionRequestBody
{
    override string ToString()
    {
        return "LoadWindowsEditionRequestBody";
    }
};

type LoadWindowsEditionResponseBody
{
    string pwsWindowsEdition;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsWindowsEdition.Count > 0)
        {
            summary += "pwsWindowsEdition: " + pwsWindowsEdition;
        }
        return summary;
    }
};

type SetBlockAllMessageType
{
    string wsMessage;

    override string ToString()
    {
        return "SetBlockAllMessageType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetBlockAllMessageResponseType
{
    override string ToString()
    {
        return "SetBlockAllMessageResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetBootToConsoleModeType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetBootToConsoleModeResponseType
{
    override string ToString()
    {
        return "SetBootToConsoleModeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetSuppressPrivacyNotificationType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetSuppressPrivacyNotificationResponseType
{
    override string ToString()
    {
        return "SetSuppressPrivacyNotificationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ValidateAutoLogonAccountRequestBody
{
    string wsDomain;
    
    string wsUserName;

    string wsPassword;

    override string ToString()
    {
        return "wsDomain:" + wsDomain + 
            ", wsUserName:" + wsUserName + ", wsPassword: " + wsPassword;
    }
};

type ValidateAutoLogonAccountResponseBody
{
    ValidateAutoLogonAccountResponseBodyEAccountStatus eAccountStatus;

    override string ToString()
    {
        return "eAccountStatus: " + 
            EnumToStringInSummary<ValidateAutoLogonAccountResponseBodyEAccountStatus>(eAccountStatus);
    }
};

pattern ValidateAutoLogonAccountResponseBodyEAccountStatus = enum uint
{
    ALAS_Valid = 0,
    ALAS_NotValid = 1,
    ALAS_admin = 2,
    ...
};

type EnableVirtualIpPerSessionType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableVirtualIpPerSessionResponseType
{
    override string ToString()
    {
        return "EnableVirtualIpPerSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetDesktopMonitoringType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetDesktopMonitoringResponseType
{
    override string ToString()
    {
        return "SetDesktopMonitoringResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetSingleSessionPerUserType
{
    bool fEnable;
    override string ToString()
    {
        return "fEnable:" + 
            fEnable.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetSingleSessionPerUserResponseType
{
    override string ToString()
    {
        return "SetSingleSessionPerUserResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

contract IMultiPointUserManager
{
    accepts operation AddUser
    {
        in AddUserRequestBody AddUser;
        
        out AddUserResponseBody AddUserResponse;

        override string ToString()
        {
            string summary = "AddUser";
            if (AddUser.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointUserManager/AddUser",
              ReplyAction = RMAction + "/IMultiPointUserManager/AddUserResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnumerateUsers
    {
        in EnumerateUsersRequestBody EnumerateUsers;
        
        out EnumerateUsersResponseBody EnumerateUsersResponse;

        override string ToString()
        {
            string summary = "EnumerateUsers";
            if (EnumerateUsersResponse != null && EnumerateUsersResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointUserManager/EnumerateUsers",
              ReplyAction = RMAction + "/IMultiPointUserManager/EnumerateUsersResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RemoveUser
    {
        in RemoveUserRequestBody RemoveUser;
        
        out RemoveUserResponseBody RemoveUserResponse;

        override string ToString()
        {
            string summary = "RemoveUser";
            if (RemoveUser.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointUserManager/RemoveUser",
              ReplyAction = RMAction + "/IMultiPointUserManager/RemoveUserResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetUserInfo
    {
        in SetUserInfoRequestBody SetUserInfo;
        
        out SetUserInfoResponseBody SetUserInfoResponse;

        override string ToString()
        {
            return "SetUserInfo, " + SetUserInfo.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointUserManager/SetUserInfo",
              ReplyAction = RMAction + "/IMultiPointUserManager/SetUserInfoResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointUserManagerEndpoint
    over SOAP.Server provides IMultiPointUserManager
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointUserManager", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type AddUserRequestBody
{
    string wsName;
    
    string wsPassword;
    
    AddUserRequestBodyEType eType;
    
    string wsFullName;
    
    string wsDescription;

    override string ToString()
    {
        string summary = EmptyString;
        if (wsName.Count > 0)
        {
            summary += "wsName: " + wsName + ", ";
        }
        if (wsPassword.Count > 0)
        {
            summary += "wsPassword: " + wsPassword + ", ";
        }
        summary += "eType: " + EnumToStringInSummary<AddUserRequestBodyEType>(eType) + ", ";
        if (wsFullName.Count > 0)
        {
            summary += "wsFullName: " + wsFullName + ", ";
        }
        if (wsDescription.Count > 0)
        {
            summary += "wsDescription: " + wsDescription + ", ";
        }
        return summary.Segment(0, summary.Count - 2);
    }
};

pattern AddUserRequestBodyEType = enum uint
{
    $"Administrator User" = 0,
    $"Standard User" = 1,
    $"MultiPoint Operaters group User" = 2,
    ...
};

type AddUserResponseBody
{
    override string ToString()
    {
        return "AddUserResponseBody";
    }
};

type EnumerateUsersRequestBody
{
    override string ToString()
    {
        return "EnumerateUsersRequestBody";
    }
};

type EnumerateUsersResponseBody
{
    array<WMS_USER_WS> pprgWmsUsersWs
        with Standard.XmlEncoding
                 {Namespace = MultiPointNamespace,
                  ArrayItemNamespace = MultiPointNamespace,
                  IsWrapped = true,
                  ArrayItemName = "prgWmsSessionInfoWs"};

    override string ToString()
    {
        string summary = EmptyString;
        int i = 0;
        foreach (WMS_USER_WS user in pprgWmsUsersWs)
        {
            summary += "Users " + i.ToString() + ": " + user.ToString() + ", ";
            i++;
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type WMS_USER_WS
{
    string wsName;
    
    string wsFullName;
    
    string wsDescription;
    
    WMS_USER_WS_UserType UserType;

    override string ToString()
    {
        return "wsName: " + wsName + ", UserType: " + 
            EnumToStringInSummary<WMS_USER_WS_UserType>(UserType);
    }
};

pattern WMS_USER_WS_UserType = enum uint
{
    $"Administrator User" = 0,
    $"Standard User" = 1,
    $"MultiPoint Operaters group User" = 2,
    ...
};

type RemoveUserRequestBody
{
    string wsName;
    override string ToString()
    {
        string summary = EmptyString;
        if (wsName.Count > 0)
        {
            summary += "wsName: " + wsName;
        }
        return summary;
    }
};

type RemoveUserResponseBody
{
    override string ToString()
    {
        return "RemoveUserResponseBody";
    }
};

type SetUserInfoRequestBody
{
    SetUserInfoRequestBodyPeType peType;
    
    string wsName;
    
    string wsFullName;
    
    string wsPassword;
    
    string wsDescription;

    override string ToString()
    {
        string summary = "peType: " + 
            EnumToStringInSummary<SetUserInfoRequestBodyPeType>(peType);
        if (wsName != null && wsName.Count > 0)
        {
            summary += ", wsName: " + wsName;
        }
        if (wsFullName != null && wsFullName.Count > 0)
        {
            summary += ", wsFullName: " + wsFullName;
        }
        if (wsPassword != null && wsPassword.Count > 0)
        {
            summary += ", wsPassword: " + wsPassword;
        }
        if (wsDescription != null && wsDescription.Count > 0)
        {
            summary += ", wsDescription: " + wsDescription;
        }
        return summary;
    }
};

pattern SetUserInfoRequestBodyPeType = enum uint
{
    $"Administrator User" = 0,
    $"Standard User" = 1,
    $"MultiPoint Operaters group User" = 2,
    ...
};

type SetUserInfoResponseBody
{
    override string ToString()
    {
        return "SetUserInfoResponseBody";
    }
};

contract IMultiPointStation
{
    accepts operation GetNextStationIdentifier
    {
        in GetNextStationIdentifierType GetNextStationIdentifier;
        
        out GetNextStationIdentifierResponseType GetNextStationIdentifierResponse;

        override string ToString()
        {
            return "GetNextStationIdentifier, " + GetNextStationIdentifier.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetNextStationIdentifier",
              ReplyAction = RMAction + "/IMultiPointStation/GetNextStationIdentifierResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationAlertStatus
    {
        in GetStationAlertStatusType GetStationAlertStatus;
        
        out GetStationAlertStatusResponseType GetStationAlertStatusResponse;

        override string ToString()
        {
            string summary = "GetStationAlertStatus, " + GetStationAlertStatus.ToString();
            if (GetStationAlertStatusResponse != null && GetStationAlertStatusResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationAlertStatus",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationAlertStatusResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationAutoLogonInformation
    {
        in GetStationAutoLogonInformationRequestBody
               GetStationAutoLogonInformation;
        
        out GetStationAutoLogonInformationResponseBody
                GetStationAutoLogonInformationResponse;

        override string ToString()
        {
            string summary = "GetStationAutoLogonInformation, " + GetStationAutoLogonInformation.ToString();
            if (GetStationAutoLogonInformationResponse != null && GetStationAutoLogonInformationResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationAutoLogonInformation",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationAutoLogonInformationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationDeviceInformation
    {
        in GetStationDeviceInformationType GetStationDeviceInformation;
        
        out GetStationDeviceInformationResponseType GetStationDeviceInformationResponse;

        override string ToString()
        {
            return "GetStationDeviceInformation, " + GetStationDeviceInformation.ToString() + 
                ", " + GetStationDeviceInformationResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationDeviceInformation",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationDeviceInformationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationFriendlyName
    {
        in GetStationFriendlyNameRequestBody GetStationFriendlyName;
        
        out GetStationFriendlyNameResponseBody GetStationFriendlyNameResponse;

        override string ToString()
        {
            string summary = "GetStationFriendlyName, " + GetStationFriendlyName.ToString();
            if (GetStationFriendlyNameResponse != null && GetStationFriendlyNameResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationFriendlyName",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationFriendlyNameResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationInformation
    {
        in GetStationInformationRequestBody GetStationInformation;
        
        out GetStationInformationResponseBody GetStationInformationResponse;

        override string ToString()
        {
            string summary = "GetStationInformation, " + GetStationInformation.ToString();
            if (GetStationInformationResponse != null && GetStationInformationResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationInformation",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationInformationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationServerName
    {
        in GetStationServerNameRequestBody GetStationServerName;
        
        out GetStationServerNameResponseBody GetStationServerNameResponse;

        override string ToString()
        {
            string summary = "GetStationServerName, " + GetStationServerName.ToString();
            if (GetStationServerNameResponse != null && GetStationServerNameResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationServerName",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationServerNameResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetStationSplitScreenInformation
    {
        in GetStationSplitScreenInformationType GetStationSplitScreenInformation;
        
        out GetStationSplitScreenInformationResponseType GetStationSplitScreenInformationResponse;
        override string ToString()
        {
            return "GetStationSplitScreenInformation, " + GetStationSplitScreenInformation.ToString() + 
                ", " + GetStationSplitScreenInformationResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/GetStationSplitScreenInformation",
              ReplyAction = RMAction + "/IMultiPointStation/GetStationSplitScreenInformationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IdentifyStation
    {
        in IdentifyStationRequestBody IdentifyStation;
        
        out IdentifyStationResponseBody IdentifyStationResponse;

        override string ToString()
        {
            return "IdentifyStation, " + IdentifyStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/IdentifyStation",
              ReplyAction = RMAction + "/IMultiPointStation/IdentifyStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RefreshStation
    {
        in RefreshStationType RefreshStation;
        
        out RefreshStationResponseType RefreshStationResponse;

        override string ToString()
        {
            return "RefreshStation, " + RefreshStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/RefreshStation",
              ReplyAction = RMAction + "/IMultiPointStation/RefreshStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RemapStations
    {
        in RemapStationsType RemapStations;
        
        out RemapStationsResponseType RemapStationsResponse;

        override string ToString()
        {
            return "RemapStations";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/RemapStations",
              ReplyAction = RMAction + "/IMultiPointStation/RemapStationsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetStationAutoLogon
    {
        in SetStationAutoLogonType SetStationAutoLogon;
        
        out SetStationAutoLogonResponseType SetStationAutoLogonResponse;
        override string ToString()
        {
            return "SetStationAutoLogon, " + SetStationAutoLogon.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/SetStationAutoLogon",
              ReplyAction = RMAction + "/IMultiPointStation/SetStationAutoLogonResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetStationFriendlyName
    {
        in SetStationFriendlyNameRequestBody SetStationFriendlyName;
        
        out SetStationFriendlyNameResponseBody SetStationFriendlyNameResponse;

        override string ToString()
        {
            return "SetStationFriendlyName, " + SetStationFriendlyName.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/SetStationFriendlyName",
              ReplyAction = RMAction + "/IMultiPointStation/SetStationFriendlyNameResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetStationServerName
    {
        in SetStationServerNameType SetStationServerName;
        
        out SetStationServerNameResponseType SetStationServerNameResponse;

        override string ToString()
        {
            return "SetStationServerNameType, " + SetStationServerName.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/SetStationServerName",
              ReplyAction = RMAction + "/IMultiPointStation/SetStationServerNameResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SplitStation
    {
        in SplitStationType SplitStation;
        
        out SplitStationResponseType SplitStationResponse;

        override string ToString()
        {
            return "SplitStation, " + SplitStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/SplitStation",
              ReplyAction = RMAction + "/IMultiPointStation/SplitStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation StopIdentifyingStation
    {
        in StopIdentifyingStationType StopIdentifyingStation;
        
        out StopIdentifyingStationResponseType StopIdentifyingStationResponse;

        override string ToString()
        {
            return "StopIdentifyingStation, " + StopIdentifyingStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointStation/StopIdentifyingStation",
              ReplyAction = RMAction + "/IMultiPointStation/StopIdentifyingStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointStationEndpoint over SOAP.Server provides IMultiPointStation
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointStation", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type GetNextStationIdentifierType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetNextStationIdentifierResponseType
{
    optional uint pidNextStation;

    override string ToString()
    {
        string summary = EmptyString;
        if (pidNextStation is nextStation:uint)
        {
            summary += "pEWmsRemoteManagementHostType: " + nextStation.ToString();
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetStationAlertStatusType
{
    uint idStation;
    
    GetStationAlertStatusEType eType;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eType: " + EnumToStringInSummary<GetStationAlertStatusEType>(eType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetStationAlertStatusEType = enum uint
{
    $"Hub missing required device" = 0,
    $"Auto logon credential failed" = 1,
    $"Wait for services timeout" = 2,
    $"Wait for connection timeout" = 3,
    ...
};

type GetStationAlertStatusResponseType
{
    optional GetStationAlertStatusResponsePeSeverity peSeverity;
    
    optional GetStationAlertStatusResponsePeStatus peStatus;

    override string ToString()
    {
        string summary = EmptyString;
        if (peSeverity is serverity:GetStationAlertStatusResponsePeSeverity)
        {
            summary += "peSeverity: " + 
                EnumToStringInSummary<GetStationAlertStatusResponsePeSeverity>(serverity) + ", ";
        }
        if (peStatus is status:GetStationAlertStatusResponsePeStatus)
        {
            summary += "peStatus: " + 
                EnumToStringInSummary<GetStationAlertStatusResponsePeStatus>(status) + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetStationAlertStatusResponsePeSeverity = enum uint
{
    Unknown = 0,
    $"Yellow alert" = 1,
    $"Red alert" = 2,
    $"Fatal alert" = 3,
    ...
};

pattern GetStationAlertStatusResponsePeStatus = enum uint
{
    $"alert cleared" = 0,
    $"alert set" = 1,
    $"no change" = 2,
    ...
};

type GetStationAutoLogonInformationRequestBody
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
};

type GetStationAutoLogonInformationResponseBody
{
    optional uint peConfiguration;
    
    optional string pbstrUserName;
    
    optional string pbstrDomain;

    override string ToString()
    {
        string summary = EmptyString;
        if (peConfiguration is configuration:uint)
        {
            summary += "peConfiguration: " + configuration.ToString() + ", ";
        }
        if (pbstrUserName is name:string && name.Count > 0)
        {
            summary += "pbstrUserName: " + name + ", ";
        }
        if (pbstrDomain is domain:string && domain.Count > 0)
        {
            summary += "pbstrDomain: " + domain + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(summary.Count - 2);
        }
        return summary;
    }
};

type GetStationDeviceInformationType
{
    uint idStation;
    
    GetStationDeviceInformationEType eType;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eType: " + EnumToStringInSummary<GetStationDeviceInformationEType>(eType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetStationDeviceInformationEType = enum uint
{
    Unknown = 0,
    Keyboard = 1,
    Mouse = 2,
    audio = 3,
    $"consumer control" = 4,
    volume = 5,
    image = 6,
    hid = 7,
    $"usb hub" = 8,
    $"usb root hub" = 9,
    $"usb composite hub" = 10,
    monitor = 11,
    $"disk drive" = 12,
    $"host controller" = 13,
    $"mass storage device" = 14,
    $"usb device" = 15,
    $"unfiltered keyboard" = 16,
    $"unfiltered mouse" = 17,
    $"unfiltered volume" = 18,
    $"unfiltered image" = 19,
    $"redirected usb" = 20,
    $"virtual gpu" = 21,
    $"touch screen" = 22,
    ...
};

type GetStationDeviceInformationResponseType
{
    optional uint pdwDeviceCount;
    override string ToString()
    {
        return "pdwDeviceCount: " + pdwDeviceCount.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetStationFriendlyNameRequestBody
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
};

type GetStationFriendlyNameResponseBody
{
    optional string pwsFriendlyName;
    override string ToString()
    {
        string summary = EmptyString;
        if (pwsFriendlyName is name:string && name.Count > 0)
        {
            summary += "pwsFriendlyName: " + name;
        }
        return summary;
    }
};

type GetStationInformationRequestBody
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
};

type GetStationInformationResponseBody
{
    optional uint pidSession;
    
    optional string pwsSessionHost;
    
    optional string pwsVirtualMachineId;
    
    optional uint peIdentifyStationState;
    
    optional GetStationInformationResponseBodyPeState peState;

    override string ToString()
    {
        string summary = EmptyString;
        if (pidSession is session:uint)
        {
            summary += "pidSession: " + session.ToString() + ", ";
        }
        if (pwsSessionHost is host:string && host.Count > 0)
        {
            summary += "pwsSessionHost: " + host + ", ";
        }
        if (pwsVirtualMachineId is vmId:string && vmId.Count > 0)
        {
            summary += "pwsVirtualMachineId: " + vmId + ", ";
        }
        if (peIdentifyStationState is stationState:uint)
        {
            summary += "peIdentifyStationState: " + stationState.ToString() + ", ";
        }
        if (peState is state:GetStationInformationResponseBodyPeState)
        {
            summary += "peState: " + 
                EnumToStringInSummary<GetStationInformationResponseBodyPeState>(state) + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

pattern GetStationInformationResponseBodyPeState = enum uint
{
    Invalid = 0,
    $"Not Present" = 1,
    Idle = 2,
    Connecting = 3,
    Active = 4,
    Blocked = 5,
    ...
};

type GetStationServerNameRequestBody
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
};

type GetStationServerNameResponseBody
{
    optional string pwsSeverName;
    
    optional string pwsVirtualMachineName;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsSeverName is serverName:string && serverName.Count > 0)
        {
            summary += "pwsSeverName: " + serverName + ", ";
        }
        if (pwsVirtualMachineName is vmName:string && vmName.Count > 0)
        {
            summary += "pwsVirtualMachineName: " + vmName + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type GetStationSplitScreenInformationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetStationSplitScreenInformationResponseType
{
    optional uint pidPrimaryStation;
    
    optional uint pidxSplitScreen;
    
    optional uint peSplitScreenState;

    override string ToString()
    {
        return "pidPrimaryStation: " + 
            pidPrimaryStation.ToString() + ", pidxSplitScreen: " + pidxSplitScreen.ToString() + 
            ", peSplitScreenState: " + peSplitScreenState.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IdentifyStationRequestBody
{
    uint idStation;
    
    string wsStationName;
    
    string wsStationHost;
    
    string wsSessionHost;
    
    IdentifyStationRequestBodyEAction eAction;

    override string ToString()
    {
        string summary = "idStation: " + 
            idStation.ToString();
        if (wsStationName.Count > 0)
        {
            summary += "wsStationName: " + wsStationName + ", ";
        }
        if (wsStationHost.Count > 0)
        {
            summary += "wsStationHost: " + wsStationHost + ", ";
        }
        if (wsSessionHost.Count > 0)
        {
            summary += "wsSessionHost: " + wsSessionHost + ", ";
        }
        summary += "eAction: " + 
            EnumToStringInSummary<IdentifyStationRequestBodyEAction>(eAction) + ", ";
        return summary.Segment(0, summary.Count - 2);
    }
};

pattern IdentifyStationRequestBodyEAction = enum uint
{
    $"update station information" = 0,
    $"display station identification on associated display" = 1,
    ...
};

type IdentifyStationResponseBody
{
    override string ToString()
    {
        return "IdentifyStationResponseBody";
    }
};

type RefreshStationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RefreshStationResponseType
{
    override string ToString()
    {
        return "RefreshStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RemapStationsType
{
    override string ToString()
    {
        return "RemapStationsType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RemapStationsResponseType
{
    override string ToString()
    {
        return "RemapStationsResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetStationAutoLogonType
{
    uint idStation;
    
    uint eConfiguration;
    
    string wsUser;
    
    string wsDomain;
    
    string wsPassword;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eConfiguration: " + eConfiguration.ToString() + ", wsUser: " + wsUser + 
            ", wsDomain: " + wsDomain + ", wsPassword: " + wsPassword;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetStationAutoLogonResponseType
{
    override string ToString()
    {
        return "SetStationAutoLogonResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetStationFriendlyNameRequestBody
{
    uint idStation;
    
    string wsFriendlyName;

    override string ToString()
    {
        string summary = "idStation: " + 
            idStation.ToString();
        if (wsFriendlyName.Count > 0)
        {
            summary += ", wsFriendlyName: " + wsFriendlyName;
        }
        return summary;
    }
};

type SetStationFriendlyNameResponseBody
{
    override string ToString()
    {
        return "SetStationFriendlyNameResponseBody";
    }
};

type SetStationServerNameType
{
    uint idStation;
    
    string wsServerName;
    
    string wsVirtualMachineName;

    override string ToString()
    {
        string summary = "idStation: " + 
            idStation.ToString();
        if (wsServerName.Count > 0)
        {
            summary += ", wsServerName: " + wsServerName;
        }
        if (wsVirtualMachineName.Count > 0)
        {
            summary += ", wsVirtualMachineName: " + wsVirtualMachineName;
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetStationServerNameResponseType
{
    override string ToString()
    {
        return "SetStationServerNameResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SplitStationType
{
    uint idStation;
    
    SplitStationEOperation eOperation;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eOperation: " + EnumToStringInSummary<SplitStationEOperation>(eOperation);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern SplitStationEOperation = enum uint
{
    split = 0,
    unsplit = 1,
    ...
};

type SplitStationResponseType
{
    override string ToString()
    {
        return "SplitStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopIdentifyingStationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopIdentifyingStationResponseType
{
    override string ToString()
    {
        return "StopIdentifyingStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

contract IMultiPointSession
{
    accepts operation CurrentActivity
    {
        in CurrentActivityRequestBody CurrentActivity;
        
        out CurrentActivityResponseBody CurrentActivityResponse;

        override string ToString()
        {
            string summary = "CurrentActivity, " + CurrentActivity.ToString();
            if (CurrentActivityResponse != null && CurrentActivityResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/CurrentActivity",
              ReplyAction = RMAction + "/IMultiPointSession/CurrentActivityResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation CloseSessionApplication
    {
        in CloseSessionApplicationType CloseSessionApplication;
        
        out CloseSessionApplicationResponseType CloseSessionApplicationResponse;

        override string ToString()
        {
            return "CloseSessionApplication, " + CloseSessionApplication.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/CloseSessionApplication",
              ReplyAction = RMAction + "/IMultiPointSession/CloseSessionApplicationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ConfigureWebLimiting
    {
        in ConfigureWebLimitingType ConfigureWebLimiting;
        
        out ConfigureWebLimitingResponseType ConfigureWebLimitingResponse;

        override string ToString()
        {
            return "ConfigureWebLimiting, " + ConfigureWebLimiting.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/ConfigureWebLimiting",
              ReplyAction = RMAction + "/IMultiPointSession/ConfigureWebLimitingResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ConfigureWebLimitingAll
    {
        in ConfigureWebLimitingAllRequestBody ConfigureWebLimitingAll;
        
        out ConfigureWebLimitingAllResponseBody ConfigureWebLimitingAllResponse;

        override string ToString()
        {
            return "ConfigureWebLimitingAll" + ConfigureWebLimitingAll.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/ConfigureWebLimitingAll",
              ReplyAction = RMAction + "/IMultiPointSession/ConfigureWebLimitingAllResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableProjectToAll
    {
        in EnableProjectToAllRequestBody EnableProjectToAll;
        
        out EnableProjectToAllResponseBody EnableProjectToAllResponse;
        override string ToString()
        {
            string summary = "EnableProjectToAll";
            if (EnableProjectToAll.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/EnableProjectToAll",
              ReplyAction = RMAction + "/IMultiPointSession/EnableProjectToAllResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation EnableWebLimitingAll
    {
        in EnableWebLimitingAllType EnableWebLimitingAll;
        
        out EnableWebLimitingAllResponseType EnableWebLimitingAllResponse;

        override string ToString()
        {
            return "EnableWebLimitingAll, " + EnableWebLimitingAll.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/EnableWebLimitingAll",
              ReplyAction = RMAction + "/IMultiPointSession/EnableWebLimitingAllResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetScreenState
    {
        in GetScreenStateType GetScreenState;
        
        out GetScreenStateResponseType GetScreenStateResponse;

        override string ToString()
        {
            string summary = "GetScreenState, " + GetScreenState.ToString();
            if (GetScreenStateResponse != null && GetScreenStateResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/GetScreenState",
              ReplyAction = RMAction + "/IMultiPointSession/GetScreenStateResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetSessionAgentStatus
    {
        in GetSessionAgentStatusType GetSessionAgentStatus;
        
        out GetSessionAgentStatusResponseType GetSessionAgentStatusResponse;

        override string ToString()
        {
            return "GetSessionAgentStatus, " + GetSessionAgentStatus.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/GetSessionAgentStatus",
              ReplyAction = RMAction + "/IMultiPointSession/GetSessionAgentStatusResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetSessionRunningApps
    {
        in GetSessionRunningAppsRequestBody GetSessionRunningApps;
        
        out GetSessionRunningAppsResponseBody GetSessionRunningAppsResponse;

        override string ToString()
        {
            string summary = "GetSessionRunningApps, " + GetSessionRunningApps.ToString();
            if (GetSessionRunningAppsResponse != null && GetSessionRunningAppsResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/GetSessionRunningApps",
              ReplyAction = RMAction + "/IMultiPointSession/GetSessionRunningAppsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetThumbnailBits
    {
        in GetThumbnailBitsRequestBody GetThumbnailBits;
        
        out GetThumbnailBitsResponseBody GetThumbnailBitsResponse;

        override string ToString()
        {
            return "GetThumbnailBits, " + GetThumbnailBits.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/GetThumbnailBits",
              ReplyAction = RMAction + "/IMultiPointSession/GetThumbnailBitsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IdentifySession
    {
        in IdentifySessionRequestBody IdentifySession;
        
        out IdentifySessionResponseBody IdentifySessionResponse;

        override string ToString()
        {
            return "IdentifySession, " + IdentifySession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/IdentifySession",
              ReplyAction = RMAction + "/IMultiPointSession/IdentifySessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetSessionFlags
    {
        in GetSessionFlagsType GetSessionFlags;
        
        out GetSessionFlagsResponseType GetSessionFlagsResponse;

        override string ToString()
        {
            string summary = "GetSessionFlags, " + GetSessionFlags.ToString();
            if (GetSessionFlagsResponse != null && GetSessionFlagsResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/GetSessionFlags",
              ReplyAction = RMAction + "/IMultiPointSession/GetSessionFlagsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation LockSession
    {
        in LockSessionRequestBody LockSession;
        
        out LockSessionResponseBody LockSessionResponse;

        override string ToString()
        {
            return "LockSession, " + LockSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/LockSession",
              ReplyAction = RMAction + "/IMultiPointSession/LockSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation LogOffSession
    {
        in LogOffSessionType LogOffSession;
        
        out LogOffSessionResponseType LogOffSessionResponse;

        override string ToString()
        {
            return "LogOffSession, " + LogOffSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/LogOffSession",
              ReplyAction = RMAction + "/IMultiPointSession/LogOffSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation RunFileSession
    {
        in RunFileSessionRequestBody RunFileSession;
        
        out RunFileSessionResponseBody RunFileSessionResponse;

        override string ToString()
        {
            string summary = "RunFileSession, " + RunFileSession.ToString();
            if (RunFileSessionResponse != null && RunFileSessionResponse.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/RunFileSession",
              ReplyAction = RMAction + "/IMultiPointSession/RunFileSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ShareDesktop
    {
        in ShareDesktopRequestBody ShareDesktop;
        
        out ShareDesktopResponseBody ShareDesktopResponse;

        override string ToString()
        {
            return "ShareDesktop, " + ShareDesktop.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/ShareDesktop",
              ReplyAction = RMAction + "/IMultiPointSession/ShareDesktopResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation StopIdentifyingSession
    {
        in StopIdentifyingSessionType StopIdentifyingSession;
        
        out StopIdentifyingSessionResponseType StopIdentifyingSessionResponse;

        override string ToString()
        {
            return "StopIdentifyingSession, " + StopIdentifyingSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/StopIdentifyingSession",
              ReplyAction = RMAction + "/IMultiPointSession/StopIdentifyingSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation StopLockingSession
    {
        in StopLockingSessionType StopLockingSession;
        
        out StopLockingSessionResponseType StopLockingSessionResponse;
        override string ToString()
        {
            return "StopLockingSession, " + StopLockingSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/StopLockingSession",
              ReplyAction = RMAction + "/IMultiPointSession/StopLockingSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation StopShareDesktop
    {
        in StopShareDesktopType StopShareDesktop;
        
        out StopShareDesktopResponseType StopShareDesktopResponse;

        override string ToString()
        {
            return "StopShareDesktop, " + StopShareDesktop.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/StopShareDesktop",
              ReplyAction = RMAction + "/IMultiPointSession/StopShareDesktopResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ViewDesktop
    {
        in ViewDesktopRequestBody ViewDesktop;
        
        out ViewDesktopResponseBody ViewDesktopResponse;

        override string ToString()
        {
            string summary = "ViewDesktop";
            if (ViewDesktop.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/ViewDesktop",
              ReplyAction = RMAction + "/IMultiPointSession/ViewDesktopResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation DisconnectSession
    {
        in DisconnectSessionType DisconnectSession;
        
        out DisconnectSessionResponseType DisconnectSessionResponse;

        override string ToString()
        {
            return "DisconnectSession, " + DisconnectSession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/DisconnectSession",
              ReplyAction = RMAction + "/IMultiPointSession/DisconnectSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation LogOffConsoleSession
    {
        in LogOffConsoleSessionType LogOffConsoleSession;
        
        out LogOffConsoleSessionResponseType LogOffConsoleSessionResponse;

        override string ToString()
        {
            return "LogOffConsoleSession";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointSession/LogOffConsoleSession",
              ReplyAction = RMAction + "/IMultiPointSession/LogOffConsoleSessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointSessionEndpoint over SOAP.Server provides IMultiPointSession
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointSession", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type CurrentActivityRequestBody
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
};

type CurrentActivityResponseBody
{
    optional uint pdwInactiveTicks;
    
    optional string pwsCurrentActivity;

    override string ToString()
    {
        string summary = EmptyString;
        if (pdwInactiveTicks is ticks:uint)
        {
            summary += "pdwInactiveTicks: " + ticks.ToString() + ", ";
        }
        if (pwsCurrentActivity is currentActivity:string && currentActivity.Count > 0)
        {
            summary += "pwsCurrentActivity: " + currentActivity + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type CloseSessionApplicationType
{
    uint idSession;
    
    uint idProcess;
    
    ulong ullCreateTime;
    
    ulong idWindow;

    override string ToString()
    {
        return "idSession: " + idSession.ToString() + 
            ", idProcess: " + idProcess.ToString() + ", ullCreateTime: " + ullCreateTime.ToString() + 
            ", idWindow: " + idWindow.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type CloseSessionApplicationResponseType
{
    override string ToString()
    {
        return "CloseSessionApplicationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ConfigureWebLimitingType
{
    uint idSession;
    
    bool fIsInLimiting;

    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString() + ", fIsInLimiting: " + fIsInLimiting.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ConfigureWebLimitingResponseType
{
    override string ToString()
    {
        return "ConfigureWebLimitingResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ConfigureWebLimitingAllRequestBody
{
    string wsAllowList;
    
    string wsBlockList;
    
    bool fIsAllowedList;

    override string ToString()
    {
        return "fIsAllowedList: " + 
            fIsAllowedList.ToString();
    }
};

type ConfigureWebLimitingAllResponseBody
{
    override string ToString()
    {
        return "ConfigureWebLimitingAllResponseBody";
    }
};

type EnableProjectToAllRequestBody
{
    string wsInvitation;
    override string ToString()
    {
        string summary = EmptyString;
        if (wsInvitation.Count > 0)
        {
            summary += "wsInvitation: " + wsInvitation;
        }
        return summary;
    }
};

type EnableProjectToAllResponseBody
{
    override string ToString()
    {
        return "EnableProjectToAllResponseBody";
    }
};

type EnableWebLimitingAllType
{
    bool fIsInLimiting;

    override string ToString()
    {
        return "fIsInLimiting: " + 
            fIsInLimiting.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type EnableWebLimitingAllResponseType
{
    override string ToString()
    {
        return "EnableWebLimitingAllResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetScreenStateType
{
    uint idSession;

    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetScreenStateResponseType
{
    GetScreenStateResponsePeCurrentBroadCastState peCurrentBroadCastState;
    
    bool pfIsLocked;
    
    bool pfIsDisconnected;
    
    bool pfIsPrivate;

    override string ToString()
    {
        string summary = "peCurrentBroadCastState: " + 
            EnumToStringInSummary<GetScreenStateResponsePeCurrentBroadCastState>(peCurrentBroadCastState);
        if (pfIsLocked)
        {
            summary += ", Locked";
        }
        if (pfIsDisconnected)
        {
            summary += ", Disconnected";
        }
        if (pfIsPrivate)
        {
            summary += ", Private";
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetScreenStateResponsePeCurrentBroadCastState = enum uint
{
    Quiescent = 0,
    projecting = 1,
    controlled = 2,
    viewing = 3,
    ...
};

type GetSessionAgentStatusType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetSessionAgentStatusResponseType
{
    GetSessionAgentStatusResponsePeIdentifyStationState peIdentifyStationState;

    override string ToString()
    {
        return "peIdentifyStationState: " + 
            EnumToStringInSummary<GetSessionAgentStatusResponsePeIdentifyStationState>(peIdentifyStationState);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetSessionAgentStatusResponsePeIdentifyStationState = enum uint
{
    $"Not identifying station" = 0,
    $"Identifying station" = 1,
    ...
};

type GetSessionRunningAppsRequestBody
{
    uint idSession;

    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
};

type GetSessionRunningAppsResponseBody
{
    optional string pwsCurrentRunningApps;

    override string ToString()
    {
        string summary = EmptyString;
        if (pwsCurrentRunningApps is app:string && app.Count > 0)
        {
            summary += "pwsCurrentRunningApps: " + app;
        }
        return summary;
    }
};

type GetThumbnailBitsRequestBody
{
    uint idSession;
    
    GetThumbnailBitsRequestBodyEBitmapSize eBitmapSize;

    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString() + ", eBitmapSize: " + 
            EnumToStringInSummary<GetThumbnailBitsRequestBodyEBitmapSize>(eBitmapSize);
    }
};

pattern GetThumbnailBitsRequestBodyEBitmapSize = enum uint
{
    small = 0,
    medium = 1,
    large = 2,
    fullscreen = 3,
    ...
};

type GetThumbnailBitsResponseBody
{
    optional binary ppbDataBits;

    override string ToString()
    {
        return "GetThumbnailBitsResponseBody";
    }
};

type IdentifySessionRequestBody
{
    uint idSession;
    
    string wsStationName;
    
    string wsStationHost;
    
    string wsSessionHost;
    
    IdentifySessionRequestBodyEAction eAction;

    override string ToString()
    {
        string summary = "idSession: " + 
            idSession.ToString();
        if (wsStationName.Count > 0)
        {
            summary += ", wsStationName: " + wsStationName;
        }
        if (wsStationHost.Count > 0)
        {
            summary += ", wsStationHost: " + wsStationHost;
        }
        if (wsSessionHost.Count > 0)
        {
            summary += ", wsSessionHost: " + wsSessionHost;
        }
        summary += ", eAction: " + 
            EnumToStringInSummary<IdentifySessionRequestBodyEAction>(eAction);
        return summary;
    }
};

pattern IdentifySessionRequestBodyEAction = enum uint
{
    $"update station information" = 0,
    $"display station identification on associated display" = 1,
    ...
};

type IdentifySessionResponseBody
{
    override string ToString()
    {
        return "IdentifySessionResponseBody";
    }
};

type GetSessionFlagsType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetSessionFlagsResponseType
{
    optional GetSessionFlagsPgrfSession pgrfSession;
    override string ToString()
    {
        string summary = EmptyString;
        if (pgrfSession is session:GetSessionFlagsPgrfSession)
        {
            summary += "pgrfSession: " + 
                EnumToString(session, "RSMC.GetSessionFlagsPgrfSession");
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetSessionFlagsPgrfSession = flags uint
{
    WSF_Admin = 0x0001
        with Documentation
            {Description = "User logged into session is an administrator."},
    WSF_Mog = 0x0002
        with Documentation
            {Description = "User logged into session is a member of the MultiPoint Operators Group."},
    WSF_Student = 0x0004
        with Documentation
            {Description = "User logged into session is a standard user."},
    WSF_Locked = 0x0008
        with Documentation
            {Description = "Session is locked."},
    WSF_WebLimited = 0x0010
        with Documentation
            {Description = "Session has web access limitations enabled."},
    WSF_Orchestratable = 0x0020
        with Documentation
            {Description = "Session can be managed."},
    ...
};

type LockSessionRequestBody
{
    uint idSession;
    
    string wsLockMessage;

    override string ToString()
    {
        string summary = "idSession: " + 
            idSession.ToString();
        if (wsLockMessage.Count > 0)
        {
            summary += ", wsLockMessage: " + wsLockMessage;
        }
        return summary;
    }
};

type LockSessionResponseBody
{
    override string ToString()
    {
        return "LockSessionResponseBody";
    }
};

type LogOffSessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type LogOffSessionResponseType
{
    override string ToString()
    {
        return "LogOffSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type RunFileSessionRequestBody
{
    uint idSession;
    
    string wsFileToRun;

    override string ToString()
    {
        string summary = "idSession: " + idSession.ToString();
        if (wsFileToRun.Count > 0)
        {
            summary += ", wsFileToRun: " + wsFileToRun;
        }
        return summary;
    }
};

type RunFileSessionResponseBody
{
    optional uint pdwResult;
    override string ToString()
    {
        string summary = EmptyString;
        if (pdwResult is result:uint)
        {
            summary += "pdwResult: " + result.ToString();
        }
        return summary;
    }
};

type ShareDesktopRequestBody
{
    uint idSession;
    
    optional ShareDesktopEmode eMode;
    
    int iMaxViewers;
    
    optional string wsTeacherName;

    override string ToString()
    {
        string summary = "idSession: " + 
            idSession.ToString();
        if (eMode is mode:ShareDesktopEmode)
        {
            summary += ", eMode: " + 
                EnumToStringInSummary<ShareDesktopEmode>(mode);
        }
        summary += ", iMaxViewers: " + iMaxViewers.ToString();
        if (wsTeacherName is name:string && name.Count > 0)
        {
            summary += ", wsTeacherName: " + name;
        }
        return summary;
    }
};

pattern ShareDesktopEmode = enum uint
{
    $"allow remote control" = 0,
    $"project session" = 1,
    ...
};

type ShareDesktopResponseBody
{
    optional string pwsInvitation;

    override string ToString()
    {
        return "ShareDesktopResponseBody";
    }
};

type StopIdentifyingSessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopIdentifyingSessionResponseType
{
    override string ToString()
    {
        return "StopIdentifyingSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopLockingSessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopLockingSessionResponseType
{
    override string ToString()
    {
        return "StopLockingSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopShareDesktopType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type StopShareDesktopResponseType
{
    override string ToString()
    {
        return "StopShareDesktopResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ViewDesktopRequestBody
{
    uint idSession;
    
    optional ViewDesktopEmode eMode;

    optional string wsInvitation;
    
    optional string wsTitle;

    override string ToString()
    {
        string summary = "idSession: " + idSession.ToString();
        if (eMode is mode:ViewDesktopEmode)
        {
            summary += ", eMode: " + 
                EnumToStringInSummary<ViewDesktopEmode>(mode);
        }
        if (wsTitle is title:string && title.Count > 0)
        {
            summary += ", wsTitle: " + title;
        }
        return summary;
    }
};

pattern ViewDesktopEmode = enum uint
{
    $"allow remote control" = 0,
    $"project session" = 1,
    ...
};

type ViewDesktopResponseBody
{
    override string ToString()
    {
        return "ViewDesktopResponseBody";
    }
};

type DisconnectSessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + 
            idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type DisconnectSessionResponseType
{
    override string ToString()
    {
        return "DisconnectSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type LogOffConsoleSessionType
{
    override string ToString()
    {
        return "LogOffConsoleSessionType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type LogOffConsoleSessionResponseType
{
    override string ToString()
    {
        return "LogOffConsoleSessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

contract IMultiPointDiskProtection
{
    accepts operation GetFreeSpaceNeeded
    {
        in GetFreeSpaceNeededType GetFreeSpaceNeeded;
        
        out GetFreeSpaceNeededResponseType GetFreeSpaceNeededResponse;

        override string ToString()
        {
            return "GetFreeSpaceNeeded, " + GetFreeSpaceNeededResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/GetFreeSpaceNeeded",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/GetFreeSpaceNeededResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetMode
    {
        in GetModeType GetMode;
        
        out GetModeResponseType GetModeResponse;

        override string ToString()
        {
            return "GetMode, " + GetModeResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/GetMode",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/GetModeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetScheduledUpdateSettings
    {
        in GetScheduledUpdateSettingsRequestBody GetScheduledUpdateSettings;
        
        out GetScheduledUpdateSettingsResponseBody
                GetScheduledUpdateSettingsResponse;

        override string ToString()
        {
            return "GetScheduledUpdateSettings," + GetScheduledUpdateSettingsResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/GetScheduledUpdateSettings",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/GetScheduledUpdateSettingsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Install
    {
        in InstallType Install;
        
        out InstallResponseType InstallResponse;

        override string ToString()
        {
            return "Install";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/Install",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/InstallResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation IsInstalled
    {
        in IsInstalledType IsInstalled;
        
        out IsInstalledResponseType IsInstalledResponse;

        override string ToString()
        {
            return "IsInstalled, " + IsInstalledResponse.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/IsInstalled",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/IsInstalledResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetMode
    {
        in SetModeType SetMode;
        
        out SetModeResponseType SetModeResponse;

        override string ToString()
        {
            return "SetMode, " + SetMode.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/SetMode",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/SetModeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SetScheduledUpdateSettings
    {
        in SetScheduledUpdateSettingsRequestBody SetScheduledUpdateSettings;
        
        out SetScheduledUpdateSettingsResponseBody
                SetScheduledUpdateSettingsResponse;

        override string ToString()
        {
            return "SetScheduledUpdateSettings, " + SetScheduledUpdateSettings.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/SetScheduledUpdateSettings",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/SetScheduledUpdateSettingsResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Uninstall
    {
        in UninstallType Uninstall;
        
        out UninstallResponseType UninstallResponse;

        override string ToString()
        {
            return "Uninstall, " + Uninstall.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointDiskProtection/Uninstall",
              ReplyAction = RMAction + "/IMultiPointDiskProtection/UninstallResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointDiskProtectionEndpoint
    over SOAP.Server provides IMultiPointDiskProtection
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointDiskProtection", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type GetFreeSpaceNeededType
{
    override string ToString()
    {
        return "GetFreeSpaceNeededType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetFreeSpaceNeededResponseType
{
    ulong pullFreeSpaceNeeded;

    override string ToString()
    {
        return "pullFreeSpaceNeeded: " + pullFreeSpaceNeeded.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetModeType
{
    override string ToString()
    {
        return "GetModeType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type GetModeResponseType
{
    GetModePdpm pdpm;

    override string ToString()
    {
        return "pdpm: " + 
            EnumToStringInSummary<GetModePdpm>(pdpm);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern GetModePdpm = enum uint
{
    Passive = 1,
    Discard = 2,
    ...
};

type GetScheduledUpdateSettingsRequestBody
{
    override string ToString()
    {
        return "GetScheduledUpdateSettingsRequestBody";
    }
};

type GetScheduledUpdateSettingsResponseBody
{
    GetScheduledUpdateSettingsResponseBodyPeMode peMode;
    
    uint piScheduledUpdateStartHour;
    
    string pwsCustomScriptFullPath;
    
    uint pcMaxMinutesAllowedForCustomScript;
    
    GetScheduledUpdateSettingsResponseBodyPeReturnState peReturnState;

    override string ToString()
    {
        string summary = "peMode: " + 
            EnumToStringInSummary<GetScheduledUpdateSettingsResponseBodyPeMode>(peMode) + 
            ", piScheduledUpdateStartHour: " + piScheduledUpdateStartHour.ToString();
        if (pwsCustomScriptFullPath.Count > 0)
        {
            summary += ", pwsCustomScriptFullPath: " + pwsCustomScriptFullPath;
        }
        summary += ", pcMaxMinutesAllowedForCustomScript: " + 
            pcMaxMinutesAllowedForCustomScript.ToString() + ", peReturnState: " + 
            EnumToStringInSummary<GetScheduledUpdateSettingsResponseBodyPeReturnState>(peReturnState);
        return summary;
    }
};

pattern GetScheduledUpdateSettingsResponseBodyPeMode = enum uint
{
    Disabled = 0,
    $"Script only" = 1,
    $"Script and windows updates" = 2,
    ...
};

pattern GetScheduledUpdateSettingsResponseBodyPeReturnState = enum uint
{
    Shutdown = 0,
    $"Last known state" = 1,
    ...
};

type InstallType
{
    override string ToString()
    {
        return "InstallType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type InstallResponseType
{
    override string ToString()
    {
        return "InstallResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsInstalledType
{
    override string ToString()
    {
        return "IsInstalledType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type IsInstalledResponseType
{
    bool pfIsInstalled;

    override string ToString()
    {
        return "pfIsInstalled: " + 
            pfIsInstalled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetModeType
{
    SetModeDpm dpm;

    override string ToString()
    {
        return "dpm: " + 
            EnumToStringInSummary<SetModeDpm>(dpm);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern SetModeDpm = enum uint
{
    Passive = 1,
    Discard = 2,
    ...
};

type SetModeResponseType
{
    override string ToString()
    {
        return "SetModeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SetScheduledUpdateSettingsRequestBody
{
    SetScheduledUpdateSettingsRequestBodyEMode eMode;
    
    uint iScheduledUpdateStartHour;
    
    string wsCustomScriptFullPath;
    
    uint cMaxMinutesAllowedForCustomScript;
    
    SetScheduledUpdateSettingsRequestBodyEReturnState eReturnState;

    override string ToString()
    {
        string summary = "eMode: " + 
            EnumToStringInSummary<SetScheduledUpdateSettingsRequestBodyEMode>(eMode) + 
            ", iScheduledUpdateStartHour: " + iScheduledUpdateStartHour.ToString();
        if (wsCustomScriptFullPath.Count > 0)
        {
            summary += ", wsCustomScriptFullPath: " + wsCustomScriptFullPath;
        }
        summary += ", cMaxMinutesAllowedForCustomScript: " + 
            cMaxMinutesAllowedForCustomScript.ToString() + ", eReturnState: " + 
            EnumToStringInSummary<SetScheduledUpdateSettingsRequestBodyEReturnState>(eReturnState);
        return summary;
    }
};

pattern SetScheduledUpdateSettingsRequestBodyEMode = enum uint
{
    Disabled = 0,
    $"Script only" = 1,
    $"Script and windows updates" = 2,
    ...
};

pattern SetScheduledUpdateSettingsRequestBodyEReturnState = enum uint
{
    Shutdown = 0,
    $"Llast known state" = 1,
    ...
};

type SetScheduledUpdateSettingsResponseBody
{
    override string ToString()
    {
        return "SetScheduledUpdateSettingsResponseBody";
    }
};

type UninstallType
{
    UninstallUdps udps;
    override string ToString()
    {
        return "udps: " + 
            EnumToStringInSummary<UninstallUdps>(udps);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern UninstallUdps = enum uint
{
    Uninstall = 1,
    $"Post Uninstall" = 2,
    $"Delayed Uninstall Allowed" = 3,
    ...
};

type UninstallResponseType
{
    override string ToString()
    {
        return "UninstallResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

contract IMultiPointChat
{
    accepts operation Connect
    {
        in ConnectRequestBody Connect;
        
        out ConnectResponseBody ConnectResponse;

        override string ToString()
        {
            string summary = "Connect";
            if (Connect.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/Connect",
              ReplyAction = RMAction + "/IMultiPointChat/ConnectResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Disconnect
    {
        in DisconnectRequestBody Disconnect;
        
        out DisconnectResponseBody DisconnectResponse;

        override string ToString()
        {
            string summary = "Disconnect";
            if (Disconnect.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/Disconnect",
              ReplyAction = RMAction + "/IMultiPointChat/DisconnectResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation GetChatId
    {
        in GetChatIdRequestBody GetChatId;
        
        out GetChatIdResponseBody GetChatIdResponse;

        override string ToString()
        {
            string summary = "GetChatId";
            if (GetChatId.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/GetChatId",
              ReplyAction = RMAction + "/IMultiPointChat/GetChatIdResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation Ping
    {
        in PingType Ping;
        
        out PingResponseType PingResponse;

        override string ToString()
        {
            return "Ping";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/Ping",
              ReplyAction = RMAction + "/IMultiPointChat/PingResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SendError
    {
        in SendErrorRequestBody SendError;
        
        out SendErrorResponseBody SendErrorResponse;

        override string ToString()
        {
            string summary = "SendError";
            if (SendError.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/SendError",
              ReplyAction = RMAction + "/IMultiPointChat/SendErrorResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation SendMsg
    {
        in SendMsgRequestBody SendMsg;
        
        out SendMsgResponseBody SendMsgResponse;

        override string ToString()
        {
            string summary = "SendMsg";
            if (SendMsg.ToString() is str:string && str.Count > 0)
            {
                summary += ", " + str;
            }
            return summary;
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointChat/SendMsg",
              ReplyAction = RMAction + "/IMultiPointChat/SendMsgResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointChatEndpoint over SOAP.Server provides IMultiPointChat
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointChat", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type ConnectRequestBody
{
    string wsTeacherUserName;
    
    string guidDestChatId;

    override string ToString()
    {
        string summary = EmptyString;
        if (wsTeacherUserName.Count > 0)
        {
            summary += "wsTeacherUserName: " + wsTeacherUserName + ", ";
        }
        if (guidDestChatId.Count > 0)
        {
            summary += "guidDestChatId: " + guidDestChatId + ", ";
        }
        if (summary.Count > 2)
        {
            summary = summary.Segment(0, summary.Count - 2);
        }
        return summary;
    }
};

type ConnectResponseBody
{
    override string ToString()
    {
        return "ConnectResponseBody";
    }
};

type DisconnectRequestBody
{
    string guidDestChatId;
    override string ToString()
    {
        string summary = EmptyString;
        if (guidDestChatId.Count > 0)
        {
            summary += "guidDestChatId: " + guidDestChatId;
        }
        return summary;
    }
};

type DisconnectResponseBody
{
    override string ToString()
    {
        return "DisconnectResponseBody";
    }
};

type GetChatIdRequestBody
{
    string wsTeacherServerName;
    
    uint idTeacherSession;
    
    string wsTeacherUserName;
    
    uint idStudentSession;

    override string ToString()
    {
        string summary = EmptyString;
        if (wsTeacherServerName.Count > 0)
        {
            summary += "wsTeacherServerName: " + wsTeacherServerName + ", ";
        }
        summary += "idTeacherSession: " + idTeacherSession.ToString();
        if (wsTeacherUserName.Count > 0)
        {
            summary += "wsTeacherUserName: " + wsTeacherUserName + ", ";
        }
        summary += "idStudentSession: " + idStudentSession.ToString();
        return summary;
    }
};

type GetChatIdResponseBody
{
    optional string pguidStudentChat;

    override string ToString()
    {
        string summary = EmptyString;
        if (pguidStudentChat is guidStudent:string)
        {
            summary += "pguidStudentChat: " + guidStudent;
        }
        return summary;
    }
};

type PingType
{
    override string ToString()
    {
        return "PingType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type PingResponseType
{
    override string ToString()
    {
        return "PingResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type SendErrorRequestBody
{
    string guidDestChatId;
    
    uint hrError;
    
    string wsErrorMsg;

    override string ToString()
    {
        string summary = EmptyString;
        if (guidDestChatId.Count > 0)
        {
            summary += "guidDestChatId: " + guidDestChatId + ", ";
        }
        summary += "hrError: " + hrError.ToString() + ", ";
        if (wsErrorMsg.Count > 0)
        {
            summary += "wsErrorMsg: " + wsErrorMsg + ", ";
        }
        return summary.Segment(0, summary.Count - 2);
    }
};

type SendErrorResponseBody
{
    override string ToString()
    {
        return "SendErrorResponseBody";
    }
};

type SendMsgRequestBody
{
    string wsMessage;
    
    string guidDestChatId;

    override string ToString()
    {
        string summary = EmptyString;
        if (wsMessage.Count > 0)
        {
            summary += "wsMessage: " + wsMessage + ", ";
        }
        if (guidDestChatId.Count > 0)
        {
            summary += "guidDestChatId: " + guidDestChatId + ", ";
        }
        return summary;
    }
};

type SendMsgResponseBody
{
    override string ToString()
    {
        return "SendMsgResponseBody";
    }
};

contract IMultiPointCoreEventSink
{
    accepts operation OnAssociateSessionWithStation
    {
        in OnAssociateSessionWithStationType OnAssociateSessionWithStation;
        
        out OnAssociateSessionWithStationResponseType OnAssociateSessionWithStationResponse;

        override string ToString()
        {
            return "OnAssociateSessionWithStation, " + OnAssociateSessionWithStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnAssociateSessionWithStation",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnAssociateSessionWithStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnBeginIdentifySession
    {
        in OnBeginIdentifySessionType OnBeginIdentifySession;
        
        out OnBeginIdentifySessionResponseType OnBeginIdentifySessionResponse;

        override string ToString()
        {
            return "OnBeginIdentifySession, " + OnBeginIdentifySession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnBeginIdentifySession",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnBeginIdentifySessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnBeginIdentifyStation
    {
        in OnBeginIdentifyStationType OnBeginIdentifyStation;
        
        out OnBeginIdentifyStationResponseType OnBeginIdentifyStationResponse;

        override string ToString()
        {
            return "OnBeginIdentifyStation, " + OnBeginIdentifyStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnBeginIdentifyStation",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnBeginIdentifyStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnBootToConsoleModeChange
    {
        in OnBootToConsoleModeChangeType OnBootToConsoleModeChange;
        
        out OnBootToConsoleModeChangeResponseType OnBootToConsoleModeChangeResponse;

        override string ToString()
        {
            return "OnBootToConsoleModeChange, " + OnBootToConsoleModeChange.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnBootToConsoleModeChange",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnBootToConsoleModeChangeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnConfigureStation
    {
        in OnConfigureStationType OnConfigureStation;
        
        out OnConfigureStationResponseType OnConfigureStationResponse;

        override string ToString()
        {
            return "OnConfigureStation, " + OnConfigureStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnConfigureStation",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnConfigureStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnDesktopMonitoringChange
    {
        in OnDesktopMonitoringChangeType OnDesktopMonitoringChange;
        
        out OnDesktopMonitoringChangeResponseType OnDesktopMonitoringChangeResponse;

        override string ToString()
        {
            return "OnDesktopMonitoringChange, " + OnDesktopMonitoringChange.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnDesktopMonitoringChange",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnDesktopMonitoringChangeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnDeviceAdded
    {
        in OnDeviceAddedType OnDeviceAdded;
        
        out OnDeviceAddedResponseType OnDeviceAddedResponse;

        override string ToString()
        {
            return "OnDeviceAdded, " + OnDeviceAdded.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnDeviceAdded",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnDeviceAddedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnDeviceRemoved
    {
        in OnDeviceRemovedType OnDeviceRemoved;
        
        out OnDeviceRemovedResponseType OnDeviceRemovedResponse;

        override string ToString()
        {
            return "OnDeviceRemoved, " + OnDeviceRemoved.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnDeviceRemoved",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnDeviceRemovedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnEndIdentifySession
    {
        in OnEndIdentifySessionType OnEndIdentifySession;
        
        out OnEndIdentifySessionResponseType OnEndIdentifySessionResponse;

        override string ToString()
        {
            return "OnEndIdentifySession, " + OnEndIdentifySession.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnEndIdentifySession",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnEndIdentifySessionResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnEndIdentifyStation
    {
        in OnEndIdentifyStationType OnEndIdentifyStation;
        
        out OnEndIdentifyStationResponseType OnEndIdentifyStationResponse;

        override string ToString()
        {
            return "OnEndIdentifyStation, " + OnEndIdentifyStation.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnEndIdentifyStation",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnEndIdentifyStationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnEnterSplitScreen
    {
        in OnEnterSplitScreenType OnEnterSplitScreen;
        
        out OnEnterSplitScreenResponseType OnEnterSplitScreenResponse;

        override string ToString()
        {
            return "OnEnterSplitScreen, " + OnEnterSplitScreen.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnEnterSplitScreen",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnEnterSplitScreenResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnExitSplitScreen
    {
        in OnExitSplitScreenType OnExitSplitScreen;
        
        out OnExitSplitScreenResponseType OnExitSplitScreenResponse;
        override string ToString()
        {
            return "OnExitSplitScreen, " + OnExitSplitScreen.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnExitSplitScreen",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnExitSplitScreenResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnManagedServerOffline
    {
        in OnManagedServerOfflineType OnManagedServerOffline;
        
        out OnManagedServerOfflineResponseType OnManagedServerOfflineResponse;

        override string ToString()
        {
            return "OnManagedServerOffline, " + OnManagedServerOffline.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnManagedServerOffline",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnManagedServerOfflineResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnManagedServerOnline
    {
        in OnManagedServerOnlineType OnManagedServerOnline;
        
        out OnManagedServerOnlineResponseType OnManagedServerOnlineResponse;

        override string ToString()
        {
            return "OnManagedServerOnline, " + OnManagedServerOnline.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnManagedServerOnline",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnManagedServerOnlineResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnPeerServerAdded
    {
        in OnPeerServerAddedType OnPeerServerAdded;
        
        out OnPeerServerAddedResponseType OnPeerServerAddedResponse;

        override string ToString()
        {
            return "OnPeerServerAdded, " + OnPeerServerAdded.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnPeerServerAdded",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnPeerServerAddedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnPeerServerDiscovered
    {
        in OnPeerServerDiscoveredType OnPeerServerDiscovered;
        
        out OnPeerServerDiscoveredResponseType OnPeerServerDiscoveredResponse;

        override string ToString()
        {
            return "OnPeerServerDiscovered, " + OnPeerServerDiscovered.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnPeerServerDiscovered",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnPeerServerDiscoveredResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnPeerServerRemoved
    {
        in OnPeerServerRemovedType OnPeerServerRemoved;
        
        out OnPeerServerRemovedResponseType OnPeerServerRemovedResponse;

        override string ToString()
        {
            return "OnPeerServerRemoved" + OnPeerServerRemoved.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnPeerServerRemoved",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnPeerServerRemovedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnProjectionStateChange
    {
        in OnProjectionStateChangeType OnProjectionStateChange;
        
        out OnProjectionStateChangeResponseType OnProjectionStateChangeResponse;

        override string ToString()
        {
            return "OnProjectionStateChange, " + OnProjectionStateChange.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnProjectionStateChange",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnProjectionStateChangeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnScheduledUpdateSettingsChanged
    {
        in OnScheduledUpdateSettingsChangedType OnScheduledUpdateSettingsChanged;
        
        out OnScheduledUpdateSettingsChangedResponseType OnScheduledUpdateSettingsChangedResponse;

        override string ToString()
        {
            return "OnScheduledUpdateSettingsChanged, " + OnScheduledUpdateSettingsChanged.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnScheduledUpdateSettingsChanged",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnScheduledUpdateSettingsChangedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnServiceControlSessionChange
    {
        in OnServiceControlSessionChangeType OnServiceControlSessionChange;
        
        out OnServiceControlSessionChangeResponseType OnServiceControlSessionChangeResponse;

        override string ToString()
        {
            return "OnServiceControlSessionChange, " + OnServiceControlSessionChange.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnServiceControlSessionChange",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnServiceControlSessionChangeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSessionAgentReady
    {
        in OnSessionAgentReadyType OnSessionAgentReady;
        
        out OnSessionAgentReadyResponseType OnSessionAgentReadyResponse;

        override string ToString()
        {
            return "OnSessionAgentReady, " + OnSessionAgentReady.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSessionAgentReady",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSessionAgentReadyResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSessionBlocked
    {
        in OnSessionBlockedType OnSessionBlocked;
        
        out OnSessionBlockedResponseType OnSessionBlockedResponse;

        override string ToString()
        {
            return "OnSessionBlocked, " + OnSessionBlocked.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSessionBlocked",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSessionBlockedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSessionConnecting
    {
        in OnSessionConnectingType OnSessionConnecting;
        
        out OnSessionConnectingResponseType OnSessionConnectingResponse;

        override string ToString()
        {
            return "OnSessionConnecting, " + OnSessionConnecting.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSessionConnecting",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSessionConnectingResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSessionDisconnected
    {
        in OnSessionDisconnectedType OnSessionDisconnected;
        
        out OnSessionDisconnectedResponseType OnSessionDisconnectedResponse;

        override string ToString()
        {
            return "OnSessionDisconnected, " + OnSessionDisconnected.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSessionDisconnected",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSessionDisconnectedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSessionUnblocked
    {
        in OnSessionUnblockedType OnSessionUnblocked;
        
        out OnSessionUnblockedResponseType OnSessionUnblockedResponse;

        override string ToString()
        {
            return "OnSessionUnblocked, " + OnSessionUnblocked.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSessionUnblocked",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSessionUnblockedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnStationAdded
    {
        in OnStationAddedType OnStationAdded;
        
        out OnStationAddedResponseType OnStationAddedResponse;

         override string ToString()
        {
            return "OnStationAdded, " + OnStationAdded.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnStationAdded",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnStationAddedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnStationAlert
    {
        in OnStationAlertType OnStationAlert;
        
        out OnStationAlertResponseType OnStationAlertResponse;

        override string ToString()
        {
            return "OnStationAlert" + OnStationAlert.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnStationAlert",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnStationAlertResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnStationRemoved
    {
        in OnStationRemovedType OnStationRemoved;
        
        out OnStationRemovedResponseType OnStationRemovedResponse;

        override string ToString()
        {
            return "OnStationRemoved, " + OnStationRemoved.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnStationRemoved",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnStationRemovedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSystemAlert
    {
        in OnSystemAlertType OnSystemAlert;
        
        out OnSystemAlertResponseType OnSystemAlertResponse;

        override string ToString()
        {
            return "OnSystemAlert, " + OnSystemAlert.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSystemAlert",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSystemAlertResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnSystemModeChange
    {
        in OnSystemModeChangeType OnSystemModeChange;
        
        out OnSystemModeChangeResponseType OnSystemModeChangeResponse;

        override string ToString()
        {
            return "OnSystemModeChange, " + OnSystemModeChange.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnSystemModeChange",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnSystemModeChangeResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnVirtualDesktopNotification
    {
        in OnVirtualDesktopNotificationType OnVirtualDesktopNotification;
        
        out OnVirtualDesktopNotificationResponseType OnVirtualDesktopNotificationResponse;

        override string ToString()
        {
            return "OnVirtualDesktopNotification, " + OnVirtualDesktopNotification.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnVirtualDesktopNotification",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnVirtualDesktopNotificationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation ShutdownNotification
    {
        in ShutdownNotificationType ShutdownNotification;
        
        out ShutdownNotificationResponseType ShutdownNotificationResponse;

        override string ToString()
        {
            return "ShutdownNotification";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/ShutdownNotification",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/ShutdownNotificationResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnUserCreated
    {
        in OnUserCreatedType OnUserCreated;
        
        out OnUserCreatedResponseType OnUserCreatedResponse;

        override string ToString()
        {
            return "OnUserCreated, " + OnUserCreated.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnUserCreated",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnUserCreatedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnUserUpdated
    {
        in OnUserUpdatedType OnUserUpdated;
        
        out OnUserUpdatedResponseType OnUserUpdatedResponse;

        override string ToString()
        {
            return "OnUserUpdated, " + OnUserUpdated.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnUserUpdated",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnUserUpdatedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnUserDeleted
    {
        in OnUserDeletedType OnUserDeleted;
        
        out OnUserDeletedResponseType OnUserDeletedResponse;

        override string ToString()
        {
            return "OnUserDeleted, " + OnUserDeleted.ToString();
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnUserDeleted",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnUserDeletedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
    
    accepts operation OnGroupUpdated
    {
        in OnGroupUpdatedType OnGroupUpdated;
        
        out OnGroupUpdatedResponseType OnGroupUpdatedResponse;

        override string ToString()
        {
            return "OnGroupUpdated";
        }
    }
    with Technologies.SOAP.SoapMessageInfo
             {Action = RMAction + "/IMultiPointCoreEventSink/OnGroupUpdated",
              ReplyAction = RMAction + "/IMultiPointCoreEventSink/OnGroupUpdatedResponse"}
    exception WmsFaultType
        with Technologies.SOAP.SoapMessageInfo
                 {Action = RMFaultAction},
             Standard.XmlEncoding{Name = "WmsFaultType"};
};

endpoint IMultiPointCoreEventSinkEndpoint
    over SOAP.Server provides IMultiPointCoreEventSink
    with Technologies.WSDL.WsdlInfo
             {Name = "IMultiPointCoreEventSink", Namespace = MultiPointNamespace},
         Standard.Binding{Binding = BindingKind.WSHttpBinding};

type OnAssociateSessionWithStationType
{
    uint idStation;
    
    uint idSession;
    
    string wsServerName;
    
    string wsVirtualMachineId;

    override string ToString()
    {
        string summary = "idStation: " + 
            idStation.ToString() + ", idSession: " + idSession.ToString();
        if (wsServerName.Count > 0)
        {
            summary += ", wsServerName: " + wsServerName;
        }
        if (wsVirtualMachineId.Count > 0)
        {
            summary += ", wsVirtualMachineId: " + wsVirtualMachineId;
        }
        return summary;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnAssociateSessionWithStationResponseType
{
    override string ToString()
    {
        return "OnAssociateSessionWithStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBeginIdentifySessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBeginIdentifySessionResponseType
{
    override string ToString()
    {
        return "OnBeginIdentifySessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBeginIdentifyStationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBeginIdentifyStationResponseType
{
    override string ToString()
    {
        return "OnBeginIdentifyStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBootToConsoleModeChangeType
{
    bool fBootToConsoleModeEnabled;
    override string ToString()
    {
        return "fBootToConsoleModeEnabled: " + fBootToConsoleModeEnabled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnBootToConsoleModeChangeResponseType
{
    override string ToString()
    {
        return "OnBootToConsoleModeChangeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnConfigureStationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnConfigureStationResponseType
{
    override string ToString()
    {
        return "OnConfigureStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnDesktopMonitoringChangeType
{
    bool fDesktopMonitoringEnabled;
    override string ToString()
    {
        return "fDesktopMonitoringEnabled: " + 
            fDesktopMonitoringEnabled.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnDesktopMonitoringChangeResponseType
{
    override string ToString()
    {
        return "OnDesktopMonitoringChangeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnDeviceAddedType
{
    uint idStation;
    
    OnDeviceAddedEType eType;
    
    uint cDevices;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eType: " + EnumToStringInSummary<OnDeviceAddedEType>(eType) + 
            ", cDevices: " + cDevices.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnDeviceAddedEType = enum uint
{
    Unknown = 0,
    Keyboard = 1,
    Mouse = 2,
    audio = 3,
    $"consumer control" = 4,
    volume = 5,
    image = 6,
    hid = 7,
    $"usb hub" = 8,
    $"usb root hub" = 9,
    $"usb composite hub" = 10,
    monitor = 11,
    $"disk drive" = 12,
    $"host controller" = 13,
    $"mass storage device" = 14,
    $"usb device" = 15,
    $"unfiltered keyboard" = 16,
    $"unfiltered mouse" = 17,
    $"unfiltered volume" = 18,
    $"unfiltered image" = 19,
    $"redirected usb" = 20,
    $"virtual gpu" = 21,
    $"touch screen" = 22,
    ...
};

type OnDeviceAddedResponseType
{
    override string ToString()
    {
        return "OnDeviceAddedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnDeviceRemovedType
{
    uint idStation;
    
    OnDeviceRemovedEType eType;
    
    uint cDevices;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", eType: " + EnumToStringInSummary<OnDeviceRemovedEType>(eType) + 
            ", cDevices: " + cDevices.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnDeviceRemovedEType = enum uint
{
    Unknown = 0,
    Keyboard = 1,
    Mouse = 2,
    audio = 3,
    $"consumer control" = 4,
    volume = 5,
    image = 6,
    hid = 7,
    $"usb hub" = 8,
    $"usb root hub" = 9,
    $"usb composite hub" = 10,
    monitor = 11,
    $"disk drive" = 12,
    $"host controller" = 13,
    $"mass storage device" = 14,
    $"usb device" = 15,
    $"unfiltered keyboard" = 16,
    $"unfiltered mouse" = 17,
    $"unfiltered volume" = 18,
    $"unfiltered image" = 19,
    $"redirected usb" = 20,
    $"virtual gpu" = 21,
    $"touch screen" = 22,
    ...
};

type OnDeviceRemovedResponseType
{
    override string ToString()
    {
        return "OnDeviceRemovedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEndIdentifySessionType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEndIdentifySessionResponseType
{
    override string ToString()
    {
        return "OnEndIdentifySessionResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEndIdentifyStationType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEndIdentifyStationResponseType
{
    override string ToString()
    {
        return "OnEndIdentifyStationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEnterSplitScreenType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnEnterSplitScreenResponseType
{
    override string ToString()
    {
        return "OnEnterSplitScreenResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnExitSplitScreenType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + 
            idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnExitSplitScreenResponseType
{
    override string ToString()
    {
        return "OnExitSplitScreenResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnManagedServerOfflineType
{
    string wsServerName;
    override string ToString()
    {
        return "wsServerName: " + 
            wsServerName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnManagedServerOfflineResponseType
{
    override string ToString()
    {
        return "OnManagedServerOfflineResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnManagedServerOnlineType
{
    string wsServerName;
    
    string wsIpAddresses;

    override string ToString()
    {
        return "wsServerName: " + wsServerName + 
            ", wsIpAddresses: " + wsIpAddresses;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnManagedServerOnlineResponseType
{
    override string ToString()
    {
        return "OnManagedServerOnlineResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerAddedType
{
    string wsServerName;
    override string ToString()
    {
        return "wsServerName: " + wsServerName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerAddedResponseType
{
    override string ToString()
    {
        return "OnPeerServerAddedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerDiscoveredType
{
    string wsServerName;
    
    string wsIpAddress;
    
    uint eDiscoverType;

    override string ToString()
    {
        return "wsServerName: " + wsServerName + 
            ", wsIpAddress: " + wsIpAddress + ", eDiscoverType: " + eDiscoverType.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerDiscoveredResponseType
{
    override string ToString()
    {
        return "OnPeerServerDiscoveredResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerRemovedType
{
    string wsServerName;
    override string ToString()
    {
        return "wsServerName: " + wsServerName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnPeerServerRemovedResponseType
{
    override string ToString()
    {
        return "OnPeerServerRemovedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnProjectionStateChangeType
{
    uint idSession;
    
    OnProjectionStateChangeEState eState;

    override string ToString()
    {
        return "idSession: " + idSession.ToString() + 
            ", eState: " + EnumToStringInSummary<OnProjectionStateChangeEState>(eState);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnProjectionStateChangeEState = enum uint
{
    quiescent = 0,
    projecting = 1,
    controlled = 2,
    viewing = 3,
    ...
};

type OnProjectionStateChangeResponseType
{
    override string ToString()
    {
        return "OnProjectionStateChangeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnScheduledUpdateSettingsChangedType
{
    OnScheduledUpdateSettingsChangedEMode eMode;
    
    uint iScheduledUpdateStartHour;
    
    string wsCustomScriptFullPath;
    
    uint cMaxMinutesAllowedForCustomScript;
    
    OnScheduledUpdateSettingsChangedEReturnState eReturnState;

    override string ToString()
    {
        return "eMode: " + 
            EnumToStringInSummary<OnScheduledUpdateSettingsChangedEMode>(eMode) + 
            ", eReturnState: " + EnumToStringInSummary<OnScheduledUpdateSettingsChangedEReturnState>(eReturnState);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnScheduledUpdateSettingsChangedEMode = enum uint
{
    disabled = 0,
    $"script only" = 1,
    $"script and windows updates" = 2,
    ...
};

pattern OnScheduledUpdateSettingsChangedEReturnState = enum uint
{
    shutdown = 0,
    $"last known state" = 1,
    ...
};

type OnScheduledUpdateSettingsChangedResponseType
{
    override string ToString()
    {
        return "OnScheduledUpdateSettingsChangedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnServiceControlSessionChangeType
{
    OnServiceControlSessionChangeDwEventType dwEventType;
    
    uint idSession;

    override string ToString()
    {
        return "idSession: " + idSession.ToString() + 
            ", dwEventType: " + EnumToStringInSummary<OnServiceControlSessionChangeDwEventType>(dwEventType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnServiceControlSessionChangeDwEventType = enum uint
{
    WTS_CONSOLE_CONNECT = 1,
    WTS_CONSOLE_DISCONNECT = 2,
    WTS_REMOTE_CONNECT = 3,
    WTS_REMOTE_DISCONNECT = 4,
    WTS_SESSION_LOGON = 5,
    WTS_SESSION_LOGOFF = 6,
    WTS_SESSION_LOCK = 7,
    WTS_SESSION_UNLOCK = 8,
    WTS_SESSION_REMOTE_CONTROL = 9,
    WTS_SESSION_CREATE = 10,
    WTS_SESSION_TERMINATE = 11,
    ...
};

type OnServiceControlSessionChangeResponseType
{
    override string ToString()
    {
        return "OnServiceControlSessionChangeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionAgentReadyType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionAgentReadyResponseType
{
    override string ToString()
    {
        return "OnSessionAgentReadyResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionBlockedType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionBlockedResponseType
{
    override string ToString()
    {
        return "OnSessionBlockedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionConnectingType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionConnectingResponseType
{
    override string ToString()
    {
        return "OnSessionConnectingResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionDisconnectedType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionDisconnectedResponseType
{
    override string ToString()
    {
        return "OnSessionDisconnectedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionUnblockedType
{
    uint idSession;
    override string ToString()
    {
        return "idSession: " + idSession.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSessionUnblockedResponseType
{
    override string ToString()
    {
        return "OnSessionUnblockedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnStationAddedType
{
    uint idStation;
    
    uint idxSplitScreen;
    
    uint idPrimaryStation;

    override string ToString()
    {
        return "idStation: " + idStation.ToString() + 
            ", idxSplitScreen: " + idxSplitScreen.ToString() + 
            ", idPrimaryStation: " + idPrimaryStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnStationAddedResponseType
{
    override string ToString()
    {
        return "OnStationAddedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnStationAlertType
{
    OnStationAlertEType eType;
    
    uint idStation;
    
    OnStationAlertEStatus eStatus;

    override string ToString()
    {
        return "eType: " + 
            EnumToStringInSummary<OnStationAlertEType>(eType) + 
            ", idStation: " + idStation.ToString() + 
            ", eStatus: " + EnumToStringInSummary<OnStationAlertEStatus>(eStatus);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnStationAlertEType = enum uint
{
    $"hub missing required device" = 0,
    $"auto logon credentials failed" = 1,
    $"wait for services timeout" = 2,
    $"wait for connection timeout" = 3,
    ...
};

pattern OnStationAlertEStatus = enum uint
{
    $"alert cleared" = 0,
    $"alert set" = 1,
    $"no change" = 2,
    ...
};

type OnStationAlertResponseType
{
    override string ToString()
    {
        return "OnStationAlertResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnStationRemovedType
{
    uint idStation;
    override string ToString()
    {
        return "idStation: " + idStation.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnStationRemovedResponseType
{
    override string ToString()
    {
        return "OnStationRemovedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSystemAlertType
{
    OnSystemAlertEType eType;
    
    OnSystemAlertEStatus eStatus;

    override string ToString()
    {
        return "eType: " + 
            EnumToStringInSummary<OnSystemAlertEType>(eType) + 
            ", eStatus: " + EnumToStringInSummary<OnSystemAlertEStatus>(eStatus);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnSystemAlertEType = enum uint
{
    $"Standard Vga Adapter Only" = 0,
    $"No potential station hubs" = 1,
    $"Safe mode" = 2,
    $"Keyboard or mouse on root hub" = 3,
    $"Monitors without potential station hubs" = 4,
    $"Disk protection first threshold crossed" = 5,
    $"Disk protection second threshold crossed" = 6,
    ...
};

pattern OnSystemAlertEStatus = enum uint
{
    $"alert cleared" = 0,
    $"alert set" = 1,
    $"no change" = 2,
    ...
};

type OnSystemAlertResponseType
{
    override string ToString()
    {
        return "OnSystemAlertResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnSystemModeChangeType
{
    OnSystemModeChangeEType eType;

    override string ToString()
    {
        return "eType: " + 
            EnumToStringInSummary<OnSystemModeChangeEType>(eType);
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern OnSystemModeChangeEType = enum uint
{
    multistation = 0,
    maintenance = 1,
    ...
};

type OnSystemModeChangeResponseType
{
    override string ToString()
    {
        return "OnSystemModeChangeResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnVirtualDesktopNotificationType
{
    EVirtualDesktopNotificationTypePatt eVirtualDesktopNotificationType;
    
    uint idProgress;
    
    string wsMessage;

    override string ToString()
    {
        return "eVirtualDesktopNotificationType: " + 
            EnumToStringInSummary<EVirtualDesktopNotificationTypePatt>(eVirtualDesktopNotificationType) + 
            ", idProgress: " + idProgress.ToString() + ", wsMessage: " + wsMessage.ToString();
    }
}
with Standard.XmlEncoding{AnonymousType = true};

pattern EVirtualDesktopNotificationTypePatt = enum uint
{
    $"Begin Enable virtual desktop" = 0,
    $"End enable virtual desktop" = 1,
    $"Begin disable virtual desktop" = 2,
    $"End disable virtual desktop" = 3,
    $"Begin create virtual desktop template" = 4,
    $"Create virtual desktop template progress" = 5,
    $"End virtual desktop template" = 6,
    $"Begin create station virtual desktop" = 7,
    $"Create station virtual desktop progress" = 8,
    $"End create station virtual desktop" = 9,
    ...
};

type OnVirtualDesktopNotificationResponseType
{
    override string ToString()
    {
        return "OnVirtualDesktopNotificationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ShutdownNotificationType
{
    override string ToString()
    {
        return "ShutdownNotificationType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type ShutdownNotificationResponseType
{
    override string ToString()
    {
        return "ShutdownNotificationResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserCreatedType
{
    string wsUserName;
    override string ToString()
    {
        return "wsUserName: " + wsUserName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserCreatedResponseType
{
    override string ToString()
    {
        return "OnUserCreatedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserUpdatedType
{
    string wsUserName;
    override string ToString()
    {
        return "wsUserName: " + wsUserName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserUpdatedResponseType
{
    override string ToString()
    {
        return "OnUserUpdatedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserDeletedType
{
    string wsUserName;
    override string ToString()
    {
        return "wsUserName: " + wsUserName;
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnUserDeletedResponseType
{
    override string ToString()
    {
        return "OnUserDeletedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnGroupUpdatedType
{
    override string ToString()
    {
        return "OnGroupUpdatedType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

type OnGroupUpdatedResponseType
{
    override string ToString()
    {
        return "OnGroupUpdatedResponseType";
    }
}
with Standard.XmlEncoding{AnonymousType = true};

string DisplayThreeItems(array<string> arr)
{
    int i = 0;
    string str = EmptyString;
    foreach (string ele in arr)
    {
        if (ele.Count == 0)
        {
            continue;
        }
        if (i > 3)
        {
            str += "...";
            break;
        }
        if (i > 0)
        {
            str += ", ";
        }
        str += ele;
        i++;
    }
    if (str.Count > 0)
    {
        return "[" + str + "]";
    }
    else
    {
        return str;
    }
}

const string EmptyString = "";

const string MultiPointNamespace = "http://MultiPoint";
const string RMAction = MultiPointNamespace + "/RemoteManagement";
const string RMFaultAction = "http://MultiPoint/RemoteManagement/WmsFault";

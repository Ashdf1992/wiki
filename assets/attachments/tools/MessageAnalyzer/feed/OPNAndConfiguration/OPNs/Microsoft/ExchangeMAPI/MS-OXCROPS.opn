protocol MSOXCROPS with
Documentation
{
    ProtocolName = "Remote Operations (ROP) List and Encoding Protocol",
    ShortName = "MS-OXCROPS",
    DocumentName = "MS-OXCROPS",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
    [
        new Reference{Name = "MS-OXCROPS", Version = "16.1"},
    ],
    RevisionSummary =    
    [
        new Revision{Class=RevisionClass.Major, Version="1.3.1", Date="08/31/2015"},
    ]
};

using Diagnostics;
using Utility;
using MSRPCE;
using MSOXCDATA;
using MSOXCMAPIHTTP;
using MSOXCRPC;
using MSOXCSTOR;
using MSOXORULE;
using MSOXCTABL;
using MSOXCPERM;
using MSOXCPRPT;
using MSOXCNOTIF;
using MSOXCFOLD;
using MSOXCMSG;
using MSOXCFXICS;

/* 
 * ------------------------------------Architecture-----------------------------------------
 * MS-OXCROPS use MS-OXCRPC and MS-OXCMAPIHTTP as the transport protocol.
 * The ROP input/output buffer, which acts as the message of MS-OXCROPS, 
 * is sent as part of the payload of the EcDoRpcExt2 RPC method (MS-OXCRPC);
 * or as part of the request or response body of the Execute request type(MS-OXCMAPIHTTP)
 *
 * The following diagram shows an example for its relationship with other protocols
 *
 *                     +------------+
 *                     |            |
 *                     | MS-OXCROPS |
 *                     |            |
 *               //----+------------+------\\
 *               ||                        ||
 *               ||       ROPBuffer        ||
 *               ||                        ||
 *          /-----------\             /-----------\
 *          |EcDoRpcExt2|             |  Execute  |
 *              | |                        | |              
 *        +-----|-|-----+          +-------|-|--------+
 *        |             |          |                  |
 *        |  MS-OXCRPC  |          |  MS-OXCMAPIHTTP  |
 *        |             |          |                  |
 *        +-------------+          +------------------+
 *
 */
 
// utility filter to help user to find the specified Rop quickly.
annotation array<string> ROPInputBuffer#Rops;
annotation array<string> ROPOutputBuffer#Rops;
annotation array<uint> ROPOutputBuffer#StatusList;
string Results = "";
array<uint> StatusResults = [];
uint RequestCallId = 0;
uint ResponseCallId = 0;

endpoint BufferServer over MSOXCRPC.MailboxServer | over MSOXCMAPIHTTP.Server
                      accepts ROPInputBuffer
                      issues ROPOutputBuffer
                      issues ROPOutputBufferPack;

client endpoint Client connected to BufferServer;

DecodingContext dc = new DecodingContext();

autostart actor ActorOverMSOXCRPC(MSOXCRPC.MailboxServer node)
{
    process node accepts req:MSOXCRPC.EMSMDB.EcDoRpcExt2Request
        where req.rgbIn is rgbIn:ExtendedBuffer && (rgbIn.Payload as binary).Count > 0
    {
        if (req.Origins.Count > 0)
        {
           if (req.Origins[0] is MSRPCE.RpcconnRequestHdrT)
           {
              MSRPCE.RpcconnRequestHdrT request = req.Origins[0] as MSRPCE.RpcconnRequestHdrT;
              RequestCallId = request.CallId;
           }
        }
        ROPInputBuffer inputBuffer = DecodeRequestMessage(ref dc, rgbIn.Payload as binary);
        dispatch (endpoint BufferServer over node) accepts inputBuffer;
    }

    process node issues res:MSOXCRPC.EMSMDB.EcDoRpcExt2Response
        where res.rgbOut is rgbOut:array<ExtendedBuffer> && rgbOut.Count > 0
    {
        array<ROPOutputBuffer> responseCollection = [];
    
        if (res.Origins[0] is MSRPCE.RpcconnResponseHdrT)
        {
            MSRPCE.RpcconnResponseHdrT response = res.Origins[0] as MSRPCE.RpcconnResponseHdrT;
            ResponseCallId = response.CallId;
        }
        
        foreach (ExtendedBuffer exBuffer in rgbOut)
        {
            ROPOutputBuffer outputBuffer = DecodeResponseMessage(ref dc, exBuffer.Payload as binary);
            responseCollection += [outputBuffer];
        }
        
        if (responseCollection.Count == 1)
            dispatch (endpoint BufferServer over node) issues responseCollection[0];
        else
        {
            ROPOutputBufferPack package = new ROPOutputBufferPack{ChainedResponse = responseCollection};
            dispatch (endpoint BufferServer over node) issues package; 
        }
        
        if (ResponseCallId in dc.CallIDProTagMap)
        {
            dc.RemoveCallIDFromMap(ResponseCallId);
        }
        
        if (ResponseCallId in dc.CallIDGetPropTagMap)
        {
            dc.RemoveKeyFromCallIDGetPropTagMap(ResponseCallId);
        }
		
	if (ResponseCallId in dc._CallIDRopRequestCountMap)
        {
            dc.RemoveCallIDRopRequestCountMap(ResponseCallId);
        }
    }
    
    ~endpoint(MSOXCRPC.MailboxServer e)
    {
       dc = new DecodingContext();
    } 
    
}

autostart actor ActorOverMSOXCMAPIHTTP(MSOXCMAPIHTTP.Server node)
{  
    process node accepts m:MapiHttpContract.MapiRequestMessage 
        where m.Header["X-RequestType"] == "Execute"
            && m.RequestBody is execRequestBody:MSOXCMAPIHTTP.ExecuteRequestBodyType
            && (execRequestBody.RopBuffer.Payload as binary).Count > 0
    {
        ROPInputBuffer inputBuffer = DecodeRequestMessage(ref dc, execRequestBody.RopBuffer.Payload as binary);
        dispatch (endpoint BufferServer over node) accepts inputBuffer;
    }

    process node issues m:MapiHttpContract.MapiResponseMessage 
        where m.Header["X-RequestType"] == "Execute"
            && m.ResponseBody is execResponseBody:MSOXCMAPIHTTP.ExecuteResponseSuccessBodyType
            && execResponseBody.RopBuffer is ropBuffer:ExtendedBuffer
            && (ropBuffer.Payload as binary).Count > 0
    {
        ROPOutputBuffer outputBuffer = DecodeResponseMessage(ref dc, ropBuffer.Payload as binary);
        dispatch (endpoint BufferServer over node) issues outputBuffer;
    }
    
    ~endpoint(MSOXCMAPIHTTP.Server e)
    {
       dc = new DecodingContext();
    } 
}

// ============================== 2.2.1   ROP Input and Output Buffers ==============================
message ROPInputBuffer
{
    ushort RopSize;
    array<ROPRequestBufferBase> RopsList;
    array<uint> ServerObjectHandleTable;
    
    override string ToString()
    {
        string summary = "";
        
        if (RopsList.Count == 0)
            summary = "Empty ROP request buffer";
        else if (RopsList.Count > 1)
        {    
            summary = Format("{0} ROP Requests: ", RopsList.Count);
            for (int i = 0; i < RopsList.Count; i++)
            {
                summary += GetRopName(RopsList[i].RopId);
                if (i != RopsList.Count - 1)
                {
                    summary += ", ";
                }
            }
        }
        else
        {
            summary = GetRopName(RopsList[0].RopId) + " Request";
        }

        return summary;
    }
}   

message ROPOutputBuffer
{
    ushort RopSize;
    array<ROPResponseBufferBase> RopsList;
    array<uint> ServerObjectHandleTable where ProcessReturnValues();
    
    // This function is used to convert Status code to string result in advance to avoid parser error issue. 
    bool ProcessReturnValues()
    {
         if (RopsList != null && RopsList != nothing && RopsList.Count == 1)
         {  
            if (HasReturnValueRops(GetRopName(RopsList[0].RopId)) && StatusResults != nothing && StatusResults.Count > 0)
            {
                uint returnVal = StatusResults[0];
                Results = FormatErrorCode(returnVal);
            }
            else
            {
                Results = "";
            }
         }
        return true;         
    }
    
    override string ToString()
    {
        string summary = "";
        
        if (RopsList.Count == 0)
            summary = "Empty ROP response buffer";
        else if (RopsList.Count > 1)
        {           
            summary = Format("{0} ROP Responses: ", RopsList.Count);
            for (int i = 0; i < RopsList.Count; i++)
            {
                summary += GetRopName(RopsList[i].RopId);
                if (i != RopsList.Count - 1)
                {
                    summary += ", ";
                }
            }
        }
        else 
        {   
            string currentRopName = GetRopName(RopsList[0].RopId);
            uint returnVal = 0;
            if (HasReturnValueRops(currentRopName))
            {       
                summary = Format("{0} Response, Status = {1}", GetRopName(RopsList[0].RopId), Results);
            }
            else
            {
                summary = Format("{0} Response", currentRopName);
            }
        }

        return summary;
    }
}

// Refer to [MS-OXCRPC] 3.1.4.2.1.2   Extended Buffer Packing
message ROPOutputBufferPack
{
    array<ROPOutputBuffer> ChainedResponse;
    
    override string ToString()
    {
        RopIdType initialRopIDInChain;
        int allRopCount = 0;
        int chainedRopsCount = 0;
        bool isValidChainScenario = true;
        
        for (int i = 0; i < ChainedResponse.Count; i++)
        {
            int ropCount = ChainedResponse[i].RopsList.Count;
            allRopCount += ropCount;

            // First ROP Buffer may contains the initial rop in ROP packing.
            if (i == 0)
            {
                initialRopIDInChain = ChainedResponse[i].RopsList[ropCount - 1].RopID;
                continue;
            }
           
            // Normal ROP Chain Scenario:
            // All the left rops but not first RPC ExtendBuffer should be same ROP
            if (isValidChainScenario)
            {
                chainedRopsCount += ropCount;
                foreach (ROPResponseBufferBase ropMsg in ChainedResponse[i].RopsList)
                {
                    if (ropMsg.RopID != initialRopIDInChain)
                    {
                        isValidChainScenario = false;
                        break;
                    }
                }
            }
        }
        
        if (isValidChainScenario)
            return Format("{0} ROP Response(s), {1} chain(s) with {2} ROP",
                           allRopCount, 
                           chainedRopsCount, 
                           GetRopName(initialRopIDInChain));

        return  Format("{0} ROP Response(s)", allRopCount);
    }
}

ROPInputBuffer DecodeRequestMessage(ref DecodingContext dc, binary payload)
{
    stream data = payload as stream;
    
    ROPInputBuffer inputBuffer = new ROPInputBuffer();
    inputBuffer.SourceData = data;
    int currentBitPos = data.BitPosition;

    inputBuffer.RopSize = BinaryDecoder<ushort>(data) as ushort;
    inputBuffer.AssignFieldEncodingInfo("RopSize", currentBitPos, 8 * 2);
    currentBitPos += 8 * 2;
    array<ROPRequestBufferBase> ropList = [];
    array<uint> RopRemainSize = [];
	
    if (inputBuffer.RopSize > 2)
    {
        Blob messageBlob = BinaryDecoder<Blob[inputBuffer.RopSize - 2 as uint]>(data) as Blob;
        inputBuffer.AssignFieldEncodingInfo("RopsList", currentBitPos, 8 * (inputBuffer.RopSize - 2 as uint) as int);
        currentBitPos += 8 * (inputBuffer.RopSize - 2 as uint) as int;
        
        stream s = messageBlob.Data as stream;
        array<string> ropNameArr = [];
        
        do
        {
            optional ROPRequestBufferBase currMsg = nothing;
            byte currByte = CurrentByte(s);
            ropNameArr += [GetRopName(currByte)];
        
            switch (currByte)
            {
                // STOR ROPs
                case RopIdType.RopLogon =>
                    currMsg = RopBufferGenericDecoder<RopLogonRequest>(s, "RopLogonRequest", ref dc);
                case RopIdType.RopGetReceiveFolder =>
                    currMsg = RopBufferGenericDecoder<RopGetReceiveFolderROPRequest >(s, "RopGetReceiveFolderROPRequest");
                case RopIdType.RopSetReceiveFolder =>
                    currMsg = RopBufferGenericDecoder<RopSetReceiveFolderROPRequest >(s, "RopSetReceiveFolderROPRequest");
                case RopIdType.RopGetReceiveFolderTable =>
                    currMsg = RopBufferGenericDecoder<RopGetReceiveFolderTableROPRequest >(s, "RopGetReceiveFolderTableROPRequest");
                case RopIdType.RopGetStoreState =>
                    currMsg = RopBufferGenericDecoder<RopGetStoreStateROPRequest >(s, "RopGetStoreStateROPRequest");
                case RopIdType.RopGetOwningServers =>
                    currMsg = RopBufferGenericDecoder<RopGetOwningServersROPRequest >(s, "RopGetOwningServersROPRequest");
                case RopIdType.RopPublicFolderIsGhosted =>
                    currMsg = RopBufferGenericDecoder<RopPublicFolderIsGhostedROPRequest >(s, "RopPublicFolderIsGhostedROPRequest");
                case RopIdType.RopLongTermIdFromId =>
                    currMsg = RopBufferGenericDecoder<RopLongTermIdFromIdROPRequest >(s, "RopLongTermIdFromIdROPRequest");
                case RopIdType.RopIdFromLongTermId =>
                    currMsg = RopBufferGenericDecoder<RopIdFromLongTermIdROPRequest >(s, "RopIdFromLongTermIdROPRequest");
                case RopIdType.RopGetPerUserLongTermIds =>
                    currMsg = RopBufferGenericDecoder<RopGetPerUserLongTermIdsROPRequest >(s, "RopGetPerUserLongTermIdsROPRequest");
                case RopIdType.RopGetPerUserGuid =>
                    currMsg = RopBufferGenericDecoder<RopGetPerUserGuidROPRequest >(s, "RopGetPerUserGuidROPRequest");
                case RopIdType.RopReadPerUserInformation =>
                    currMsg = RopBufferGenericDecoder<RopReadPerUserInformationROPRequest >(s, "RopReadPerUserInformationROPRequest");
                case RopIdType.RopWritePerUserInformation =>
                    currMsg = RopBufferGenericDecoder<RopWritePerUserInformationROPRequest >(s, "RopWritePerUserInformationROPRequest");

                // Folder Rops
                case RopIdType.RopOpenFolder =>
                    currMsg = RopBufferGenericDecoder<RopOpenFolderRequest>(s, "RopOpenFolderRequest");
                case RopIdType.RopCreateFolder =>
                    currMsg = RopBufferGenericDecoder<RopCreateFolderRequest>(s, "RopCreateFolderRequest");
                case RopIdType.RopDeleteFolder =>
                    currMsg = RopBufferGenericDecoder<RopDeleteFolderRequest>(s, "RopDeleteFolderRequest");
                case RopIdType.RopSetSearchCriteria =>
                    currMsg = RopBufferGenericDecoder<RopSetSearchCriteriaRequest>(s, "RopSetSearchCriteriaRequest");
                case RopIdType.RopGetSearchCriteria =>
                    currMsg = RopBufferGenericDecoder<RopGetSearchCriteriaRequest>(s, "RopGetSearchCriteriaRequest");
                case RopIdType.RopMoveCopyMessages =>
                    currMsg = RopBufferGenericDecoder<RopMoveCopyMessagesRequest>(s, "RopMoveCopyMessagesRequest");
                case RopIdType.RopMoveFolder =>
                    currMsg = RopBufferGenericDecoder<RopMoveFolderRequest>(s, "RopMoveFolderRequest");
                case RopIdType.RopCopyFolder =>
                    currMsg = RopBufferGenericDecoder<RopCopyFolderRequest>(s, "RopCopyFolderRequest");
                case RopIdType.RopEmptyFolder =>
                    currMsg = RopBufferGenericDecoder<RopEmptyFolderRequest>(s, "RopEmptyFolderRequest");
                case RopIdType.RopHardDeleteMessagesAndSubfolders =>
                    currMsg = RopBufferGenericDecoder<RopHardDeleteMessagesAndSubfoldersRequest>(s, "RopHardDeleteMessagesAndSubfoldersRequest");
                case RopIdType.RopDeleteMessages =>
                    currMsg = RopBufferGenericDecoder<RopDeleteMessagesRequest>(s, "RopDeleteMessagesRequest");
                case RopIdType.RopHardDeleteMessages =>
                    currMsg = RopBufferGenericDecoder<RopHardDeleteMessagesRequest>(s, "RopHardDeleteMessagesRequest");
                case RopIdType.RopGetHierarchyTable =>
                    currMsg = RopBufferGenericDecoder<RopGetHierarchyTableRequest>(s, "RopGetHierarchyTableRequest");
                case RopIdType.RopGetContentsTable =>
                    currMsg = RopBufferGenericDecoder<RopGetContentsTableRequest>(s, "RopGetContentsTableRequest");

                // Table ROPs
                case RopIdType.RopSetColumns =>
                    currMsg = RopBufferGenericDecoder<RopSetColumnsRequest>(s, "RopSetColumnsRequest", ref dc);
                case RopIdType.RopSortTable =>
                    currMsg = RopBufferGenericDecoder<RopSortTableRequest>(s, "RopSortTableRequest");
                case RopIdType.RopRestrict =>
                    currMsg = RopBufferGenericDecoder<RopRestrictRequest>(s, "RopRestrictRequest");
                case RopIdType.RopQueryRows =>
                    currMsg = RopBufferGenericDecoder<RopQueryRowsRequest>(s, "RopQueryRowsRequest");
                case RopIdType.RopAbort =>
                    currMsg = RopBufferGenericDecoder<RopAbortRequest>(s, "RopAbortRequest");
                case RopIdType.RopGetStatus =>
                    currMsg = RopBufferGenericDecoder<RopGetStatusRequest>(s, "RopGetStatusRequest");
                case RopIdType.RopQueryPosition =>
                    currMsg = RopBufferGenericDecoder<RopQueryPositionRequest>(s, "RopQueryPositionRequest");
                case RopIdType.RopSeekRow =>
                    currMsg = RopBufferGenericDecoder<RopSeekRowRequest>(s, "RopSeekRowRequest");
                case RopIdType.RopSeekRowBookmark =>
                    currMsg = RopBufferGenericDecoder<RopSeekRowBookmarkRequest>(s, "RopSeekRowBookmarkRequest");
                case RopIdType.RopSeekRowFractional =>
                    currMsg = RopBufferGenericDecoder<RopSeekRowFractionalRequest>(s, "RopSeekRowFractionalRequest");
                case RopIdType.RopCreateBookmark =>
                    currMsg = RopBufferGenericDecoder<RopCreateBookmarkRequest>(s, "RopCreateBookmarkRequest");
                case RopIdType.RopQueryColumnsAll =>
                    currMsg = RopBufferGenericDecoder<RopQueryColumnsAllRequest>(s, "RopQueryColumnsAllRequest");
                case RopIdType.RopFindRow =>
                    currMsg = RopBufferGenericDecoder<RopFindRowRequest>(s, "RopFindRowRequest");
                case RopIdType.RopFreeBookmark =>
                    currMsg = RopBufferGenericDecoder<RopFreeBookmarkRequest>(s, "RopFreeBookmarkRequest");
                case RopIdType.RopResetTable =>
                    currMsg = RopBufferGenericDecoder<RopResetTableRequest>(s, "RopResetTableRequest");
                case RopIdType.RopExpandRow =>
                    currMsg = RopBufferGenericDecoder<RopExpandRowRequest>(s, "RopExpandRowRequest");
                case RopIdType.RopCollapseRow =>
                    currMsg = RopBufferGenericDecoder<RopCollapseRowRequest>(s, "RopCollapseRowRequest");
                case RopIdType.RopGetCollapseState =>
                    currMsg = RopBufferGenericDecoder<RopGetCollapseStateRequest>(s, "RopGetCollapseStateRequest");
                case RopIdType.RopSetCollapseState =>
                    currMsg = RopBufferGenericDecoder<RopSetCollapseStateRequest>(s, "RopSetCollapseStateRequest");

                // Message ROPS
                case RopIdType.RopOpenMessage =>
                    currMsg = RopBufferGenericDecoder<RopOpenMessageRequest>(s, "RopOpenMessageRequest");
                case RopIdType.RopCreateMessage =>
                    currMsg = RopBufferGenericDecoder<RopCreateMessageRequest>(s, "RopCreateMessageRequest");
                case RopIdType.RopSaveChangesMessage =>
                    currMsg = RopBufferGenericDecoder<RopSaveChangesMessageRequest>(s, "RopSaveChangesMessageRequest");
                case RopIdType.RopRemoveAllRecipients =>
                    currMsg = RopBufferGenericDecoder<RopRemoveAllRecipientsRequest>(s, "RopRemoveAllRecipientsRequest");
                case RopIdType.RopModifyRecipients =>
                    currMsg = RopBufferGenericDecoder<RopModifyRecipientsRequest>(s, "RopModifyRecipientsRequest");
                case RopIdType.RopReadRecipients =>
                    currMsg = RopBufferGenericDecoder<RopReadRecipientsRequest>(s, "RopReadRecipientsRequest");
                case RopIdType.RopReloadCachedInformation =>
                    currMsg = RopBufferGenericDecoder<RopReloadCachedInformationRequest>(s, "RopReloadCachedInformationRequest");
                case RopIdType.RopSetMessageStatus =>
                    currMsg = RopBufferGenericDecoder<RopSetMessageStatusRequest>(s, "RopSetMessageStatusRequest");
                case RopIdType.RopGetMessageStatus =>
                    currMsg = RopBufferGenericDecoder<RopGetMessageStatusRequest>(s, "RopGetMessageStatusRequest");
                case RopIdType.RopSetReadFlags =>
                    currMsg = RopBufferGenericDecoder<RopSetReadFlagsRequest>(s, "RopSetReadFlagsRequest");
                case RopIdType.RopSetMessageReadFlag =>
                    currMsg = RopBufferGenericDecoder<RopSetMessageReadFlagRequest[dc.LogonFlagMapLogId]>(s, "RopSetMessageReadFlagRequest");
                case RopIdType.RopOpenAttachment =>
                    currMsg = RopBufferGenericDecoder<RopOpenAttachmentRequest>(s, "RopOpenAttachmentRequest");
                case RopIdType.RopCreateAttachment =>
                    currMsg = RopBufferGenericDecoder<RopCreateAttachmentRequest>(s, "RopCreateAttachmentRequest");
                case RopIdType.RopDeleteAttachment =>
                    currMsg = RopBufferGenericDecoder<RopDeleteAttachmentRequest>(s, "RopDeleteAttachmentRequest");
                case RopIdType.RopSaveChangesAttachment =>
                    currMsg = RopBufferGenericDecoder<RopSaveChangesAttachmentRequest>(s, "RopSaveChangesAttachmentRequest");
                case RopIdType.RopOpenEmbeddedMessage =>
                    currMsg = RopBufferGenericDecoder<RopOpenEmbeddedMessageRequest>(s, "RopOpenEmbeddedMessageRequest");
                case RopIdType.RopGetAttachmentTable =>
                    currMsg = RopBufferGenericDecoder<RopGetAttachmentTableRequest>(s, "RopGetAttachmentTableRequest");
                case RopIdType.RopGetValidAttachments =>
                    currMsg = RopBufferGenericDecoder<RopGetValidAttachmentsRequest>(s, "RopGetValidAttachmentsRequest");

                // Property ROPs
                case RopIdType.RopGetPropertyIdsFromNames =>
                    currMsg = RopBufferGenericDecoder<RopGetPropertyIdsFromNamesRequest>(s, "RopGetPropertyIdsFromNamesRequest");
                case RopIdType.RopGetNamesFromPropertyIds =>
                    currMsg = RopBufferGenericDecoder<RopGetNamesFromPropertyIdsRequest>(s, "RopGetNamesFromPropertyIdsRequest");
                case RopIdType.RopGetPropertiesSpecific =>
                    currMsg = RopBufferGenericDecoder<RopGetPropertiesSpecificRequest>(s, "RopGetPropertiesSpecificRequest", ref dc);
                case RopIdType.RopGetPropertiesAll =>
                    currMsg = RopBufferGenericDecoder<RopGetPropertiesAllRequest>(s, "RopGetPropertiesAllRequest");
                case RopIdType.RopGetPropertiesList =>
                    currMsg = RopBufferGenericDecoder<RopGetPropertiesListRequest>(s, "RopGetPropertiesListRequest");
                case RopIdType.RopSetProperties =>
                    currMsg = RopBufferGenericDecoder<RopSetPropertiesRequest>(s, "RopSetPropertiesRequest");
                case RopIdType.RopSetPropertiesNoReplicate =>
                    currMsg = RopBufferGenericDecoder<RopSetPropertiesNoReplicateRequest>(s, "RopSetPropertiesNoReplicateRequest");
                case RopIdType.RopDeleteProperties =>
                    currMsg = RopBufferGenericDecoder<RopDeletePropertiesRequest>(s, "RopDeletePropertiesRequest");
                case RopIdType.RopDeletePropertiesNoReplicate =>
                    currMsg = RopBufferGenericDecoder<RopDeletePropertiesNoReplicateRequest>(s, "RopDeletePropertiesNoReplicateRequest");
                case RopIdType.RopQueryNamedProperties =>
                    currMsg = RopBufferGenericDecoder<RopQueryNamedPropertiesRequest>(s, "RopQueryNamedPropertiesRequest");
                case RopIdType.RopCopyProperties =>
                    currMsg = RopBufferGenericDecoder<RopCopyPropertiesRequest>(s, "RopCopyPropertiesRequest");
                case RopIdType.RopCopyTo =>
                    currMsg = RopBufferGenericDecoder<RopCopyToRequest>(s, "RopCopyToRequest");
                case RopIdType.RopProgress =>
                    currMsg = RopBufferGenericDecoder<RopProgressRequest>(s, "RopProgressRequest");

                // Stream ROPs
                case RopIdType.RopOpenStream =>
                    currMsg = RopBufferGenericDecoder<RopOpenStreamRequest>(s, "RopOpenStreamRequest");
                case RopIdType.RopReadStream =>
                    currMsg = RopBufferGenericDecoder<RopReadStreamRequest>(s, "RopReadStreamRequest");
                case RopIdType.RopWriteStream =>
                    currMsg = RopBufferGenericDecoder<RopWriteStreamRequest>(s, "RopWriteStreamRequest");
                case RopIdType.RopCommitStream =>
                    currMsg = RopBufferGenericDecoder<RopCommitStreamRequest>(s, "RopCommitStreamRequest");
                case RopIdType.RopGetStreamSize =>
                    currMsg = RopBufferGenericDecoder<RopGetStreamSizeRequest>(s, "RopGetStreamSizeRequest");
                case RopIdType.RopSetStreamSize =>
                    currMsg = RopBufferGenericDecoder<RopSetStreamSizeRequest>(s, "RopSetStreamSizeRequest");
                case RopIdType.RopSeekStream =>
                    currMsg = RopBufferGenericDecoder<RopSeekStreamRequest>(s, "RopSeekStreamRequest");
                case RopIdType.RopCopyToStream =>
                    currMsg = RopBufferGenericDecoder<RopCopyToStreamRequest>(s, "RopCopyToStreamRequest");
                case RopIdType.RopLockRegionStream =>
                    currMsg = RopBufferGenericDecoder<RopLockRegionStreamRequest>(s, "RopLockRegionStreamRequest");
                case RopIdType.RopUnlockRegionStream =>
                    currMsg = RopBufferGenericDecoder<RopUnlockRegionStreamRequest>(s, "RopUnlockRegionStreamRequest");
                case RopIdType.RopWriteAndCommitStream =>
                    currMsg = RopBufferGenericDecoder<RopWriteAndCommitStreamRequest>(s, "RopWriteAndCommitStreamRequest");
                case RopIdType.RopCloneStream =>
                    currMsg = RopBufferGenericDecoder<RopCloneStreamRequest>(s, "RopCloneStreamRequest");

                // Rules
                case RopIdType.RopModifyRules =>
                    currMsg = RopBufferGenericDecoder<RopModifyRulesRequest>(s, "RopModifyRulesRequest");
                case RopIdType.RopGetRulesTable =>
                    currMsg = RopBufferGenericDecoder<RopGetRulesTableRequest>(s, "RopGetRulesTableRequest");
                case RopIdType.RopUpdateDeferredActionMessages =>
                    currMsg = RopBufferGenericDecoder<RopUpdateDeferredActionMessagesRequest>(s, "RopUpdateDeferredActionMessagesRequest"); 
                
                // Permissions
                case RopIdType.RopModifyPermissions =>
                    currMsg = RopBufferGenericDecoder<RopModifyPermissionsRequest>(s, "RopModifyPermissionsRequest");
                case RopIdType.RopGetPermissionsTable =>
                    currMsg = RopBufferGenericDecoder<RopGetPermissionsTableRequest>(s, "RopGetPermissionsTableRequest");
                    
                // Notification
                case RopIdType.RopRegisterNotification =>
                    currMsg = RopBufferGenericDecoder<RopRegisterNotificationRequest>(s, "RopRegisterNotificationRequest"); 
                                
                // Fxics
                case RopIdType.RopFastTransferSourceCopyMessages =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyMessagesRequest>(s, "RopFastTransferSourceCopyMessagesRequest", ref dc);
                case RopIdType.RopFastTransferSourceCopyFolder =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyFolderRequest>(s, "RopFastTransferSourceCopyFolderRequest", ref dc);
                case RopIdType.RopFastTransferSourceCopyTo =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyToRequest>(s, "RopFastTransferSourceCopyToRequest", ref dc);
                case RopIdType.RopFastTransferSourceGetBuffer =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferSourceGetBufferRequest>(s, "RopFastTransferSourceGetBufferRequest");
                case RopIdType.RopFastTransferDestinationConfigure =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferDestinationConfigureRequest>(s, "RopFastTransferDestinationConfigureRequest");
                case RopIdType.RopFastTransferDestinationPutBuffer =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferDestinationPutBufferRequest[dc.FastTransferRootType]>(s, "RopFastTransferDestinationPutBufferRequest");
                case RopIdType.RopFastTransferSourceCopyProperties =>
                    currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyPropertiesRequest>(s, "RopFastTransferSourceCopyPropertiesRequest", ref dc);
                case RopIdType.RopSynchronizationConfigure =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationConfigureRequest>(s, "RopSynchronizationConfigureRequest", ref dc);
                case RopIdType.RopSynchronizationImportMessageChange =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationImportMessageChangeRequest>(s, "RopSynchronizationImportMessageChangeRequest");
                case RopIdType.RopSynchronizationImportHierarchyChange =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationImportHierarchyChangeRequest>(s, "RopSynchronizationImportHierarchyChangeRequest");
                case RopIdType.RopSynchronizationImportDeletes =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationImportDeletesRequest>(s, "RopSynchronizationImportDeletesRequest");
                case RopIdType.RopSynchronizationUploadStateStreamBegin =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamBeginRequest>(s, "RopSynchronizationUploadStateStreamBeginRequest");
                case RopIdType.RopSynchronizationUploadStateStreamContinue =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamContinueRequest>(s, "RopSynchronizationUploadStateStreamContinueRequest");
                case RopIdType.RopSynchronizationUploadStateStreamEnd =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamEndRequest>(s, "RopSynchronizationUploadStateStreamEndRequest");
                case RopIdType.RopSynchronizationImportMessageMove =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationImportMessageMoveRequest>(s, "RopSynchronizationImportMessageMoveRequest");
                case RopIdType.RopSynchronizationOpenCollector =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationOpenCollectorRequest>(s, "RopSynchronizationOpenCollectorRequest");
                case RopIdType.RopGetLocalReplicaIds =>
                    currMsg = RopBufferGenericDecoder<RopGetLocalReplicaIdsRequest>(s, "RopGetLocalReplicaIdsRequest");
                case RopIdType.RopSynchronizationImportReadStateChanges =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationImportReadStateChangesRequest>(s, "RopSynchronizationImportReadStateChangesRequest");
                case RopIdType.RopSynchronizationGetTransferState =>
                    currMsg = RopBufferGenericDecoder<RopSynchronizationGetTransferStateRequest>(s, "RopSynchronizationGetTransferStateRequest", ref dc);
                case RopIdType.RopTellVersion =>
                    currMsg = RopBufferGenericDecoder<RopTellVersionRequest>(s, "RopTellVersionRequest");
                case RopIdType.RopSetLocalReplicaMidsetDeleted =>
                    currMsg = RopBufferGenericDecoder<RopSetLocalReplicaMidsetDeletedRequest>(s, "RopSetLocalReplicaMidsetDeletedRequest");
                
                // Others
                case RopIdType.RopRelease =>
                     currMsg = RopBufferGenericDecoder<RopReleaseRequest>(s, "RopReleaseRequest");
                // MS-OXOMSG
                case RopIdType.RopSubmitMessage =>
                     currMsg = RopBufferGenericDecoder<RopSubmitMessageRequest>(s, "RopSubmitMessageRequest");
                case RopIdType.RopAbortSubmit =>
                     currMsg = RopBufferGenericDecoder<RopAbortSubmitRequest>(s, "RopAbortSubmitRequest");
                case RopIdType.RopSetSpooler =>
                     currMsg = RopBufferGenericDecoder<RopSetSpoolerRequest>(s, "RopSetSpoolerRequest");
                case RopIdType.RopSpoolerLockMessage =>
                     currMsg = RopBufferGenericDecoder<RopSpoolerLockMessageRequest>(s, "RopSpoolerLockMessageRequest");
                case RopIdType.RopGetAddressTypes =>
                     currMsg = RopBufferGenericDecoder<RopGetAddressTypesRequest>(s, "RopGetAddressTypesRequest");
                case RopIdType.RopTransportSend =>
                     currMsg = RopBufferGenericDecoder<RopTransportSendRequest>(s, "RopTransportSendRequest");
                case RopIdType.RopTransportNewMail =>
                     currMsg = RopBufferGenericDecoder<RopTransportNewMailRequest>(s, "RopTransportNewMailRequest");
                case RopIdType.RopGetTransportFolder =>
                     currMsg = RopBufferGenericDecoder<RopGetTransportFolderRequest>(s, "RopGetTransportFolderRequest");
                case RopIdType.RopOptionsData =>
                     currMsg = RopBufferGenericDecoder<RopOptionsDataRequest>(s, "RopOptionsDataRequest");

                default =>
                     currMsg = RopBufferGenericDecoder<RopReservedRequest>(s, "RopReservedRequest");
            }
            ropList += [currMsg as ROPRequestBufferBase];	
	    RopRemainSize += [s.RemainingByteLength as uint];				
        } while (s.RemainingByteLength > 0);
        inputBuffer#Rops = ropNameArr;
    }
    
    inputBuffer.RopsList = ropList; 
    inputBuffer.ServerObjectHandleTable = (BinaryDecoder<SOHTWrapper>(data) as SOHTWrapper).ServerObjectHandleTable;
    inputBuffer.AssignFieldEncodingInfo("ServerObjectHandleTable", currentBitPos, inputBuffer.ServerObjectHandleTable.Count * 8 * 4);
    dc.SetCallIDRopRequestCountMap(RequestCallId, RopRemainSize); 
	
    // This is used to set FastTransfer stream root type according to InputServerObject of RopFastTransferSourceCopyTo and RopFastTransferSourceCopyProperties rops,  which are used in MS-OXCFXICS
    if (ropList.Count > 0)
    {
        map<uint, array<PropertyTag>> HandleMapForSetColumns = {};
        map<uint, array<PropertyTag>> HandleMapForGetProSpecific = {};
        foreach (var ropRequest in inputBuffer.RopsList)
        {
            if (ropRequest is RopFastTransferSourceCopyToRequest)
            {
                uint objectHandleKey = inputBuffer.ServerObjectHandleTable[(ropRequest as RopFastTransferSourceCopyToRequest).InputHandleIndex as int];
                if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.FolderObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.FolderContent);
                    break;
                }
                else if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.MessageObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.MessageContent);
                    break;
                }
                else if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.AttachmentObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.AttachmentContent);
                    break;
                }
            }
        
            if (ropRequest is RopFastTransferSourceCopyPropertiesRequest)
            {
                uint objectHandleKey = inputBuffer.ServerObjectHandleTable[(ropRequest as RopFastTransferSourceCopyPropertiesRequest).InputHandleIndex as int];
                if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.FolderObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.FolderContent);
                    break;
                }
                else if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.MessageObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.MessageContent);
                    break;
                }
                else if (dc.GetObjectHandlesType(objectHandleKey) == ObjectHandlesType.AttachmentObjectHandles)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.AttachmentContent);
                    break;
                }
            }
            
            // If Rop request is RopSetColumnsRequest, its property tags will be used by other ROPs, such as RopQueryRow, RopExpandRow, RopFindRow and RopNotify. So here will save them in different way: ProTagMap (used for saving the valid server object handle value and Property tags) or CallIDProTagMap (used for server object handle index and call id for 0xFFFFFFFF).
            if (ropRequest is RopSetColumnsRequest)
            {
                RopSetColumnsRequest SetColumnRop = ropRequest as RopSetColumnsRequest;
                byte tempHandleIndex = SetColumnRop.InputHandleIndex;
                uint ObjectHandle = inputBuffer.ServerObjectHandleTable[tempHandleIndex];
                
                // The server object handle value 0xFFFFFFFF means reserved for response.
                if (ObjectHandle != 0xFFFFFFFF)
                {
                    dc.SetProTagMap(ObjectHandle, dc.PropertiesBySetColumn);
                }
                else
                {
                    HandleMapForSetColumns += { tempHandleIndex -> SetColumnRop.PropertyTags}; 
                }
            }

            // If Rop request is RopGetPropertiesSpecificRequest, its property tags will be used by its response. So just save them in CallIDGetPropTagMap.
            if (ropRequest is RopGetPropertiesSpecificRequest)
            {
                RopGetPropertiesSpecificRequest GetPropertiesSpecificRop = ropRequest as RopGetPropertiesSpecificRequest;
                byte tempHandleIndex = GetPropertiesSpecificRop.InputHandleIndex;
                HandleMapForGetProSpecific += { tempHandleIndex -> GetPropertiesSpecificRop.PropertyTags};     
            }
            
            if (ropRequest is RopReleaseRequest)
            {
                uint ObjectHandle = inputBuffer.ServerObjectHandleTable[(ropRequest as RopReleaseRequest).InputHandleIndex as int];
                if (ObjectHandle in dc.ProTagMap)
                {
                    dc.SetCallIDProTagMapHistory(RequestCallId, {ObjectHandle -> dc.ProTagMap[ObjectHandle]});
                    dc.RemoveKeyFromProTagMap(ObjectHandle);                    
                }   
            }
        }  
        
        if (HandleMapForSetColumns.Count > 0)
        {
             dc.SetCallIDProTagMap(RequestCallId, HandleMapForSetColumns);
        }   
        if (HandleMapForGetProSpecific.Count > 0)
        {
            dc.SetCallIDGetPropTagMap(RequestCallId, HandleMapForGetProSpecific);
        }       
    }
    return inputBuffer;
}

ROPOutputBuffer DecodeResponseMessage(ref DecodingContext dc, binary payload)
{
    stream data = payload as stream;
    array<uint> tempServerHandleTable = [];
    
    ROPOutputBuffer outputBuffer = new ROPOutputBuffer();
    outputBuffer.SourceData = data;
    int currentBitPos = data.BitPosition;
        
    outputBuffer.RopSize = BinaryDecoder<ushort>(data) as ushort;
    outputBuffer.AssignFieldEncodingInfo("RopSize", currentBitPos, 8 * 2);
    currentBitPos += 8 * 2;
    binary temBinary = PeekBytes(data, outputBuffer.RopSize * 8, data.ByteLength - outputBuffer.RopSize);
    tempServerHandleTable = (BinaryDecoder<SOHTWrapper>(temBinary) as SOHTWrapper).ServerObjectHandleTable;
    array<ROPResponseBufferBase> ropList = [];
    
    if (outputBuffer.RopSize > 2)
    {
        Blob messageBlob = BinaryDecoder<Blob[outputBuffer.RopSize - 2 as uint]>(data) as Blob;
        outputBuffer.AssignFieldEncodingInfo("RopsList", currentBitPos, 8 * (outputBuffer.RopSize - 2 as uint) as int);
        currentBitPos += 8 * (outputBuffer.RopSize - 2 as uint) as int;
        
        stream s = messageBlob.Data as stream;
        array<string> ropNameArr = [];
        array<uint> ropStatusArr = [];
        
        do
        {
            optional ROPResponseBufferBase currMsg = nothing;
            byte currByte = s.CurrentByte;  
            string currentRopName = GetRopName(currByte);           
            uint returnValue;
            ropNameArr += [currentRopName]; 
            
            if (HasReturnValueRops(currentRopName))
            {           
                returnValue = GetRopReturnValue(s);
            }

            ropStatusArr += [returnValue];
            switch (currByte)
            {
                case RopIdType.RopLogon =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                        ushort typeValue = dc.LogonFlag as ushort;
                        bool isPrivateLogon = (typeValue & (MSOXCSTOR.LogonFlags.Private as ushort)) == MSOXCSTOR.LogonFlags.Private as ushort;
                        if (isPrivateLogon)
                        {
                            currMsg = RopBufferGenericDecoder<RopLogonSuccessResponse_PrivateMailboxes>(s, "RopLogonSuccessResponse_PrivateMailboxes");
                        }
                        else
                        {
                            currMsg = RopBufferGenericDecoder<RopLogonROPSuccessResponse_PublicFolders>(s, "RopLogonROPSuccessResponse_PublicFolders");
                        }
                        case RopResponseStatus.LogonRedirect =>
                            currMsg = RopBufferGenericDecoder<RopLogonROPRedirectResponse>(s, "RopLogonROPRedirectResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopLogonROPFailureResponse>(s, "RopLogonROPFailureResponse");
                    }
                case RopIdType.RopGetReceiveFolder =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopGetReceiveFolderROPSuccessResponse>(s, "RopGetReceiveFolderROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetReceiveFolderROPFailureResponse>(s, "RopGetReceiveFolderROPFailureResponse");
                    }
                case RopIdType.RopSetReceiveFolder =>
                    currMsg = RopBufferGenericDecoder<RopSetReceiveFolderROPResponse>(s, "RopSetReceiveFolderROPResponse");
                case RopIdType.RopGetReceiveFolderTable =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            dc.SetPropertiesByGetReceiveFolderTable();
                            currMsg = RopBufferGenericDecoder<RopGetReceiveFolderTableROPSuccessResponse[dc.PropertiesByGetReceiveFolderTable]>(s, "RopGetReceiveFolderTableROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetReceiveFolderTableROPFailureResponse>(s, "RopGetReceiveFolderTableROPFailureResponse");
                    }
                case RopIdType.RopGetStoreState =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopGetStoreStateROPSuccessResponse>(s, "RopGetStoreStateROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetStoreStateROPFailureResponse>(s, "RopGetStoreStateROPFailureResponse");
                    }
                case RopIdType.RopGetOwningServers =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopGetOwningServersROPSuccessResponse>(s, "RopGetOwningServersROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetOwningServersROPFailureResponse>(s, "RopGetOwningServersROPFailureResponse");
                    }
                case RopIdType.RopPublicFolderIsGhosted =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopPublicFolderIsGhostedROPSuccessResponse>(s, "RopPublicFolderIsGhostedROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopPublicFolderIsGhostedROPFailureResponse>(s, "RopPublicFolderIsGhostedROPFailureResponse");
                    }
                case RopIdType.RopLongTermIdFromId =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopLongTermIdFromIdROPSuccessResponse>(s, "RopLongTermIdFromIdROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopLongTermIdFromIdROPFailureResponse>(s, "RopLongTermIdFromIdROPFailureResponse");
                    }
                case RopIdType.RopIdFromLongTermId =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopIdFromLongTermIdROPSuccessResponse>(s, "RopIdFromLongTermIdROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopIdFromLongTermIdROPFailureResponse>(s, "RopIdFromLongTermIdROPFailureResponse");
                    }
                case RopIdType.RopGetPerUserLongTermIds =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopGetPerUserLongTermIdsROPSuccessResponse>(s, "RopGetPerUserLongTermIdsROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetPerUserLongTermIdsROPFailureResponse>(s, "RopGetPerUserLongTermIdsROPFailureResponse");
                    }
                case RopIdType.RopGetPerUserGuid =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopGetPerUserGuidROPSuccessResponse>(s, "RopGetPerUserGuidROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopGetPerUserGuidROPFailureResponse>(s, "RopGetPerUserGuidROPFailureResponse");
                    }
                case RopIdType.RopReadPerUserInformation =>
                    switch (returnValue)
                    {
                        case RopResponseStatus.Success =>
                            currMsg = RopBufferGenericDecoder<RopReadPerUserInformationROPSuccessResponse>(s, "RopReadPerUserInformationROPSuccessResponse");
                        default =>
                            currMsg = RopBufferGenericDecoder<RopReadPerUserInformationROPFailureResponse>(s, "RopReadPerUserInformationROPFailureResponse");
                    }
                case RopIdType.RopWritePerUserInformation =>                    
                    currMsg = RopBufferGenericDecoder<RopWritePerUserInformationROPResponse>(s, "RopWritePerUserInformationROPResponse");

            // Folder Rops
            case RopIdType.RopOpenFolder =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopOpenFolderSuccessResponse>(s, "RopOpenFolderSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopOpenFolderFailureResponse>(s, "RopOpenFolderFailureResponse");
                }
            case RopIdType.RopCreateFolder =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCreateFolderSuccessResponse>(s, "RopCreateFolderSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCreateFolderFailureResponse>(s, "RopCreateFolderFailureResponse");
                }
            case RopIdType.RopDeleteFolder =>
                currMsg = RopBufferGenericDecoder<RopDeleteFolderResponse>(s, "RopDeleteFolderResponse");
            case RopIdType.RopSetSearchCriteria =>
                currMsg = RopBufferGenericDecoder<RopSetSearchCriteriaResponse>(s, "RopSetSearchCriteriaResponse");
            case RopIdType.RopGetSearchCriteria =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetSearchCriteriaSuccessResponse>(s, "RopGetSearchCriteriaSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetSearchCriteriaFailureResponse>(s, "RopGetSearchCriteriaFailureResponse");
                }
            case RopIdType.RopMoveCopyMessages =>
                switch (returnValue)
                {
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopMoveCopyMessagesNullDestinationFailureResponse>(s, "RopMoveCopyMessagesNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopMoveCopyMessagesResponse>(s, "RopMoveCopyMessagesResponse");
                }
            case RopIdType.RopMoveFolder =>
                switch (returnValue)
                {
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopMoveFolderNullDestinationFailureResponse>(s, "RopMoveFolderNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopMoveFolderResponse>(s, "RopMoveFolderResponse");
                }
            case RopIdType.RopCopyFolder =>
                switch (returnValue)
                {
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopCopyFolderNullDestinationFailureResponse>(s, "RopCopyFolderNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCopyFolderResponse>(s, "RopCopyFolderResponse");
                }
            case RopIdType.RopEmptyFolder =>
                currMsg = RopBufferGenericDecoder<RopEmptyFolderResponse>(s, "RopEmptyFolderResponse");
            case RopIdType.RopHardDeleteMessagesAndSubfolders =>
                currMsg = RopBufferGenericDecoder<RopHardDeleteMessagesAndSubfoldersResponse>(s, "RopHardDeleteMessagesAndSubfoldersResponse");
            case RopIdType.RopDeleteMessages =>
                currMsg = RopBufferGenericDecoder<RopDeleteMessagesResponse>(s, "RopDeleteMessagesResponse");
            case RopIdType.RopHardDeleteMessages =>
                currMsg = RopBufferGenericDecoder<RopHardDeleteMessagesResponse>(s, "RopHardDeleteMessagesResponse");
            case RopIdType.RopGetHierarchyTable =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetHierarchyTableSuccessResponse>(s, "RopGetHierarchyTableSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetHierarchyTableFailureResponse>(s, "RopGetHierarchyTableFailureResponse");
                }
            case RopIdType.RopGetContentsTable =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetContentsTableSuccessResponse>(s, "RopGetContentsTableSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetContentsTableFailureResponse>(s, "RopGetContentsTableFailureResponse");
                }

            // Table ROPs
            case RopIdType.RopSetColumns =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetColumnsSuccessResponse>(s, "RopSetColumnsSuccessResponse");
                        RopSetColumnsSuccessResponse setColumnResponse = currMsg as RopSetColumnsSuccessResponse;
                        uint ObjectHandle = tempServerHandleTable[setColumnResponse.InputHandleIndex];
                        uint InputIndex = setColumnResponse.InputHandleIndex as uint;
                        if (ResponseCallId in dc.CallIDProTagMap && InputIndex in dc.CallIDProTagMap[ResponseCallId])
                        {            
                            dc.SetProTagMap(ObjectHandle, dc.CallIDProTagMap[ResponseCallId][InputIndex]);
                        }
                        if (dc.ProTagMapHistory.Count > 0)
                        {
                            dc.SetCallIDProTagMapHistory(ResponseCallId, dc.ProTagMapHistory);
                        }
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetColumnsFailureResponse>(s, "RopSetColumnsFailureResponse");
                }
            case RopIdType.RopSortTable =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSortTableSuccessResponse>(s, "RopSortTableSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSortTableFailureResponse>(s, "RopSortTableFailureResponse");
                }
            case RopIdType.RopRestrict =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopRestrictSuccessResponse>(s, "RopRestrictSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopRestrictFailureResponse>(s, "RopRestrictFailureResponse");
                }
            case RopIdType.RopQueryRows =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success => 
                        binary tempBinaryHandleIndex = PeekBytes(s, s.BitPosition + 8, 1);
                        byte TempInputHandleIndex = BinaryDecoder<byte>(tempBinaryHandleIndex) as byte;
                        if (tempServerHandleTable[TempInputHandleIndex] in dc.ProTagMap)
                        {
                            dc.ResetColumnsProperties(dc.ProTagMap[tempServerHandleTable[TempInputHandleIndex]]); 
                        }
                        else
                        {
                            throw "Missing context information for RopQueryRows response.";
                        }
                        currMsg = RopBufferGenericDecoder<RopQueryRowsSuccessResponse[dc.PropertiesBySetColumn]>(s, "RopQueryRowsSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopQueryRowsFailureResponse>(s, "RopQueryRowsFailureResponse");
                }
            case RopIdType.RopAbort =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopAbortSuccessResponse>(s, "RopAbortSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopAbortFailureResponse>(s, "RopAbortFailureResponse");
                }
            case RopIdType.RopGetStatus =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetStatusSuccessResponse>(s, "RopGetStatusSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetStatusFailureResponse>(s, "RopGetStatusFailureResponse");
                }
            case RopIdType.RopQueryPosition =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopQueryPositionSuccessResponse>(s, "RopQueryPositionSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopQueryPositionFailureResponse>(s, "RopQueryPositionFailureResponse");
                }
            case RopIdType.RopSeekRow =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSeekRowSuccessResponse>(s, "RopSeekRowSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSeekRowFailureResponse>(s, "RopSeekRowFailureResponse");
                }
            case RopIdType.RopSeekRowBookmark =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSeekRowBookmarkSuccessResponse>(s, "RopSeekRowBookmarkSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSeekRowBookmarkFailureResponse>(s, "RopSeekRowBookmarkFailureResponse");
                }
            case RopIdType.RopSeekRowFractional =>
                currMsg = RopBufferGenericDecoder<RopSeekRowFractionalResponse>(s, "RopSeekRowFractionalResponse");
            case RopIdType.RopCreateBookmark =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCreateBookmarkSuccessResponse>(s, "RopCreateBookmarkSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCreateBookmarkFailureResponse>(s, "RopCreateBookmarkFailureResponse");
                }
            case RopIdType.RopQueryColumnsAll =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopQueryColumnsAllSuccessResponse>(s, "RopQueryColumnsAllSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopQueryColumnsAllFailureResponse>(s, "RopQueryColumnsAllFailureResponse");
                }
            case RopIdType.RopFindRow =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        binary tempBinaryHandleIndex = PeekBytes(s, s.BitPosition + 8, 1);
                        byte TempInputHandleIndex = BinaryDecoder<byte>(tempBinaryHandleIndex) as byte;
                        if (tempServerHandleTable[TempInputHandleIndex] in dc.ProTagMap)
                        {
                            dc.ResetColumnsProperties(dc.ProTagMap[tempServerHandleTable[TempInputHandleIndex]]); 
                        }
                        else
                        {
                            throw "Missing context information for ExpandRow response.";
                        }                       
                        currMsg = RopBufferGenericDecoder<RopFindRowSuccessResponse[dc.PropertiesBySetColumn]>(s, "RopFindRowSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopFindRowFailureResponse>(s, "RopFindRowFailureResponse");
                }
            case RopIdType.RopFreeBookmark =>
                currMsg = RopBufferGenericDecoder<RopFreeBookmarkResponse>(s, "RopFreeBookmarkResponse");
            case RopIdType.RopResetTable =>
                currMsg = RopBufferGenericDecoder<RopResetTableResponse>(s, "RopResetTableResponse");
            case RopIdType.RopExpandRow =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        binary tempBinaryHandleIndex = PeekBytes(s, s.BitPosition + 8, 1);
                        byte TempInputHandleIndex = BinaryDecoder<byte>(tempBinaryHandleIndex) as byte;
                        if (tempServerHandleTable[TempInputHandleIndex] in dc.ProTagMap)
                        {
                            dc.ResetColumnsProperties(dc.ProTagMap[tempServerHandleTable[TempInputHandleIndex]]); 
                        }
                        else
                        {
                            throw "Missing context information for ExpandRow response.";
                        }                      
                        currMsg = RopBufferGenericDecoder<RopExpandRowSuccessResponse[dc.PropertiesBySetColumn]>(s, "RopExpandRowSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopExpandRowFailureResponse>(s, "RopExpandRowFailureResponse");
                }
            case RopIdType.RopCollapseRow =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCollapseRowSuccessResponse>(s, "RopCollapseRowSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCollapseRowFailureResponse>(s, "RopCollapseRowFailureResponse");
                }
            case RopIdType.RopGetCollapseState =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetCollapseStateSuccessResponse>(s, "RopGetCollapseStateSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetCollapseStateFailureResponse>(s, "RopGetCollapseStateFailureResponse");
                }
            case RopIdType.RopSetCollapseState =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetCollapseStateSuccessResponse>(s, "RopSetCollapseStateSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetCollapseStateFailureResponse>(s, "RopSetCollapseStateFailureResponse");
                }

            // Message ROPS
            case RopIdType.RopOpenMessage =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopOpenMessageSuccessResponse>(s, "RopOpenMessageSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopOpenMessageFailureResponse>(s, "RopOpenMessageFailureResponse");
                }
            case RopIdType.RopCreateMessage =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCreateMessageSuccessResponse>(s, "RopCreateMessageSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCreateMessageFailureResponse>(s, "RopCreateMessageFailureResponse");
                }
            case RopIdType.RopSaveChangesMessage =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSaveChangesMessageSuccessResponse>(s, "RopSaveChangesMessageSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSaveChangesMessageFailureResponse>(s, "RopSaveChangesMessageFailureResponse");
                }
            case RopIdType.RopRemoveAllRecipients =>
                currMsg = RopBufferGenericDecoder<RopRemoveAllRecipientsResponse>(s, "RopRemoveAllRecipientsResponse");
            case RopIdType.RopModifyRecipients =>
                currMsg = RopBufferGenericDecoder<RopModifyRecipientsResponse>(s, "RopModifyRecipientsResponse");
            case RopIdType.RopReadRecipients =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopReadRecipientsSuccessResponse>(s, "RopReadRecipientsSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopReadRecipientsFailureResponse>(s, "RopReadRecipientsFailureResponse");
                }
            case RopIdType.RopReloadCachedInformation =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopReloadCachedInformationSuccessResponse>(s, "RopReloadCachedInformationSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopReloadCachedInformationFailureResponse>(s, "RopReloadCachedInformationFailureResponse");
                }
            case RopIdType.RopSetMessageStatus =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetMessageStatusSuccessResponse>(s, "RopSetMessageStatusSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetMessageStatusFailureResponse>(s, "RopSetMessageStatusFailureResponse");
                }
            case RopIdType.RopGetMessageStatus =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetMessageStatusSuccessResponse>(s, "RopGetMessageStatusSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetMessageStatusFailureResponse>(s, "RopGetMessageStatusFailureResponse");
                }
            case RopIdType.RopSetReadFlags =>
                currMsg = RopBufferGenericDecoder<RopSetReadFlagsResponse>(s, "RopSetReadFlagsResponse");
            case RopIdType.RopSetMessageReadFlag =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetMessageReadFlagSuccessResponse>(s, "RopSetMessageReadFlagSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetMessageReadFlagFailureResponse>(s, "RopSetMessageReadFlagFailureResponse");
                }
            case RopIdType.RopOpenAttachment =>
                currMsg = RopBufferGenericDecoder<RopOpenAttachmentResponse>(s, "RopOpenAttachmentResponse");
            case RopIdType.RopCreateAttachment =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCreateAttachmentSuccessResponse>(s, "RopCreateAttachmentSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCreateAttachmentFailureResponse>(s, "RopCreateAttachmentFailureResponse");
                }
            case RopIdType.RopDeleteAttachment =>
                currMsg = RopBufferGenericDecoder<RopDeleteAttachmentResponse>(s, "RopDeleteAttachmentResponse");
            case RopIdType.RopSaveChangesAttachment =>
                currMsg = RopBufferGenericDecoder<RopSaveChangesAttachmentResponse>(s, "RopSaveChangesAttachmentResponse");
            case RopIdType.RopOpenEmbeddedMessage =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopOpenEmbeddedMessageSuccessResponse>(s, "RopOpenEmbeddedMessageSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopOpenEmbeddedMessageFailureResponse>(s, "RopOpenEmbeddedMessageFailureResponse");
                }
            case RopIdType.RopGetAttachmentTable =>
                currMsg = RopBufferGenericDecoder<RopGetAttachmentTableResponse>(s, "RopGetAttachmentTableResponse");
            case RopIdType.RopGetValidAttachments =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetValidAttachmentsSuccessResponse>(s, "RopGetValidAttachmentsSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetValidAttachmentsFailureResponse>(s, "RopGetValidAttachmentsFailureResponse");
                }

            // Property ROPs
            case RopIdType.RopGetPropertyIdsFromNames =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertyIdsFromNamesSuccessResponse>(s, "RopGetPropertyIdsFromNamesSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertyIdsFromNamesFailureResponse>(s, "RopGetPropertyIdsFromNamesFailureResponse");
                }
            case RopIdType.RopGetNamesFromPropertyIds =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetNamesFromPropertyIdsSuccessResponse>(s, "RopGetNamesFromPropertyIdsSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetNamesFromPropertyIdsFailureResponse>(s, "RopGetNamesFromPropertyIdsFailureResponse");
                }
            case RopIdType.RopGetPropertiesSpecific =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>                       
                        binary tempBinaryHandleIndex = PeekBytes(s, s.BitPosition + 8, 1);
                        byte TempInputHandleIndex = BinaryDecoder<byte>(tempBinaryHandleIndex) as byte;
                        uint InputHandle = TempInputHandleIndex as uint;
                        if (ResponseCallId in dc.CallIDGetPropTagMap && InputHandle in dc.CallIDGetPropTagMap[ResponseCallId])
                        {
                            dc.ResetPropProperties(dc.CallIDGetPropTagMap[ResponseCallId][InputHandle]); 
                        }
                        else
                        {
                            throw "Missing context information for RopGetPropertiesSpecific response.";
                        }                   
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesSpecificSuccessResponse[dc.PropertiesByGetProp]>(s, "RopGetPropertiesSpecificSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesSpecificFailureResponse>(s, "RopGetPropertiesSpecificFailureResponse");
                }
            case RopIdType.RopGetPropertiesAll =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesAllSuccessResponse>(s, "RopGetPropertiesAllSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesAllFailureResponse>(s, "RopGetPropertiesAllFailureResponse");
                }
            case RopIdType.RopGetPropertiesList =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesListSuccessResponse>(s, "RopGetPropertiesListSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetPropertiesListFailureResponse>(s, "RopGetPropertiesListFailureResponse");
                }
            case RopIdType.RopSetProperties =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetPropertiesSuccessResponse>(s, "RopSetPropertiesSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetPropertiesFailureResponse>(s, "RopSetPropertiesFailureResponse");
                }
            case RopIdType.RopSetPropertiesNoReplicate =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSetPropertiesNoReplicateSuccessResponse>(s, "RopSetPropertiesNoReplicateSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSetPropertiesNoReplicateFailureResponse>(s, "RopSetPropertiesNoReplicateFailureResponse");
                }
            case RopIdType.RopDeleteProperties =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopDeletePropertiesSuccessResponse>(s, "RopDeletePropertiesSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopDeletePropertiesFailureResponse>(s, "RopDeletePropertiesFailureResponse");
                }
            case RopIdType.RopDeletePropertiesNoReplicate =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopDeletePropertiesNoReplicateSuccessResponse>(s, "RopDeletePropertiesNoReplicateSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopDeletePropertiesNoReplicateFailureResponse>(s, "RopDeletePropertiesNoReplicateFailureResponse");
                }
            case RopIdType.RopQueryNamedProperties =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopQueryNamedPropertiesSuccessResponse>(s, "RopQueryNamedPropertiesSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopQueryNamedPropertiesFailureResponse>(s, "RopQueryNamedPropertiesFailureResponse");
                }
            case RopIdType.RopCopyProperties =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCopyPropertiesSuccessResponse >(s, "RopCopyPropertiesSuccessResponse");
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopCopyPropertiesNullDestinationFailureResponse>(s, "RopCopyPropertiesNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCopyPropertiesFailureResponse>(s, "RopCopyPropertiesFailureResponse");
                }
            case RopIdType.RopCopyTo =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopCopyToSuccessResponse>(s, "RopCopyToSuccessResponse");
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopCopyToNullDestinationFailureResponse>(s, "RopCopyToNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCopyToFailureResponse>(s, "RopCopyToFailureResponse");
                }
            case RopIdType.RopProgress =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopProgressSuccessResponse>(s, "RopProgressSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopProgressFailureResponse>(s, "RopProgressFailureResponse");
                }

            // Stream ROPs
            case RopIdType.RopOpenStream =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopOpenStreamSuccessResponse>(s, "RopOpenStreamSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopOpenStreamFailureResponse>(s, "RopOpenStreamFailureResponse");
                }
            case RopIdType.RopReadStream =>
                currMsg = RopBufferGenericDecoder<RopReadStreamResponse>(s, "RopReadStreamResponse");
            case RopIdType.RopWriteStream =>
                currMsg = RopBufferGenericDecoder<RopWriteStreamResponse>(s, "RopWriteStreamResponse");
            case RopIdType.RopCommitStream =>
                currMsg = RopBufferGenericDecoder<RopCommitStreamResponse>(s, "RopCommitStreamResponse");
            case RopIdType.RopGetStreamSize =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetStreamSizeSuccessResponse>(s, "RopGetStreamSizeSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetStreamSizeFailureResponse>(s, "RopGetStreamSizeFailureResponse");
                }
            case RopIdType.RopSetStreamSize =>
                currMsg = RopBufferGenericDecoder<RopSetStreamSizeResponse>(s, "RopSetStreamSizeResponse");
            case RopIdType.RopSeekStream =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopSeekStreamSuccessResponse>(s, "RopSeekStreamSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopSeekStreamFailureResponse>(s, "RopSeekStreamFailureResponse");
                }
            case RopIdType.RopCopyToStream =>
                switch (returnValue)
                {
                    case RopResponseStatus.NullDestinationObject =>
                        currMsg = RopBufferGenericDecoder<RopCopyToStreamNullDestinationFailureResponse>(s, "RopCopyToStreamNullDestinationFailureResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopCopyToStreamResponse>(s, "RopCopyToStreamResponse");
                }
            case RopIdType.RopLockRegionStream =>
                currMsg = RopBufferGenericDecoder<RopLockRegionStreamResponse>(s, "RopLockRegionStreamResponse");
            case RopIdType.RopUnlockRegionStream =>
                currMsg = RopBufferGenericDecoder<RopUnlockRegionStreamResponse>(s, "RopUnlockRegionStreamResponse");
            case RopIdType.RopWriteAndCommitStream =>
                currMsg = RopBufferGenericDecoder<RopWriteAndCommitStreamResponse>(s, "RopWriteAndCommitStreamResponse");
            case RopIdType.RopCloneStream =>
                currMsg = RopBufferGenericDecoder<RopCloneStreamResponse>(s, "RopCloneStreamResponse");

            // Rules
            case RopIdType.RopModifyRules =>
                currMsg = RopBufferGenericDecoder<RopModifyRulesResponse>(s, "RopModifyRulesResponse");
            case RopIdType.RopGetRulesTable =>
                currMsg = RopBufferGenericDecoder<RopGetRulesTableResponse>(s, "RopGetRulesTableResponse");
            case RopIdType.RopUpdateDeferredActionMessages =>
                currMsg = RopBufferGenericDecoder<RopUpdateDeferredActionMessagesResponse>(s, "RopUpdateDeferredActionMessagesResponse");
            
            // Permissions
            case RopIdType.RopModifyPermissions =>
                currMsg = RopBufferGenericDecoder<RopModifyPermissionsResponse>(s, "RopModifyPermissionsResponse");
            case RopIdType.RopGetPermissionsTable =>
                currMsg = RopBufferGenericDecoder<RopGetPermissionsTableResponse>(s, "RopGetPermissionsTableResponse");             
                
            // Notification
            case RopIdType.RopRegisterNotification =>
                currMsg = RopBufferGenericDecoder<RopRegisterNotificationResponse>(s, "RopRegisterNotificationResponse");
            case RopIdType.RopNotify =>
                        binary tempBinaryHandleIndex = PeekBytes(s, s.BitPosition + 8, 4);
                        uint InputHandle = BinaryDecoder<uint>(tempBinaryHandleIndex) as uint;
                        dc.ResetColumnsProperties([]); 
                        if (InputHandle in dc.ProTagMap)
                        {
                            dc.ResetColumnsProperties(dc.ProTagMap[InputHandle]); 
                        }
                        else
                        {
                            uint smallCallID = 0xFFFF;
                            array<PropertyTag> targetTags = [];
                            foreach (uint key in dc.CallIDProTagMapHistory.Keys)
                            {
                                if (InputHandle in dc.CallIDProTagMapHistory[key] && dc.CallIDProTagMapHistory[key][InputHandle].Count > 0 && smallCallID > key)
                                {
                                    smallCallID = key;
                                    targetTags = dc.CallIDProTagMapHistory[key][InputHandle];
                                }
                            }
                            if (targetTags.Count > 0)
                            {
                                dc.ResetColumnsProperties(dc.CallIDProTagMapHistory[smallCallID][InputHandle]);
                            }
                        }
                currMsg = RopBufferGenericDecoder<RopNotifyResponse[dc.PropertiesBySetColumn]>(s, "RopNotifyResponse");             
            case RopIdType.RopPending =>
                currMsg = RopBufferGenericDecoder<RopPendingResponse>(s, "RopPendingResponse");             
            
            // Fxics
            case RopIdType.RopFastTransferSourceCopyMessages =>
                currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyMessagesResponse>(s, "RopFastTransferSourceCopyMessagesResponse");
            case RopIdType.RopFastTransferSourceCopyFolder =>
                currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyFolderResponse>(s, "RopFastTransferSourceCopyFolderResponse");
            case RopIdType.RopFastTransferSourceCopyTo =>
                currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyToResponse>(s, "RopFastTransferSourceCopyToResponse");
            case RopIdType.RopFastTransferSourceGetBuffer =>
                currMsg = RopBufferGenericDecoder<RopFastTransferSourceGetBufferResponse[dc.FastTransferRootType]>(s, "RopFastTransferSourceGetBufferResponse");
            case RopIdType.RopFastTransferDestinationConfigure =>
                currMsg = RopBufferGenericDecoder<RopFastTransferDestinationConfigureResponse>(s, "RopFastTransferDestinationConfigureResponse");
            case RopIdType.RopFastTransferDestinationPutBuffer =>
                currMsg = RopBufferGenericDecoder<RopFastTransferDestinationPutBufferResponse>(s, "RopFastTransferDestinationPutBufferResponse");
            case RopIdType.RopFastTransferSourceCopyProperties =>
                currMsg = RopBufferGenericDecoder<RopFastTransferSourceCopyPropertiesResponse>(s, "RopFastTransferSourceCopyPropertiesResponse");
            case RopIdType.RopSynchronizationConfigure =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationConfigureResponse>(s, "RopSynchronizationConfigureResponse");
            case RopIdType.RopSynchronizationImportMessageChange =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationImportMessageChangeResponse>(s, "RopSynchronizationImportMessageChangeResponse");
            case RopIdType.RopSynchronizationImportHierarchyChange =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationImportHierarchyChangeResponse>(s, "RopSynchronizationImportHierarchyChangeResponse");
            case RopIdType.RopSynchronizationImportDeletes =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationImportDeletesResponse>(s, "RopSynchronizationImportDeletesResponse");
            case RopIdType.RopSynchronizationUploadStateStreamBegin =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamBeginResponse>(s, "RopSynchronizationUploadStateStreamBeginResponse");
            case RopIdType.RopSynchronizationUploadStateStreamContinue =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamContinueResponse>(s, "RopSynchronizationUploadStateStreamContinueResponse");
            case RopIdType.RopSynchronizationUploadStateStreamEnd =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationUploadStateStreamEndResponse>(s, "RopSynchronizationUploadStateStreamEndResponse");
            case RopIdType.RopSynchronizationImportMessageMove =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationImportMessageMoveResponse>(s, "RopSynchronizationImportMessageMoveResponse");
            case RopIdType.RopSynchronizationOpenCollector =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationOpenCollectorResponse>(s, "RopSynchronizationOpenCollectorResponse");
            case RopIdType.RopGetLocalReplicaIds =>
                currMsg = RopBufferGenericDecoder<RopGetLocalReplicaIdsResponse>(s, "RopGetLocalReplicaIdsResponse");
            
            case RopIdType.RopSynchronizationImportReadStateChanges =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationImportReadStateChangesResponse>(s, "RopSynchronizationImportReadStateChangesResponse");
            case RopIdType.RopSynchronizationGetTransferState =>
                currMsg = RopBufferGenericDecoder<RopSynchronizationGetTransferStateResponse>(s, "RopSynchronizationGetTransferStateResponse");
            case RopIdType.RopTellVersion =>
                currMsg = RopBufferGenericDecoder<RopTellVersionResponse>(s, "RopTellVersionResponse");
            case RopIdType.RopSetLocalReplicaMidsetDeleted =>
                currMsg = RopBufferGenericDecoder<RopSetLocalReplicaMidsetDeletedResponse>(s, "RopSetLocalReplicaMidsetDeletedResponse");

            // MS-OXOMSG
            case RopIdType.RopSubmitMessage =>
                    currMsg = RopBufferGenericDecoder<RopSubmitMessageResponse>(s, "RopSubmitMessageResponse");
            case RopIdType.RopAbortSubmit =>
                    currMsg = RopBufferGenericDecoder<RopAbortSubmitResponse>(s, "RopAbortSubmitResponse");
            case RopIdType.RopSetSpooler =>
                    currMsg = RopBufferGenericDecoder<RopSetSpoolerResponse>(s, "RopSetSpoolerResponse");
            case RopIdType.RopSpoolerLockMessage =>
                    currMsg = RopBufferGenericDecoder<RopSpoolerLockMessageResponse>(s, "RopSpoolerLockMessageResponse");
            case RopIdType.RopGetAddressTypes =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetAddressTypesSuccessResponse>(s, "RopGetAddressTypesSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetAddressTypesFailureResponse>(s, "RopGetAddressTypesFailureResponse");
                }                   
            case RopIdType.RopTransportSend =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopTransportSendSuccessResponse>(s, "RopTransportSendSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopTransportSendFailureResponse>(s, "RopTransportSendFailureResponse");
                }
            case RopIdType.RopTransportNewMail =>
                    currMsg = RopBufferGenericDecoder<RopTransportNewMailResponse>(s, "RopTransportNewMailResponse");
            case RopIdType.RopGetTransportFolder =>                 
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopGetTransportFolderSuccessResponse>(s, "RopGetTransportFolderSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopGetTransportFolderFailureResponse>(s, "RopGetTransportFolderFailureResponse");
                }
            case RopIdType.RopOptionsData =>
                switch (returnValue)
                {
                    case RopResponseStatus.Success =>
                        currMsg = RopBufferGenericDecoder<RopOptionsDataSuccessResponse>(s, "RopOptionsDataSuccessResponse");
                    default =>
                        currMsg = RopBufferGenericDecoder<RopOptionsDataFailureResponse>(s, "RopOptionsDataFailureResponse");
                }          
            
            // Other ROPs
            case RopIdType.RopBackoff =>
                currMsg = RopBufferGenericDecoder<RopBackoffResponse>(s, "RopBackoffResponse");
            case RopIdType.RopBufferTooSmall =>
	    	int RopCountInResponse=0; 
		uint RequestBuffersSize=0;
		RopCountInResponse = ropList.Count; 
				
		if (ResponseCallId in dc._CallIDRopRequestCountMap && dc._CallIDRopRequestCountMap[ResponseCallId].Count > RopCountInResponse)
		{
			RequestBuffersSize = dc._CallIDRopRequestCountMap[ResponseCallId][RopCountInResponse];
		}
                currMsg = RopBufferGenericDecoder<RopBufferTooSmallResponse[RequestBuffersSize]>(s, "RopBufferTooSmallResponse");
				
            default =>
                currMsg = RopBufferGenericDecoder<RopReservedResponse>(s, "RopReservedResponse");
            }
            
            if (currMsg == nothing)
                ThrowDecodingException("MSOXCROPS", "MSOXCROP Response Buffer");

            ropList += [currMsg as ROPResponseBufferBase];
        } while (s.RemainingByteLength > 0);

        outputBuffer#Rops = ropNameArr;
        outputBuffer#StatusList = ropStatusArr;
        StatusResults = ropStatusArr;
    }
    
    outputBuffer.RopsList = ropList;
    outputBuffer.ServerObjectHandleTable = (BinaryDecoder<SOHTWrapper>(data) as SOHTWrapper).ServerObjectHandleTable;
    outputBuffer.AssignFieldEncodingInfo("ServerObjectHandleTable", currentBitPos, outputBuffer.ServerObjectHandleTable.Count * 8 * 4);
    
    // This is used to get ServerObjectHandle for folder, message and attachment which are used in FastTransfer stream in MS-OXCFXICS
    if (ropList.Count > 0)
    {
        foreach (var ropResponse in ropList)
        {
            if (ropResponse is RopCreateFolderSuccessResponse)
            {
                map<uint, ObjectHandlesType> objectHandles = {};
                uint objectHandleKey = outputBuffer.ServerObjectHandleTable[(ropResponse as RopCreateFolderSuccessResponse).OutputHandleIndex as int];
                objectHandles += {objectHandleKey -> ObjectHandlesType.FolderObjectHandles};
                dc.SetObjectHandles(objectHandles);
            }
        
            if (ropResponse is RopCreateMessageSuccessResponse)
            {
                map<uint, ObjectHandlesType> objectHandles = {};
                uint objectHandleKey = outputBuffer.ServerObjectHandleTable[(ropResponse as RopCreateMessageSuccessResponse).OutputHandleIndex as int];
                objectHandles += {objectHandleKey -> ObjectHandlesType.MessageObjectHandles};
                dc.SetObjectHandles(objectHandles);
            }
        
            if (ropResponse is RopCreateAttachmentSuccessResponse)
            {
                map<uint, ObjectHandlesType> objectHandles = {};
                uint objectHandleKey = outputBuffer.ServerObjectHandleTable[(ropResponse as RopCreateAttachmentSuccessResponse).OutputHandleIndex as int];
                objectHandles += {objectHandleKey -> ObjectHandlesType.AttachmentObjectHandles};
                dc.SetObjectHandles(objectHandles);
            }   
        }   
    }
    return outputBuffer;
}

type SOHTWrapper
{
    array<uint> ServerObjectHandleTable;
}

pattern ObjectHandlesType = enum byte
{
    FolderObjectHandles = 0x01,
    MessageObjectHandles = 0x02,
    AttachmentObjectHandles = 0x03
};
    
// The DecodingContext is shared between some ROP request and response.
type DecodingContext
{
    array<PropertyTag> _propertiesBySetColumn;
    array<PropertyTag> _propertiesByGetProp;
    array<PropertyTag> _PropertiesByGetReceiveFolderTable;
    MSOXCSTOR.LogonFlags _LogOnFlag;
    map<byte, MSOXCSTOR.LogonFlags> _LogonFlagMapLogId;  
    map<uint, array<uint>> _CallIDRopRequestCountMap;	
    MSOXCFXICS.FastTransferRootType _FastTransferRootType;
    map<uint, ObjectHandlesType> _ObjectHandles;   
    map<uint, array<PropertyTag>> _ProTagMap;
    map<uint, array<PropertyTag>> _ProTagMapHistory;    
    map<uint, map<uint, array<PropertyTag>>> _CallIDProTagMap;
    map<uint, map<uint, array<PropertyTag>>> _CallIDProTagMapHistory;   
    map<uint, map<uint, array<PropertyTag>>> _CallIDGetPropTagMap;
    
    DecodingContext()
    {
        Init();
    }
    
    void Init()
    {
        this._propertiesBySetColumn = [];
        this._propertiesByGetProp = [];
        this._PropertiesByGetReceiveFolderTable = [];
        InitObjectHandle();
        InitialHistory();
        this._ProTagMap = {};
        this._CallIDProTagMap = {};
        this._CallIDGetPropTagMap = {};
        this._CallIDProTagMapHistory = {};
		this._LogonFlagMapLogId = {};
		this._CallIDRopRequestCountMap = {};
    }
    
    void InitObjectHandle()
    {
        this._ObjectHandles = {};
    }
    
    void InitialHistory()
    {
        this._ProTagMapHistory = {};
    }
    
    ObjectHandlesType GetObjectHandlesType(uint objectValue)
    {
        if (_ObjectHandles == null || !(objectValue in _ObjectHandles))
        {   
            return 0x00;
        }

        return _ObjectHandles[objectValue];
    }
    
    void SetPropertiesByGetReceiveFolderTable()
    {
        this._propertiesBySetColumn += [new PropertyTag{PropertyType = PropertyDataType.PtypInteger64, PropertyId = 0x6748}];
        this._propertiesBySetColumn += [new PropertyTag{PropertyType = PropertyDataType.PtypString, PropertyId = 0x001A}];
        this._propertiesBySetColumn += [new PropertyTag{PropertyType = PropertyDataType.PtypTime, PropertyId = 0x3008}];
    }
    
    void ResetColumnsProperties(array<PropertyTag> propTags)
    {
        this._propertiesBySetColumn = [];
        foreach (var propTag in propTags)
        {
            this._propertiesBySetColumn += [new PropertyTag{PropertyType = propTag.PropertyType, PropertyId = propTag.PropertyId}];
        }
    }
    
    void ResetPropProperties(array<PropertyTag> propTags)
    {
        this._propertiesByGetProp = [];
        foreach (var propTag in propTags)
        {
            this._propertiesByGetProp += [new PropertyTag{PropertyType = propTag.PropertyType, PropertyId = propTag.PropertyId}];
        }
    }
    
    void SetLogOnFlag(MSOXCSTOR.LogonFlags flag)
    {
        this._LogOnFlag = flag;
    }
    
    void SetLogonFlagMapLogonId(byte LogonId, MSOXCSTOR.LogonFlags flag)
    {
        this._LogonFlagMapLogId += {LogonId -> flag};
    }
	
	void SetObjectHandles(map<uint, ObjectHandlesType> objectHandles)
	{
	    foreach (var key in objectHandles.Keys)
		{
		   this._ObjectHandles += {key as uint -> objectHandles[key]};
		}
	}
	
    void SetFastTransferRootType(MSOXCFXICS.FastTransferRootType fastTransferRootType)
    {
        this._FastTransferRootType = fastTransferRootType;
    }
    
    void SetCallIDGetPropTagMap(uint callid, map<uint, array<PropertyTag>> tagMap)
    {
        if (this._CallIDGetPropTagMap.Count == 0)
        {
           this._CallIDGetPropTagMap[callid] = tagMap;
        }
        else if (!(callid in this._CallIDGetPropTagMap))
        {
           this._CallIDGetPropTagMap[callid] = tagMap;
        }
        else if (this._CallIDGetPropTagMap[callid] != tagMap)
        {
            this._CallIDGetPropTagMap = this._CallIDGetPropTagMap.Remove(callid);
            this._CallIDGetPropTagMap[callid] = tagMap;
        }
    }
    
    void SetCallIDRopRequestCountMap(uint callid, array<uint> RopCountMap)
    {
        if (this._CallIDRopRequestCountMap.Count == 0)
        {
           this._CallIDRopRequestCountMap[callid] = RopCountMap;
        }
        else if (!(callid in this._CallIDRopRequestCountMap))
        {
           this._CallIDRopRequestCountMap[callid] = RopCountMap;
        }
        else if (this._CallIDRopRequestCountMap[callid] != RopCountMap)
        {
            this._CallIDRopRequestCountMap = this._CallIDRopRequestCountMap.Remove(callid);
            this._CallIDRopRequestCountMap[callid] = RopCountMap;
        }
    }
	
    void SetCallIDProTagMap(uint callid, map<uint, array<PropertyTag>> tagMap)
    {
        if (this._CallIDProTagMap.Count == 0)
        {
           this._CallIDProTagMap[callid] = tagMap;
        }
        else if (!(callid in this._CallIDProTagMap))
        {
           this._CallIDProTagMap[callid] = tagMap;
        }
        else if (this._CallIDProTagMap[callid] != tagMap)
        {
            this._CallIDProTagMap = this._CallIDProTagMap.Remove(callid);
            this._CallIDProTagMap[callid] = tagMap;
        }
    }
    
    void SetCallIDProTagMapHistory(uint callid, map<uint, array<PropertyTag>> tagMap)
    {
        if (this._CallIDProTagMapHistory.Count == 0)
        {
           this._CallIDProTagMapHistory[callid] = tagMap;
        }
        else if (!(callid in this._CallIDProTagMapHistory))
        {
           this._CallIDProTagMapHistory[callid] = tagMap;
        }
        else if (this._CallIDProTagMapHistory[callid] != tagMap)
        {
            this._CallIDProTagMapHistory = this._CallIDProTagMapHistory.Remove(callid);
            this._CallIDProTagMapHistory[callid] = tagMap;
        }
    }
    
    void SetProTagMap(uint key, array<PropertyTag> tags)
    {
        if (this._ProTagMap.Count == 0)
        {
            this._ProTagMap[key] = tags;
        }
        else if (!(key in this._ProTagMap))
        {
            this._ProTagMap[key] = tags;
        }
        else if (this._ProTagMap[key] != tags)
        {
            this._ProTagMapHistory += {key -> this._ProTagMap[key]};
            this._ProTagMap = this._ProTagMap.Remove(key);
            this._ProTagMap[key] = tags;
        }
    }
    
    void RemoveKeyFromProTagMap(uint key)
    {
       if (this._ProTagMap.Count == 0)
        {
            ErrorCodeIf(true, null, "Remove unused key from map: There is no values in ProTagMap map.");
        }
        else if (key in this._ProTagMap)
        {
            this._ProTagMap = this._ProTagMap.Remove(key);
        }
        else 
        {
            ErrorCodeIf(true, null, Format("Remove unused key from map: There is no key {0} in ProTagMap map.", key));
        }
    }
    
    void RemoveCallIDFromMap (uint key)
    {
        if (this._CallIDProTagMap.Count == 0)
        {
            ErrorCodeIf(true, null, "Remove unused key from map: There is no values in CallIDFromMap map.");
        }
        else if (key in this._CallIDProTagMap)
        {
            this._CallIDProTagMap = this._CallIDProTagMap.Remove(key);
        }
        else
        {
            ErrorCodeIf(true, null, Format("Remove unused key from map: There is no key {0} in CallIDFromMap map.", key));
        }
    }
    
    void RemoveKeyFromCallIDGetPropTagMap(uint key)
    {
       if (this._CallIDGetPropTagMap.Count == 0)
        {
            ErrorCodeIf(true, null, "Remove unused key from map: There is no values in CallIDGetPropTagMap map.");
        }
        else if (key in this._CallIDGetPropTagMap)
        {
            this._CallIDGetPropTagMap = this._CallIDGetPropTagMap.Remove(key);
        }
        else 
        {
            ErrorCodeIf(true, null, Format("Remove unused key from map: There is no key {0} in CallIDGetPropTagMap map.", key));
        }
    }
	
    void RemoveCallIDRopRequestCountMap(uint key)
    {
       if (this._CallIDRopRequestCountMap.Count == 0)
        {
            ErrorCodeIf(true, null, "Remove unused key from map: There is no values in _CallIDRopRequestCountMap map.");
        }
        else if (key in this._CallIDRopRequestCountMap)
        {
            this._CallIDRopRequestCountMap = this._CallIDRopRequestCountMap.Remove(key);
        }
        else 
        {
            ErrorCodeIf(true, null, Format("Remove unused key from map: There is no key {0} in _CallIDRopRequestCountMap map.", key));
        }
    }
}

array<PropertyTag> get PropertiesByGetReceiveFolderTable(this DecodingContext dc)
{
    if (dc._PropertiesByGetReceiveFolderTable == null || dc._PropertiesByGetReceiveFolderTable.Count == 0)
        ThrowDecodingException("MSOXCROPS", "Last RopSetColumn request message has not been initialized yet. It may due to the traffic is incomplete.");

    return dc._PropertiesByGetReceiveFolderTable;
}

array<PropertyTag> get PropertiesBySetColumn(this DecodingContext dc)
{
    return dc._propertiesBySetColumn;
}

array<PropertyTag> get PropertiesByGetProp(this DecodingContext dc)
{
   if (dc._propertiesByGetProp == null || dc._propertiesByGetProp.Count == 0)
   ThrowDecodingException("MSOXCROPS", "Last RopGetPropertiesSpecific request message has not been initialized yet. It may due to the traffic is incomplete.");

    return dc._propertiesByGetProp;
}

MSOXCSTOR.LogonFlags get LogonFlag(this DecodingContext dc)
{
    return dc._LogOnFlag;
}

map<byte, MSOXCSTOR.LogonFlags> get LogonFlagMapLogId(this DecodingContext dc)
{
    return dc._LogonFlagMapLogId;
}

MSOXCFXICS.FastTransferRootType get FastTransferRootType(this DecodingContext dc)
{
    return dc._FastTransferRootType;
}

map<uint, array<PropertyTag>> get ProTagMap(this DecodingContext dc)
{
    return dc._ProTagMap;
}

map<uint, array<PropertyTag>> get ProTagMapHistory(this DecodingContext dc)
{
    return dc._ProTagMapHistory;
}

map<uint, map<uint, array<PropertyTag>>> get CallIDProTagMap(this DecodingContext dc)
{
    return dc._CallIDProTagMap;
}

map<uint, map<uint, array<PropertyTag>>> get CallIDGetPropTagMap(this DecodingContext dc)
{
    return dc._CallIDGetPropTagMap;
}

map<uint, map<uint, array<PropertyTag>>> get CallIDProTagMapHistory(this DecodingContext dc)
{
    return dc._CallIDProTagMapHistory;
}

optional T RopBufferGenericDecoder<T>(stream s, string messageContext)
{
    switch (s)
    {
        case ropBuffer:T from BinaryDecoder<T> =>
            return ropBuffer;
        default => ThrowDecodingException("MSOXCROPS", messageContext);
    }
    
    return nothing;
}

optional T RopBufferGenericDecoder<T>(stream s, string messageContext, ref DecodingContext dc)
{
    switch (s)
    {
        case ropBuffer:T from BinaryDecoder<T> =>
            if (messageContext is "RopGetPropertiesSpecificRequest")
            {
                dc.ResetPropProperties((ropBuffer as RopGetPropertiesSpecificRequest).PropertyTags);                
            }
            if (messageContext is "RopSetColumnsRequest")
            {
                dc.ResetColumnsProperties((ropBuffer as RopSetColumnsRequest).PropertyTags);
                dc.InitialHistory();
            }
            if (messageContext is "RopLogonRequest")
            {
                dc.SetLogOnFlag((ropBuffer as RopLogonRequest).LogonFlags);
		dc.SetLogonFlagMapLogonId((ropBuffer as RopLogonRequest).LogonId, (ropBuffer as RopLogonRequest).LogonFlags);
                dc.InitObjectHandle();
            }
            if (messageContext is "RopSynchronizationConfigureRequest")
            {
                if ((ropBuffer as RopSynchronizationConfigureRequest).SynchronizationType == MSOXCFXICS.SynchronizationType.Contents)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.ContentsSync);
                }
                else if ((ropBuffer as RopSynchronizationConfigureRequest).SynchronizationType == MSOXCFXICS.SynchronizationType.Hierarchy)
                {
                    dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.HierarchySync);
                }
            }
            if (messageContext is "RopFastTransferSourceCopyFolderRequest")
            {
                dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.TopFolder);
            }
            if (messageContext is "RopFastTransferSourceCopyMessagesRequest")
            {
                dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.MessageList);
            }
            if (messageContext is "RopSynchronizationGetTransferStateRequest")
            {
                dc.SetFastTransferRootType(MSOXCFXICS.FastTransferRootType.State);
            }

            return ropBuffer;
        default => ThrowDecodingException("MSOXCROPS", messageContext);
    }
    
    return nothing;
}

uint GetRopReturnValue(stream s)
{
    if (s.RemainingByteLength < 6)
        ReportInsufficientData(null, DiagnosisLevel.Error, "MSOXCROPS: Insufficient ROP response for full parse.");
    // Skip the RopId(1 byte) and HandleIndex(1 byte)
    return BinaryDecoder<uint>(s.PeekBytes((s.BytePosition + 2) * 8, 4)) as uint;
}

// Section 2.2.2   The Table of RopIds
pattern RopIdType = enum byte
{
    RopRelease                                  = 0x01,
    RopOpenFolder                               = 0x02,
    RopOpenMessage                              = 0x03,
    RopGetHierarchyTable                        = 0x04,
    RopGetContentsTable                         = 0x05,
    RopCreateMessage                            = 0x06,
    RopGetPropertiesSpecific                    = 0x07,
    RopGetPropertiesAll                         = 0x08,
    RopGetPropertiesList                        = 0x09,
    RopSetProperties                            = 0x0A,
    RopDeleteProperties                         = 0x0B,
    RopSaveChangesMessage                       = 0x0C,
    RopRemoveAllRecipients                      = 0x0D,
    RopModifyRecipients                         = 0x0E,
    RopReadRecipients                           = 0x0F,
    RopReloadCachedInformation                  = 0x10,
    RopSetMessageReadFlag                       = 0x11,
    RopSetColumns                               = 0x12,
    RopSortTable                                = 0x13,
    RopRestrict                                 = 0x14,
    RopQueryRows                                = 0x15,
    RopGetStatus                                = 0x16,
    RopQueryPosition                            = 0x17,
    RopSeekRow                                  = 0x18,
    RopSeekRowBookmark                          = 0x19,
    RopSeekRowFractional                        = 0x1A,
    RopCreateBookmark                           = 0x1B,
    RopCreateFolder                             = 0x1C,
    RopDeleteFolder                             = 0x1D,
    RopDeleteMessages                           = 0x1E,
    RopGetMessageStatus                         = 0x1F,
    RopSetMessageStatus                         = 0x20,
    RopGetAttachmentTable                       = 0x21,
    RopOpenAttachment                           = 0x22,
    RopCreateAttachment                         = 0x23,
    RopDeleteAttachment                         = 0x24,
    RopSaveChangesAttachment                    = 0x25,
    RopSetReceiveFolder                         = 0x26,
    RopGetReceiveFolder                         = 0x27,
    RopRegisterNotification                     = 0x29,
    RopNotify                                   = 0x2A,
    RopOpenStream                               = 0x2B,
    RopReadStream                               = 0x2C,
    RopWriteStream                              = 0x2D,
    RopSeekStream                               = 0x2E,
    RopSetStreamSize                            = 0x2F,
    RopSetSearchCriteria                        = 0x30,
    RopGetSearchCriteria                        = 0x31,
    RopSubmitMessage                            = 0x32,
    RopMoveCopyMessages                         = 0x33,
    RopAbortSubmit                              = 0x34,
    RopMoveFolder                               = 0x35,
    RopCopyFolder                               = 0x36,
    RopQueryColumnsAll                          = 0x37,
    RopAbort                                    = 0x38,
    RopCopyTo                                   = 0x39,
    RopCopyToStream                             = 0x3A,
    RopCloneStream                              = 0x3B,
    RopGetPermissionsTable                      = 0x3E,
    RopGetRulesTable                            = 0x3F,
    RopModifyPermissions                        = 0x40,
    RopModifyRules                              = 0x41,
    RopGetOwningServers                         = 0x42,
    RopLongTermIdFromId                         = 0x43,
    RopIdFromLongTermId                         = 0x44,
    RopPublicFolderIsGhosted                    = 0x45,
    RopOpenEmbeddedMessage                      = 0x46,
    RopSetSpooler                               = 0x47,
    RopSpoolerLockMessage                       = 0x48,
    RopGetAddressTypes                          = 0x49,
    RopTransportSend                            = 0x4A,
    RopFastTransferSourceCopyMessages           = 0x4B,
    RopFastTransferSourceCopyFolder             = 0x4C,
    RopFastTransferSourceCopyTo                 = 0x4D,
    RopFastTransferSourceGetBuffer              = 0x4E,
    RopFindRow                                  = 0x4F,
    RopProgress                                 = 0x50,
    RopTransportNewMail                         = 0x51,
    RopGetValidAttachments                      = 0x52,
    RopFastTransferDestinationConfigure         = 0x53,
    RopFastTransferDestinationPutBuffer         = 0x54,
    RopGetNamesFromPropertyIds                  = 0x55,
    RopGetPropertyIdsFromNames                  = 0x56,
    RopUpdateDeferredActionMessages             = 0x57,
    RopEmptyFolder                              = 0x58,
    RopExpandRow                                = 0x59,
    RopCollapseRow                              = 0x5A,
    RopLockRegionStream                         = 0x5B,
    RopUnlockRegionStream                       = 0x5C,
    RopCommitStream                             = 0x5D,
    RopGetStreamSize                            = 0x5E,
    RopQueryNamedProperties                     = 0x5F,
    RopGetPerUserLongTermIds                    = 0x60,
    RopGetPerUserGuid                           = 0x61,
    RopReadPerUserInformation                   = 0x63,
    RopWritePerUserInformation                  = 0x64,
    RopSetReadFlags                             = 0x66,
    RopCopyProperties                           = 0x67,
    RopGetReceiveFolderTable                    = 0x68,
    RopFastTransferSourceCopyProperties         = 0x69,
    RopGetCollapseState                         = 0x6B,
    RopSetCollapseState                         = 0x6C,
    RopGetTransportFolder                       = 0x6D,
    RopPending                                  = 0x6E,
    RopOptionsData                              = 0x6F,
    RopSynchronizationConfigure                 = 0x70,
    RopSynchronizationImportMessageChange       = 0x72,
    RopSynchronizationImportHierarchyChange     = 0x73,
    RopSynchronizationImportDeletes             = 0x74,
    RopSynchronizationUploadStateStreamBegin    = 0x75,
    RopSynchronizationUploadStateStreamContinue = 0x76,
    RopSynchronizationUploadStateStreamEnd      = 0x77,
    RopSynchronizationImportMessageMove         = 0x78,
    RopSetPropertiesNoReplicate                 = 0x79,
    RopDeletePropertiesNoReplicate              = 0x7A,
    RopGetStoreState                            = 0x7B,
    RopSynchronizationOpenCollector             = 0x7E,
    RopGetLocalReplicaIds                       = 0x7F,
    RopSynchronizationImportReadStateChanges    = 0x80,
    RopResetTable                               = 0x81,
    RopSynchronizationGetTransferState          = 0x82,
    RopTellVersion                              = 0x86,
    RopFreeBookmark                             = 0x89,
    RopWriteAndCommitStream                     = 0x90,
    RopHardDeleteMessages                       = 0x91,
    RopHardDeleteMessagesAndSubfolders          = 0x92,
    RopSetLocalReplicaMidsetDeleted             = 0x93,
    RopBackoff                                  = 0xF9,
    RopLogon                                    = 0xFE,
    RopBufferTooSmall                           = 0xFF,
    ...
};

pattern RopResponseStatus = enum uint
{
    Success               = 0x00000000,
    LogonRedirect         = 0x00000478,
    NullDestinationObject = 0x00000503,
    ...
};

// The base type for all kinds of ROP message buffer.
message ROPBufferBase
{
    RopIdType RopId;
    
    override string ToString()
    {
        return GetRopName(RopId);
    }
}

// The base type for almost of ROP request message buffer.
message ROPRequestBufferBase : ROPBufferBase
{
    byte LogonId;
    
    override string ToString()
    {
        return base.ToString() + " Request";
    }
}

// The base type for almost of ROP request message buffer.
message ROPResponseBufferBase : ROPBufferBase
{
    override string ToString()
    {
        return base.ToString() + " Response";
    }
}

// The base type for all of ROP response message buffer when the associated request has InputHandleIndex set.
message ROPResponseBufferBase_Input : ROPResponseBufferBase
{
    byte InputHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};

    override string ToString()
    {
        return base.ToString() + ", " + MSOXCDATA.FormatErrorCode(ReturnValue);
    }
}

// The base type for all of ROP response message buffer when the associated request has OutputHandleIndex set.
message ROPResponseBufferBase_Output : ROPResponseBufferBase
{
    byte OutputHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    
    override string ToString()
    {
        return base.ToString() + ", " + MSOXCDATA.FormatErrorCode(ReturnValue);
    }
}

RopIdType get RopID(this ROPRequestBufferBase ropMessage)
{
    return (ropMessage as ROPBufferBase).RopId;
}

RopIdType get RopID(this ROPResponseBufferBase ropMessage)
{
    return (ropMessage as ROPBufferBase).RopId;
}

// Fake ROPs to use when a reserved ROP is encountered
message RopReservedRequest : ROPRequestBufferBase
{
    binary UnknownData where ValidationCheck(false, null, DiagnosisLevel.Error, "Use of reserved RopId was unexpected");
}

message RopReservedResponse : ROPResponseBufferBase
{
    binary UnknownData where ValidationCheck(false, null, DiagnosisLevel.Error, "Use of reserved RopId was unexpected");
}

// ==============================2.2.3.1   RopLogon ROP==============================
// Section 2.2.3.1.1   RopLogon ROP Request Buffer
message RopLogonRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopLogon;
    byte OutputHandleIndex; 
    MSOXCSTOR.LogonFlags LogonFlags;
    MSOXCSTOR.OpenFlags OpenFlags;
    uint StoreState;
    ushort EssdnSize;
    string Essdn with BinaryEncoding {TextEncoding = TextEncoding.ASCII, Length = EssdnSize};
}

// Section 2.2.3.1.2   RopLogon ROP Success Response Buffer for Private Mailboxes
message RopLogonSuccessResponse_PrivateMailboxes : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopLogon;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCSTOR.LogonFlags LogonFlags;
    array<MSOXCDATA.FolderID> FolderIds with BinaryEncoding {Length = 13};
    MSOXCSTOR.ResponseFlags ResponseFlags;
    guid MailboxGuid;
    ushort ReplId;
    guid ReplGuid;
    LogonTime LogonTime;
    ulong GwartTime;
    uint StoreState;
    
    override string ToString()
    {
        return base.ToString() + " for Private Mailboxes";
    }
}

// Section 2.2.3.1.3   RopLogon ROP Success Response Buffer for Public Folders
message RopLogonROPSuccessResponse_PublicFolders : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopLogon;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCSTOR.LogonFlags LogonFlags;
    array<MSOXCDATA.FolderID> FolderIds with BinaryEncoding {Length = 13};
    ushort ReplId;
    guid ReplGuid;
    guid PerUserGuid;
    
    override string ToString()
    {
        return base.ToString() + " for public Mailboxes";
    }
}

// Section 2.2.3.1.4   RopLogon ROP Redirect Response Buffer
message RopLogonROPRedirectResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopLogon;
    invariant ReturnValue == RopResponseStatus.LogonRedirect;
    MSOXCSTOR.LogonFlags LogonFlags;
    byte ServerNameSize;
    string ServerName with BinaryEncoding {TextEncoding = TextEncoding.ASCII, Length = ServerNameSize};
}

// Section 2.2.3.1.5   RopLogon ROP Failure Response Buffer
message RopLogonROPFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopLogon;
}

// ==============================2.2.3.2   RopGetReceiveFolder ROP==============================
// Section 2.2.3.2.1   RopGetReceiveFolder ROP Request Buffer
message RopGetReceiveFolderROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetReceiveFolder;
    byte InputHandleIndex;
    string MessageClass with BinaryEncoding {TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.3.2.2   RopGetReceiveFolder ROP Success Response Buffer
message RopGetReceiveFolderROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetReceiveFolder;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCDATA.FolderID FolderId;
    string ExplicitMessageClass with BinaryEncoding {TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.3.2.3   RopGetReceiveFolder ROP Failure Response Buffer
message RopGetReceiveFolderROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetReceiveFolder;
}

// ==============================2.2.3.3   RopSetReceiveFolder ROP==============================
// Section 2.2.3.3.1   RopSetReceiveFolder ROP Request Buffer
message RopSetReceiveFolderROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetReceiveFolder;
    byte InputHandleIndex;
    MSOXCDATA.FolderID FolderId;
    string MessageClass with BinaryEncoding {TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.3.3.2   RopSetReceiveFolder ROP Response Buffer
message RopSetReceiveFolderROPResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetReceiveFolder;
    invariant ReturnValue == RopResponseStatus.Success;
}

// ==============================2.2.3.4   RopGetReceiveFolderTable ROP==============================
// Section 2.2.3.4.1   RopGetReceiveFolderTable ROP Request Buffer
message RopGetReceiveFolderTableROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetReceiveFolderTable;
    byte InputHandleIndex;
}

// Section 2.2.3.4.2   RopGetReceiveFolderTable ROP Success Response Buffer
message RopGetReceiveFolderTableROPSuccessResponse[array<PropertyTag> propertiesByGetReceiveFolderTable] : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetReceiveFolderTable;
    invariant ReturnValue == RopResponseStatus.Success;
    uint RowCount;
    array<PropertyRow[propertiesByGetReceiveFolderTable]> RowData with BinaryEncoding{Length = RowCount};
}

// Section 2.2.3.4.3   RopGetReceiveFolderTable ROP Failure Response Buffer
message RopGetReceiveFolderTableROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetReceiveFolderTable;
}

// ==============================2.2.3.5   RopGetStoreState ROP==============================
// Section 2.2.3.5.1   RopGetStoreState ROP Request Buffer
message RopGetStoreStateROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetStoreState;
    byte InputHandleIndex;
}

// Section 2.2.3.5.2   RopGetStoreState ROP Success Response Buffer
message RopGetStoreStateROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStoreState;
    invariant ReturnValue == RopResponseStatus.Success;
    uint StoreState;
}

// Section 2.2.3.5.3   RopGetStoreState ROP Failure Response Buffer
message RopGetStoreStateROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStoreState;
}

// ==============================2.2.3.6   RopGetOwningServers ROP==============================
// Section 2.2.3.6.1   RopGetOwningServers ROP Request Buffer
message RopGetOwningServersROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetOwningServers;
    byte InputHandleIndex;
    MSOXCDATA.FolderID FolderId;
}

// Section 2.2.3.6.2   RopGetOwningServers ROP Success Response Buffer
message RopGetOwningServersROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetOwningServers;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort OwningServersCount;
    ushort CheapServersCount;
    string OwningServers with BinaryEncoding {TextEncoding = TextEncoding.ASCII, Length = OwningServersCount};
}

// Section 2.2.3.6.3   RopGetOwningServers ROP Failure Response Buffer
message RopGetOwningServersROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetOwningServers;
}

// ==============================2.2.3.7   RopPublicFolderIsGhosted ROP==============================
// Section 2.2.3.7.1   RopPublicFolderIsGhosted ROP Request Buffer
message RopPublicFolderIsGhostedROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopPublicFolderIsGhosted;
    byte InputHandleIndex;
    MSOXCDATA.FolderID FolderId;
}

// Section 2.2.3.7.2   RopPublicFolderIsGhosted ROP Success Response Buffer
message RopPublicFolderIsGhostedROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopPublicFolderIsGhosted;
    invariant ReturnValue == RopResponseStatus.Success;
    byte IsGhosted with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    optional [|IsGhosted != 0|] ushort ServersCount;
    optional [|IsGhosted != 0|] ushort CheapServersCount;
    optional [|IsGhosted != 0|] array<string> Servers with BinaryEncoding {Length = ServersCount as uint, TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.3.7.3   RopPublicFolderIsGhosted ROP Failure Response Buffer
message RopPublicFolderIsGhostedROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopPublicFolderIsGhosted;
}

// ==============================2.2.3.8   RopLongTermIdFromId ROP==============================
// Section 2.2.3.8.1   RopLongTermIdFromId ROP Request Buffer
message RopLongTermIdFromIdROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopLongTermIdFromId;
    byte InputHandleIndex;
    MSOXCDATA.FolderID ObjectId;
}

// Section 2.2.3.8.2   RopLongTermIdFromId ROP Success Response Buffer
message RopLongTermIdFromIdROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopLongTermIdFromId;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCDATA.LongTermID LongTermId;
}

// Section 2.2.3.8.3   RopLongTermIdFromId ROP Failure Response Buffer
message RopLongTermIdFromIdROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopLongTermIdFromId;
}

// ==============================2.2.3.9   RopIdFromLongTermId ROP==============================
// Section 2.2.3.9.1   RopIdFromLongTermId ROP Request Buffer
message RopIdFromLongTermIdROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopIdFromLongTermId;
    byte InputHandleIndex;
    MSOXCDATA.LongTermID LongTermId;
}

// Section 2.2.3.9.2   RopIdFromLongTermId ROP Success Response Buffer
message RopIdFromLongTermIdROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopIdFromLongTermId;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCDATA.FolderID ObjectId;
}

// Section 2.2.3.9.3   RopIdFromLongTermId ROP Failure Response Buffer
message RopIdFromLongTermIdROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopIdFromLongTermId;
}

// ==============================2.2.3.10   RopGetPerUserLongTermIds ROP==============================
// Section 2.2.3.10.1   RopGetPerUserLongTermIds ROP Request Buffer
message RopGetPerUserLongTermIdsROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPerUserLongTermIds;
    byte InputHandleIndex;
    guid DatabaseGuid;
}

// Section 2.2.3.10.2   RopGetPerUserLongTermIds ROP Success Response Buffer
message RopGetPerUserLongTermIdsROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPerUserLongTermIds;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort LongTermIdCount;
    array<MSOXCDATA.LongTermID> LongTermIds;
}

// Section 2.2.3.10.3   RopGetPerUserLongTermIds ROP Failure Response Buffer
message RopGetPerUserLongTermIdsROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPerUserLongTermIds;
}

// ==============================2.2.3.11   RopGetPerUserGuid ROP==============================
// Section 2.2.3.11.1   RopGetPerUserGuid ROP Request Buffer
message RopGetPerUserGuidROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPerUserGuid;
    byte InputHandleIndex;
    MSOXCDATA.LongTermID LongTermId;
}

// Section 2.2.3.11.2   RopGetPerUserGuid ROP Success Response Buffer
message RopGetPerUserGuidROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPerUserGuid;
    invariant ReturnValue == RopResponseStatus.Success;
    guid DatabaseGuid;
}

// Section 2.2.3.11.3   RopGetPerUserGuid ROP Failure Response Buffer
message RopGetPerUserGuidROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPerUserGuid;
}

// ==============================2.2.3.12   RopReadPerUserInformation ROP==============================
// Section 2.2.3.12.1   RopReadPerUserInformation ROP Request Buffer
message RopReadPerUserInformationROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopReadPerUserInformation;
    byte InputHandleIndex;
    MSOXCDATA.LongTermID FolderId;
    byte Reserved;
    uint DataOffset;
    ushort MaxDataSize;
}

// Section 2.2.3.12.2   RopReadPerUserInformation ROP Success Response Buffer
message RopReadPerUserInformationROPSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReadPerUserInformation;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasFinished with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    ushort DataSize;
    binary Data with BinaryEncoding {Length = DataSize};
}

// Section 2.2.3.12.3   RopReadPerUserInformation ROP Failure Response Buffer
message RopReadPerUserInformationROPFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReadPerUserInformation;
}

// ==============================2.2.3.13   RopWritePerUserInformation ROP==============================
// Section 2.2.3.13.1   RopWritePerUserInformation ROP Request Buffer
message RopWritePerUserInformationROPRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopWritePerUserInformation;
    byte InputHandleIndex;
    MSOXCDATA.LongTermID FolderId;
    byte HasFinished with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    uint DataOffset;
    ushort DataSize;
    array<byte> Data with BinaryEncoding{WidthForComposedType = DataSize * 8};
    optional guid ReplGuid;
}

// 2.2.3.13.2   RopWritePerUserInformation ROP Response Buffer
message RopWritePerUserInformationROPResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopWritePerUserInformation;
}

// ==============================2.2.4.1   RopOpenFolder ROP==============================
// Section 2.2.4.1.1   RopOpenFolder ROP Request Buffer
message RopOpenFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOpenFolder;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCDATA.FolderID FolderId;
    MSOXCFOLD.OpenModeFlags OpenModeFlags;
}

// Section 2.2.4.1.2   RopOpenFolder ROP Success Response Buffer
message RopOpenFolderSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenFolder;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasRules with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte IsGhosted with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    optional [|IsGhosted != 0|] ushort ServerCount;
    optional [|IsGhosted != 0|] ushort CheapServerCount;
    optional [|IsGhosted != 0|] array<string> Servers with 
        BinaryEncoding {Length = ServerCount as uint, TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.4.1.3   RopOpenFolder ROP Failure Response Buffer
message RopOpenFolderFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenFolder;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.4.2   RopCreateFolder ROP==============================
// Section 2.2.4.2.1   RopCreateFolder ROP Request Buffer
message RopCreateFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCreateFolder;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFOLD.FolderType FolderType;
    byte UseUnicodeStrings with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte OpenExisting with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte Reserved;
    string DisplayName with BinaryEncoding {TextEncoding = UseUnicodeStrings != 0x0 ? TextEncoding.Unicode : TextEncoding.ASCII};
    string Comment with BinaryEncoding {TextEncoding = UseUnicodeStrings != 0x0 ?TextEncoding.Unicode : TextEncoding.ASCII};
}

// Section 2.2.4.2.2   RopCreateFolder ROP Success Response Buffer
message RopCreateFolderSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateFolder;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCDATA.FolderID FolderId;
    byte IsExistingFolder with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    optional [|IsExistingFolder != 0|] byte HasRules with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    optional [|IsExistingFolder != 0|] byte IsGhosted with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    optional [|IsExistingFolder != 0 && IsGhosted != 0|] ushort ServerCount;
    optional [|IsExistingFolder != 0 && IsGhosted != 0|] ushort CheapServerCount;
    optional [|IsExistingFolder != 0 && IsGhosted != 0|] array<string> Servers with 
        BinaryEncoding {Length = ServerCount as uint, TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.4.2.3   RopCreateFolder ROP Failure Response Buffer
message RopCreateFolderFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateFolder;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.4.3   RopDeleteFolder ROP==============================
// Section 2.2.4.3.1   RopDeleteFolder ROP Request Buffer
message RopDeleteFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopDeleteFolder;
    byte InputHandleIndex;
    MSOXCFOLD.DeleteFolderFlags DeleteFolderFlags;
    MSOXCDATA.FolderID FolderId;
}

// Section 2.2.4.3.2   RopDeleteFolder ROP Response Buffer
message RopDeleteFolderResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeleteFolder;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.4   RopSetSearchCriteria ROP==============================
// Section 2.2.4.4.1   RopSetSearchCriteria ROP Request Buffer
message RopSetSearchCriteriaRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetSearchCriteria;
    byte InputHandleIndex;
    ushort RestrictionDataSize;
    Restriction RestrictionData with BinaryEncoding{WidthForComposedType = RestrictionDataSize * 8};
    ushort FolderIdCount;
    array<MSOXCDATA.FolderID> FolderIds with BinaryEncoding {Length = FolderIdCount};
    MSOXCFOLD.SearchRequestFlags SearchFlags;
}

// Section 2.2.4.4.2   RopSetSearchCriteria ROP Response Buffer
message RopSetSearchCriteriaResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetSearchCriteria;
}

// ==============================2.2.4.5   RopGetSearchCriteria ROP==============================
// Section 2.2.4.5.1   RopGetSearchCriteria ROP Request Buffer
message RopGetSearchCriteriaRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetSearchCriteria;
    byte InputHandleIndex;
    byte UseUnicode with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte IncludeRestriction with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte IncludeFolders with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.5.2   RopGetSearchCriteria ROP Success Response Buffer
message RopGetSearchCriteriaSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetSearchCriteria;
    invariant ReturnValue == RopResponseStatus.Success;

    ushort RestrictionDataSize;
    Restriction RestrictionData with BinaryEncoding{WidthForComposedType = RestrictionDataSize * 8};
    byte LogonId;
    ushort FolderIdCount;
    array<MSOXCDATA.FolderID> FolderIds with BinaryEncoding {Length = FolderIdCount};
    MSOXCFOLD.SearchResponseFlags SearchFlags;
}

// Section 2.2.4.5.3   RopGetSearchCriteria ROP Failure Response Buffer
message RopGetSearchCriteriaFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetSearchCriteria;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.4.6   RopMoveCopyMessages ROP==============================
// Section 2.2.4.6.1   RopMoveCopyMessages ROP Request Buffer
message RopMoveCopyMessagesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopMoveCopyMessages;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    ushort MessageIdCount;
    array<MSOXCDATA.MessageID> MessageIds with BinaryEncoding {Length = MessageIdCount};
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte WantCopy with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.6.2   RopMoveCopyMessages ROP Response Buffer
message RopMoveCopyMessagesResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopMoveCopyMessages;
    invariant ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.6.3   RopMoveCopyMessages ROP Null Destination Failure Response Buffer
message RopMoveCopyMessagesNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopMoveCopyMessages;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.7   RopMoveFolder ROP==============================
// Section 2.2.4.7.1   RopMoveFolder ROP Request Buffer
message RopMoveFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopMoveFolder;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte UseUnicode with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    MSOXCDATA.FolderID FolderId;
    string NewFolderName with BinaryEncoding{TextEncoding = (UseUnicode != 0x0? TextEncoding.Unicode : TextEncoding.ASCII)};
}

// Section 2.2.4.7.2   RopMoveFolder ROP Response Buffer
message RopMoveFolderResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopMoveFolder;
    invariant ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.7.3   RopMoveFolder ROP Null Destination Failure Response Buffer
message RopMoveFolderNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopMoveFolder;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.8   RopCopyFolder ROP==============================
// Section 2.2.4.8.1   RopCopyFolder ROP Request Buffer
message RopCopyFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCopyFolder;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte WantRecursive with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte UseUnicode with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    MSOXCDATA.FolderID FolderId;
    string NewFolderName with BinaryEncoding {TextEncoding = UseUnicode != 0x0? TextEncoding.Unicode : TextEncoding.ASCII};
}

// Section 2.2.4.8.2   RopCopyFolder ROP Response Buffer
message RopCopyFolderResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyFolder;
    invariant ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.8.3   RopCopyFolder ROP Null Destination Failure Response Buffer
message RopCopyFolderNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyFolder;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.9   RopEmptyFolder ROP==============================
// Section 2.2.4.9.1   RopEmptyFolder ROP Request Buffer
message RopEmptyFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopEmptyFolder;
    byte InputHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte WantDeleteAssociated with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.9.2   RopEmptyFolder ROP Response Buffer
message RopEmptyFolderResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopEmptyFolder;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.10   RopHardDeleteMessagesAndSubfolders ROP==============================
// Section 2.2.4.10.1   RopHardDeleteMessagesAndSubfolders ROP Request Buffer
message RopHardDeleteMessagesAndSubfoldersRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopHardDeleteMessagesAndSubfolders;
    byte InputHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte WantDeleteAssociated with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// Section 2.2.4.10.2   RopHardDeleteMessagesAndSubfolders ROP Response Buffer
message RopHardDeleteMessagesAndSubfoldersResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopHardDeleteMessagesAndSubfolders;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.11   RopDeleteMessages ROP==============================
// Section 2.2.4.11.1   RopDeleteMessages ROP Request Buffer
message RopDeleteMessagesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopDeleteMessages;
    byte InputHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte NotifyNonRead with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    ushort MessageIdCount;
    array<MSOXCDATA.MessageID> MessageIds with BinaryEncoding {Length = MessageIdCount};
}

// Section 2.2.4.11.2   RopDeleteMessages ROP Response Buffer
message RopDeleteMessagesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeleteMessages;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.12   RopHardDeleteMessages ROP==============================
// Section 2.2.4.12.1   RopHardDeleteMessages ROP Request Buffer
message RopHardDeleteMessagesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopHardDeleteMessages;
    byte InputHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    byte NotifyNonRead with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
    ushort MessageIdCount;
    array<MSOXCDATA.MessageID> MessageIds with BinaryEncoding {Length = MessageIdCount};
}

// Section 2.2.4.12.2   RopHardDeleteMessages ROP Response Buffer
message RopHardDeleteMessagesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopHardDeleteMessages;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCFOLD.BoolValueToText};
}

// ==============================2.2.4.13   RopGetHierarchyTable ROP==============================
// Section 2.2.4.13.1   RopGetHierarchyTable ROP Request Buffer
message RopGetHierarchyTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetHierarchyTable;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFOLD.HierarchyTableFlags TableFlags;
}

// Section 2.2.4.13.2   RopGetHierarchyTable ROP Success Response Buffer
message RopGetHierarchyTableSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetHierarchyTable;
    invariant ReturnValue == RopResponseStatus.Success;
    uint RowCount;
}

// Section 2.2.4.13.3   RopGetHierarchyTable ROP Failure Response Buffer
message RopGetHierarchyTableFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetHierarchyTable;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.4.14   RopGetContentsTable ROP==============================
// Section 2.2.4.14.1   RopGetContentsTable ROP Request Buffer
message RopGetContentsTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetContentsTable;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFOLD.ContentsTableFlags TableFlags;
}

// Section 2.2.4.14.2   RopGetContentsTable ROP Success Response Buffer
message RopGetContentsTableSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetContentsTable;
    invariant ReturnValue == RopResponseStatus.Success;
    uint RowCount;
}

// Section 2.2.4.14.3   RopGetContentsTable ROP Failure Response Buffer
message RopGetContentsTableFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetContentsTable;
    invariant ReturnValue != RopResponseStatus.Success;
}

// Section 2.2.3.1.2.1   LogonTime Structure
type LogonTime
{
    byte Seconds;
    byte Minutes;
    byte Hour;
    byte DayOfWeek with DisplayInfo{ToText = DayOfWeekToText};
    byte Day;
    byte Month with DisplayInfo{ToText = MonthToText};
    ushort Year;
    
    override string ToString()
    {
        return (Day as string) + "/" + (Month as string) + "/" + (Year as string) + " " + 
            (Hour as string) + ":" + (Minutes as string) + ":" + (Seconds as string);
    }
}

string DayOfWeekToText(any data)
{
    byte content = data as byte;
    
    switch (content)
    {
        case 0x00 => return "Sunday";
        case 0x01 => return "Monday";
        case 0x02 => return "Tuesday";
        case 0x03 => return "Wednesday";
        case 0x04 => return "Thursday";
        case 0x05 => return "Friday";
        case 0x06 => return "Saturday";
    }
    
    return "Data has error";
}

string MonthToText(any data)
{
    byte content = data as byte;
    
    switch (content)
    {
        case 0x01 => return "January";
        case 0x02 => return "February";
        case 0x03 => return "March";
        case 0x04 => return "April";
        case 0x05 => return "May";
        case 0x06 => return "June";
        case 0x07 => return "July";
        case 0x08 => return "August";
        case 0x09 => return "September";
        case 0x0A => return "October";
        case 0x0B => return "November";
        case 0x0C => return "December";
    }
    
    return "Data has error";
}

// ==============================2.2.5.1   RopSetColumns ROP==============================
// Section 2.2.5.1.1   RopSetColumns ROP Request Buffer
message RopSetColumnsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetColumns;
    byte InputHandleIndex;
    AsynchronousFlags SetColumnsFlags;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.5.1.2   RopSetColumns ROP Success Response Buffer
message RopSetColumnsSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetColumns;
    invariant ReturnValue == RopResponseStatus.Success;
    TableStatus TableStatus;
}

// Section 2.2.5.1.3   RopSetColumns ROP Failure Response Buffer
message RopSetColumnsFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetColumns;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.2   RopSortTable ROP==============================
// Section 2.2.5.2.1   RopSortTable ROP Request Buffer
message RopSortTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSortTable;
    byte InputHandleIndex;
    AsynchronousFlags SortTableFlags;
    ushort SortOrderCount;
    ushort CategoryCount;
    ushort ExpandedCount;
    array<SortOrder> SortOrders with BinaryEncoding{Length = SortOrderCount}; 
}

// Section 2.2.5.2.2   RopSortTable ROP Success Response Buffer
message RopSortTableSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSortTable;
    invariant ReturnValue == RopResponseStatus.Success;
    TableStatus TableStatus;
}

// Section 2.2.5.2.3   RopSortTable ROP Failure Response Buffer
message RopSortTableFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSortTable;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.3   RopRestrict ROP==============================
// Section 2.2.5.3.1   RopRestrict ROP Request Buffer
message RopRestrictRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopRestrict;
    byte InputHandleIndex;
    MSOXCTABL.AsynchronousFlags RestrictFlags;
    ushort RestrictionDataSize;
    optional [|RestrictionDataSize>0|] Restriction RestrictionData with BinaryEncoding{Length = RestrictionDataSize * 8 as int}; 
}

// Section 2.2.5.3.2   RopRestrict ROP Success Response Buffer
message RopRestrictSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopRestrict;
    invariant ReturnValue == RopResponseStatus.Success;
    TableStatus TableStatus;
}

// Section 2.2.5.3.3   RopRestrict ROP Failure Response Buffer
message RopRestrictFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopRestrict;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.4   RopQueryRows ROP==============================
// Section 2.2.5.4.1   RopQueryRows ROP Request Buffer
message RopQueryRowsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopQueryRows;
    byte InputHandleIndex;
    QueryRowsFlags QueryRowsFlags;
    byte ForwardRead with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    ushort RowCount;
}

// Section 2.2.5.4.2   RopQueryRows ROP Success Response Buffer
message RopQueryRowsSuccessResponse[array<PropertyTag> propertiesBySetColum] : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryRows;
    invariant ReturnValue == RopResponseStatus.Success;
    Bookmarks Origin;
    ushort RowCount;
    array<PropertyRow[propertiesBySetColum]> RowData with BinaryEncoding{Length = RowCount};
}

// Section 2.2.5.4.3   RopQueryRows ROP Failure Response Buffer
message RopQueryRowsFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryRows;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.5   RopAbort ROP==============================
// Section 2.2.5.5.1   RopAbort ROP Request Buffer
message RopAbortRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopAbort;
    byte InputHandleIndex;
}

// Section 2.2.5.5.2   RopAbort ROP Success Response Buffer
message RopAbortSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopAbort;
    invariant ReturnValue == RopResponseStatus.Success;
    TableStatus TableStatus;
}

// Section 2.2.5.5.3   RopAbort ROP Failure Response Buffer
message RopAbortFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopAbort;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.6   RopGetStatus ROP==============================
// Section 2.2.5.6.1   RopGetStatus ROP Request Buffer
message RopGetStatusRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetStatus;
    byte InputHandleIndex;
}

// Section 2.2.5.6.2   RopGetStatus ROP Success Response Buffer
message RopGetStatusSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStatus;
    invariant ReturnValue == RopResponseStatus.Success;
    TableStatus TableStatus;
}

// Section 2.2.5.6.3   RopGetStatus ROP Failure Response Buffer
message RopGetStatusFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStatus;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.7   RopQueryPosition ROP==============================
// Section 2.2.5.7.1   RopQueryPosition ROP Request Buffer
message RopQueryPositionRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopQueryPosition;
    byte InputHandleIndex;
}

// Section 2.2.5.7.2   RopQueryPosition ROP Success Response Buffer
message RopQueryPositionSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryPosition;
    invariant ReturnValue == RopResponseStatus.Success;
    uint Numerator;
    uint Denominator;
}

// Section 2.2.5.7.3   RopQueryPosition ROP Failure Response Buffer
message RopQueryPositionFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryPosition;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.8   RopSeekRow ROP==============================
// Section 2.2.5.8.1   RopSeekRow ROP Request Buffer
message RopSeekRowRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSeekRow;
    byte InputHandleIndex;
    Bookmarks Origin;
    int RowCount;
    byte WantRowMovedCount with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
}

// Section 2.2.5.8.2   RopSeekRow ROP Success Response Buffer
message RopSeekRowSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekRow;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasSoughtLess with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    int RowsSought;
}

// Section 2.2.5.8.3   RopSeekRow ROP Failure Response Buffer
message RopSeekRowFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekRow;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.9   RopSeekRowBookmark ROP==============================
// Section 2.2.5.9.1   RopSeekRowBookmark ROP Request Buffer
message RopSeekRowBookmarkRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSeekRowBookmark;
    byte InputHandleIndex;
    ushort BookmarkSize;
    array<byte> Bookmark with BinaryEncoding{Length = BookmarkSize};
    int RowCount;
    byte WantRowMovedCount with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
}

// Section 2.2.5.9.2   RopSeekRowBookmark ROP Success Response Buffer
message RopSeekRowBookmarkSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekRowBookmark;
    invariant ReturnValue == RopResponseStatus.Success;
    byte RowNoLongerVisible with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    byte HasSoughtLess with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    uint RowsSought;
}

// Section 2.2.5.9.3   RopSeekRowBookmark ROP Failure Response Buffer
message RopSeekRowBookmarkFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekRowBookmark;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.10   RopSeekRowFractional ROP==============================
// Section 2.2.5.10.1   RopSeekRowFractional ROP Request Buffer
message RopSeekRowFractionalRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSeekRowFractional;
    byte InputHandleIndex;
    uint Numerator;
    uint Denominator;
}

// Section 2.2.5.10.2   RopSeekRowFractional ROP Response Buffer
message RopSeekRowFractionalResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekRowFractional;
}

// ==============================2.2.5.11   RopCreateBookmark ROP==============================
// Section 2.2.5.11.1   RopCreateBookmark ROP Request Buffer
message RopCreateBookmarkRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCreateBookmark;
    byte InputHandleIndex;
}

// Section 2.2.5.11.2   RopCreateBookmark ROP Success Response Buffer
message RopCreateBookmarkSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopCreateBookmark;
    invariant ReturnValue == RopResponseStatus.Success;

    ushort BookmarkSize;
    array<byte> Bookmark with BinaryEncoding{Length = BookmarkSize};
}

// Section 2.2.5.11.3   RopCreateBookmark ROP Failure Response Buffer
message RopCreateBookmarkFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopCreateBookmark;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.12   RopQueryColumnsAll ROP==============================
// Section 2.2.5.12.1   RopQueryColumnsAll ROP Request Buffer
message RopQueryColumnsAllRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopQueryColumnsAll;
    byte InputHandleIndex;
}

// Section 2.2.5.12.2   RopQueryColumnsAll ROP Success Response Buffer
message RopQueryColumnsAllSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryColumnsAll;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.5.12.3   RopQueryColumnsAll ROP Failure Response Buffer
message RopQueryColumnsAllFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryColumnsAll;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.13   RopFindRow ROP==============================
// Section 2.2.5.13.1   RopFindRow ROP Request Buffer
message RopFindRowRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFindRow;
    byte InputHandleIndex;
    MSOXCTABL.FindRowFlags FindRowFlags;
    ushort RestrictionDataSize;
    Restriction RestrictionData with BinaryEncoding{Length = RestrictionDataSize * 8 as int}; // IN FUTURE: replace with MS-OXCDATA PtypeRestriction type
    Bookmarks Origin;
    ushort BookmarkSize;
    array<byte> Bookmark with BinaryEncoding{Length = BookmarkSize * 8 as int};
}

// Section 2.2.5.13.2   RopFindRow ROP Success Response Buffer
message RopFindRowSuccessResponse[array<PropertyTag> propertiesBySetColum] : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopFindRow;
    invariant ReturnValue == RopResponseStatus.Success;
    byte RowNoLongerVisible with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    byte HasRowData with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    optional [|HasRowData != 0|] PropertyRow[propertiesBySetColum] RowData with BinaryEncoding{};
}
// Section 2.2.5.13.3   RopFindRow ROP Failure Response Buffer
message RopFindRowFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopFindRow;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.14   RopFreeBookmark ROP==============================
// Section 2.2.5.14.1   RopFreeBookmark ROP Request Buffer
message RopFreeBookmarkRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFreeBookmark;
    byte InputHandleIndex;
    ushort BookmarkSize;
    array<byte> Bookmark with BinaryEncoding{Length = BookmarkSize};
}

// Section 2.2.5.14.2   RopFreeBookmark ROP Response Buffer
message RopFreeBookmarkResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopFreeBookmark;
}

// ==============================2.2.5.15   RopResetTable ROP==============================
// Section 2.2.5.15.1   RopResetTable ROP Request Buffer
message RopResetTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopResetTable;
    byte InputHandleIndex;
}

// Section 2.2.5.15.2   RopResetTable ROP Response Buffer
message RopResetTableResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopResetTable;
}

// ==============================2.2.5.16   RopExpandRow ROP==============================
// Section 2.2.5.16.1   RopExpandRow ROP Request Buffer
message RopExpandRowRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopExpandRow;
    byte InputHandleIndex;
    ushort MaxRowCount;
    long CategoryId;
}

// Section 2.2.5.16.2   RopExpandRow ROP Success Response Buffer
message RopExpandRowSuccessResponse[array<PropertyTag> propertiesBySetColum] : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopExpandRow;
    invariant ReturnValue == RopResponseStatus.Success;
    uint ExpandedRowCount;
    ushort RowCount;
    array<PropertyRow[propertiesBySetColum]> RowData with BinaryEncoding{Length = RowCount};
}

// Section 2.2.5.16.3   RopExpandRow ROP Failure Response Buffer
message RopExpandRowFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopExpandRow;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.17   RopCollapseRow ROP==============================
// Section 2.2.5.17.1   RopCollapseRow ROP Request Buffer
message RopCollapseRowRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCollapseRow;
    byte InputHandleIndex;
    long CategoryId;
}

// Section 2.2.5.17.2   RopCollapseRow ROP Success Response Buffer
message RopCollapseRowSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopCollapseRow;
    invariant ReturnValue == RopResponseStatus.Success;
    uint CollapsedRowCount;
}

// Section 2.2.5.17.3   RopCollapseRow ROP Failure Response Buffer
message RopCollapseRowFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopCollapseRow;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.18   RopGetCollapseState ROP==============================
// Section 2.2.5.18.1   RopGetCollapseState ROP Request Buffer
message RopGetCollapseStateRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetCollapseState;
    byte InputHandleIndex;
    long RowId;
    uint RowInstanceNumber;
}

// Section 2.2.5.18.2   RopGetCollapseState ROP Success Response Buffer
message RopGetCollapseStateSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetCollapseState;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort CollapseStateSize;
    array<byte> CollapseState with BinaryEncoding{Length = CollapseStateSize};
}

// Section 2.2.5.18.3   RopGetCollapseState ROP Failure Response Buffer
message RopGetCollapseStateFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetCollapseState;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.5.19   RopSetCollapseState ROP==============================
// Section 2.2.5.19.1   RopSetCollapseState ROP Request Buffer
message RopSetCollapseStateRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetCollapseState;
    byte InputHandleIndex;
    ushort CollapseStateSize;
    array<byte> CollapseState with BinaryEncoding{Length = CollapseStateSize};
}

// Section 2.2.5.19.2   RopSetCollapseState ROP Success Response Buffer
message RopSetCollapseStateSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetCollapseState;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort BookmarkSize;
    array<byte> Bookmark with BinaryEncoding{Length = BookmarkSize};
}

// Section 2.2.5.19.3   RopSetCollapseState ROP Failure Response Buffer
message RopSetCollapseStateFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetCollapseState;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.1   RopOpenMessage ROP==============================
// Section 2.2.6.1.1   RopOpenMessage ROP Request Buffer
message RopOpenMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOpenMessage;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    short CodePageId;
    MSOXCDATA.FolderID FolderId;
    MSOXCMSG.OpenModeFlags OpenModeFlags;
    MSOXCDATA.MessageID MessageId;
}

// Section 2.2.6.1.2   RopOpenMessage ROP Success Response Buffer
message RopOpenMessageSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenMessage;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasNamedProperties with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    TypedString SubjectPrefix;
    TypedString NormalizedSubject;
    ushort RecipientCount;
    ushort ColumnCount;
    array<PropertyTag> RecipientColumns with BinaryEncoding{Length = ColumnCount};
    byte RowCount;
    array<OpenRecipientRow[RecipientColumns]> RecipientRows with BinaryEncoding{Length = RowCount};
}

type OpenRecipientRow[array<PropertyTag> propTags]
{
    MSOXCMSG.RecipientType RecipientType;
    ushort CodePageId;
    ushort Reserved;
    ushort RecipientRowSize;
    RecipientRow[propTags] RecipientRow with BinaryEncoding{WidthForComposedType = RecipientRowSize * 8};
}

// Section 2.2.6.1.3   RopOpenMessage ROP Failure Response Buffer
message RopOpenMessageFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenMessage;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.2   RopCreateMessage ROP==============================
// Section 2.2.6.2.1   RopCreateMessage ROP Request Buffer
message RopCreateMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCreateMessage;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    ushort CodePageId;
    MSOXCDATA.FolderID FolderId;
    byte AssociatedFlag with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
}

// Section 2.2.6.2.2   RopCreateMessage ROP Success Response Buffer
message RopCreateMessageSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateMessage;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasMessageId with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    optional [|HasMessageId != 0|] MSOXCDATA.MessageID MessageId;
}

// Section 2.2.6.2.3   RopCreateMessage ROP Failure Response Buffer
message RopCreateMessageFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateMessage;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.3   RopSaveChangesMessage ROP==============================
// Section 2.2.6.3.1   RopSaveChangesMessage ROP Request Buffer
message RopSaveChangesMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSaveChangesMessage;
    byte ResponseHandleIndex;
    byte InputHandleIndex;
    MSOXCMSG.SaveFlags SaveFlags;
}

// Section 2.2.6.3.2   RopSaveChangesMessage ROP Success Response Buffer
message RopSaveChangesMessageSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSaveChangesMessage;
    invariant ReturnValue == RopResponseStatus.Success;
    byte ResponseHandleIndex;
    MSOXCDATA.MessageID MessageId;
}

// Section 2.2.6.3.3   RopSaveChangesMessage ROP Failure Response Buffer
message RopSaveChangesMessageFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopSaveChangesMessage;
    invariant ReturnValue != RopResponseStatus.Success;
    byte ResponseHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
}

// ==============================2.2.6.4   RopRemoveAllRecipients ROP==============================
// Section 2.2.6.4.1   RopRemoveAllRecipients ROP Request Buffer
message RopRemoveAllRecipientsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopRemoveAllRecipients;
    byte InputHandleIndex;
    int Reserved;
}

// Section 2.2.6.4.2   RopRemoveAllRecipients ROP Response Buffer
message RopRemoveAllRecipientsResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopRemoveAllRecipients;
}

// ==============================2.2.6.5   RopModifyRecipients ROP==============================
// Section 2.2.6.5.1   RopModifyRecipients ROP Request Buffer
message RopModifyRecipientsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopModifyRecipients;
    byte InputHandleIndex;
    ushort ColumnCount;
    array<PropertyTag> RecipientColumns with BinaryEncoding{Length = ColumnCount};
    ushort RowCount;
    array<ModifyRecipientRow[RecipientColumns]> RecipientRows with BinaryEncoding{Length = RowCount};
}

type ModifyRecipientRow[array<PropertyTag> propTags]
{
    uint RowId;
    MSOXCMSG.RecipientType RecipientType;
    ushort RecipientRowSize;
    optional [|RecipientRowSize > 0|] RecipientRow[propTags] RecipientRow with BinaryEncoding{WidthForComposedType = RecipientRowSize * 8};
}

// Section 2.2.6.5.2   RopModifyRecipients ROP Response Buffer
message RopModifyRecipientsResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopModifyRecipients;
}

// ==============================2.2.6.6   RopReadRecipients ROP==============================
// Section 2.2.6.6.1   RopReadRecipients ROP Request Buffer
message RopReadRecipientsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopReadRecipients;
    byte InputHandleIndex;
    uint RowId;
    ushort Reserved;
}

// Section 2.2.6.6.2   RopReadRecipients ROP Success Response Buffer
message RopReadRecipientsSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReadRecipients;
    invariant ReturnValue == RopResponseStatus.Success;
    byte RowCount;
    array<ReadRecipientRow> RecipientRows with BinaryEncoding{Length = RowCount};
}

type ReadRecipientRow
{
    uint RowId;
    MSOXCMSG.RecipientType RecipientType;
    ushort CodePageId;
    ushort Reserved;
    ushort RecipientRowSize;
    
    // NOTE:
    // Here, we should use type RecipientRow to parse this but we can't get the context info
    // which is required by RecipientRow.
    // So we put the raw bytes here temporarily and we need to refine it later once we get
    // the key.
    binary RecipientRow with BinaryEncoding{Length = RecipientRowSize};
}

// Section 2.2.6.6.3   RopReadRecipients ROP Failure Response Buffer
message RopReadRecipientsFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReadRecipients;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.7   RopReloadCachedInformation ROP==============================
// Section 2.2.6.7.1   RopReloadCachedInformation ROP Request Buffer
message RopReloadCachedInformationRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopReloadCachedInformation;
    byte InputHandleIndex;
    ushort Reserved;
}

// Section 2.2.6.7.2   RopReloadCachedInformation ROP Success Response Buffer
message RopReloadCachedInformationSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReloadCachedInformation;
    invariant ReturnValue == RopResponseStatus.Success;
    byte HasNamedProperties with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    TypedString SubjectPrefix;
    TypedString NormalizedSubject;
    ushort RecipientCount;
    ushort ColumnCount;
    array<PropertyTag> RecipientColumns with BinaryEncoding{Length = ColumnCount};
    byte RowCount;
    array<OpenRecipientRow> RecipientRows with BinaryEncoding{Length = RowCount};
}

// Section 2.2.6.7.3   RopReloadCachedInformation ROP Failure Response Buffer
message RopReloadCachedInformationFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReloadCachedInformation;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.8   RopSetMessageStatus ROP==============================
// Section 2.2.6.8.1   RopSetMessageStatus ROP Request Buffer
message RopSetMessageStatusRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetMessageStatus;
    byte InputHandleIndex;
    MSOXCDATA.MessageID MessageId;
    MSOXCMSG.MessageStatusFlag MessageStatusFlags;
    uint MessageStatusMask;
}

// Section 2.2.6.8.2   RopSetMessageStatus ROP Success Response Buffer
message RopSetMessageStatusSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetMessageStatus;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCMSG.MessageStatusFlag MessageStatusFlags;
}

// Section 2.2.6.8.3   RopSetMessageStatus ROP Failure Response Buffer
message RopSetMessageStatusFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetMessageStatus;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.9   RopGetMessageStatus ROP==============================
// Section 2.2.6.9.1   RopGetMessageStatus ROP Request Buffer
message RopGetMessageStatusRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetMessageStatus;
    byte InputHandleIndex;
    MSOXCDATA.MessageID MessageId;
}

// Section 2.2.6.9.2   RopGetMessageStatus ROP Response Buffers
message RopGetMessageStatusSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetMessageStatus;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCMSG.MessageStatusFlag MessageStatusFlags;
}

message RopGetMessageStatusFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetMessageStatus;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.10   RopSetReadFlags ROP==============================
// Section 2.2.6.10.1   RopSetReadFlags ROP Request Buffer
message RopSetReadFlagsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetReadFlags;
    byte InputHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    MSOXCMSG.ReadFlags ReadFlags;
    ushort MessageIdCount;
    array<MessageID> MessageIds with BinaryEncoding{Length = MessageIdCount};
}

// Section 2.2.6.10.2   RopSetReadFlags ROP Response Buffer
message RopSetReadFlagsResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetReadFlags;
    byte PartialCompletion with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
}

// ==============================2.2.6.11   RopSetMessageReadFlag ROP==============================
// Section 2.2.6.11.1   RopSetMessageReadFlag ROP Request Buffer
message RopSetMessageReadFlagRequest[map<byte, MSOXCSTOR.LogonFlags> LogonFlagMapLogId] : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetMessageReadFlag;
    byte ResponseHandleIndex;
    byte InputHandleIndex;
    MSOXCMSG.ReadFlags ReadFlags;
    optional [|(LogonId in LogonFlagMapLogId) && ((LogonFlagMapLogId[LogonId] & (MSOXCSTOR.LogonFlags.Private as ushort)) != MSOXCSTOR.LogonFlags.Private as ushort)|] binary ClientData with BinaryEncoding{Length = 24};
}

// Section 2.2.6.11.2   RopSetMessageReadFlag ROP Success Response Buffer
message RopSetMessageReadFlagSuccessResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopSetMessageReadFlag;
    invariant ReturnValue == RopResponseStatus.Success;
    byte ResponseHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    byte ReadStatusChanged with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    optional [|ReadStatusChanged != 0x0|] byte LogonId;
    optional [|ReadStatusChanged != 0x0|] binary ClientData with BinaryEncoding{Length = 24};
}

// Section 2.2.6.11.3   RopSetMessageReadFlag ROP Failure Response Buffer
message RopSetMessageReadFlagFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopSetMessageReadFlag;
    invariant ReturnValue != RopResponseStatus.Success;
    byte ResponseHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
}

// ==============================2.2.6.12   RopOpenAttachment ROP==============================
// Section 2.2.6.12.1   RopOpenAttachment ROP Request Buffer
message RopOpenAttachmentRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOpenAttachment;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCMSG.OpenAttachmentFlags OpenAttachmentFlags;
    uint AttachmentID;
}

// Section 2.2.6.12.2   RopOpenAttachment ROP Response Buffer
message RopOpenAttachmentResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenAttachment;
}

// ==============================2.2.6.13   RopCreateAttachment ROP==============================
// Section 2.2.6.13.1   RopCreateAttachment ROP Request Buffer
message RopCreateAttachmentRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCreateAttachment;
    byte InputHandleIndex;
    byte OutputHandleIndex;
}

// Section 2.2.6.13.2   RopCreateAttachment ROP Success Response Buffer
message RopCreateAttachmentSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateAttachment;
    invariant ReturnValue == RopResponseStatus.Success;
    uint AttachmentID;
}

// Section 2.2.6.13.3   RopCreateAttachment ROP Failure Response Buffer
message RopCreateAttachmentFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCreateAttachment;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.14   RopDeleteAttachment ROP==============================
// Section 2.2.6.14.1   RopDeleteAttachment ROP Request Buffer
message RopDeleteAttachmentRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopDeleteAttachment;
    byte InputHandleIndex;
    uint AttachmentID;
}

// Section 2.2.6.14.2   RopDeleteAttachment ROP Response Buffer
message RopDeleteAttachmentResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeleteAttachment;
}

// ==============================2.2.6.15   RopSaveChangesAttachment ROP==============================
// Section 2.2.6.15.1   RopSaveChangesAttachment ROP Request Buffer
message RopSaveChangesAttachmentRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSaveChangesAttachment;
    byte ResponseHandleIndex;
    byte InputHandleIndex;
    MSOXCMSG.SaveFlags SaveFlags;
}

// Section 2.2.6.15.2   RopSaveChangesAttachment ROP Response Buffer
message RopSaveChangesAttachmentResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopSaveChangesAttachment;
    byte ResponseHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
}

// ==============================2.2.6.16   RopOpenEmbeddedMessage ROP==============================
// Section 2.2.6.16.1   RopOpenEmbeddedMessage ROP Request Buffer
message RopOpenEmbeddedMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOpenEmbeddedMessage;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    ushort CodePageId;
    MSOXCMSG.OpenEmbedMsgModeFlags OpenModeFlags;
}

// Section 2.2.6.16.2   RopOpenEmbeddedMessage ROP Success Response Buffer
message RopOpenEmbeddedMessageSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenEmbeddedMessage;
    invariant ReturnValue == RopResponseStatus.Success;
    byte Reserved;
    MSOXCDATA.MessageID MessageId;
    byte HasNamedProperties with DisplayInfo{ToText = MSOXCMSG.BoolValueToText};
    TypedString SubjectPrefix;
    TypedString NormalizedSubject;
    ushort RecipientCount;
    ushort ColumnCount;
    array<PropertyTag> RecipientColumns with BinaryEncoding{Length = ColumnCount};
    byte RowCount;
    array<OpenRecipientRow> RecipientRows with BinaryEncoding{Length = RowCount};
}

// Section 2.2.6.16.3   RopOpenEmbeddedMessage ROP Failure Response Buffer
message RopOpenEmbeddedMessageFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenEmbeddedMessage;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.6.17   RopGetAttachmentTable ROP==============================
// Section 2.2.6.17.1   RopGetAttachmentTable ROP Request Buffer
message RopGetAttachmentTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetAttachmentTable;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCMSG.TableFlags TableFlags;
}

// Section 2.2.6.17.2   RopGetAttachmentTable ROP Response Buffer
message RopGetAttachmentTableResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetAttachmentTable;
}

// ==============================2.2.6.18   RopGetValidAttachments ROP==============================
// Section 2.2.6.18.1   RopGetValidAttachments ROP Request Buffer
message RopGetValidAttachmentsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetValidAttachments;
    byte InputHandleIndex;
}

// Section 2.2.6.18.2   RopGetValidAttachments ROP Success Response Buffer
message RopGetValidAttachmentsSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetValidAttachments;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort AttachmentIdCount;
    array<uint> AttachmentIdArray with BinaryEncoding{Length = AttachmentIdCount};
}

// Section 2.2.6.18.3   RopGetValidAttachments ROP Failure Response Buffer
message RopGetValidAttachmentsFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetValidAttachments;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.7.1   RopSubmitMessage ROP=======================================
// Section 2.2.7.1.1   RopSubmitMessage ROP Request Buffer
message RopSubmitMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSubmitMessage;
    byte InputHandleIndex;
    byte SubmitFlags;
}

// Section 2.2.7.1.2   RopSubmitMessage ROP Response Buffer
message RopSubmitMessageResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSubmitMessage;
}

// ==============================2.2.7.2   RopAbortSubmit ROP=========================================
// Section 2.2.7.2.1   RopAbortSubmit ROP Request Buffer
message RopAbortSubmitRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopAbortSubmit;
    byte InputHandleIndex;
    MSOXCDATA.FolderID FolderId;
    MSOXCDATA.MessageID MessageId;
}

// Section 2.2.7.2.2   RopAbortSubmit ROP Response Buffer
message RopAbortSubmitResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopAbortSubmit;
}

// ==============================2.2.7.3   RopGetAddressTypes ROP=====================================
// Section 2.2.7.3.1   RopGetAddressTypes ROP Request Buffer
message RopGetAddressTypesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetAddressTypes;
    byte InputHandleIndex;
}

// Section 2.2.7.3.2   RopGetAddressTypes ROP Success Response Buffer
message RopGetAddressTypesSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetAddressTypes;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort AddressTypeCount;
    ushort AddressTypeSize;
    array<string> AddressTypes with BinaryEncoding{Length = AddressTypeCount, TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.7.3.3   RopGetAddressTypes ROP Failure Response Buffer
message RopGetAddressTypesFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetAddressTypes;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.7.4   RopSetSpooler ROP=========================================
// Section 2.2.7.4.1   RopSetSpooler ROP Request Buffer
message RopSetSpoolerRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetSpooler;
    byte InputHandleIndex;
}

// Section 2.2.7.4.2   RopSetSpooler ROP Response Buffer
message RopSetSpoolerResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetSpooler; 
}

// ==============================2.2.7.5   RopSpoolerLockMessage ROP=========================================
// Section 2.2.7.5.1   RopSpoolerLockMessage ROP Request Buffer
message RopSpoolerLockMessageRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSpoolerLockMessage;
    byte InputHandleIndex;
    MSOXCDATA.MessageID MessageId;
    byte LockState;
}

// Section 2.2.7.5.2   RopSpoolerLockMessage ROP Response Buffer
message RopSpoolerLockMessageResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSpoolerLockMessage;
}

// ==============================2.2.7.6   RopTransportSend ROP=========================================
// Section 2.2.7.6.1   RopTransportSend ROP Request Buffer
message RopTransportSendRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopTransportSend;
    byte InputHandleIndex;
}

// Section 2.2.7.6.2   RopTransportSend ROP Success Response Buffer
message RopTransportSendSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopTransportSend;
    invariant ReturnValue == RopResponseStatus.Success;
    byte NoPropertiesReturned with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.7.6.3   RopTransportSend ROP Failure Response Buffer
message RopTransportSendFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopTransportSend;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.7.7   RopTransportNewMail ROP========================================
// Section 2.2.7.7.1   RopTransportNewMail ROP Request Buffer
message RopTransportNewMailRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopTransportNewMail;
    byte InputHandleIndex;
    MSOXCDATA.MessageID MessageId;
    MSOXCDATA.FolderID FolderId;    
    string MessageClass with BinaryEncoding {TextEncoding = TextEncoding.ASCII};
    ulong MessageFlags;
}

// Section 2.2.7.7.2   RopTransportNewMail ROP Response Buffer
message RopTransportNewMailResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopTransportNewMail;
}

// ==============================2.2.7.8   RopGetTransportFolder ROP=========================================
// Section 2.2.7.8.1   RopGetTransportFolder ROP Request Buffer
message RopGetTransportFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetTransportFolder;
    byte InputHandleIndex;
}

// Section 2.2.7.8.2   RopGetTransportFolder ROP Success Response Buffer
message RopGetTransportFolderSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetTransportFolder;
    invariant ReturnValue == RopResponseStatus.Success;
    MSOXCDATA.FolderID FolderId;
}

// Section 2.2.7.8.3   RopGetTransportFolder ROP Failure Response Buffer
message RopGetTransportFolderFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetTransportFolder;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.7.9   RopOptionsData ROP================================================
// Section 2.2.7.9.1   RopOptionsData ROP Request Buffer
message RopOptionsDataRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOptionsData;
    byte InputHandleIndex;
    string AddressTypes with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
    byte WantWin32 with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
}

// Section 2.2.7.9.2   RopOptionsData ROP Success Response Buffer
message RopOptionsDataSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopOptionsData;
    invariant ReturnValue == RopResponseStatus.Success;
    byte Reserved;
    ushort OptionsInfoSize;
    array<byte> OptionsInfo with BinaryEncoding{Length = OptionsInfoSize};
    ushort HelpFileSize;
    optional [|HelpFileSize != 0x00|] array<byte> HelpFile with BinaryEncoding{Length = HelpFileSize};
    optional [|HelpFileSize != 0x00|] string HelpFileName with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
}

// Section 2.2.7.9.3   RopOptionsData ROP Failure Response Buffer
message RopOptionsDataFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopOptionsData;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.1   RopGetPropertyIdsFromNames ROP=============================
// Section 2.2.8.1.1   RopGetPropertyIdsFromNames ROP Request Buffer
message RopGetPropertyIdsFromNamesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPropertyIdsFromNames;
    byte InputHandleIndex;
    byte Flags;
    ushort PropertyNameCount;
    array<MSOXCDATA.PropertyName> PropertyNames with BinaryEncoding{Length = PropertyNameCount};
}

// Section 2.2.8.1.2   RopGetPropertyIdsFromNames ROP Success Response Buffer
message RopGetPropertyIdsFromNamesSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertyIdsFromNames;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyIdCount;
    array<ushort> PropertyIds with BinaryEncoding{Length = PropertyIdCount};
}

// Section 2.2.8.1.3   RopGetPropertyIdsFromNames ROP Failure Response Buffer
message RopGetPropertyIdsFromNamesFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertyIdsFromNames;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.2   RopGetNamesFromPropertyIds ROP==============================
// Section 2.2.8.2.1   RopGetNamesFromPropertyIds ROP Request Buffer
message RopGetNamesFromPropertyIdsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetNamesFromPropertyIds;
    byte InputHandleIndex;
    ushort PropertyIdCount;
    array<ushort> PropertyIds with BinaryEncoding{Length = PropertyIdCount};
}

// Section 2.2.8.2.2   RopGetNamesFromPropertyIds ROP Success Response Buffer
message RopGetNamesFromPropertyIdsSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetNamesFromPropertyIds;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyNameCount;
    array<MSOXCDATA.PropertyName> PropertyNames with BinaryEncoding{Length = PropertyNameCount};
}

// Section 2.2.8.2.3   RopGetNamesFromPropertyIds ROP Failure Response Buffer
message RopGetNamesFromPropertyIdsFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetNamesFromPropertyIds;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.3   RopGetPropertiesSpecific ROP==============================
// Section 2.2.8.3.1   RopGetPropertiesSpecific ROP Request Buffer
message RopGetPropertiesSpecificRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPropertiesSpecific;
    byte InputHandleIndex;
    ushort PropertySizeLimit;
    short WantUnicode with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.8.3.2   RopGetPropertiesSpecific ROP Success Response Buffer
message RopGetPropertiesSpecificSuccessResponse[array<PropertyTag> PropertiesByGetProp] : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesSpecific;
    invariant ReturnValue == RopResponseStatus.Success;
    PropertyRow[PropertiesByGetProp] RowData;
}

// Section 2.2.8.3.3   RopGetPropertiesSpecific ROP Failure Response Buffer
message RopGetPropertiesSpecificFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesSpecific;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.4   RopGetPropertiesAll ROP==============================
// Section 2.2.8.4.1   RopGetPropertiesAll ROP Request Buffer
message RopGetPropertiesAllRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPropertiesAll;
    byte InputHandleIndex;
    ushort PropertySizeLimit;
    ushort WantUnicode with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
}

// Section 2.2.8.4.2   RopGetPropertiesAll ROP Success Response Buffer
message RopGetPropertiesAllSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesAll;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.8.4.3   RopGetPropertiesAll ROP Failure Response Buffer
message RopGetPropertiesAllFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesAll;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.5   RopGetPropertiesList ROP==============================
// Section 2.2.8.5.1   RopGetPropertiesList ROP Request Buffer
message RopGetPropertiesListRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPropertiesList;
    byte InputHandleIndex;
}

// Section 2.2.8.5.2   RopGetPropertiesList ROP Success Response Buffer
message RopGetPropertiesListSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesList;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.8.5.3   RopGetPropertiesList ROP Failure Response Buffer
message RopGetPropertiesListFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetPropertiesList;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.6   RopSetProperties ROP==============================
// Section 2.2.8.6.1   RopSetProperties ROP Request Buffer
message RopSetPropertiesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetProperties;
    byte InputHandleIndex;
    ushort PropertyValueSize;
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.8.6.2   RopSetProperties ROP Success Response Buffer
message RopSetPropertiesSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetProperties;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.6.3   RopSetProperties ROP Failure Response Buffer
message RopSetPropertiesFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetProperties;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.7   RopSetPropertiesNoReplicate ROP==============================
// Section 2.2.8.7.1   RopSetPropertiesNoReplicate ROP Request Buffer
message RopSetPropertiesNoReplicateRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetPropertiesNoReplicate;
    byte InputHandleIndex;
    ushort PropertyValueSize;
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.8.7.2   RopSetPropertiesNoReplicate ROP Success Response Buffer
message RopSetPropertiesNoReplicateSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetPropertiesNoReplicate;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.7.3   RopSetPropertiesNoReplicate ROP Failure Response Buffer
message RopSetPropertiesNoReplicateFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetPropertiesNoReplicate;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.8   RopDeleteProperties ROP==============================
// Section 2.2.8.8.1   RopDeleteProperties ROP Request Buffer
message RopDeletePropertiesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopDeleteProperties;
    byte InputHandleIndex;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.8.8.2   RopDeleteProperties ROP Success Response Buffer
message RopDeletePropertiesSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeleteProperties;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.8.3   RopDeleteProperties ROP Failure Response Buffer
message RopDeletePropertiesFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeleteProperties;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.9   RopDeletePropertiesNoReplicate ROP==============================
// Section 2.2.8.9.1   RopDeletePropertiesNoReplicate ROP Request Buffer
message RopDeletePropertiesNoReplicateRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopDeletePropertiesNoReplicate;
    byte InputHandleIndex;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.8.9.2   RopDeletePropertiesNoReplicate ROP Success Response Buffer
message RopDeletePropertiesNoReplicateSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeletePropertiesNoReplicate;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.9.3   RopDeletePropertiesNoReplicate ROP Failure Response Buffer
message RopDeletePropertiesNoReplicateFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopDeletePropertiesNoReplicate;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.10   RopQueryNamedProperties ROP==============================
// Section 2.2.8.10.1   RopQueryNamedProperties ROP Request Buffer
message RopQueryNamedPropertiesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopQueryNamedProperties;
    byte InputHandleIndex;
    QueryFlags QueryFlags;
    byte HasGuid with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    optional [|HasGuid != 0|] guid PropertyGuid;
}

// Section 2.2.8.10.2   RopQueryNamedProperties ROP Success Response Buffer
message RopQueryNamedPropertiesSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryNamedProperties;
    invariant ReturnValue == RopResponseStatus.Success;
    ushort IdCount;
    array<ushort> PropertyIds with BinaryEncoding{Length = IdCount};
    array<MSOXCDATA.PropertyName> PropertyNames with BinaryEncoding{Length = IdCount};
}

// Section 2.2.8.10.3   RopQueryNamedProperties ROP Failure Response Buffer
message RopQueryNamedPropertiesFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopQueryNamedProperties;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.8.11   RopCopyProperties ROP==============================
// Section 2.2.8.11.1   RopCopyProperties ROP Request Buffer
message RopCopyPropertiesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCopyProperties;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    MSOXCPRPT.CopyFlags CopyFlags;
    ushort PropertyTagCount;
    array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

// Section 2.2.8.11.2   RopCopyProperties ROP Success Response Buffer
message RopCopyPropertiesSuccessResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyProperties;
    invariant ReturnValue == RopResponseStatus.Success;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.11.3   RopCopyProperties ROP Null Destination Failure Response Buffer
message RopCopyPropertiesNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyProperties;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
}

// Section 2.2.8.11.4   RopCopyProperties ROP Failure Response Buffer
message RopCopyPropertiesFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyProperties;
    invariant ReturnValue != RopResponseStatus.Success && ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
}

// ==============================2.2.8.12   RopCopyTo ROP==============================
// Section 2.2.8.12.1   RopCopyTo ROP Request Buffer
message RopCopyToRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCopyTo;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    byte WantAsynchronous with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    byte WantSubObjects with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    MSOXCPRPT.CopyFlags CopyFlags;
    ushort ExcludedTagCount;
    array<PropertyTag> ExcludedTags with BinaryEncoding{Length = ExcludedTagCount * 32};
}

// Section 2.2.8.12.2   RopCopyTo ROP Success Response Buffer
message RopCopyToSuccessResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyTo;
    invariant ReturnValue == RopResponseStatus.Success;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    ushort PropertyProblemCount;
    array<PropertyProblem> PropertyProblems with BinaryEncoding{Length = PropertyProblemCount};
}

// Section 2.2.8.12.3   RopCopyTo ROP Null Destination Failure Response Buffer
message RopCopyToNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyTo;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
}

// Section 2.2.8.12.4   RopCopyTo ROP Failure Response Buffer
message RopCopyToFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyTo;
    invariant ReturnValue != RopResponseStatus.Success && ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
}

// ==============================2.2.8.13   RopProgress ROP==============================
// Section 2.2.8.13.1   RopProgress ROP Request Buffer
message RopProgressRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopProgress;
    byte InputHandleIndex;
    byte WantCancel with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
}

// Section 2.2.8.13.2   RopProgress ROP Success Response Buffer
message RopProgressSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopProgress;
    invariant ReturnValue == RopResponseStatus.Success;
    byte LogonId;
    uint CompletedTaskCount;
    uint TotalTaskCount;
}

// Section 2.2.8.13.3   RopProgress ROP Failure Response Buffer
message RopProgressFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopProgress;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.9.1   RopOpenStream ROP==============================
// Section 2.2.9.1.1   RopOpenStream ROP Request Buffer
message RopOpenStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopOpenStream;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    PropertyTag PropertyTag;
    MSOXCPRPT.OpenModeFlags OpenModeFlags;
}

// Section 2.2.9.1.2   RopOpenStream ROP Success Response Buffer
message RopOpenStreamSuccessResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenStream;
    invariant ReturnValue == RopResponseStatus.Success;
    uint StreamSize;
}

// Section 2.2.9.1.3   RopOpenStream ROP Failure Response Buffer
message RopOpenStreamFailureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopOpenStream;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.9.2   RopReadStream ROP==============================
// Section 2.2.9.2.1   RopReadStream ROP Request Buffer
message RopReadStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopReadStream;
    byte InputHandleIndex;
    ushort ByteCount;
    optional [|ByteCount == 0xBABE|] uint MaximumByteCount;
}

// Section 2.2.9.2.2   RopReadStream ROP Response Buffer
message RopReadStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopReadStream;
    ushort DataSize;
    array<byte> Data with BinaryEncoding {Length = DataSize};
}

// ==============================2.2.9.3   RopWriteStream ROP==============================
// Section 2.2.9.3.1   RopWriteStream ROP Request Buffer
message RopWriteStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopWriteStream;
    byte InputHandleIndex;
    ushort DataSize;
    binary Data with BinaryEncoding{Length = DataSize};
}

// Section 2.2.9.3.2   RopWriteStream ROP Response Buffer
message RopWriteStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopWriteStream;
    ushort WrittenSize;
}

// ==============================2.2.9.4   RopCommitStream ROP==============================
// Section 2.2.9.4.1   RopCommitStream ROP Request Buffer
message RopCommitStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCommitStream;
    byte InputHandleIndex;
}

// Section 2.2.9.4.2   RopCommitStream ROP Response Buffer
message RopCommitStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopCommitStream;
}

// ==============================2.2.9.5   RopGetStreamSize ROP==============================
// Section 2.2.9.5.1   RopGetStreamSize ROP Request Buffer
message RopGetStreamSizeRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetStreamSize;
    byte InputHandleIndex;
}

// Section 2.2.9.5.2   RopGetStreamSize ROP Success Response Buffer
message RopGetStreamSizeSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStreamSize;
    invariant ReturnValue == RopResponseStatus.Success;
    uint StreamSize;
}

// Section 2.2.9.5.3   RopGetStreamSize ROP Failure Response Buffer
message RopGetStreamSizeFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetStreamSize;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.9.6   RopSetStreamSize ROP==============================
// Section 2.2.9.6.1   RopSetStreamSize ROP Request Buffer
message RopSetStreamSizeRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetStreamSize;
    byte InputHandleIndex;
    ulong StreamSize;
}

// Section 2.2.9.6.2   RopSetStreamSize ROP Response Buffer
message RopSetStreamSizeResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetStreamSize;
}

// ==============================2.2.9.7   RopSeekStream ROP==============================
// Section 2.2.9.7.1   RopSeekStream ROP Request Buffer
message RopSeekStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSeekStream;
    byte InputHandleIndex;
    sbyte Origin;
    ulong Offset;
}

// Section 2.2.9.7.2   RopSeekStream ROP Success Response Buffer
message RopSeekStreamSuccessResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekStream;
    invariant ReturnValue == RopResponseStatus.Success;
    ulong NewPosition;
}

// Section 2.2.9.7.3   RopSeekStream ROP Failure Response Buffer
message RopSeekStreamFailureResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSeekStream;
    invariant ReturnValue != RopResponseStatus.Success;
}

// ==============================2.2.9.8   RopCopyToStream ROP==============================
// Section 2.2.9.8.1   RopCopyToStream ROP Request Buffer
message RopCopyToStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCopyToStream;
    byte SourceHandleIndex;
    byte DestHandleIndex;
    ulong ByteCount;
}

// Section 2.2.9.8.2   RopCopyToStream ROP Response Buffer
message RopCopyToStreamResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyToStream;
    invariant ReturnValue != RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    ulong ReadByteCount;
    ulong WrittenByteCount;
}

// Section 2.2.9.8.3   RopCopyToStream ROP Null Destination Failure Response Buffer
message RopCopyToStreamNullDestinationFailureResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopCopyToStream;
    invariant ReturnValue == RopResponseStatus.NullDestinationObject;
    byte SourceHandleIndex;
    uint ReturnValue with DisplayInfo{ToText = MSOXCDATA.FormatErrorCode};
    uint DestHandleIndex;
    ulong ReadByteCount;
    ulong WrittenByteCount;
}

// ==============================2.2.9.9   RopLockRegionStream ROP==============================
// Section 2.2.9.9.1   RopLockRegionStream ROP Request Buffer
message RopLockRegionStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopLockRegionStream;
    byte InputHandleIndex;
    ulong RegionOffset;
    ulong RegionSize;
    uint LockFlags with DisplayInfo{ToText = LockFlagsToText};
}

// Section 2.2.9.9.2   RopLockRegionStream ROP Response Buffer
message RopLockRegionStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopLockRegionStream;
}

// ==============================2.2.9.10   RopUnlockRegionStream ROP==============================
// Section 2.2.9.10.1   RopUnlockRegionStream ROP Request Buffer
message RopUnlockRegionStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopUnlockRegionStream;
    byte InputHandleIndex;
    ulong RegionOffset;
    ulong RegionSize;
    uint LockFlags with DisplayInfo{ToText = LockFlagsToText};
}

// Section 2.2.9.10.2   RopUnlockRegionStream ROP Response Buffer
message RopUnlockRegionStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopUnlockRegionStream;
}

// ==============================2.2.9.11   RopWriteAndCommitStream ROP==============================
// Section 2.2.9.11.1   RopWriteAndCommitStream ROP Request Buffer
message RopWriteAndCommitStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopWriteAndCommitStream;
    byte InputHandleIndex;
    ushort DataSize;
    binary Data with BinaryEncoding{Length = DataSize};
}

// Section 2.2.9.11.2   RopWriteAndCommitStream ROP Response Buffer
message RopWriteAndCommitStreamResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopWriteAndCommitStream;
    ushort WrittenSize;
}

// ==============================2.2.9.12   RopCloneStream ROP==============================
// Section 2.2.9.12.1   RopCloneStream ROP Request Buffer
message RopCloneStreamRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopCloneStream;
    byte InputHandleIndex;
    byte OutputHandleIndex;
}

// Section 2.2.9.12.2   RopCloneStream ROP Response Buffer
message RopCloneStreamResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopCloneStream;
}

// Section 2.2.11.1.1   RopModifyRules ROP Request Buffer
message RopModifyRulesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopModifyRules;
    
    byte InputHandleIndex;
    MSOXORULE.ModifyRulesFlags ModifyRulesFlags;
    ushort RulesCount;
    
    array<RuleData> RulesData with BinaryEncoding {Length = RulesCount};
}

// Section 2.2.11.1.1.1   RuleData Structure
type RuleData
{
    MSOXORULE.RuleDataFlags RuleDataFlags;
    ushort PropertyValueCount;
    array<MSOXCDATA.TaggedPropertyValue> PropertyValues  with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.11.1.2   RopModifyRules ROP Response Buffer
message RopModifyRulesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopModifyRules;
}

// Section 2.2.11.2.1   RopGetRulesTable ROP Request Buffer
message RopGetRulesTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetRulesTable;
    
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXORULE.TableFlags TableFlags;
}

// Section 2.2.11.2.2   RopGetRulesTable ROP Response Buffer
message RopGetRulesTableResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetRulesTable;
}

// Section 2.2.11.3.1   RopUpdateDeferredActionMessages ROP Request Buffer
message RopUpdateDeferredActionMessagesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopUpdateDeferredActionMessages;
    
    byte InputHandleIndex;
    ushort ServerEntryIdSize;
    array<byte> ServerEntryId with BinaryEncoding {Length = ServerEntryIdSize};
    ushort ClientEntryIdSize;
    array<byte> ClientEntryId with BinaryEncoding {Length = ClientEntryIdSize};
}

// Section 2.2.11.3.2   RopUpdateDeferredActionMessages ROP Response Buffer
message RopUpdateDeferredActionMessagesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopUpdateDeferredActionMessages;
}

// ==============================2.2.10.1   RopModifyPermissions ROP==============================
// Section 2.2.10.1.1   RopModifyPermissions ROP Request Buffer
message RopModifyPermissionsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopModifyPermissions;
    byte InputHandleIndex;
    MSOXCPERM.ModifyFlags ModifyFlags;
    ushort ModifyCount;
    array<PermissionData> PermissionsData with BinaryEncoding {Length = ModifyCount};
}

// Section 2.2.10.1.1.1   PermissionData Structure
type PermissionData
{
    MSOXCPERM.PermissionDataFlags PermissionDataFlags;
    ushort PropertyValueCount;
    array<MSOXCDATA.TaggedPropertyValue> PropertyValues  with BinaryEncoding{Length = PropertyValueCount};
}

// Section 2.2.10.1.2   RopModifyPermissions ROP Response Buffer
message RopModifyPermissionsResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopModifyPermissions;
}

// ==============================2.2.10.2   RopGetPermissionsTable ROP==============================
// Section 2.2.10.2.1   RopGetPermissionsTable ROP Request Buffer
message RopGetPermissionsTableRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetPermissionsTable;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCPERM.TableFlags TableFlags;
}

// Section 2.2.10.2.2   RopGetPermissionsTable ROP Response Buffer
message RopGetPermissionsTableResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopGetPermissionsTable;
}

// Section   2.2.14   Notification ROPs
// ==============================2.2.14.1   RopRegisterNotification ROP==============================
// Section 2.2.14.1.1   RopRegisterNotification ROP Request Buffer
message RopRegisterNotificationRequest: ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopRegisterNotification;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCNOTIF.NotificationTypes NotificationTypes;
    byte Reserved;
    byte WantWholeStore with DisplayInfo{ToText = MSOXCTABL.BoolValueToText};
    optional [|WantWholeStore == 0|] MSOXCDATA.FolderID FolderId; // An identifier that is present when the value of the WantWholeStore field is zero and is not present when it is nonzero. This value specifies the folder to register notifications for
    optional [|WantWholeStore == 0|] MSOXCDATA.MessageID MessageId; // An identifier that is present when the value of the WantWholeStore field is zero and is not present when it is nonzero. This value specifies the message to register notifications for.
};

// Section 2.2.14.1.2   RopRegisterNotification ROP Response Buffer
message RopRegisterNotificationResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopRegisterNotification;
}

// ==============================2.2.14.2   RopNotify ROP==============================
// Section 2.2.14.2.1   RopNotify ROP Response Buffer
message RopNotifyResponse[array<PropertyTag> propertiesBySetColum]: ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopNotify;
    uint NotificationHandle;
    byte LogonId;
    MSOXCNOTIF.NotificationData[propertiesBySetColum] NotificationData;
}

// ==============================2.2.14.3   RopPending ROP==============================
// Section 2.2.14.3.1   RopPending ROP Response Buffer
message RopPendingResponse: ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopPending;
    ushort SessionIndex;
}

//=================================2.2.12   Fast Transfer ROPs==========================
message RopFastTransferSourceCopyMessagesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyMessages ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    ushort MessageIdCount;
    optional [|MessageIdCount != 0x00|] array<MSOXCDATA.MessageID> MessageIds with BinaryEncoding{Length = MessageIdCount};
    MSOXCFXICS.CopyFlags_SourceCopyMessages CopyFlags;
    MSOXCFXICS.SendOptions SendOptions; 
}

message RopFastTransferSourceCopyMessagesResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyMessages;
}
message RopFastTransferSourceCopyFolderRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyFolder ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFXICS.CopyFlags_SourceCopyFolder CopyFlags;
    MSOXCFXICS.SendOptions SendOptions; 
}

message RopFastTransferSourceCopyFolderResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyFolder;
}

message RopFastTransferSourceCopyToRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyTo ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    byte Level;
    MSOXCFXICS.CopyFlags_SourceCopyTo CopyFlags;
    MSOXCFXICS.SendOptions SendOptions;
    ushort PropertyTagCount;
    optional [|PropertyTagCount != 0x00|] array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

message RopFastTransferSourceCopyToResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyTo;
}

message RopFastTransferSourceGetBufferRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferSourceGetBuffer ;
    byte InputHandleIndex;
    ushort BufferSize;
    optional [|BufferSize == 0xBABE|] ushort MaximumBufferSize;
}

message RopFastTransferSourceGetBufferResponse[MSOXCFXICS.FastTransferRootType fastTransferRootType]: ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopFastTransferSourceGetBuffer;
    MSOXCFXICS.TransferStatus TransferStatus ;
    ushort InProgressCount;
    ushort TotalStepCount;
    byte Reserved;
    ushort TransferBufferSize;
    optional [|ReturnValue != 0x00000480 && TransferBufferSize > 0 |] ([|TransferStatus != MSOXCFXICS.TransferStatus.NoRoom|] MSOXCFXICS.FastTransferStream[fastTransferRootType] | 
                                            [|TransferStatus == MSOXCFXICS.TransferStatus.NoRoom|] array<byte>) TransferBuffer with BinaryEncoding{WidthForComposedType = TransferBufferSize * 8};
    optional [|ReturnValue == 0x00000480|] uint BackoffTime;    
}

message RopFastTransferDestinationConfigureRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferDestinationConfigure ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFXICS.SourceOperation SourceOperation;
    MSOXCFXICS.CopyFlags CopyFlags;
}

message RopFastTransferDestinationConfigureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopFastTransferDestinationConfigure;
}

message RopFastTransferDestinationPutBufferRequest[MSOXCFXICS.FastTransferRootType fastTransferRootType]: ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferDestinationPutBuffer;
    byte InputHandleIndex;
    ushort TransferDataSize;
    MSOXCFXICS.FastTransferStream[fastTransferRootType] TransferData with BinaryEncoding{WidthForComposedType = TransferDataSize * 8};
}

message RopFastTransferDestinationPutBufferResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopFastTransferDestinationPutBuffer;
    ushort TransferStatus;
    ushort InProgressCount;
    ushort TotalStepCount;
    byte Reserved;
    ushort BufferUsedSize;
}

message RopFastTransferSourceCopyPropertiesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyProperties;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    byte Level;
    MSOXCFXICS.CopyFlags_SourceCopyProperties CopyFlags;
    MSOXCFXICS.SendOptions SendOptions;
    ushort PropertyTagCount;
    optional [|PropertyTagCount != 0x00|] array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

message RopFastTransferSourceCopyPropertiesResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopFastTransferSourceCopyProperties;
}

message RopTellVersionRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopTellVersion ;
    byte InputHandleIndex;
    // TODO:If is right?
    array<ushort> Version with BinaryEncoding{Length = 3};
}

message RopTellVersionResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopTellVersion;
}

//=================================2.2.13 Incremental Change Synchronization ROPs=======
message RopSynchronizationConfigureRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationConfigure ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFXICS.SynchronizationType SynchronizationType;
    MSOXCFXICS.SendOptions SendOptions;
    MSOXCFXICS.SynchronizationFlags SynchronizationFlags;
    ushort RestrictionDataSize;
    optional [|RestrictionDataSize != 0x00|] Restriction RestrictionData with BinaryEncoding{Length = RestrictionDataSize * 8 as int};
    MSOXCFXICS.SynchronizationExtraFlags SynchronizationExtraFlags;
    ushort PropertyTagCount;
    optional [|PropertyTagCount != 0x00|] array<PropertyTag> PropertyTags with BinaryEncoding{Length = PropertyTagCount};
}

message RopSynchronizationConfigureResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopSynchronizationConfigure;
}

message RopSynchronizationImportMessageChangeRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationImportMessageChange ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    MSOXCFXICS.ImportFlag ImportFlag;
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount}; 
}

message RopSynchronizationImportMessageChangeResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopSynchronizationImportMessageChange;
    optional [|ReturnValue == 0x00000000|] MSOXCDATA.MessageID MessageId;
}

message RopSynchronizationImportHierarchyChangeRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationImportHierarchyChange ;
    byte InputHandleIndex;
    ushort HierarchyValueCount;
    array<TaggedPropertyValue> HierarchyValues with BinaryEncoding{Length = HierarchyValueCount};   
    ushort PropertyValueCount;
    array<TaggedPropertyValue> PropertyValues with BinaryEncoding{Length = PropertyValueCount}; 
}

message RopSynchronizationImportHierarchyChangeResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationImportHierarchyChange;
    optional [|ReturnValue == 0x00000000|] MSOXCDATA.FolderID FolderId;
}

message RopSynchronizationImportDeletesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationImportDeletes ;
    byte InputHandleIndex;
    MSOXCFXICS.ImportDeleteFlags ImportDeleteFlags;
    ushort PropertyValueCount;
    array <TaggedPropertyValue> PropertyValues with BinaryEncoding{Length=PropertyValueCount};
}

message RopSynchronizationImportDeletesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationImportDeletes;
}

message RopSynchronizationUploadStateStreamBeginRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamBegin ;
    byte InputHandleIndex;
    PropertyTag StateProperty;
    uint TransferBufferSize;
}

message RopSynchronizationUploadStateStreamBeginResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamBegin;
}

message RopSynchronizationUploadStateStreamContinueRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamContinue ;
    byte InputHandleIndex;
    uint StreamDataSize;
    array<byte> StreamData with BinaryEncoding{Length = StreamDataSize};
    
}

message RopSynchronizationUploadStateStreamContinueResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamContinue;
}

message RopSynchronizationUploadStateStreamEndRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamEnd ;
    byte InputHandleIndex;  
}

message RopSynchronizationUploadStateStreamEndResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationUploadStateStreamEnd;
}

message RopSynchronizationImportMessageMoveRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationImportMessageMove ;
    byte InputHandleIndex;
    uint SourceFolderIdSize;
    array<byte> SourceFolderId with BinaryEncoding{Length = SourceFolderIdSize};
    uint SourceMessageIdSize;
    array<byte> SourceMessageId with BinaryEncoding{Length = SourceMessageIdSize};
    uint PredecessorChangeListSize;
    array<byte> PredecessorChangeList with BinaryEncoding{Length = PredecessorChangeListSize};
    uint DestinationMessageIdSize;
    array<byte> DestinationMessageId with BinaryEncoding{Length = DestinationMessageIdSize};
    uint ChangeNumberSize;
    array<byte> ChangeNumber with BinaryEncoding{Length = ChangeNumberSize};
}

message RopSynchronizationImportMessageMoveResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationImportMessageMove;
    optional [|ReturnValue == 0x00000000|] MSOXCDATA.MessageID MessageId;
}

message RopSynchronizationOpenCollectorRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationOpenCollector ;
    byte InputHandleIndex;
    byte OutputHandleIndex;
    byte IsContentsCollector;
}

message RopSynchronizationOpenCollectorResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopSynchronizationOpenCollector;
}

message RopGetLocalReplicaIdsRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopGetLocalReplicaIds ;
    byte InputHandleIndex;
    uint IdCount;
}

message RopGetLocalReplicaIdsResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopGetLocalReplicaIds;
    optional [|ReturnValue == 0x00000000|] guid ReplGuid;
    optional [|ReturnValue == 0x00000000|] array <byte> GlobalCount with BinaryEncoding{Length=6};  
}

// 2.2.13.3.1.1
type MessageReadState
{
  ushort MessageIdSize;
  array <MSOXCDATA.MessageID> MessageId with BinaryEncoding{Length=MessageIdSize};
  byte MarkAsRead;
}

message RopSynchronizationImportReadStateChangesRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationImportReadStateChanges;
    byte InputHandleIndex;
    ushort MessageReadStateSize;
    
    // TODO: MessageReadStateSize identities the total size of MessageReadState instead of the count of it (because the length of this structure of various).
    array <byte> MessageReadStates with BinaryEncoding{Length = MessageReadStateSize};
}

message RopSynchronizationImportReadStateChangesResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSynchronizationImportReadStateChanges;  
}

message RopSynchronizationGetTransferStateRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSynchronizationGetTransferState;
    byte InputHandleIndex;
    byte OutputHandleIndex;
}

message RopSynchronizationGetTransferStateResponse : ROPResponseBufferBase_Output
{
    invariant RopId == RopIdType.RopSynchronizationGetTransferState;
}

// 2.2.13.12.1.1   LongTermIdRange Structure
type LongTermIdRange
{
  LongTermID MinLongTermId;
  LongTermID MaxLongTermId;
}

message RopSetLocalReplicaMidsetDeletedRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopSetLocalReplicaMidsetDeleted;
    byte InputHandleIndex;
    
    // TODO: If is correct
    ushort DataSize;
    uint LongTermIdRangeCount;
    array <LongTermIdRange> LongTermIdRanges with BinaryEncoding{Length = LongTermIdRangeCount};    
}

message RopSetLocalReplicaMidsetDeletedResponse : ROPResponseBufferBase_Input
{
    invariant RopId == RopIdType.RopSetLocalReplicaMidsetDeleted;
}

message RopReleaseRequest : ROPRequestBufferBase
{
    invariant RopId == RopIdType.RopRelease;
    byte InputHandleIndex;
}

message RopBackoffResponse : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopBackoff;
    byte LogonId;
    uint Duration;
    byte BackoffRopCount;
    array<BackoffRop> BackoffRopData;
    ushort AdditionalDataSize;
    binary AdditionalData with BinaryEncoding {Length = AdditionalDataSize};
}

type BackoffRop
{
    byte RopIdBackoff;
    uint Duration;
}

message RopBufferTooSmallResponse[uint RequestBuffersSize] : ROPResponseBufferBase
{
    invariant RopId == RopIdType.RopBufferTooSmall;	
    ushort SizeNeeded;
    array<byte> RequestBuffers with BinaryEncoding {Length = RequestBuffersSize};
}

string GetRopName(byte ropId)
{
    string ropName = EnumToStringInSummary<RopIdType>(ropId);
    // The reason for this convoluted looking test is to protect against the
    // presence of "Unknown" as a substring in a ROP name in the future.
    if (ropName.IndexOf("(") > -1 && ropName.Segment(0, ropName.IndexOf("(")) == "Unknown")
    {
        ropName = ropName.Replace("Unknown", "Reserved");
    }
    return ropName;
}

bool HasReturnValueRops(string ropName)
{
    if ((ropName == "RopPending") || (ropName == "RopNotify") || (ropName == "RopBufferToolSmall") || (ropName == "RopBackoff"))
    {
        return false;
    }
    
    if ((ropName.Count >= 9) && (ropName.Segment(0,9) == "Reserved("))
    {
        return false;
    }
    return true;
}
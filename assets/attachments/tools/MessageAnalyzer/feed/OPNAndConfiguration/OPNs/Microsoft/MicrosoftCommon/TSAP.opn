protocol TSAP
    with StreamEncodingDefaults{Encoding = TextEncoding.UTF16},
Documentation
{
    ProtocolName = "Test Session Announcement Protocol",
    ShortName = "TSAP",
    Description = "This parser was added to provide a way to parse user-injected test case messages in capture files. Microsoft protocol documentation test suites utilize it heavily to provide demarcation of captures generated. This assists in mapping test cases to capture fragments."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "371102", Date = "11/14/2014"}
        ]
};

using Standard;
using UDP;
using IANA;
using Utility;

endpoint Node
    over UDP.Host
    accepts Datagram;

const char TestNameTag = 'i';
const char TestStatusTag = 'f';
const char TestMessageTag = 'm';

autostart actor TSAPOverUDP(UDP.Host host)
{
    // $[3D00] stands for '=' of UTF16, this to check if the frame is TSAP message.
    process host accepts m:UDP.Datagram where m.Payload.Count >= 6 && ((m.DestinationPort == Port.TSAP || m.SourcePort == Port.TSAP) && m.Payload.Segment(4, 2) == $[3D00])
    {
        switch (m.Payload)
        {
            case d:Datagram from BinaryDecoder =>
                dispatch endpoint TSAP.Node over host accepts d;
            default =>
                ThrowDecodingException("TSAP");
        }
    }
}

message Datagram
{
    byte Version;
    byte Command;
    optional array<string> Configure with BinaryEncoding{TextTerminator = "\r\n"};

    override string ToString()
    {
        string tName = "";
        string tStatus = "";
        string tMsg = "";
        if (Configure is config:array<string>)
        {
            foreach (var str in config)
            {
                if (str.Count > 0)
                {
                    switch (str[0])
                    {
                        case TestNameTag => tName = str.Segment(2);
                        case TestStatusTag => tStatus = str.Segment(2);
                        case TestMessageTag => tMsg = str.Segment(2);
                        default =>;
                    }
                }
            }
        }

        return tName + (tName.Count == 0 ? "" : ", ") + "Status: " + tStatus + ", Message: " + tMsg;
    }
}

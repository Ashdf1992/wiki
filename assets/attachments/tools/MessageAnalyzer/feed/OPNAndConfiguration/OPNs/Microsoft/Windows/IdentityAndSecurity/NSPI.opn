protocol NSPI with
Documentation
{
    ProtocolName = "Name Service Provider Interface (NSPI) Protocol",
    ProtocolType = "rpc",
    ShortName = "NSPI",
    Description = "Name Service Provider Interface (NSPI) Protocol"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-NSPI", Version = "10.0", Date="01/13/2014", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major}
    ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using Utility;

endpoint NspiService over MSRPCE.Server provides nspi;

contract nspi
{
    accepts operation NspiBind
    {
        in optional handle_t hRpc;
        in NspiBindFlags dwFlags
            where ValidationCheckCombinationValue(InRange<NspiBindFlags>(value), this, true, ReferenceType.Message,
                "NSPI", "dwFlags", "NspiBind", "0x00000002", value)
            with Encoding{Decoder = PatternDecoder<NspiBindFlags>, SourcePattern = TypeOf<DWORD>()};
        in STAT pStat with IDL{IndirectionLevel = 1};
        in out FlatUID_r pServerGuid with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out NSPI_HANDLE contextHandle with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiBind, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiBindFlags");
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation NspiUnbind
    {
        in out NSPI_HANDLE contextHandle with IDL{IndirectionLevel = 1};
        in DWORD Reserved;
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "NspiUnbind, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation NspiUpdateStat
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in out STAT pStat with IDL{IndirectionLevel = 1};
        in out IDLLong? plDelta with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            string summaryLine = "NspiUpdateStat, ReturnValue: " + DecToHexFormat(ReturnValue);
            if (plDelta != null)
            {
                summaryLine += ", plDelta: " + DecToHexFormat(plDelta);
            }
            return summaryLine;
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation NspiQueryRows
    {
        in NSPI_HANDLE hRpc;
        in RetrievePropertyFlags dwFlags 
            with Encoding{Decoder = PatternDecoder<RetrievePropertyFlags>, SourcePattern = TypeOf<DWORD>()};
        in out STAT pStat with IDL{IndirectionLevel = 1};
        in DWORD dwETableCount with IDL{Range = new RangePattern{Low = 0, High = 100000}};
        in array<DWORD> lpETable 
            with IDL
            {
                Size_is = [dwETableCount],
                PointerType = PointerKind.UniquePtr,
                IndirectionLevel = 1
            };
        in DWORD Count;
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiQueryRows, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.RetrievePropertyFlags") + 
                ", dwETableCount: " + ", Count: " + Count.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 3};
    
    accepts operation NspiSeekEntries
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in out STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyValue_r pTarget with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r lpETable with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiSeekEntries, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation NspiGetMatches
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved1;
        in out STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pReserved with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD Reserved2;
        in Restriction_r Filter with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PropertyName_r lpPropName with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DWORD ulRequested;
        out PropertyTagArray_r ppOutMIds with IDL{IndirectionLevel = 2};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetMatches, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", ulRequested: " + DecToHexFormat(ulRequested);
        }
    }
    with Technologies.IDL.IDL{Opnum = 5};
    
    accepts operation NspiResortRestriction
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in out STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pInMIds with IDL{IndirectionLevel = 1};
        in out PropertyTagArray_r ppOutMIds with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiResortRestriction, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 6};
    
    accepts operation NspiDNToMId
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in StringsArray_r pNames with IDL{IndirectionLevel = 1};
        out PropertyTagArray_r ppOutMIds with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiDNToMId, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 7};
    
    accepts operation NspiGetPropList
    {
        in NSPI_HANDLE hRpc;
        in RetrievePropertyFlags dwFlags 
            with Encoding{Decoder = PatternDecoder<RetrievePropertyFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD dwMId;
        in DWORD CodePage;
        out PropertyTagArray_r ppPropTags with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetPropList, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.RetrievePropertyFlags") + ", dwMId: " + DecToHexFormat(dwMId) +
                ", CodePage: " + DecToHexFormat(CodePage);
        }
    }
    with Technologies.IDL.IDL{Opnum = 8};
    
    accepts operation NspiGetProps
    {
        in NSPI_HANDLE hRpc;
        in RetrievePropertyFlags dwFlags
            with Encoding{Decoder = PatternDecoder<RetrievePropertyFlags>, SourcePattern = TypeOf<DWORD>()};
        in STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PropertyRow_r ppRows with Technologies.IDL.IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetProps, ReturnValue: " + DecToHexFormat(ReturnValue) + 
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.RetrievePropertyFlags");
        }
    }
    with Technologies.IDL.IDL{Opnum = 9};
    
    accepts operation NspiCompareMIds
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in STAT pStat with IDL{IndirectionLevel = 1};
        in DWORD MId1;
        in DWORD MId2;
        out IDLLong plResult with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiCompareMIds, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", plResult: " + plResult.ToString() +
                ", MId1: " + DecToHexFormat(MId1) + ", MId2: " + DecToHexFormat(MId2);
        }
    }
    with Technologies.IDL.IDL{Opnum = 10};
    
    accepts operation NspiModProps
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PropertyRow_r pRow with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiModProps, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 11};
    
    accepts operation NspiGetSpecialTable
    {
        in NSPI_HANDLE hRpc;
        in NspiGetSpecialTableFlags dwFlags 
            with Encoding{Decoder = PatternDecoder<NspiGetSpecialTableFlags>, SourcePattern = TypeOf<DWORD>()};
        in STAT pStat with IDL{IndirectionLevel = 1};
        in out DWORD lpVersion with IDL{IndirectionLevel = 1};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetSpecialTable, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiGetSpecialTableFlags") + 
                ", lpVersion: " + DecToHexFormat(lpVersion);
        }
    }
    with Technologies.IDL.IDL{Opnum = 12};
    
    accepts operation NspiGetTemplateInfo
    {
        in NSPI_HANDLE hRpc;
        in NspiGetTemplateInfoFlags dwFlags
            with Encoding{Decoder = PatternDecoder<NspiGetTemplateInfoFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD ulType;
        in string pDN 
            with IDL
            {
                PointerType = PointerKind.UniquePtr,
                BaseStringType = TypeOf<char>(),
                IndirectionLevel = 1
            };
        in DWORD dwCodePage;
        in DWORD dwLocaleID;
        out PropertyRow_r ppData with Technologies.IDL.IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetTemplateInfo, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiGetTemplateInfoFlags") +
                ", ulType: " + DecToHexFormat(ulType) + ", pDN: " + pDN.ToString() + 
                ", dwCodePage: " + DecToHexFormat(dwCodePage) + ", dwLocaleID: " + DecToHexFormat(dwLocaleID);
        }
    }
    with Technologies.IDL.IDL{Opnum = 13};
    
    accepts operation NspiModLinkAtt
    {
        in NSPI_HANDLE hRpc;
        in NspiModLinkAttFlags dwFlags
            with Encoding{Decoder = PatternDecoder<NspiModLinkAttFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD ulPropTag;
        in DWORD dwMId;
        in array<EphemeralEntryID | PermanentEntryID | binary> lpEntryIds with IDL{IndirectionLevel = 1},
            Encoding{Decoder = DecodeEntryIDs, SourcePattern = TypeOf<BinaryArray_r>()};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiModLinkAtt, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiModLinkAttFlags") + 
                ", ulPropTag: " + DecToHexFormat(ulPropTag) +
                ", dwMId: " + DecToHexFormat(dwMId);
        }
    }
    with Technologies.IDL.IDL{Opnum = 14};
    
    accepts operation Opnum15NotUsedOnWire
    {
        in NSPI_HANDLE Reserved1;
        in DWORD Reserved2;
        in DWORD Reserved3;
        in BinaryArray_r Reserved4 with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "Opnum15NotUsedOnWire";
        }
    }
    with Technologies.IDL.IDL{Opnum = 15};
    
    accepts operation NspiQueryColumns
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in NspiQueryColumnsFlags dwFlags
            where ValidationCheckCombinationValue(InRange<NspiQueryColumnsFlags>(value), this, true, ReferenceType.Message,
                "NSPI", "dwFlags", "NspiQueryColumns", "0x80000000", value)
            with Encoding{Decoder = PatternDecoder<NspiQueryColumnsFlags>, SourcePattern = TypeOf<DWORD>()};
        out PropertyTagArray_r ppColumns with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiQueryColumns, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiQueryColumnsFlags");
        }
    }
    with Technologies.IDL.IDL{Opnum = 16};
    
    accepts operation NspiGetNamesFromIDs
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in FlatUID_r lpguid with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        out PropertyTagArray_r ppReturnedPropTags with IDL{IndirectionLevel = 2};
        out PropertyNameSet_r ppNames with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetNamesFromIDs, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 17};
    
    accepts operation NspiGetIDsFromNames
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in NspiGetIDsFromNamesFlags dwFlags
            where ValidationCheckCombinationValue(InRange<NspiGetIDsFromNamesFlags>(value), this, true, ReferenceType.Message,
                "NSPI", "dwFlags", "NspiGetIDsFromNames", "0x00000002", value)
            with Encoding{Decoder = PatternDecoder<NspiGetIDsFromNamesFlags>, SourcePattern = TypeOf<DWORD>()};
        in DWORD cPropNames with IDL{Range = new RangePattern{Low = 0, High = 100000}};
        in PropertyName_r pNames with IDL{Size_is = [cPropNames, null], IndirectionLevel = 2};
        out PropertyTagArray_r ppPropTags with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiGetIDsFromNames, ReturnValue: " + DecToHexFormat(ReturnValue) +
                ", dwFlags: " + EnumToString(dwFlags, "NSPI.NspiGetIDsFromNamesFlags") + 
                ", cPropNames: " + cPropNames.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 18};
    
    accepts operation NspiResolveNames
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in StringsArray_r paStr with IDL{IndirectionLevel = 1};
        out PropertyTagArray_r ppMIds with IDL{IndirectionLevel = 2};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiResolveNames, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 19};
    
    accepts operation NspiResolveNamesW
    {
        in NSPI_HANDLE hRpc;
        in DWORD Reserved;
        in STAT pStat with IDL{IndirectionLevel = 1};
        in PropertyTagArray_r pPropTags with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in WStringsArray_r paWStr with IDL{IndirectionLevel = 1};
        out PropertyTagArray_r ppMIds with IDL{IndirectionLevel = 2};
        out PropertyRowSet_r ppRows with IDL{IndirectionLevel = 2};
        result IDLLong ReturnValue;
        
        override string ToString()
        {
            return "NspiResolveNamesW, ReturnValue: " + DecToHexFormat(ReturnValue);
        }
    }
    with Technologies.IDL.IDL{Opnum = 20};
}
with Technologies.IDL.IDL
         {Uuid = {f5cc5a18-4264-101a-8c59-08002b2f8426}, Version = "56.0"};

typedef DWORD = IDLUlong;
typedef NTSTATUS = IDLUlong;

type STAT
{
    TableSortOrders SortType 
        with Encoding{Decoder = PatternDecoder<TableSortOrders>, SourcePattern = TypeOf<DWORD>()};
    DWORD ContainerID;
    PositioningMinimalEntryIDs CurrentRec 
        with Encoding{Decoder = PatternDecoder<PositioningMinimalEntryIDs>, SourcePattern = TypeOf<DWORD>()};
    IDLLong Delta;
    DWORD NumPos;
    DWORD TotalRecs;
    DWORD CodePage;
    DWORD TemplateLocale;
    DWORD SortLocale;
}

type FlatUID_r
{
    guid ab with IDL{Dimensions = [16]},
        Encoding{Decoder = BinaryDecoder<guid>, SourcePattern = TypeOf<array<BYTE>>()};
        
    override string ToString()
    {
        return ab.ToString();
    }
}

typedef NSPI_HANDLE = ContextHandle;

type PropertyTagArray_r
{
    DWORD cValues;
    array<DWORD> aulPropTag
        with IDL
        {
            Size_is = [cValues + 1],
            Length_is = [cValues],
            Range = new RangePattern{Low = 0, High = 100001},
            Dimensions = [null]
        };
}

type PropertyRowSet_r
{
    DWORD cRows with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<PropertyRow_r> aRow with IDL{Size_is = [cRows], Dimensions = [null]};
}

type PropertyRow_r
{
    DWORD Reserved where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "Reserved", "PropertyRow_r", value);
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<PropertyValue_r> lpProps with IDL{Size_is = [cValues], IndirectionLevel = 1};
}

type PropertyValue_r
{
    DWORD ulPropTag;
    DWORD ulReserved where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "ulReserved1", "ExistRestriction_r", value);
    PROP_VAL_UNION[(ulPropTag & 0xFFFF) as IDLLong] Value with IDL{Switch_Is = (ulPropTag & 0xFFFF)};
    
    override string ToString()
    {
        return Value.ToString();
    }
}

typedef PROP_VAL_UNION = PV_r;

type PV_r[IDLLong tag]
{
    optional [|tag == 0x00000002|] short i with IDL{Case = [0x00000002]};
    optional [|tag == 0x00000003|] IDLLong l with IDL{Case = [0x00000003]};
    optional [|tag == 0x0000000B|] ushort b with IDL{Case = [0x0000000B]};
    optional [|tag == 0x0000001E|] string lpszA with IDL{Case = [0x0000001E], BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    optional [|tag == 0x00000102|] Binary_r bin with IDL{Case = [0x00000102]};
    optional [|tag == 0x0000001F|] string lpszW with IDL{Case = [0x0000001F], BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    optional [|tag == 0x00000048|] FlatUID_r lpguid with IDL{Case = [0x00000048], IndirectionLevel = 1};
    optional [|tag == 0x00000040|] FILETIME ft with IDL{Case = [0x00000040]};
    optional [|tag == 0x0000000A|] IDLLong err with IDL{Case = [0x0000000A]};
    optional [|tag == 0x00001002|] ShortArray_r MVi with IDL{Case = [0x00001002]};
    optional [|tag == 0x00001003|] LongArray_r MVl with IDL{Case = [0x00001003]};
    optional [|tag == 0x0000101E|] StringArray_r MVszA with IDL{Case = [0x0000101E]};
    optional [|tag == 0x00001102|] BinaryArray_r MVbin with IDL{Case = [0x00001102]};
    optional [|tag == 0x00001048|] FlatUIDArray_r MVguid with IDL{Case = [0x00001048]};
    optional [|tag == 0x0000101F|] WStringArray_r MVszW with IDL{Case = [0x0000101F]};
    optional [|tag == 0x00001040|] DateTimeArray_r MVft with IDL{Case = [0x00001040]};
    optional [|tag == 0x00000001 || tag == 0x0000000D|] IDLLong lReserved
        where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "NSPI", "lReserved", "PV_r", value)
        with IDL{Case = [0x00000001, 0x0000000D]};
        
    override string ToString()
    {
        if (i is shortI:short)
        {
            return "i: " + (shortI as string);
        }
        else if (l is longL:IDLLong)
        {
            return "l: " + longL.ToString();
        }
        else if (b is shortB:ushort)
        {
            return "b: " + (shortB as string);
        }
        else if (lpszA is lpszAStr:string)
        {
            return "lpszA: " + lpszAStr;
        }
        else if (bin is binaryR:Binary_r)
        {
            return "bin: " + (binaryR as string);
        }
        else if (lpszW is lpszWStr:string)
        {
            return "lpszW: " + lpszWStr;
        }
        else if (lpguid is lpguidValue:FlatUID_r)
        {
            return "lpguid: " + (lpguidValue as string);
        }
        else if (ft is fileTime:FILETIME)
        {
            return "ft: " + (fileTime as string);
        }
        else if (err is errValue:IDLLong)
        {
            return "err: " + DecToHexFormat(errValue);
        }
        else if (MVi is mvi:ShortArray_r)
        {
            return "MVi: " + (mvi as string);
        }
        else if (MVl is mvl:LongArray_r)
        {
            return "MVl: " + (mvl as string);
        }
        else if (MVszA is mvsza:StringArray_r)
        {
            return "MVszA: " + (mvsza as string);
        }
        else if (MVbin is mvbin:BinaryArray_r)
        {
            return "MVbin: " + (mvbin as string);
        }
        else if (MVguid is mvguid:FlatUIDArray_r)
        {
            return "MVguid: " + (mvguid as string);
        }
        else if (MVszW is mvszw:WStringArray_r)
        {
            return "MVszW: " + (mvszw as string);
        }
        else if (MVft is mvft:DateTimeArray_r)
        {
            return "MVft: " + (mvft as string);
        }
        else if (lReserved is reserved:IDLLong)
        {
            return "lReserved: " + (reserved as string);
        }
        
        return "";
    }
}
with IDL{Switch_Type = TypeOf<IDLLong>(), UnionKind = UnionKind.NonEncapsulated};

type Binary_r
{
    DWORD cb with IDL{Range = new RangePattern{Low = 0, High = 2097152}};
    array<BYTE> lpb with IDL{Size_is = [cb], IndirectionLevel = 1};
}

type ShortArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<short> lpi with IDL{Size_is = [cValues], IndirectionLevel = 1};
}

type LongArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<IDLLong> lpl with IDL{Size_is = [cValues], IndirectionLevel = 1};
}

type StringArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<string> lppszA with IDL
        {
            Size_is = [cValues, null],
            BaseStringType = TypeOf<char>(),
            IndirectionLevel = 2
        };
}

type BinaryArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<Binary_r> lpbin with IDL{Size_is = [cValues], IndirectionLevel = 1};
}

type FlatUIDArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<FlatUID_r> lpguid with IDL{Size_is = [cValues, null], IndirectionLevel = 2};
}

type WStringArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<string> lppszW with IDL
        {
            Size_is = [cValues, null],
            BaseStringType = TypeOf<wchar_t>(),
            IndirectionLevel = 2
        };
}

type DateTimeArray_r
{
    DWORD cValues with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<FILETIME> lpft with IDL{Size_is = [cValues], IndirectionLevel = 1};
}

type Restriction_r
{
    DWORD rt;
    RestrictionUnion_r[rt as IDLLong] res with IDL{Switch_Is = rt};
}

type RestrictionUnion_r[IDLLong tag]
{
    optional [|tag == 0x00000000|] AndRestriction_r resAnd with IDL{Case = [0x00000000]};
    optional [|tag == 0x00000001|] OrRestriction_r resOr with IDL{Case = [0x00000001]};
    optional [|tag == 0x00000002|] NotRestriction_r resNot with IDL{Case = [0x00000002]};
    optional [|tag == 0x00000003|] ContentRestriction_r resContent with IDL{Case = [0x00000003]};
    optional [|tag == 0x00000004|] PropertyRestriction_r resProperty with IDL{Case = [0x00000004]};
    optional [|tag == 0x00000005|] ComparePropsRestriction_r resCompareProps with IDL{Case = [0x00000005]};
    optional [|tag == 0x00000006|] BitMaskRestriction_r resBitMask with IDL{Case = [0x00000006]};
    optional [|tag == 0x00000007|] SizeRestriction_r resSize with IDL{Case = [0x00000007]};
    optional [|tag == 0x00000008|] ExistRestriction_r resExist with IDL{Case = [0x00000008]};
    optional [|tag == 0x00000009|] SubRestriction_r resSubRestriction with IDL{Case = [0x00000009]};
}
with IDL{Switch_Type = TypeOf<IDLLong>(), UnionKind = UnionKind.NonEncapsulated};

typedef OrRestriction_r = AndOrRestriction_r;
typedef AndRestriction_r = AndOrRestriction_r;

type AndOrRestriction_r
{
    DWORD cRes with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<Restriction_r> lpRes with IDL{Size_is = [cRes], IndirectionLevel = 1};
}

type NotRestriction_r
{
    Restriction_r lpRes with IDL{IndirectionLevel = 1};
}

type ContentRestriction_r
{
    DWORD ulFuzzyLevel;
    DWORD ulPropTag;
    PropertyValue_r lpProp with IDL{IndirectionLevel = 1};
}

type PropertyRestriction_r
{
    DWORD relop;
    DWORD ulPropTag;
    PropertyValue_r lpProp with IDL{IndirectionLevel = 1};
}

type ComparePropsRestriction_r
{
    DWORD relop;
    DWORD ulPropTag1;
    DWORD ulPropTag2;
}

type BitMaskRestriction_r
{
    DWORD relBMR;
    DWORD ulPropTag;
    DWORD ulMask;
}

type SizeRestriction_r
{
    DWORD relop;
    DWORD ulPropTag;
    DWORD cb;
}

type ExistRestriction_r
{
    DWORD ulReserved1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "ulReserved1", "ExistRestriction_r", value);
    DWORD ulPropTag;
    DWORD ulReserved2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "ulReserved2", "ExistRestriction_r", value);
}

type SubRestriction_r
{
    DWORD ulSubObject;
    Restriction_r lpRes with IDL{IndirectionLevel = 1};
}

type PropertyName_r
{
    FlatUID_r lpguid with IDL{IndirectionLevel = 1};
    DWORD ulReserved where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "ulReserved", "PropertyName_r", value);
    IDLLong lID;
}

typedef StringsArray_r = StringsArray;

type StringsArray
{
    DWORD Count with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<string> Strings with IDL
        {
            Size_is = [Count],
            Dimensions = [null],
            IndirectionLevel = 1,
            BaseStringType = TypeOf<char>()
        };
}

type PropertyNameSet_r
{
    DWORD cNames with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<PropertyName_r> aNames with IDL{Size_is = [cNames], Dimensions = [null]};
}

typedef WStringsArray_r = WStringsArray;

type WStringsArray
{
    DWORD Count with IDL{Range = new RangePattern{Low = 0, High = 100000}};
    array<string> Strings with IDL
        {
            Size_is = [Count],
            Dimensions = [null],
            IndirectionLevel = 1,
            BaseStringType = TypeOf<wchar_t>()
        };
}

// --------------------- patterns for display values --------------------
// 2.2.1. Permitted Property Type Values
pattern PropertyTypeValues = enum DWORD
{
    PtypInteger16             = 0x00000002,
    PtypInteger32             = 0x00000003,
    PtypBoolean               = 0x0000000B,
    PtypString8               = 0x0000001E,
    PtypBinary                = 0x00000102, 
    PtypString                = 0x0000001F,
    PtypGuid                  = 0x00000048,
    PtypTime                  = 0x00000040,
    PtypErrorCode             = 0x0000000A,
    PtypMultipleInteger16     = 0x00001002,
    PtypMultipleInteger32     = 0x00001003,
    PtypMultipleString8       = 0x0000101E,
    PtypMultipleBinary        = 0x00001102,
    PtypMultipleString        = 0x00001048,
    PtypMultipleGuid          = 0x0000101F,
    PtypMultipleTime          = 0x00001040,
    PtypEmbeddedTable         = 0x0000000D,
    PtypNull                  = 0x00000001,
    PtypUnspecified           = 0x00000000,
    ...
};
 
// 2.2.3. Display Type Values
pattern DisplayTypeValues = enum uint
{
    DT_MAILUSER = 0x00000000,
    DT_DISTLIST = 0x00000001,
    DT_FORUM = 0x00000002,
    DT_AGENT = 0x00000003,
    DT_ORGANIZATION = 0x00000004,
    DT_PRIVATE_DISTLIST = 0x00000005,
    DT_REMOTE_MAILUSER = 0x00000006,
    DT_CONTAINER = 0x00000100,
    DT_TEMPLATE = 0x00000101,
    DT_ADDRESS_TEMPLATE = 0x00000102,
    DT_SEARCH = 0x00000200,
    ...
};

// 2.2.7 Permanent Entry ID for GUID
const guid PermanentEntryIDGuid = {C840A7DC-42C0-1A10-B4B9-08002B2FE182};

// 2.2.8   Positioning Minimal Entry IDs
pattern PositioningMinimalEntryIDs = enum DWORD
{
    MID_BEGINNING_OF_TABLE = 0x00000000,
    MID_END_OF_TABLE = 0x00000002,
    MID_CURRENT = 0x00000001,
    ...
};

// 2.2.10   Table Sort Order
pattern TableSortOrders = enum DWORD
{
    SortTypeDisplayName = 0x00000000, 
    SortTypePhoneticDisplayName = 0x00000003,
    SortTypeDisplayName_RO = 0x000003E8,
    SortTypeDisplayName_W = 0x000003E9,
    ...
};

// 2.2.11 NspiBind Flags
pattern NspiBindFlags = flags DWORD
{
    fAnonymousLogin = 0x00000020,
    ...
};

// 2.2.12   Retrieve Property Flags
pattern RetrievePropertyFlags = flags DWORD
{
    fSkipObjects = 0x00000001,
    fEphID = 0x00000002,
    ...
};

// 2.2.13 NspiGetSpecialTable Flags
pattern NspiGetSpecialTableFlags = flags DWORD
{
    NspiAddressCreationTemplates = 0x00000002,
    NspiUnicodeStrings = 0x00000004,
    ...
};

// 2.2.14   NspiQueryColumns Flags
pattern NspiQueryColumnsFlags = flags DWORD
{
    NspiUnicodeProptypes = 0x80000000,
    ...
};

// 2.2.15   NspiGetIDsFromNames Flags
pattern NspiGetIDsFromNamesFlags = flags DWORD
{
    NspiVerifyNames = 0x00000002,
    ...
};

// 2.2.16   NspiGetTemplateInfo Flags
pattern NspiGetTemplateInfoFlags = flags DWORD
{
    TI_TEMPLATE = 0x00000001,
    TI_SCRIPT = 0x00000004,
    TI_EMT = 0x00000010,
    TI_HELPFILE_NAME = 0x00000020,
    TI_HELPFILE_CONTENTS = 0x00000040,
    ...
};

// 2.2.17   NspiModLinkAtt Flags
pattern NspiModLinkAttFlags = flags DWORD
{
    fDelete = 0x00000001,
    ...
};

// --------------------- Binary Structure ----------------------
// 2.3.8.1 MinimalEntryID
typedef MinEntryID = DWORD;

// 2.3.8.2   EphemeralEntryID
type EphemeralEntryID
{
    byte Type
        where ValidationCheckValue(value == 0x87, null, true, ReferenceType.Type,
            "NSPI", "Type", "EphemeralEntryID", 0x87, value);
    byte R1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R1", "EphemeralEntryID", value);
    byte R2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R2", "EphemeralEntryID", value);
    byte R3 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R3", "EphemeralEntryID", value);
    guid ProviderUID;
    uint R4 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R4", "EphemeralEntryID", value);
    DisplayTypeValues DisplayType
        where ValidationCheckEnumValueTooManyItems(InRange<DisplayTypeValues>(value), null, true,
            ReferenceType.Type, "NSPI", "DisplayType", "EphemeralEntryID", "Display Type Values", "[MS-NSPI]");
    MinEntryID Mid;
}

// 2.3.8.3   PermanentEntryID
type PermanentEntryID
{
    byte IDType
        where ValidationCheckValue(value == 0, null, true, ReferenceType.Type,
            "NSPI", "IDType", "PermanentEntryID", 0, value);
    byte R1 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R1", "PermanentEntryID", value);
    byte R2 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R2", "PermanentEntryID", value);
    byte R3 where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type,
        "NSPI", "R3", "PermanentEntryID", value);
    guid ProviderUID where ValidationCheckValue(value == PermanentEntryIDGuid, null, true, ReferenceType.Type,
        "NSPI", "ProviderUID", "PermanentEntryID", PermanentEntryIDGuid, value);
    uint R4 where ValidationCheckValue(value == 1, null, true, ReferenceType.Type,
        "NSPI", "R4", "PermanentEntryID", 1, value);
    DisplayTypeValues DisplayTypeString
        where ValidationCheckEnumValueTooManyItems(InRange<DisplayTypeValues>(value), null, true,
            ReferenceType.Type, "NSPI", "DisplayTypeString", "PermanentEntryID", "Display Type Values", "[MS-NSPI]");
    string DN with BinaryEncoding{ TextEncoding = TextEncoding.ASCII };
}

// -------------- Utility -----------------------------------------------------------
optional array<EphemeralEntryID | PermanentEntryID | binary> DecodeEntryIDs(BinaryArray_r binaryArray)
{
    // not consider the situation binaryArray == null.
    // if the pointer is null, runtime will not call decoder function of Mix-Encoding
    
    array<EphemeralEntryID | PermanentEntryID | binary> ret = [];
    // keep the same behavior with NDR codec.
    // If the value is empty, then keep it as empty.
    if (binaryArray.cValues == 0)
    {
        // return empty
        return ret;
    }
    
    foreach (var v in binaryArray.lpbin)
    {
        binary b = v.lpb as binary;
        if (v.cb >= 28) // smallest size of EphemeralEntryID or PermanentEntryID
        {
            if (v.lpb[0] == 0x87 && BinaryDecoder<EphemeralEntryID>(b) is ephemeralEntryID:EphemeralEntryID)
            {
                // EphemeralEntryID
                ret += [ephemeralEntryID];
                continue;
            }
            else if (v.lpb[0] == 0x00 && BinaryDecoder<PermanentEntryID>(b) is permanentEntryID:PermanentEntryID)
            {
                // PermanentEntryID
                ret += [permanentEntryID];
                continue;
            }
        }
        
        // cannot be decoded to EphemeralEntryID or PermanentEntryID. show binary directly
        ret += [b];
    }
    
    return ret;
} 


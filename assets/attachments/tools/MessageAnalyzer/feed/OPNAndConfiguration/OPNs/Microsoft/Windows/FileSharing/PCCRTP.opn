protocol PCCRTP with 
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Peer Content Caching and Retrieval: Hypertext Transfer Protocol (HTTP) Extensions",
    ShortName = "PCCRTP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-PCCRTP", Version = "6.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "355026", Date = "10/10/2013"}
        ]
};

using Standard;
using HTTP;
using Utility;
using PCCRC;

endpoint Server
    over HTTP.Server
    issues PCCRTPMessage;

autostart actor PCCRTPOverHTTP(HTTP.Server server)
{
    observe server accepts req:HttpContract.Request where ("X-P2P-PeerDist" in value.Headers || "X-P2P-PeerDistEx" in value.Headers)
    {
        if ("X-P2P-PeerDist" in req.Headers)
        {
            stream s = req.Headers["X-P2P-PeerDist"] as string;
            optional XP2PPeerDistType xP2PPeerDist = XP2PPeerDist(s);
            if (xP2PPeerDist != nothing)
            {
                req.Headers["X-P2P-PeerDist"] = (xP2PPeerDist as XP2PPeerDistType).XP2PPeerDistPair;
            }
            else
            {
                ValidationCheck(false, req, "PCCRTP: X-P2P-PeerDist in HTTP request headers decoding failed.");
            }
        }
        if ("X-P2P-PeerDistEx" in req.Headers)
        {
            stream s = req.Headers["X-P2P-PeerDistEx"] as string;
            optional XP2PPeerDistExType xP2PPeerDistEx = XP2PPeerDistEx(s);
            if (xP2PPeerDistEx != nothing)
            {
                req.Headers["X-P2P-PeerDistEx"] = (xP2PPeerDistEx as XP2PPeerDistExType).XP2PPeerDistExPair;
            }
            else
            {
                ValidationCheck(false, req, "PCCRTP: X-P2P-PeerDistEx in HTTP request headers decoding failed.");
            }
        }
    }
    
    process server issues res:HttpContract.Response where ("Content-Encoding" in value.Headers && value.Headers["Content-Encoding"] is array<string> && "peerdist" in (value.Headers["Content-Encoding"] as array<string>))
    {
        if ("X-P2P-PeerDist" in res.Headers)
        {
            stream s = res.Headers["X-P2P-PeerDist"] as string;
            optional XP2PPeerDistType xP2PPeerDist = XP2PPeerDist(s);
            if (xP2PPeerDist != nothing)
            {
                res.Headers["X-P2P-PeerDist"] = (xP2PPeerDist as XP2PPeerDistType).XP2PPeerDistPair;
            }
            else
            {
                ValidationCheck(false, res, "PCCRTP: X-P2P-PeerDist in HTTP response headers decoding failed.");
            }
        }
        if ("X-P2P-PeerDistEx" in res.Headers)
        {
            stream s = res.Headers["X-P2P-PeerDistEx"] as string;
            optional XP2PPeerDistExType xP2PPeerDistEx = XP2PPeerDistEx(s);
            if (xP2PPeerDistEx != nothing)
            {
                res.Headers["X-P2P-PeerDistEx"] = (xP2PPeerDistEx as XP2PPeerDistExType).XP2PPeerDistExPair;
            }
            else
            {
                ValidationCheck(false, res, "PCCRTP: X-P2P-PeerDistEx in HTTP response headers decoding failed.");
            }
        }
        
        switch (res.Payload)
        {
            case m:PCCRTPMessage from BinaryDecoder =>
                dispatch (endpoint Server) issues m;
            default => 
                ThrowDecodingException("PCCRTP");
        }
    }
}

syntax decoder = TextDecoder;

syntax CR                        = "\r";
syntax LF                        = "\n";
syntax SP                        = " ";
syntax HT                        = "\t";
syntax CRLF                       = CR LF;
syntax LWS                        = CRLF? (SP | HT)+;
syntax Token                      = s:regex{[0-9a-zA-Z!#$%&`*+._'|~\x5E\x2D]+} => s;
syntax Digits                     = s:regex{[0-9]+} => s;

// XP2PPeerDist
syntax Version                    = "Version" "=" major:Digits "." minor:Digits
                                     => new KeyValuePair{Key = "Version", Value = new VersionType{Major = major as uint, Minor = minor as uint}};
syntax ContentLen                 = "ContentLength" "=" len:Digits
                                     => new KeyValuePair{Key = "ContentLength", Value = (len as uint)};
syntax MissingDataRequest         = "MissingDataRequest" "=" s:(regex{(?i)true} | regex{(?i)false})
                                     => new KeyValuePair{Key = "MissingDataRequest", Value = (s as string)};
syntax XP2PPeerDist               = LWS* s1:(Version | ContentLen | MissingDataRequest) s2:(LWS* "," LWS* s21:(Version | ContentLen | MissingDataRequest) => s21)*
                                     => new XP2PPeerDistType{XP2PPeerDistPair = ([s1] + s2)};
                                     
// XP2PPeerDistEx
syntax MinContentInformation      = "MinContentInformation" "=" s:("1.0")
                                     => new KeyValuePair{Key = "MinContentInformation", Value = (s as string)};
syntax MaxContentInformation      = "MaxContentInformation" "=" s:("1.0" | "2.0")
                                     => new KeyValuePair{Key = "MaxContentInformation", Value = (s as string)};
syntax MakeHashRequest            = "MakeHashRequest" "=" s:(regex{(?i)true} | regex{(?i)false})
                                     => new KeyValuePair{Key = "MakeHashRequest", Value = (s as string)};
syntax HashRequest                = "HashRequest" "=" s:(regex{(?i)true} | regex{(?i)false})
                                     => new KeyValuePair{Key = "HashRequest", Value = (s as string)};
syntax XP2PPeerDistEx             = LWS* s1:(MinContentInformation | MaxContentInformation | MakeHashRequest | HashRequest) s2:(LWS* "," LWS* s21:(MinContentInformation | MaxContentInformation | MakeHashRequest | HashRequest) => s21)*
                                     => new XP2PPeerDistExType{XP2PPeerDistExPair = ([s1] + s2)};
                                     
type VersionType
{
    uint Major;
    uint Minor;
    
    override string ToString()
    {
        return (Major as string) + "." + (Minor as string);
    }
}

type KeyValuePair
{
    string Key;
    any Value;
    override string ToString()
    {
        return Key + "=" + Value.ToString();
    }
}

type XP2PPeerDistType
{
    array<KeyValuePair> XP2PPeerDistPair;
}

type XP2PPeerDistExType
{
    array<KeyValuePair> XP2PPeerDistExPair;
}

message PCCRTPMessage
{
    (ContentInformationVersion10 | ContentInformationVersion20) ContentInformationData;
    
    override string ToString()
    {
        return "Content Information Data, Version: "+ (ContentInformationData is ContentInformationVersion10 ? "1.0" : "2.0");
    }
}

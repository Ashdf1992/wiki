protocol MSOCEXUM with
Documentation
{
    ProtocolName = "Call Control for Exchange Unified Messaging Protocol Extensions",
    ShortName = "MS-OCEXUM",
    DocumentName = "MS-OCEXUM",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-OCEXUM", Version = "4.3"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server
	accepts RequestMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{	
	process node accepts sipMsg:SIP.Request where (GetOcexumType(sipMsg) == "AccessToVoiceMailSkipPinRequestMessage")
    {   		
		RequestMessage msg = new AccessToVoiceMailSkipPinRequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;			
    }

	process node issues sipMsg:SIP.Request where (GetOcexumType(sipMsg) == "NotRerouteAndNoDiversionRequestMessage")
    {   
		RequestMessage msg = new NotRerouteAndNoDiversionRequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;		
    }
}

string GetOcexumType(SIP.Request sipMsg)
{	
	// For headers unrecognized by SIP.opn, it will store it as a string. So compares the parameter as string value below.
	if ((sipMsg.Method == "INVITE") && (TryGetHeaderValue("Ms-Exchange-Command", sipMsg.Headers) == "skip-pin"))
	{
		return "AccessToVoiceMailSkipPinRequestMessage";
	}
	else if ((sipMsg.Method == "INVITE") && (TryGetHeaderValue("Ms-Sensitivity", sipMsg.Headers) == "private-no-diversion"))
	{
		return "NotRerouteAndNoDiversionRequestMessage";
	}
	else
	{	
		return null;
	}
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq", "Contact"], this);
	}

	override string ToString()
	{
		return "Request";
	}	
}

message AccessToVoiceMailSkipPinRequestMessage : RequestMessage
{
	AccessToVoiceMailSkipPinRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Ms-Exchange-Command"]);
	}
			
	override string ToString()
	{
		return "Access to Voice Mail Skip PIN Request";
	}
}

message NotRerouteAndNoDiversionRequestMessage : RequestMessage
{
	NotRerouteAndNoDiversionRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Ms-Sensitivity"]);
	}
			
	override string ToString()
	{
		return "Not Reroute And No Diversion Request";
	}
}
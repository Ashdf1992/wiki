// partial implemented
module WSTrust13 with 
XmlEncodingDefaults{Namespace = Wst13Namespace},
Documentation
{
    ProtocolName = "WS-Trust 1.3",
    ShortName = "WSTrust13",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WS-Trust 1.3", Link = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="359590", Date="02/19/2014"}
        ]
};

using XSD;
using WSS;
using SAMLCore;
using XMLEnc;
using WSFederation;
using WSA2005;
using WSPolicy;

const string Wst13Namespace = "http://docs.oasis-open.org/ws-sx/ws-trust/200512";
const string WspNamespace = "http://schemas.xmlsoap.org/ws/2004/09/policy";
const string WsuNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";
const string WsseNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
const string WSAddressing2005Namespace = "http://www.w3.org/2005/08/addressing";
const string XencNamespace = "http://www.w3.org/2001/04/xmlenc#";

type RequestSecurityTokenType
{
    optional XSAnyURI Context with XmlEncoding{Kind = XmlKind.Attribute};
    optional XSAnyURI TokenType;
    XSAnyURI RequestType;
    optional AppliesTo AppliesTo with XmlEncoding{Namespace = WspNamespace};
    optional ClaimsType Claims;
    optional EntropyType Entropy;
    optional LifetimeType Lifetime;
    optional AllowPostdatingType AllowPostdating;
    optional RenewingType Renewing;
    optional OnBehalfOfType OnBehalfOf;
    optional WSA2005.EndpointReferenceType Issuer with XmlEncoding{Namespace = WSAddressing2005Namespace};
    optional AuthenticationType AuthenticationType;
    optional KeyType KeyType;
    optional KeySize KeySize;
    optional SignatureAlgorithm SignatureAlgorithm;
    optional EncryptionType Encryption;
    optional EncryptionAlgorithm EncryptionAlgorithm;
    optional CanonicalizationAlgorithm CanonicalizationAlgorithm;
    optional ProofEncryptionType ProofEncryption;
    optional UseKeyType UseKey;
    optional SignWith SignWith;
    optional EncryptWith EncryptWith;
    optional DelegateToType DelegateTo;
    optional Forwardable Forwardable;
    optional Delegatable Delegatable;
    optional Policy Policy with XmlEncoding{Namespace = WspNamespace};
    optional PolicyReference PolicyReference with XmlEncoding{Namespace = WspNamespace};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type RequestSecurityTokenResponseType
{
    optional XSAnyURI Context with XmlEncoding{Kind = XmlKind.Attribute};
    optional XSAnyURI TokenType;
    optional XSAnyURI RequestType;
    optional RequestedSecurityTokenType RequestedSecurityToken;
    optional AppliesTo AppliesTo with XmlEncoding{Namespace = WspNamespace};
    optional RequestedReferenceType RequestedAttachedReference;
    optional RequestedReferenceType RequestedUnattachedReference;
    optional RequestedProofTokenType RequestedProofToken;
    optional EntropyType Entropy;
    optional LifetimeType Lifetime;
    optional AllowPostdatingType AllowPostdating;
    optional RenewingType Renewing;
    optional OnBehalfOfType OnBehalfOf;
    optional EndpointReferenceType Issuer with XmlEncoding{Namespace = WSAddressing2005Namespace};
    optional AuthenticationType AuthenticationType;
    optional AuthenticatorType Authenticator;
    optional KeyType KeyType;
    optional KeySize KeySize;
    optional SignatureAlgorithm SignatureAlgorithm;
    optional EncryptionType Encryption;
    optional EncryptionAlgorithm EncryptionAlgorithm;
    optional CanonicalizationAlgorithm CanonicalizationAlgorithm;
    optional ProofEncryptionType ProofEncryption;
    optional UseKeyType UseKey;
    optional SignWith SignWith;
    optional EncryptWith EncryptWith;
    optional DelegateToType DelegateTo;
    optional Delegatable Delegatable;
    optional Forwardable Forwardable;
    optional Policy Policy with XmlEncoding{Namespace = WspNamespace};
    optional PolicyReference PolicyReference with XmlEncoding{Namespace = WspNamespace};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{ Order = XmlOrderIndicator.All};

type RequestedSecurityTokenType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
} 

type RequestSecurityTokenResponseCollectionType
{
    array<RequestSecurityTokenResponseType> RequestSecurityTokenResponse;
    optional array<any> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ClaimsType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type EntropyType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type LifetimeType
{
    optional AttributedDateTime Created with XmlEncoding{Namespace = WsuNamespace};
    optional AttributedDateTime Expires with XmlEncoding{Namespace = WsuNamespace};
}

type AllowPostdatingType
{
}

type RenewingType
{
    optional bool Allow with XmlEncoding{Kind = XmlKind.Attribute};
    optional bool OK with XmlEncoding{Kind = XmlKind.Attribute};
}

type OnBehalfOfType
{
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern AuthenticationType = XSAnyURI;
pattern KeyType = enum XSAnyURI
{
    PublicKey       = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey",
    SymmetricKey    = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey",
    Bearer          = "http://docs.oasis-open.org/wssx/wstrust/200512/Bearer",
};

pattern KeySize = uint;
pattern SignatureAlgorithm = XSAnyURI;

type EncryptionType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern EncryptionAlgorithm = XSAnyURI;
pattern CanonicalizationAlgorithm = XSAnyURI;

type ProofEncryptionType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type UseKeyType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern SignWith = XSAnyURI;
pattern EncryptWith = XSAnyURI;
pattern ComputedKeyAlgorithm = XSAnyURI;

type DelegateToType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern Forwardable = bool;
pattern Delegatable = bool;

type RequestKETType
{
}

type RequestedReferenceType
{
    SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = WsseNamespace};
}

type RequestedProofTokenType
{
    optional BinarySecretType BinarySecret;
    optional string EncryptedKey with XmlEncoding{Namespace = XencNamespace};
    optional XSAnyURI ComputedKey;
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type BinarySecretType
{
    optional string Value with XmlEncoding{Kind = XmlKind.Text};
    optional XSAnyURI Type with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type AuthenticatorType
{
    optional string CombinedHash;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}


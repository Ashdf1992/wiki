protocol NRPC with 
Documentation
{
    ProtocolName = "Netlogon Remote Protocol",
    ProtocolType = "rpc",
    ShortName = "NRPC",
    DocumentName = "MS-NRPC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
    new Reference{Name = "MS-NRPC", Version = "32.0", Date = "06/30/2015", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
    new Revision{Class = RevisionClass.Major, Version = "379846", Date = "07/22/2015"}
    ]
};

using Technologies.IDL;
using DTYP;
using ERREF;
using MSRPCE;
using LSA;
using Utility;

endpoint LogonService over MSRPCE.Server provides logon;

contract logon
{
    accepts operation NetrLogonUasLogon
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string UserName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in string Workstation
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        out PNETLOGON_VALIDATION_UAS_INFO ValidationInformation
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonUasLogon, ServerName: " + (ServerName as string) +
                ", UserName: " + (UserName as string) +
                ", Workstation: " + (Workstation as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 0};
    
    accepts operation NetrLogonUasLogoff
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string UserName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in string Workstation
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        out PNETLOGON_LOGOFF_UAS_INFO LogoffInformation;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonUasLogoff, ServerName: " + (ServerName as string) +
                ", UserName: " + (UserName as string) +
                ", Workstation: " + (Workstation as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 1};
    
    accepts operation NetrLogonSamLogon
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogon, LogonServer: " + (LogonServer as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
                ", ValidationLevel: " + EnumToString(ValidationLevel, "NRPC.NETLOGON_VALIDATION_INFO_CLASS") +
                ", Authoritative: " + ((Authoritative as bool)? "TRUE" : "FALSE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 2};
    
    accepts operation NetrLogonSamLogoff
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogoff, LogonServer: " + (LogonServer as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation NetrServerReqChallenge
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientChallenge;
        out PNETLOGON_CREDENTIAL ServerChallenge;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerReqChallenge, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation NetrServerAuthenticate
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation NetrServerPasswordSet
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PENCRYPTED_NT_OWF_PASSWORD UasNewPassword;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordSet, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation NetrDatabaseDeltas
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in NetrDatabaseDeltas_DatabaseID DatabaseID where ValidationCheckEnumValue(InRange<NetrDatabaseDeltas_DatabaseID>(value), this, true, ReferenceType.Message, "NRPC", "DatabaseID", "NetrDatabaseDeltas", "0x00000001, 0x00000002, 0x00000003", value)
            with Encoding{Decoder = PatternDecoder<NetrDatabaseDeltas_DatabaseID>, SourcePattern = TypeOf<DWORD>()};
        in out PNLPR_MODIFIED_COUNT DomainModifiedCount;
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseDeltas, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseDeltas_DatabaseID, "NetrDatabaseDeltas_DatabaseID") +
                ", DomainModifiedCount: " + (DomainModifiedCount as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 7};
    
    accepts operation NetrDatabaseSync
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in NetrDatabaseSync_DatabaseID DatabaseID where ValidationCheckEnumValue(InRange<NetrDatabaseSync_DatabaseID>(value), this, true, ReferenceType.Message, "NRPC", "DatabaseID", "NetrDatabaseSync", "0x00000001, 0x00000002, 0x00000003", value)
            with Encoding{Decoder = PatternDecoder<NetrDatabaseSync_DatabaseID>, SourcePattern = TypeOf<DWORD>()};
        in out ULONG SyncContext with IDL{IndirectionLevel = 1};
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseSync, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseSync_DatabaseID, "NetrDatabaseSync_DatabaseID") +
                ", SyncContext: " + (SyncContext as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 8};
    
    accepts operation NetrAccountDeltas
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PUAS_INFO_0 RecordId;
        in DWORD Count;
        in DWORD Level;
        out array<UCHAR> Buffer with IDL{Size_is = [BufferSize], IndirectionLevel = 1};
        in DWORD BufferSize;
        out ULONG CountReturned with IDL{IndirectionLevel = 1};
        out ULONG TotalEntries with IDL{IndirectionLevel = 1};
        out PUAS_INFO_0 NextRecordId;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrAccountDeltas, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", Count: " + (Count as string) + 
                ", Level: " + (Level as string) +
                ", BufferSize: " + (BufferSize as string) +
                ", CountReturned: " + (CountReturned as string) +
                ", TotalEntries: " + (TotalEntries as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 9};
    
    accepts operation NetrAccountSync
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD Reference;
        in DWORD Level;
        out array<UCHAR> Buffer with IDL{Size_is = [BufferSize], IndirectionLevel = 1};
        in DWORD BufferSize;
        out ULONG CountReturned with IDL{IndirectionLevel = 1};
        out ULONG TotalEntries with IDL{IndirectionLevel = 1};
        out ULONG NextReference with IDL{IndirectionLevel = 1};
        out PUAS_INFO_0 LastRecordId;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrAccountSync, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", Reference: " + (Reference as string) + 
                ", Level: " + (Level as string) +
                ", BufferSize: " + (BufferSize as string) +
                ", CountReturned: " + (CountReturned as string) +
                ", TotalEntries: " + (TotalEntries as string) +
                ", NextReference: " + (NextReference as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 10};
    
    accepts operation NetrGetDCName
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName 
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out string Buffer
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetDCName, ServerName: " + (ServerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", Buffer: " + (Buffer as string) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 11};
    
    accepts operation NetrLogonControl
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in NetrLogonControl_FunctionCode FunctionCode where ValidationCheckEnumValueTooManyItems(InRange<NetrLogonControl_FunctionCode>(value), this, true, ReferenceType.Message, "NRPC", "FunctionCode", "NetrLogonControl", "NetrLogonControl", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<NetrLogonControl_FunctionCode>, SourcePattern = TypeOf<DWORD>()};
         in NetrLogonControl_QueryLevel QueryLevel where ValidationCheckEnumValue(InRange<NetrLogonControl_QueryLevel>(value), this, true, ReferenceType.Message, "NRPC", "QueryLevel", "NetrLogonControl", "0x00000001, 0x00000002, 0x00000003, 0x00000004", value)     
            with Encoding{Decoder = PatternDecoder<NetrLogonControl_QueryLevel>, SourcePattern = TypeOf<DWORD>()};
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer
        with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl, ServerName: " + (ServerName as string) +
                ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl_FunctionCode, "NetrLogonControl_FunctionCode") +
                ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl_QueryLevel, "NetrLogonControl_QueryLevel") +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 12};
    
    accepts operation NetrGetAnyDCName
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out string Buffer
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetAnyDCName, ServerName: " + (ServerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", Buffer: " + (Buffer as string) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 13};
    
    accepts operation NetrLogonControl2
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in NetrLogonControl2_FunctionCode FunctionCode where ValidationCheckEnumValueTooManyItems(InRange<NetrLogonControl2_FunctionCode>(value), this, true, ReferenceType.Message, "NRPC", "FunctionCode", "NetrLogonControl2", "NetrLogonControl2", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<NetrLogonControl2_FunctionCode>, SourcePattern = TypeOf<DWORD>()};
        in NetrLogonControl2_QueryLevel QueryLevel where ValidationCheckEnumValue(InRange<NetrLogonControl2_QueryLevel>(value), this, true, ReferenceType.Message, "NRPC", "QueryLevel", "NetrLogonControl2", "0x00000001, 0x00000002, 0x00000003, 0x00000004", value)
            with Encoding{Decoder = PatternDecoder<NetrLogonControl2_QueryLevel>, SourcePattern = TypeOf<DWORD>()};
        in PNETLOGON_CONTROL_DATA_INFORMATION[FunctionCode] Data
        with IDL{Switch_Is = FunctionCode};
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer
        with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl2, ServerName: " + (ServerName as string) +
                ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl2_FunctionCode, "NetrLogonControl2_FunctionCode") +
                ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl2_QueryLevel, "NetrLogonControl2_QueryLevel") + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 14};
    
    accepts operation NetrServerAuthenticate2
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        in out NetlogonNegotiableOptions NegotiateFlags
            where ValidationCheckCombinationValueTooManyItems(InRange<NetlogonNegotiableOptions>(value), this, true, ReferenceType.Message, "NRPC", "NegotiateFlags", "NetrServerAuthenticate2", "NetrServerAuthenticate2", "[MS-NRPC]")
            with IDL{IndirectionLevel = 1}
            with Encoding{Decoder = PatternDecoder<NetlogonNegotiableOptions>, SourcePattern = TypeOf<ULONG>()};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate2, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) + 
                ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", NegotiateFlags: " + Utility.DecToHexFormat(8, NegotiateFlags) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 15};
    
    accepts operation NetrDatabaseSync2
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in NetrDatabaseSync2_DatabaseID DatabaseID where ValidationCheckEnumValue(InRange<NetrDatabaseSync2_DatabaseID>(value), this, true, ReferenceType.Message, "NRPC", "DatabaseID", "NetrDatabaseSync2", "0x00000001, 0x00000002, 0x00000003", value) 
            with Encoding{Decoder = PatternDecoder<NetrDatabaseSync2_DatabaseID>, SourcePattern = TypeOf<DWORD>()};
        in SYNC_STATE RestartState;
        in out ULONG SyncContext with IDL{IndirectionLevel = 1};
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseSync2, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseSync2_DatabaseID, "NetrDatabaseSync2_DatabaseID") +
                ", RestartState: " + EnumToString(RestartState, "NRPC.SYNC_STATE") + 
                ", SyncContext: " + (SyncContext as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 16};
    
    accepts operation NetrDatabaseRedo
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in array<UCHAR> ChangeLogEntry with IDL{Size_is = [ChangeLogEntrySize], IndirectionLevel = 1};
        in DWORD ChangeLogEntrySize;
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseRedo, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", ChangeLogEntrySize: " + (ChangeLogEntrySize as string) + 
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 17};
    
    accepts operation NetrLogonControl2Ex
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in NetrLogonControl2Ex_FunctionCode FunctionCode 
            where ValidationCheckEnumValueTooManyItems(InRange<NetrLogonControl2Ex_FunctionCode>(value), this, true, ReferenceType.Message, "NRPC", "FunctionCode", "NetrLogonControl2Ex", "NetrLogonControl2Ex", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<NetrLogonControl2Ex_FunctionCode>, SourcePattern = TypeOf<DWORD>()};
        in NetrLogonControl2Ex_QueryLevel QueryLevel where ValidationCheckEnumValue(InRange<NetrLogonControl2Ex_QueryLevel>(value), this, true, ReferenceType.Message, "NRPC", "QueryLevel", "NetrLogonControl2Ex", "0x00000001, 0x00000002, 0x00000003, 0x00000004", value)
            with Encoding{Decoder = PatternDecoder<NetrLogonControl2Ex_QueryLevel>, SourcePattern = TypeOf<DWORD>()};
        in NETLOGON_CONTROL_DATA_INFORMATION[FunctionCode] Data with IDL{Switch_Is = FunctionCode, IndirectionLevel = 1};
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl2Ex, ServerName: " + (ServerName) +
                ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl2Ex_FunctionCode, "NetrLogonControl2Ex_FunctionCode") +
                ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl2Ex_QueryLevel, "NetrLogonControl2Ex_QueryLevel") +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 18};
    
    accepts operation NetrEnumerateTrustedDomains
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PDOMAIN_NAME_BUFFER DomainNameBuffer;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrEnumerateTrustedDomains, ServerName: " + (ServerName as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 19};
    
    accepts operation DsrGetDcName
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in GUID SiteGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DsrGetDcName_Flags Flags where ValidationCheckCombinationValueTooManyItems(InRange<DsrGetDcName_Flags>(value), this, true, ReferenceType.Message, "NRPC", "Flags", "DsrGetDcName", "DsrGetDcName", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<DsrGetDcName_Flags>, SourcePattern = TypeOf<ULONG>()};
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcName, ComputerName: " + (ComputerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 20};
    
    accepts operation NetrLogonGetCapabilities
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName 
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD QueryLevel;
        out PNETLOGON_CAPABILITIES[QueryLevel] ServerCapabilities
        with IDL{Switch_Is = QueryLevel};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetCapabilities, ServerName: " + (ServerName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", QueryLevel: " + (QueryLevel as string) + 
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 21};
    
    accepts operation NetrLogonSetServiceBits
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in NetrLogonSetServiceBits_ServiceBitsOfInterest ServiceBitsOfInterest where ValidationCheckCombinationValue(InRange<NetrLogonSetServiceBits_ServiceBitsOfInterest>(value), this, true, ReferenceType.Message, "NRPC", "ServiceBitsOfInterest", "NetrLogonSetServiceBits", "0x00000040, 0x00000200, 0x00002000", value)
            with Encoding{Decoder = PatternDecoder<NetrLogonSetServiceBits_ServiceBitsOfInterest>, SourcePattern = TypeOf<DWORD>()};
        in NetrLogonSetServiceBits_ServiceBits ServiceBits where ValidationCheckCombinationValue(InRange<NetrLogonSetServiceBits_ServiceBits>(value), this, true, ReferenceType.Message, "NRPC", "ServiceBits", "NetrLogonSetServiceBits", "0x00000040, 0x00000200, 0x00002000", value)
            with Encoding{Decoder = PatternDecoder<NetrLogonSetServiceBits_ServiceBits>, SourcePattern = TypeOf<DWORD>()};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSetServiceBits, ServerName: " + (ServerName as string) +
                ", ServiceBitsOfInterest: " + Utility.DecToHexFormat(8, ServiceBitsOfInterest) + 
                ", ServiceBits: " + Utility.DecToHexFormat(8, ServiceBits) + 
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 22};
    
    accepts operation NetrLogonGetTrustRid
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out ULONG Rid with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetTrustRid, ServerName: " + (ServerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", Rid: " + (Rid as string) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 23};
    
    accepts operation NetrLogonComputeServerDigest
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in ULONG Rid;
        in array<UCHAR> Message with IDL{Size_is = [MessageSize], IndirectionLevel = 1};
        in ULONG MessageSize;
        out array<CHAR> NewMessageDigest with IDL{Dimensions = [16]};
        out array<CHAR> OldMessageDigest with IDL{Dimensions = [16]};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonComputeServerDigest, ServerName: " + (ServerName as string) +
                ", Rid: " + (Rid as string) +
                ", MessageSize: " + (MessageSize as string) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 24};
    
    accepts operation NetrLogonComputeClientDigest
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in array<UCHAR> Message with IDL{Size_is = [MessageSize], IndirectionLevel = 1};
        in ULONG MessageSize;
        out array<CHAR> NewMessageDigest with IDL{Dimensions = [16]};
        out array<CHAR> OldMessageDigest with IDL{Dimensions = [16]};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonComputeClientDigest, ServerName: " + (ServerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", MessageSize: " + (MessageSize as string) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 25};
    
    accepts operation NetrServerAuthenticate3
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        in out NetlogonNegotiableOptions NegotiateFlags
            where ValidationCheckCombinationValueTooManyItems(InRange<NetlogonNegotiableOptions>(value), this, true, ReferenceType.Message, "NRPC", "NegotiateFlags", "NetrServerAuthenticate3", "NetrServerAuthenticate3", "[MS-NRPC]")
            with IDL{IndirectionLevel = 1}
            with Encoding{Decoder = PatternDecoder<NetlogonNegotiableOptions>, SourcePattern = TypeOf<ULONG>()};
        out ULONG AccountRid with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate3, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) + 
                ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", NegotiateFlags: " + Utility.DecToHexFormat(8, NegotiateFlags) +
                ", AccountRid: " + (AccountRid as string) + 
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 26};
    
    accepts operation DsrGetDcNameEx
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in DsrGetDcNameEx_Flags Flags where ValidationCheckCombinationValueTooManyItems(InRange<DsrGetDcNameEx_Flags>(value), this, true, ReferenceType.Message, "NRPC", "Flags", "DsrGetDcNameEx", "DsrGetDcNameEx", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<DsrGetDcNameEx_Flags>, SourcePattern = TypeOf<ULONG>()};
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcNameEx, ComputerName: " + (ComputerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", SiteName: " + (SiteName as string) + 
                ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 27};
    
    accepts operation DsrGetSiteName
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out string SiteName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetSiteName, ComputerName: " + (ComputerName as string) +
                ", SiteName: " + (SiteName as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 28};
    
    accepts operation NetrLogonGetDomainInfo
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in NetrLogonGetDomainInfo_Level Level where ValidationCheckEnumValue(InRange<NetrLogonGetDomainInfo_Level>(value), this, true, ReferenceType.Message, "NRPC", "NetrLogonGetDomainInfo", "Level", "0x00000001, 0x00000002", value)
            with Encoding{Decoder = PatternDecoder<NetrLogonGetDomainInfo_Level>, SourcePattern = TypeOf<DWORD>()};
        in PNETLOGON_WORKSTATION_INFORMATION[Level] WkstaBuffer
        with IDL{Switch_Is = Level};
        out PNETLOGON_DOMAIN_INFORMATION[Level] DomBuffer
        with IDL{Switch_Is = Level};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetDomainInfo, ServerName: " + (ServerName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", Level: " + EnumToString(Level as NetrLogonGetDomainInfo_Level, "NetrLogonGetDomainInfo_Level") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 29};
    
    accepts operation NetrServerPasswordSet2
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PNL_TRUST_PASSWORD ClearNewPassword;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordSet2, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 30};
    
    accepts operation NetrServerPasswordGet
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE AccountType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordGet, PrimaryName: " + (PrimaryName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", AccountType: "  + EnumToString(AccountType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 31};
    
    accepts operation NetrLogonSendToSam
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        // not decoding because it is encrypted
        in array<UCHAR> OpaqueBuffer with IDL{Size_is = [OpaqueBufferSize], IndirectionLevel = 1};
        in ULONG OpaqueBufferSize;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSendToSam, PrimaryName: " + (PrimaryName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", OpaqueBufferSize: " + (OpaqueBufferSize as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 32};
    
    accepts operation DsrAddressToSiteNamesW
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD EntryCount with IDL{Range = new RangePattern{Low = 0, High = 32000}};
        in array<PNL_SOCKET_ADDRESS> SocketAddresses with IDL{Size_is = [EntryCount]};
        out PNL_SITE_NAME_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrAddressToSiteNamesW, ComputerName: " + (ComputerName as string) +
                ", EntryCount: " + (EntryCount as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 33};
    
    accepts operation DsrGetDcNameEx2
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in DsrGetDcNameEx2_AllowableAccountControlBits AllowableAccountControlBits
            where ValidationCheckCombinationValueTooManyItems(InRange<DsrGetDcNameEx2_AllowableAccountControlBits>(value), this, true, ReferenceType.Message, "NRPC", "AllowableAccountControlBits", "DsrGetDcNameEx2", "DsrGetDcNameEx2", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<DsrGetDcNameEx2_AllowableAccountControlBits>, SourcePattern = TypeOf<ULONG>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in DsrGetDcNameEx2_Flags Flags where ValidationCheckCombinationValueTooManyItems(InRange<DsrGetDcNameEx2_Flags>(value), this, true, ReferenceType.Message, "NRPC", "Flags", "DsrGetDcNameEx2", "DsrGetDcNameEx2", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<DsrGetDcNameEx2_Flags>, SourcePattern = TypeOf<ULONG>()};
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcNameEx2, ComputerName: " + (ComputerName as string) +
                ", AccountName: " + (AccountName as string) +
                ", DomainName: " + (DomainName as string) +
                ", SiteName: " + (SiteName as string) +
                ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 34};
    
    accepts operation NetrLogonGetTimeServiceParentDomain
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out string DomainName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        out int PdcSameSite with IDL{IndirectionLevel = 1}, DisplayInfo{ToText = (any x) => ((x == 0) ? ("not in the same site") : ("in the same site"))};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetTimeServiceParentDomain, ServerName: " + (ServerName as string) +
                ", DomainName: " + (DomainName as string) +
                ", PdcSameSite: " + ((PdcSameSite as bool)? "TRUE" : "FALSE") +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 35};
    
    accepts operation NetrEnumerateTrustedDomainsEx
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrEnumerateTrustedDomainsEx, ServerName: " + (ServerName as string) +
                ", DomainCount: " + (Domains.DomainCount as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 36};
    
    accepts operation DsrAddressToSiteNamesExW
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD EntryCount with IDL{Range = new RangePattern{Low = 0, High = 32000}};
        in array<PNL_SOCKET_ADDRESS> SocketAddresses with IDL{Size_is = [EntryCount]};
        out PNL_SITE_NAME_EX_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;

        override string ToString()
        {
            return "DsrAddressToSiteNamesExW, ComputerName: " + (ComputerName as string) +
                ", EntryCount: " + (EntryCount as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 37};
    
    accepts operation DsrGetDcSiteCoverageW
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PNL_SITE_NAME_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcSiteCoverageW, ServerName: " + (ServerName as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 38};
    
    accepts operation NetrLogonSamLogonEx
    {
        in (optional  handle_t) ContextHandle;
        in string LogonServer with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        in out ULONG ExtraFlags with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogonEx, LogonServer: " + (LogonServer as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
                ", ExtraFlags: " + Utility.DecToHexFormat(8, ExtraFlags) +
                ", Authoritative: " + ((Authoritative as bool)? "TRUE" : "FALSE") +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 39};
    
    accepts operation DsrEnumerateDomainTrusts
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DsrEnumerateDomainTrusts_Flags Flags where ValidationCheckCombinationValueTooManyItems(InRange<DsrEnumerateDomainTrusts_Flags>(value), this, true, ReferenceType.Message, "NRPC", "Flags", "DsrEnumerateDomainTrusts", "DsrEnumerateDomainTrusts", "[MS-NRPC]")
            with Encoding{Decoder = PatternDecoder<DsrEnumerateDomainTrusts_Flags>, SourcePattern = TypeOf<ULONG>()};
        out PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrEnumerateDomainTrusts, ServerName: " + (ServerName as string) +
                ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
                ", DomainCount: " + (Domains.DomainCount as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 40};
    
    accepts operation DsrDeregisterDnsHostRecords
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DnsDomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in GUID DsaGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string DnsHostName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrDeregisterDnsHostRecords, ServerName: " + (ServerName as string) +
                ", DnsDomainName: " + (DnsDomainName as string) +
                ", DnsHostName: " + (DnsHostName as string) +
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 41};
    
    accepts operation NetrServerTrustPasswordsGet
    {
        in string TrustedDcName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTrustPasswordsGet, TrustedDcName: " + (TrustedDcName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 42};
    
    accepts operation DsrGetForestTrustInformation
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string TrustedDomainName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in DsrGetForestTrustInformation_Flags Flags where ValidationCheckCombinationValue(InRange<DsrGetForestTrustInformation_Flags>(value), this, true, ReferenceType.Message, "NRPC", "Flags", "DsrGetForestTrustInformation", "0x00000000, 0x00000001", value)
            with Encoding{Decoder = PatternDecoder<DsrGetForestTrustInformation_Flags>, SourcePattern = TypeOf<DWORD>()};
        // Bug 50585: Pointer Deffered part is ignored for DsrGetForestTrustInformation.ForestTrustInfo.Entries.ForestTrustRecord.ForestTrustData.TopLevelName
        out PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetForestTrustInformation, ServerName: " + (ServerName as string) +
                ", TrustedDomainName: " + (TrustedDomainName as string) +
                ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
                ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 43};
    
    accepts operation NetrGetForestTrustInformation
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD Flags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "NRPC", "Flags", "NetrGetForestTrustInformation", value);
        out PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo
        with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetForestTrustInformation, ServerName: " + (ServerName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 44};
    
    accepts operation NetrLogonSamLogonWithFlags
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        in out ULONG ExtraFlags with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogonWithFlags, LogonServer: " + (LogonServer as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
                ", ValidationLevel: " + EnumToString(ValidationLevel, "NRPC.NETLOGON_VALIDATION_INFO_CLASS") +
                ", Authoritative: " + ((Authoritative as bool)? "TRUE": "FALSE") +
                ", ExtraFlags: " + Utility.DecToHexFormat(8, ExtraFlags) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 45};
    
    accepts operation NetrServerGetTrustInfo
    {
        in string TrustedDcName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword;
        out PNL_GENERIC_RPC_DATA TrustInfo with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerGetTrustInfo, TrustedDcName: " + (TrustedDcName as string) +
                ", AccountName: " + (AccountName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 46};
    
    accepts operation OpnumUnused47{} with IDL{Opnum = 47};
    
    accepts operation DsrUpdateReadOnlyServerDnsRecords
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in ULONG DnsTtl;
        in out PNL_DNS_NAME_INFO_ARRAY DnsNames;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrUpdateReadOnlyServerDnsRecords, ServerName: " + (ServerName as string) +
                ", ComputerName: " + (ComputerName as string) +
                ", SiteName: " + (SiteName as string) +
                ", DnsTtl: " + (DnsTtl as string) + "seconds" +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 48};
    
    accepts operation NetrChainSetClientAttributes
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ChainedFromServerName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in string ChainedForClientName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.RefPtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.RefPtr};
        in DWORD dwInVersion;
        in NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES[dwInVersion] pmsgIn
        with IDL{Switch_Is = dwInVersion,
        PointerType = PointerKind.RefPtr,
        IndirectionLevel = 1};
        in out DWORD pdwOutVersion
        with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        in out NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES[pdwOutVersion] pmsgOut
        with IDL{Switch_Is = pdwOutVersion,
        PointerType = PointerKind.RefPtr,
        IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrChainSetClientAttributes, PrimaryName: " + (PrimaryName as string) +
                ", ChainedFromServerName: " + (ChainedFromServerName as string) +
                ", ChainedForClientName: " + (ChainedForClientName as string) +
                ", InVersion: " + (dwInVersion as string) +
                ", OutVersion: " + (pdwOutVersion as string) +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 49};
}
with IDL{Uuid = {12345678-1234-ABCD-EF00-01234567CFFB}, Version = "1.0", Pointer_default = PointerKind.UniquePtr, Ms_union = true};

typedef LOGONSRV_HANDLE = wchar_t with IDL{Handle = true, IndirectionLevel = 1};

type NETLOGON_VALIDATION_UAS_INFO
{
    string usrlog1_eff_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD usrlog1_priv;
    DWORD usrlog1_auth_flags;
    DWORD usrlog1_num_logons;
    DWORD usrlog1_bad_pw_count;
    DWORD usrlog1_last_logon;
    DWORD usrlog1_last_logoff;
    DWORD usrlog1_logoff_time;
    DWORD usrlog1_kickoff_time;
    DWORD usrlog1_password_age;
    DWORD usrlog1_pw_can_change;
    DWORD usrlog1_pw_must_change;
    string usrlog1_computer
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string usrlog1_domain
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string usrlog1_script_path
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD usrlog1_reserved1;
}

typedef PNETLOGON_VALIDATION_UAS_INFO = NETLOGON_VALIDATION_UAS_INFO with IDL{IndirectionLevel = 1};

typedef NET_API_STATUS = DWORD;

type NETLOGON_LOGOFF_UAS_INFO
{
    DWORD Duration;
    USHORT LogonCount;
}

typedef PNETLOGON_LOGOFF_UAS_INFO = NETLOGON_LOGOFF_UAS_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_AUTHENTICATOR
{
    NETLOGON_CREDENTIAL Credential;
    DWORD Timestamp with DisplayInfo{ToText = TimestampToText};
}

string TimestampToText(any input)
{
    if (!(input is uint))
    {
        return "";
    }
    uint data = input as uint;
    
    return CreateDateTime(1970, 1, 1).AddSeconds(data as double).ToString() + "  UTC";
}

typedef PNETLOGON_AUTHENTICATOR = NETLOGON_AUTHENTICATOR with IDL{IndirectionLevel = 1};

type NETLOGON_CREDENTIAL
{
    array<CHAR> data with IDL{Dimensions = [8]};
}
typedef PNETLOGON_CREDENTIAL = NETLOGON_CREDENTIAL with IDL{ IndirectionLevel = 1};

pattern NETLOGON_LOGON_INFO_CLASS = enum
{
    NetlogonInteractiveInformation = 1,
    NetlogonNetworkInformation = 2,
    NetlogonServiceInformation = 3,
    NetlogonGenericInformation = 4,
    NetlogonInteractiveTransitiveInformation = 5,
    NetlogonNetworkTransitiveInformation = 6,
    NetlogonServiceTransitiveInformation = 7,
    ...
};

type NETLOGON_LEVEL[NETLOGON_LOGON_INFO_CLASS Tag]
{
    optional [|Tag in {1}|] PNETLOGON_INTERACTIVE_INFO LogonInteractive with IDL{Case = [1]};
    optional [|Tag in {5}|] PNETLOGON_INTERACTIVE_INFO LogonInteractiveTransitive with IDL{Case = [5]};
    optional [|Tag in {3}|] PNETLOGON_SERVICE_INFO LogonService with IDL{Case = [3]};
    optional [|Tag in {7}|] PNETLOGON_SERVICE_INFO LogonServiceTransitive with IDL{Case = [7]};
    optional [|Tag in {2}|] PNETLOGON_NETWORK_INFO LogonNetwork with IDL{Case = [2]};
    optional [|Tag in {6}|] PNETLOGON_NETWORK_INFO LogonNetworkTransitive with IDL{Case = [6]};
    optional [|Tag in {4}|] PNETLOGON_GENERIC_INFO LogonGeneric with IDL{Case = [4]};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<NETLOGON_LOGON_INFO_CLASS>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_LEVEL = NETLOGON_LEVEL with IDL{IndirectionLevel = 1};

type NETLOGON_INTERACTIVE_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    ENCRYPTED_LM_OWF_PASSWORD LmOwfPassword;
    ENCRYPTED_NT_OWF_PASSWORD NtOwfPassword;
}

typedef PNETLOGON_INTERACTIVE_INFO = NETLOGON_INTERACTIVE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_LOGON_IDENTITY_INFO
{
    RPC_UNICODE_STRING LogonDomainName;
    NETLOGON_LOGON_IDENTITY_INFO_ParameterControl ParameterControl 
        where ValidationCheckCombinationValueTooManyItems(InRange<NETLOGON_LOGON_IDENTITY_INFO_ParameterControl>(value), null, true, ReferenceType.Type, "NRPC", "ParameterControl", "NETLOGON_LOGON_IDENTITY_INFO", "NETLOGON_LOGON_IDENTITY_INFO", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<NETLOGON_LOGON_IDENTITY_INFO_ParameterControl>, SourcePattern = TypeOf<ULONG>()};
    OLD_LARGE_INTEGER Reserved where ValidationCheck((value.LowPart == 0) && (value.HighPart == 0), null, DiagnosisLevel.Error,
        "NRPC: The Reserved in type NETLOGON_LOGON_IDENTITY_INFO must be set to zero.");
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING Workstation;
}

typedef PNETLOGON_LOGON_IDENTITY_INFO = NETLOGON_LOGON_IDENTITY_INFO with IDL{IndirectionLevel = 1};

type OLD_LARGE_INTEGER
{
    ULONG LowPart;
    LONG HighPart;
}

string FILETIMEToText(any data)
{    
    OLD_LARGE_INTEGER time = data as OLD_LARGE_INTEGER;
    ulong intervals = ((time.HighPart as ulong) << 32) + time.LowPart; // 100-nanosecond intervals since January 1, 1601, UTC
    return CreateDateTime(1601, 1, 1).AddMilliseconds((intervals / 10000) as double).ToLocalTime().ToString("MM/dd/yyyy HH:mm:ss.fffffff K");
}

typedef POLD_LARGE_INTEGER = OLD_LARGE_INTEGER with IDL{IndirectionLevel = 1};

type LM_OWF_PASSWORD
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PLM_OWF_PASSWORD = LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

typedef ENCRYPTED_LM_OWF_PASSWORD = LM_OWF_PASSWORD;

typedef PENCRYPTED_LM_OWF_PASSWORD = ENCRYPTED_LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

type CYPHER_BLOCK
{
    array<CHAR> data with IDL{Dimensions = [8]};
}

typedef PCYPHER_BLOCK = CYPHER_BLOCK with IDL{IndirectionLevel = 1};

type NT_OWF_PASSWORD
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PNT_OWF_PASSWORD = NT_OWF_PASSWORD with IDL{IndirectionLevel = 1};

typedef ENCRYPTED_NT_OWF_PASSWORD = NT_OWF_PASSWORD;

typedef PENCRYPTED_NT_OWF_PASSWORD = ENCRYPTED_NT_OWF_PASSWORD with IDL{IndirectionLevel = 1};

type NETLOGON_SERVICE_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    ENCRYPTED_LM_OWF_PASSWORD LmOwfPassword;
    ENCRYPTED_NT_OWF_PASSWORD NtOwfPassword;
}

typedef PNETLOGON_SERVICE_INFO = NETLOGON_SERVICE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_NETWORK_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    LM_CHALLENGE LmChallenge;
    STRING NtChallengeResponse;
    STRING LmChallengeResponse;
}

typedef PNETLOGON_NETWORK_INFO = NETLOGON_NETWORK_INFO with IDL{IndirectionLevel = 1};

type LM_CHALLENGE
{
    array<CHAR> data with IDL{Dimensions = [8]};
}

type STRING
{
    USHORT Length;
    USHORT MaximumLength;
    array<CHAR> Buffer with IDL{Size_is = [MaximumLength],
    Length_is = [Length],
    IndirectionLevel = 1};
}

typedef PSTRING = STRING with IDL{IndirectionLevel = 1};

type NETLOGON_GENERIC_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    RPC_UNICODE_STRING PackageName;
    ULONG DataLength;
    array<UCHAR> LogonData with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNETLOGON_GENERIC_INFO = NETLOGON_GENERIC_INFO with IDL{IndirectionLevel = 1};

pattern NETLOGON_VALIDATION_INFO_CLASS = enum 
{
    NetlogonValidationUasInfo = 1,
    NetlogonValidationSamInfo = 2,
    NetlogonValidationSamInfo2 = 3,
    NetlogonValidationGenericInfo = 4,
    NetlogonValidationGenericInfo2 = 5,
    NetlogonValidationSamInfo4 = 6,
    ...
};

type NETLOGON_VALIDATION[NETLOGON_VALIDATION_INFO_CLASS Tag]
{
    optional [|Tag in {2}|] PNETLOGON_VALIDATION_SAM_INFO ValidationSam with IDL{Case = [2]};
    optional [|Tag in {3}|] PNETLOGON_VALIDATION_SAM_INFO2 ValidationSam2 with IDL{Case = [3]};
    optional [|Tag in {5}|] PNETLOGON_VALIDATION_GENERIC_INFO2 ValidationGeneric2 with IDL{Case = [5]};
    optional [|Tag in {6}|] PNETLOGON_VALIDATION_SAM_INFO4 ValidationSam4 with IDL{Case = [6]};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<NETLOGON_VALIDATION_INFO_CLASS>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_VALIDATION = NETLOGON_VALIDATION with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO
{
    OLD_LARGE_INTEGER LogonTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER LogoffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER KickOffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordLastSet with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordCanChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordMustChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    ULONG UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<ULONG> ExpansionRoom where ValidationCheck(all (ULONG x in value) x == 0, null, DiagnosisLevel.Error,
    "NRPC: Each element of the ExpansionRoom in type NETLOGON_VALIDATION_SAM_INFO must be zero.")
    with IDL{Dimensions = [10]};
}

typedef PNETLOGON_VALIDATION_SAM_INFO = NETLOGON_VALIDATION_SAM_INFO with IDL{IndirectionLevel = 1};

type GROUP_MEMBERSHIP
{
    ULONG RelativeId;
    GROUP_MEMBERSHIP_Attributes Attributes 
        where ValidationCheckCombinationValue(InRange<GROUP_MEMBERSHIP_Attributes>(value), null, true, ReferenceType.Type, "NRPC", "Attributes", "GROUP_MEMBERSHIP", "0x00000001, 0x00000002, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<GROUP_MEMBERSHIP_Attributes>, SourcePattern = TypeOf<ULONG>()};
}

typedef PGROUP_MEMBERSHIP = GROUP_MEMBERSHIP with IDL{IndirectionLevel = 1};

type USER_SESSION_KEY
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PUSER_SESSION_KEY = USER_SESSION_KEY with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO2
{
    OLD_LARGE_INTEGER LogonTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER LogoffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER KickOffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordLastSet with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordCanChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordMustChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    ULONG UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<ULONG> ExpansionRoom where ValidationCheck(all (ULONG x in value) x == 0, null, DiagnosisLevel.Error,
    "NRPC: Each element of the ExpansionRoom field in type NETLOGON_VALIDATION_SAM_INFO2 must be zero.")
    with IDL{Dimensions = [10]};
    ULONG SidCount;
    array<PNETLOGON_SID_AND_ATTRIBUTES> ExtraSids with IDL{Size_is = [SidCount]};
}

typedef PNETLOGON_VALIDATION_SAM_INFO2 = NETLOGON_VALIDATION_SAM_INFO2 with IDL{IndirectionLevel = 1};

type NETLOGON_SID_AND_ATTRIBUTES
{
    RPC_SID Sid with IDL{IndirectionLevel = 1};
    NETLOGON_SID_AND_ATTRIBUTES_Attributes Attributes 
        where ValidationCheckCombinationValue(InRange<NETLOGON_SID_AND_ATTRIBUTES_Attributes>(value), null, true, ReferenceType.Type, "NRPC", "Attributes", "NETLOGON_SID_AND_ATTRIBUTES", "0x00000001, 0x00000002, 0x00000004, 0x20000000", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_SID_AND_ATTRIBUTES_Attributes>, SourcePattern = TypeOf<ULONG>()};
}

typedef PNETLOGON_SID_AND_ATTRIBUTES = NETLOGON_SID_AND_ATTRIBUTES with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_GENERIC_INFO2
{
    ULONG DataLength;
    array<UCHAR> ValidationData
    with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNETLOGON_VALIDATION_GENERIC_INFO2 = NETLOGON_VALIDATION_GENERIC_INFO2 with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO4
{
    OLD_LARGE_INTEGER LogonTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER LogoffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER KickOffTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordLastSet with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordCanChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER PasswordMustChange with DisplayInfo{ToText = NRPC.FILETIMEToText};
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    ushort LogonCount;
    ushort BadPasswordCount;
    IDLUlong UserId;
    IDLUlong PrimaryGroupId;
    IDLUlong GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    IDLUlong UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<char> LMKey with IDL{Dimensions = [8]};
    ULONG UserAccountControl;
    ULONG SubAuthStatus;
    OLD_LARGE_INTEGER LastSuccessfulILogon with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER LastFailedILogon with DisplayInfo{ToText = NRPC.FILETIMEToText};
    ULONG FailedILogonCount;
    array<ULONG> Reserved4 where ValidationCheck(value == [0], null, DiagnosisLevel.Error,
    "NRPC: The Reserved4 field in type NETLOGON_VALIDATION_SAM_INFO4 must be zero.")
    with IDL{Dimensions = [1]};
    IDLUlong SidCount;
    array<PNETLOGON_SID_AND_ATTRIBUTES> ExtraSids
    with IDL{Size_is = [SidCount]};
    RPC_UNICODE_STRING DnsLogonDomainName;
    RPC_UNICODE_STRING Upn;
    RPC_UNICODE_STRING ExpansionString1 where RPCUnicodeStringValidationCheck(value, "ExpansionString1", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString2 where RPCUnicodeStringValidationCheck(value, "ExpansionString2", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString3 where RPCUnicodeStringValidationCheck(value, "ExpansionString3", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString4 where RPCUnicodeStringValidationCheck(value, "ExpansionString4", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString5 where RPCUnicodeStringValidationCheck(value, "ExpansionString5", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString6 where RPCUnicodeStringValidationCheck(value, "ExpansionString6", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString7 where RPCUnicodeStringValidationCheck(value, "ExpansionString7", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString8 where RPCUnicodeStringValidationCheck(value, "ExpansionString8", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString9 where RPCUnicodeStringValidationCheck(value, "ExpansionString9", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString10 where RPCUnicodeStringValidationCheck(value, "ExpansionString10", "NETLOGON_VALIDATION_SAM_INFO4");
}

typedef PNETLOGON_VALIDATION_SAM_INFO4 = NETLOGON_VALIDATION_SAM_INFO4 with IDL{IndirectionLevel = 1};

pattern NETLOGON_SECURE_CHANNEL_TYPE = enum 
{
    NullSecureChannel = 0,
    MsvApSecureChannel = 1,
    WorkstationSecureChannel = 2,
    TrustedDnsDomainSecureChannel = 3,
    TrustedDomainSecureChannel = 4,
    UasServerSecureChannel = 5,
    ServerSecureChannel = 6,
    CdcServerSecureChannel = 7,
    ...
};

type NLPR_MODIFIED_COUNT
{
    OLD_LARGE_INTEGER ModifiedCount;
}

typedef PNLPR_MODIFIED_COUNT = NLPR_MODIFIED_COUNT with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ENUM_ARRAY
{
    DWORD CountReturned;
    array<PNETLOGON_DELTA_ENUM> Deltas
    with IDL{Size_is = [CountReturned]};
}

typedef PNETLOGON_DELTA_ENUM_ARRAY = NETLOGON_DELTA_ENUM_ARRAY with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ENUM
{
    NETLOGON_DELTA_TYPE DeltaType;
    NETLOGON_DELTA_ID_UNION[DeltaType] DeltaID with IDL{Switch_Is = DeltaType};
    NETLOGON_DELTA_UNION[DeltaType] DeltaUnion with IDL{Switch_Is = DeltaType};
}

typedef PNETLOGON_DELTA_ENUM = NETLOGON_DELTA_ENUM with IDL{IndirectionLevel = 1};

pattern NETLOGON_DELTA_TYPE = enum
{
    AddOrChangeDomain = 1,
    AddOrChangeGroup = 2,
    DeleteGroup = 3,
    RenameGroup = 4,
    AddOrChangeUser = 5,
    DeleteUser = 6,
    RenameUser = 7,
    ChangeGroupMembership = 8,
    AddOrChangeAlias = 9,
    DeleteAlias = 10,
    RenameAlias = 11,
    ChangeAliasMembership = 12,
    AddOrChangeLsaPolicy = 13,
    AddOrChangeLsaTDomain = 14,
    DeleteLsaTDomain = 15,
    AddOrChangeLsaAccount = 16,
    DeleteLsaAccount = 17,
    AddOrChangeLsaSecret = 18,
    DeleteLsaSecret = 19,
    DeleteGroupByName = 20,
    DeleteUserByName = 21,
    SerialNumberSkip = 22,
    ...
};

const set<NETLOGON_DELTA_TYPE> tagArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21};
type NETLOGON_DELTA_ID_UNION[NETLOGON_DELTA_TYPE Tag]
{
    optional [|Tag in tagArray|] ULONG Rid with IDL{Case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21]};
    optional [|Tag in {13, 14, 15, 16, 17}|] RPC_SID Sid with IDL{Case = [13, 14, 15, 16, 17], IndirectionLevel = 1};
    optional [|Tag in {18, 19}|] string Name with IDL{Case = [18, 19], BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<NETLOGON_DELTA_TYPE>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_DELTA_ID_UNION = NETLOGON_DELTA_ID_UNION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_UNION[NETLOGON_DELTA_TYPE Tag]
{
    optional [|Tag in {1}|] PNETLOGON_DELTA_DOMAIN DeltaDomain with IDL{Case = [1]};
    optional [|Tag in {2}|] PNETLOGON_DELTA_GROUP DeltaGroup with IDL{Case = [2]};
    optional [|Tag in {4}|] PNETLOGON_DELTA_RENAME_GROUP DeltaRenameGroup with IDL{Case = [4]};
    optional [|Tag in {5}|] PNETLOGON_DELTA_USER DeltaUser with IDL{Case = [5]};
    optional [|Tag in {7}|] PNETLOGON_DELTA_RENAME_USER DeltaRenameUser with IDL{Case = [7]};
    optional [|Tag in {8}|] PNETLOGON_DELTA_GROUP_MEMBER DeltaGroupMember with IDL{Case = [8]};
    optional [|Tag in {9}|] PNETLOGON_DELTA_ALIAS DeltaAlias with IDL{Case = [9]};
    optional [|Tag in {11}|] PNETLOGON_DELTA_RENAME_ALIAS DeltaRenameAlias with IDL{Case = [11]};
    optional [|Tag in {12}|] PNETLOGON_DELTA_ALIAS_MEMBER DeltaAliasMember with IDL{Case = [12]};
    optional [|Tag in {13}|] PNETLOGON_DELTA_POLICY DeltaPolicy with IDL{Case = [13]};
    optional [|Tag in {14}|] PNETLOGON_DELTA_TRUSTED_DOMAINS DeltaTDomains with IDL{Case = [14]};
    optional [|Tag in {16}|] PNETLOGON_DELTA_ACCOUNTS DeltaAccounts with IDL{Case = [16]};
    optional [|Tag in {18}|] PNETLOGON_DELTA_SECRET DeltaSecret with IDL{Case = [18]};
    optional [|Tag in {20}|] PNETLOGON_DELTA_DELETE_GROUP DeltaDeleteGroup with IDL{Case = [20]};
    optional [|Tag in {21}|] PNETLOGON_DELTA_DELETE_USER DeltaDeleteUser with IDL{Case = [21]};
    optional [|Tag in {22}|] PNLPR_MODIFIED_COUNT DeltaSerialNumberSkip with IDL{Case = [22]};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<NETLOGON_DELTA_TYPE>(), UnionKind = UnionKind.NonEncapsulated};
         
typedef PNETLOGON_DELTA_UNION = NETLOGON_DELTA_UNION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DOMAIN
{
    RPC_UNICODE_STRING DomainName;
    RPC_UNICODE_STRING OemInformation;
    OLD_LARGE_INTEGER ForceLogoff;
    USHORT MinPasswordLength;
    USHORT PasswordHistoryLength;
    OLD_LARGE_INTEGER MaxPasswordAge;
    OLD_LARGE_INTEGER MinPasswordAge;
    OLD_LARGE_INTEGER DomainModifiedCount;
    OLD_LARGE_INTEGER DomainCreationTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DomainLockoutInformation;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DOMAIN");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DOMAIN");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DOMAIN");
    ULONG PasswordProperties;
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_DOMAIN", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_DOMAIN", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_DOMAIN", value);
}

typedef PNETLOGON_DELTA_DOMAIN = NETLOGON_DELTA_DOMAIN with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_GROUP
{
    RPC_UNICODE_STRING Name;
    ULONG RelativeId;
    NETLOGON_DELTA_GROUP_Attributes Attributes
        where ValidationCheckCombinationValue(InRange<NETLOGON_DELTA_GROUP_Attributes>(value), null, true, ReferenceType.Type, "NRPC", "Attributes", "NETLOGON_DELTA_GROUP", "0x00000001, 0x00000002, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_DELTA_GROUP_Attributes>, SourcePattern = TypeOf<ULONG>()};
    RPC_UNICODE_STRING AdminComment;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_GROUP");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_GROUP", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_GROUP", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_GROUP", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_GROUP", value);
}

typedef PNETLOGON_DELTA_GROUP = NETLOGON_DELTA_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_GROUP
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_GROUP");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_RENAME_GROUP", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_RENAME_GROUP", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_RENAME_GROUP", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_RENAME_GROUP", value);
}

typedef PNETLOGON_DELTA_RENAME_GROUP = NETLOGON_DELTA_RENAME_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_USER
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    ULONG UserId;
    ULONG PrimaryGroupId;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    RPC_UNICODE_STRING ScriptPath;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING WorkStations;
    OLD_LARGE_INTEGER LastLogon with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER LastLogoff with DisplayInfo{ToText = NRPC.FILETIMEToText};
    NLPR_LOGON_HOURS LogonHours;
    USHORT BadPasswordCount;
    USHORT LogonCount;
    OLD_LARGE_INTEGER PasswordLastSet with DisplayInfo{ToText = NRPC.FILETIMEToText};
    OLD_LARGE_INTEGER AccountExpires with DisplayInfo{ToText = NRPC.FILETIMEToText};
    ULONG UserAccountControl;
    ENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
    ENCRYPTED_LM_OWF_PASSWORD EncryptedLmOwfPassword;
    UCHAR NtPasswordPresent;
    UCHAR LmPasswordPresent;
    UCHAR PasswordExpired;
    RPC_UNICODE_STRING UserComment;
    RPC_UNICODE_STRING Parameters;
    USHORT CountryCode;
    USHORT CodePage;
    NLPR_USER_PRIVATE_INFO PrivateData;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_USER");
    ULONG DummyLong1;
    ULONG DummyLong2;
    ULONG DummyLong3;
    ULONG DummyLong4;
}

typedef PNETLOGON_DELTA_USER = NETLOGON_DELTA_USER with IDL{IndirectionLevel = 1};

type NLPR_LOGON_HOURS
{
    USHORT UnitsPerWeek;
    array<UCHAR> LogonHours with IDL{Size_is = [1260], Length_is = [(UnitsPerWeek + 7) / 8], IndirectionLevel = 1};
}

typedef PNLPR_LOGON_HOURS = NLPR_LOGON_HOURS with IDL{IndirectionLevel = 1};

type NLPR_USER_PRIVATE_INFO
{
    UCHAR SensitiveData;
    ULONG DataLength;
    array<UCHAR> Data with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNLPR_USER_PRIVATE_INFO = NLPR_USER_PRIVATE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_USER
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_USER");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_RENAME_USER", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_RENAME_USER", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_RENAME_USER", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_RENAME_USER", value);
}

typedef PNETLOGON_DELTA_RENAME_USER = NETLOGON_DELTA_RENAME_USER with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_GROUP_MEMBER
{
    array<ULONG> Members with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
    array<ULONG> Attributes with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
    ULONG MemberCount;
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_GROUP_MEMBER", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_GROUP_MEMBER", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_GROUP_MEMBER", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_GROUP_MEMBER", value);
}

typedef PNETLOGON_DELTA_GROUP_MEMBER = NETLOGON_DELTA_GROUP_MEMBER with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ALIAS
{
    RPC_UNICODE_STRING Name;
    ULONG RelativeId;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING Comment;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_ALIAS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_ALIAS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_ALIAS");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_ALIAS", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_ALIAS", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_ALIAS", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_ALIAS", value);
}

typedef PNETLOGON_DELTA_ALIAS = NETLOGON_DELTA_ALIAS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_ALIAS
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_ALIAS");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_RENAME_ALIAS", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_RENAME_ALIAS", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_RENAME_ALIAS", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_RENAME_ALIAS", value);
}

typedef PNETLOGON_DELTA_RENAME_ALIAS = NETLOGON_DELTA_RENAME_ALIAS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ALIAS_MEMBER
{
    NLPR_SID_ARRAY Members;
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_ALIAS_MEMBER", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_ALIAS_MEMBER", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_ALIAS_MEMBER", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_ALIAS_MEMBER", value);
}

typedef PNETLOGON_DELTA_ALIAS_MEMBER = NETLOGON_DELTA_ALIAS_MEMBER with IDL{IndirectionLevel = 1};

type NLPR_SID_ARRAY
{
    ULONG Count;
    array<PNLPR_SID_INFORMATION> Sids
    with IDL{Size_is = [Count]};
}

typedef PNLPR_SID_ARRAY = NLPR_SID_ARRAY with IDL{IndirectionLevel = 1};

type NLPR_SID_INFORMATION
{
    RPC_SID SidPointer with IDL{IndirectionLevel = 1};
}

typedef PNLPR_SID_INFORMATION = NLPR_SID_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_POLICY
{
    ULONG MaximumLogSize;
    OLD_LARGE_INTEGER AuditRetentionPeriod with DisplayInfo{ToText = NRPC.FILETIMEToText};
    UCHAR AuditingMode;
    ULONG MaximumAuditEventCount;
    array<ULONG> EventAuditingOptions with IDL{Size_is = [MaximumAuditEventCount + 1], IndirectionLevel = 1};
    RPC_UNICODE_STRING PrimaryDomainName;
    RPC_SID PrimaryDomainSid with IDL{IndirectionLevel = 1};
    NLPR_QUOTA_LIMITS QuotaLimits;
    OLD_LARGE_INTEGER ModifiedId;
    OLD_LARGE_INTEGER DatabaseCreationTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_POLICY");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_POLICY", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_POLICY", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_POLICY", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_POLICY", value);
}

typedef PNETLOGON_DELTA_POLICY = NETLOGON_DELTA_POLICY with IDL{IndirectionLevel = 1};

type NLPR_QUOTA_LIMITS
{
    ULONG PagedPoolLimit;
    ULONG NonPagedPoolLimit;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    ULONG PagefileLimit;
    OLD_LARGE_INTEGER Reserved where ValidationCheck((value.LowPart == 0) && (value.HighPart == 0), null, DiagnosisLevel.Error,
    "NRPC: The Reserved in type NLPR_QUOTA_LIMITS must be set to zero.");
}

typedef PNLPR_QUOTA_LIMITS = NLPR_QUOTA_LIMITS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_TRUSTED_DOMAINS
{
    RPC_UNICODE_STRING DomainName;
    ULONG NumControllerEntries;
    array<PRPC_UNICODE_STRING> ControllerNames
    with IDL{Size_is = [NumControllerEntries]};
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    ULONG TrustedPosixOffset;
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_TRUSTED_DOMAINS", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_TRUSTED_DOMAINS", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_TRUSTED_DOMAINS", value);
}

typedef PNETLOGON_DELTA_TRUSTED_DOMAINS = NETLOGON_DELTA_TRUSTED_DOMAINS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ACCOUNTS
{
    ULONG PrivilegeEntries;
    NETLOGON_DELTA_ACCOUNTS_PrivilegeControl PrivilegeControl 
        where ValidationCheckCombinationValue(InRange<NETLOGON_DELTA_ACCOUNTS_PrivilegeControl>(value), null, true, ReferenceType.Type, "NRPC", "PrivilegeControl", "NETLOGON_DELTA_ACCOUNTS", "0x00000000, 0x00000001", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_DELTA_ACCOUNTS_PrivilegeControl>, SourcePattern = TypeOf<ULONG>()};
    array<ULONG> PrivilegeAttributes
    with IDL{Size_is = [PrivilegeEntries], IndirectionLevel = 1};
    array<PRPC_UNICODE_STRING> PrivilegeNames
    with IDL{Size_is = [PrivilegeEntries]};
    NLPR_QUOTA_LIMITS QuotaLimits;
    ULONG SystemAccessFlags;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_ACCOUNTS");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_ACCOUNTS", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_ACCOUNTS", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_ACCOUNTS", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_ACCOUNTS", value);
}

typedef PNETLOGON_DELTA_ACCOUNTS = NETLOGON_DELTA_ACCOUNTS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_SECRET
{
    NLPR_CR_CIPHER_VALUE CurrentValue;
    OLD_LARGE_INTEGER CurrentValueSetTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    NLPR_CR_CIPHER_VALUE OldValue;
    OLD_LARGE_INTEGER OldValueSetTime with DisplayInfo{ToText = NRPC.FILETIMEToText};
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_SECRET");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_SECRET", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_SECRET", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_SECRET", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_SECRET", value);
}

typedef PNETLOGON_DELTA_SECRET = NETLOGON_DELTA_SECRET with IDL{IndirectionLevel = 1};

type NLPR_CR_CIPHER_VALUE
{
    ULONG Length;
    ULONG MaximumLength;
    array<UCHAR> Buffer with IDL{Size_is = [MaximumLength],
    Length_is = [Length],
    IndirectionLevel = 1};
}

typedef PNLPR_CR_CIPHER_VALUE = NLPR_CR_CIPHER_VALUE with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DELETE_GROUP
{
    string AccountName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DELETE_GROUP");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_DELETE_GROUP", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_DELETE_GROUP", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_DELETE_GROUP", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_DELETE_GROUP", value);
}

typedef PNETLOGON_DELTA_DELETE_GROUP = NETLOGON_DELTA_DELETE_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DELETE_USER
{
    string AccountName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DELETE_USER");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_DELTA_DELETE_USER", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_DELTA_DELETE_USER", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DELTA_DELETE_USER", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DELTA_DELETE_USER", value);
}

typedef PNETLOGON_DELTA_DELETE_USER = NETLOGON_DELTA_DELETE_USER with IDL{IndirectionLevel = 1};

type UAS_INFO_0
{
    string ComputerName with IDL{Dimensions = [16]},
                             Encoding
                             {
                                 Decoder = BinaryDecoder<string>,
                                 SourcePattern = TypeOf<array<CHAR>>()
                             },
                             BinaryEncoding{Endian = Endian.Little, TextEncoding = TextEncoding.ASCII};
    ULONG TimeCreated;
    ULONG SerialNumber;
}

typedef PUAS_INFO_0 = UAS_INFO_0 with IDL{IndirectionLevel = 1};

type NETLOGON_CONTROL_QUERY_INFORMATION[DWORD Tag]
{
    optional [|Tag in {1}|] PNETLOGON_INFO_1 NetlogonInfo1 with IDL{Case = [1]};
    optional [|Tag in {2}|] PNETLOGON_INFO_2 NetlogonInfo2 with IDL{Case = [2]};
    optional [|Tag in {3}|] PNETLOGON_INFO_3 NetlogonInfo3 with IDL{Case = [3]};
    optional [|Tag in {4}|] PNETLOGON_INFO_4 NetlogonInfo4 with IDL{Case = [4]};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CONTROL_QUERY_INFORMATION = NETLOGON_CONTROL_QUERY_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_1
{
    NETLOGON_INFO_1_netlog1_flags netlog1_flags 
        where ValidationCheckCombinationValueTooManyItems(InRange<NETLOGON_INFO_1_netlog1_flags>(value), null, true, ReferenceType.Type, "NRPC", "netlog1_flags", "NETLOGON_INFO_1", "NETLOGON_INFO_1", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<NETLOGON_INFO_1_netlog1_flags>, SourcePattern = TypeOf<DWORD>()};
    NET_API_STATUS netlog1_pdc_connection_status;
}

typedef PNETLOGON_INFO_1 = NETLOGON_INFO_1 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_2
{
    NETLOGON_INFO_2_netlog2_flags netlog2_flags 
        where ValidationCheckCombinationValue(InRange<NETLOGON_INFO_2_netlog2_flags>(value), null, true, ReferenceType.Type, "NRPC", "netlog2_flags", "NETLOGON_INFO_2", "0x00000010, 0x00000020, 0x00000080", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_INFO_2_netlog2_flags>, SourcePattern = TypeOf<DWORD>()};
    NET_API_STATUS netlog2_pdc_connection_status;
    string netlog2_trusted_dc_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    NET_API_STATUS netlog2_tc_connection_status;
}

typedef PNETLOGON_INFO_2 = NETLOGON_INFO_2 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_3
{
    DWORD netlog3_flags where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_flags", "NETLOGON_INFO_3", value);
    DWORD netlog3_logon_attempts;
    DWORD netlog3_reserved1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_reserved1", "NETLOGON_INFO_3", value);
    DWORD netlog3_reserved2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_reserved2", "NETLOGON_INFO_3", value);
    DWORD netlog3_reserved3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_reserved3", "NETLOGON_INFO_3", value);
    DWORD netlog3_reserved4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_reserved4", "NETLOGON_INFO_3", value);
    DWORD netlog3_reserved5 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "netlog3_reserved5", "NETLOGON_INFO_3", value);
}

typedef PNETLOGON_INFO_3 = NETLOGON_INFO_3 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_4
{
    string netlog4_trusted_dc_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string netlog4_trusted_domain_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

typedef PNETLOGON_INFO_4 = NETLOGON_INFO_4 with IDL{IndirectionLevel = 1};

type NETLOGON_CONTROL_DATA_INFORMATION[DWORD Tag]
{
    optional [|Tag in {5, 6, 9, 10}|] string TrustedDomainName with
        IDL{Case = [5, 6, 9, 10], BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    optional [|Tag in {65534}|] DWORD DebugFlag with IDL{Case = [65534]};
    optional [|Tag in {8}|] string UserName with
        IDL{Case = [8], BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}
with IDL{EmptyDefault = true, Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CONTROL_DATA_INFORMATION = NETLOGON_CONTROL_DATA_INFORMATION with IDL{IndirectionLevel = 1};

pattern SYNC_STATE = enum
{
    NormalState = 0,
    DomainState = 1,
    GroupState = 2,
    UasBuiltInGroupState = 3,
    UserState = 4,
    GroupMemberState = 5,
    AliasState = 6,
    AliasMemberState = 7,
    SamDoneState = 8,
    ...
};

typedef PSYNC_STATE = SYNC_STATE with IDL{IndirectionLevel = 1};

type DOMAIN_NAME_BUFFER
{
    ULONG DomainNameByteCount;
    array<string> DomainNames with IDL{Size_is = [DomainNameByteCount],
                                   PointerType = PointerKind.UniquePtr,
                                   IndirectionLevel = 1},
                                   Encoding
                                   {
                                       Decoder = BinaryDecoder<array<string>>,
                                       SourcePattern = TypeOf<array<UCHAR>>()
                                   },
                                   BinaryEncoding{Endian = Endian.Little, TextEncoding = TextEncoding.Unicode};
}

typedef PDOMAIN_NAME_BUFFER = DOMAIN_NAME_BUFFER with IDL{IndirectionLevel = 1};

type DOMAIN_CONTROLLER_INFOW
{
    string DomainControllerName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string DomainControllerAddress
    with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType DomainControllerAddressType where ValidationCheckEnumValue(InRange<DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType>(value), null, true, ReferenceType.Type, "NRPC", "DomainControllerAddressType", "DOMAIN_CONTROLLER_INFOW", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType>, SourcePattern = TypeOf<ULONG>()};
    GUID DomainGuid;
    string DomainName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string DnsForestName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    DOMAIN_CONTROLLER_INFOW_Flags Flags 
        where ValidationCheckCombinationValueTooManyItems(InRange<DOMAIN_CONTROLLER_INFOW_Flags>(value), null, true, ReferenceType.Type, "NRPC", "Flags", "DOMAIN_CONTROLLER_INFOW", "DOMAIN_CONTROLLER_INFOW", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<DOMAIN_CONTROLLER_INFOW_Flags>, SourcePattern = TypeOf<ULONG>()};
    string DcSiteName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string ClientSiteName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}

typedef PDOMAIN_CONTROLLER_INFOW = DOMAIN_CONTROLLER_INFOW with IDL{IndirectionLevel = 1};

type NETLOGON_CAPABILITIES[DWORD Tag]
{
    optional [|Tag in {1}|] ULONG ServerCapabilities with IDL{Case = [1]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CAPABILITIES = NETLOGON_CAPABILITIES with IDL{IndirectionLevel = 1};

type NETLOGON_WORKSTATION_INFORMATION[DWORD Tag]
{
    optional [|Tag in {1}|] PNETLOGON_WORKSTATION_INFO WorkstationInfo with IDL{Case = [1]};
    optional [|Tag in {2}|] PNETLOGON_WORKSTATION_INFO LsaPolicyInfo with IDL{Case = [2]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_WORKSTATION_INFORMATION = NETLOGON_WORKSTATION_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_WORKSTATION_INFO
{
    NETLOGON_LSA_POLICY_INFO LsaPolicy;
    string DnsHostName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string SiteName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy1 where ValidationCheckValue(null == value, null, true, ReferenceType.Type, "NRPC", "Dummy1", "NETLOGON_WORKSTATION_INFO", "null", value)
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy2 where ValidationCheckValue(null == value, null, true, ReferenceType.Type, "NRPC", "Dummy2", "NETLOGON_WORKSTATION_INFO", "null", value)
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy3 where ValidationCheckValue(null == value, null, true, ReferenceType.Type, "NRPC", "Dummy3", "NETLOGON_WORKSTATION_INFO", "null", value)
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy4 where ValidationCheckValue(null == value, null, true, ReferenceType.Type, "NRPC", "Dummy4", "NETLOGON_WORKSTATION_INFO", "null", value)
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING OsVersion;
    RPC_UNICODE_STRING OsName;
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_WORKSTATION_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_WORKSTATION_INFO");
    NETLOGON_WORKSTATION_INFO_WorkstationFlags WorkstationFlags 
        where ValidationCheckCombinationValue(InRange<NETLOGON_WORKSTATION_INFO_WorkstationFlags>(value), null, true, ReferenceType.Type, "NRPC", "WorkstationFlags", "NETLOGON_WORKSTATION_INFO", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_WORKSTATION_INFO_WorkstationFlags>, SourcePattern = TypeOf<ULONG>()};
    ULONG KerberosSupportedEncryptionTypes;
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_WORKSTATION_INFO", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_WORKSTATION_INFO", value);
}

typedef PNETLOGON_WORKSTATION_INFO = NETLOGON_WORKSTATION_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_LSA_POLICY_INFO
{
    ULONG LsaPolicySize;
    array<UCHAR> LsaPolicy
    with IDL{Size_is = [LsaPolicySize], IndirectionLevel = 1};
}

typedef PNETLOGON_LSA_POLICY_INFO = NETLOGON_LSA_POLICY_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_DOMAIN_INFORMATION[DWORD Tag]
{
    optional [|Tag in {1}|] PNETLOGON_DOMAIN_INFO DomainInfo with IDL{Case = [1]};
    optional [|Tag in {2}|] PNETLOGON_LSA_POLICY_INFO LsaPolicyInfo with IDL{Case = [2]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_DOMAIN_INFORMATION = NETLOGON_DOMAIN_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_DOMAIN_INFO
{
    NETLOGON_ONE_DOMAIN_INFO PrimaryDomain;
    ULONG TrustedDomainCount;
    array<PNETLOGON_ONE_DOMAIN_INFO> TrustedDomains
    with IDL{Size_is = [TrustedDomainCount]};
    NETLOGON_LSA_POLICY_INFO LsaPolicy;
    RPC_UNICODE_STRING DnsHostNameInDs;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DOMAIN_INFO");
    NETLOGON_DOMAIN_INFO_WorkstationFlags WorkstationFlags
         where ValidationCheckCombinationValue(InRange<NETLOGON_DOMAIN_INFO_WorkstationFlags>(value), null, true, ReferenceType.Type, "NRPC", "WorkstationFlags", "NETLOGON_DOMAIN_INFO", "0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<NETLOGON_DOMAIN_INFO_WorkstationFlags>, SourcePattern = TypeOf<ULONG>()};
    ULONG SupportedEncTypes;
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_DOMAIN_INFO", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_DOMAIN_INFO", value);
}

typedef PNETLOGON_DOMAIN_INFO = NETLOGON_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_ONE_DOMAIN_INFO
{
    RPC_UNICODE_STRING DomainName where ValidationCheck(value.Length != 0, null, DiagnosisLevel.Error, 
    "NRPC: The DomainName in type NETLOGON_ONE_DOMAIN_INFO must not be an empty string.");
    RPC_UNICODE_STRING DnsDomainName where ValidationCheck(value.Length != 0, null, DiagnosisLevel.Error, 
    "NRPC: The DnsDomainName in type NETLOGON_ONE_DOMAIN_INFO must not be an empty string.");
    RPC_UNICODE_STRING DnsForestName;
    GUID DomainGuid;
    RPC_SID DomainSid with IDL{IndirectionLevel = 1};
    RPC_UNICODE_STRING TrustExtension;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_ONE_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_ONE_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_ONE_DOMAIN_INFO");
    ULONG DummyLong1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong1", "NETLOGON_ONE_DOMAIN_INFO", value);
    ULONG DummyLong2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong2", "NETLOGON_ONE_DOMAIN_INFO", value);
    ULONG DummyLong3 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong3", "NETLOGON_ONE_DOMAIN_INFO", value);
    ULONG DummyLong4 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "NRPC", "DummyLong4", "NETLOGON_ONE_DOMAIN_INFO", value);
}

typedef PNETLOGON_ONE_DOMAIN_INFO = NETLOGON_ONE_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type NL_TRUST_PASSWORD
{
    array<WCHAR> Buffer with IDL{Dimensions = [256]};
    ULONG Length;
}

typedef PNL_TRUST_PASSWORD = NL_TRUST_PASSWORD with IDL{IndirectionLevel = 1};

type NL_SOCKET_ADDRESS
{
    SockAddrPattern lpSockaddr with Encoding{Decoder = BinaryDecoder<SockAddrPattern>, SourcePattern = TypeOf<lpSockaddrBufferPattern>()},
        IDL{Size_is = [iSockaddrLength], IndirectionLevel = 1};
    ULONG iSockaddrLength;
}

pattern SockAddrPattern = [|stream.RemainingByteLength > 2|]
([|stream.CurrentByte == 0x02|] IPv4SockAddr |
[|stream.CurrentByte == 0x17|] IPv6SockAddr);

// 2.2.1.2.4.1   IPv4 Address Structure
type IPv4SockAddr
{
    AddressFamilyEnum AddressFamily where value == 0x0002;
    ushort Port;
    IPv4Address Address;
    binary Padding with BinaryEncoding{Length = 8};

    override string ToString()
    {
        return Address.ToString() + ":" + (Port as string);
    }
}

// 2.2.1.2.4.2   IPv6 Address Structure
type IPv6SockAddr
{
    AddressFamilyEnum AddressFamily where value == 0x0017;
    ushort Port;
    uint FlowInfo where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "NRPC", "FlowInfo", "IPv6SockAddr", value);
    IPv6Address Address;
    uint ScopeId;

    override string ToString()
    {
        return Address.ToString() + ":" + (Port as string);
    }
}

pattern lpSockaddrBufferPattern = array<UCHAR> with IDL{DoNotGenerate = true}, Documentation{Ignore = true};
typedef PNL_SOCKET_ADDRESS = NL_SOCKET_ADDRESS with IDL{IndirectionLevel = 1};

type NL_SITE_NAME_ARRAY
{
    ULONG EntryCount;
    array<PRPC_UNICODE_STRING> SiteNames
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_SITE_NAME_ARRAY = NL_SITE_NAME_ARRAY with IDL{IndirectionLevel = 1};

type NETLOGON_TRUSTED_DOMAIN_ARRAY
{
    DWORD DomainCount;
    array<PDS_DOMAIN_TRUSTSW> Domains
    with IDL{Size_is = [DomainCount]};
}

typedef PNETLOGON_TRUSTED_DOMAIN_ARRAY = NETLOGON_TRUSTED_DOMAIN_ARRAY with IDL{IndirectionLevel = 1};

type DS_DOMAIN_TRUSTSW
{
    string NetbiosDomainName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string DnsDomainName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DS_DOMAIN_TRUSTSW_Flags Flags
        where ValidationCheckCombinationValueTooManyItems(InRange<DS_DOMAIN_TRUSTSW_Flags>(value), null, true, ReferenceType.Type, "NRPC", "Flags", "DS_DOMAIN_TRUSTSW", "DS_DOMAIN_TRUSTSW", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<DS_DOMAIN_TRUSTSW_Flags>, SourcePattern = TypeOf<ULONG>()};
    ULONG ParentIndex;
    DS_DOMAIN_TRUSTSW_TrustType TrustType
        where ValidationCheckEnumValue(InRange<DS_DOMAIN_TRUSTSW_TrustType>(value), null, true, ReferenceType.Type, "NRPC", "TrustType", "DS_DOMAIN_TRUSTSW", "0x00000001, 0x00000002, 0x00000003, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<DS_DOMAIN_TRUSTSW_TrustType>, SourcePattern = TypeOf<ULONG>()};
    DS_DOMAIN_TRUSTSW_TrustAttributes TrustAttributes
        where ValidationCheckCombinationValueTooManyItems(InRange<DS_DOMAIN_TRUSTSW_TrustAttributes>(value), null, true, ReferenceType.Type, "NRPC", "TrustAttributes", "DS_DOMAIN_TRUSTSW", "DS_DOMAIN_TRUSTSW", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<DS_DOMAIN_TRUSTSW_TrustAttributes>, SourcePattern = TypeOf<ULONG>()};
    RPC_SID DomainSid with IDL{IndirectionLevel = 1};
    GUID DomainGuid;
}

typedef PDS_DOMAIN_TRUSTSW = DS_DOMAIN_TRUSTSW with IDL{IndirectionLevel = 1};

type NL_SITE_NAME_EX_ARRAY
{
    ULONG EntryCount;
    array<PRPC_UNICODE_STRING> SiteNames
    with IDL{Size_is = [EntryCount]};
    array<PRPC_UNICODE_STRING> SubnetNames
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_SITE_NAME_EX_ARRAY = NL_SITE_NAME_EX_ARRAY with IDL{IndirectionLevel = 1};

type MIDL_logon_0002[LSA_FOREST_TRUST_RECORD_TYPE Tag]
{
    optional [|Tag in {0, 1}|] LSA_RPC_UNICODE_STRING TopLevelName with IDL{Case = [0, 1]};
    optional [|Tag in {2}|] LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo with IDL{Case = [2]};
    optional [|!(Tag in {0, 1, 2})|] LSA_FOREST_TRUST_BINARY_DATA Data with IDL{Default = true};
}
with IDL{Switch_Type = TypeOf<LSA_FOREST_TRUST_RECORD_TYPE>(), UnionKind = UnionKind.NonEncapsulated};

type LSA_FOREST_TRUST_DOMAIN_INFO
{
    RPC_SID Sid with IDL{IndirectionLevel = 1};
    LSA_RPC_UNICODE_STRING DnsName;
    LSA_RPC_UNICODE_STRING NetbiosName;
}

typedef PLSA_FOREST_TRUST_DOMAIN_INFO = LSA_FOREST_TRUST_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type LSA_FOREST_TRUST_BINARY_DATA
{
    ULONG Length with IDL{Range = new RangePattern{Low = 0, High = 131072}};
    array<UCHAR> Buffer with IDL{Size_is = [Length], IndirectionLevel = 1};
}

typedef PLSA_FOREST_TRUST_BINARY_DATA = LSA_FOREST_TRUST_BINARY_DATA with IDL{IndirectionLevel = 1};

type NL_GENERIC_RPC_DATA
{
    ULONG UlongEntryCount;
    array<ULONG> UlongData
    with IDL{Size_is = [UlongEntryCount], IndirectionLevel = 1};
    ULONG UnicodeStringEntryCount;
    array<PRPC_UNICODE_STRING> UnicodeStringData
    with IDL{Size_is = [UnicodeStringEntryCount]};
}

typedef PNL_GENERIC_RPC_DATA = NL_GENERIC_RPC_DATA with IDL{IndirectionLevel = 1};

type NL_DNS_NAME_INFO_ARRAY
{
    ULONG EntryCount;
    array<PNL_DNS_NAME_INFO> DnsNamesInfo
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_DNS_NAME_INFO_ARRAY = NL_DNS_NAME_INFO_ARRAY with IDL{IndirectionLevel = 1};

type NL_DNS_NAME_INFO
{
    NL_DNS_NAME_INFO_Type Type where ValidationCheckEnumValueTooManyItems(InRange<NL_DNS_NAME_INFO_Type>(value), null, true, ReferenceType.Type, "NRPC", "Type", "NL_DNS_NAME_INFO", "NL_DNS_NAME_INFO", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<NL_DNS_NAME_INFO_Type>, SourcePattern = TypeOf<ULONG>()};
    string DnsDomainInfo
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    NL_DNS_NAME_INFO_DnsDomainInfoType DnsDomainInfoType where ValidationCheckEnumValueTooManyItems(InRange<NL_DNS_NAME_INFO_DnsDomainInfoType>(value), null, true, ReferenceType.Type, "NRPC", "DnsDomainInfoType", "NL_DNS_NAME_INFO", "NL_DNS_NAME_INFO", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<NL_DNS_NAME_INFO_DnsDomainInfoType>, SourcePattern = TypeOf<ULONG>()};
    ULONG Priority;
    ULONG Weight;
    ULONG Port;
    UCHAR Register;
    ULONG Status;
}

typedef PNL_DNS_NAME_INFO = NL_DNS_NAME_INFO with IDL{IndirectionLevel = 1};

typedef NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES = MIDL_logon_0003 with IDL{Switch_Type = TypeOf<DWORD>()};

type MIDL_logon_0003[DWORD Tag]
{
    optional [|Tag in {1}|] NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES_V1 V1 with IDL{Case = [1]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES_V1
{
    string ClientDnsHostName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    NL_OSVERSIONINFO_V1 OsVersionInfo_V1
    with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
    string OsName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}

type NL_OSVERSIONINFO_V1
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    array<wchar_t> szCSDVersion with IDL{Dimensions = [128]};
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    NL_OSVERSIONINFO_V1_wSuiteMask wSuiteMask
         where ValidationCheckCombinationValueTooManyItems(InRange<NL_OSVERSIONINFO_V1_wSuiteMask>(value), null, true, ReferenceType.Type, "NRPC", "wSuiteMask", "NL_OSVERSIONINFO_V1", "NL_OSVERSIONINFO_V1", "[MS-NRPC]")
        with Encoding{Decoder = PatternDecoder<NL_OSVERSIONINFO_V1_wSuiteMask>, SourcePattern = TypeOf<USHORT>()};
    NL_OSVERSIONINFO_V1_wProductType wProductType 
        where ValidationCheckEnumValue(InRange<NL_OSVERSIONINFO_V1_wProductType>(value), null, true, ReferenceType.Type, "NRPC", "wProductType", "NL_OSVERSIONINFO_V1", "0x0000002, 0x0000003, 0x0000001", value)
        with Encoding{Decoder = PatternDecoder<NL_OSVERSIONINFO_V1_wProductType>, SourcePattern = TypeOf<UCHAR>()};
    UCHAR wReserved;
}

typedef NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES = MIDL_logon_0004 with IDL{Switch_Type = TypeOf<DWORD>()};

type MIDL_logon_0004[DWORD Tag]
{
    optional [|Tag in {1}|] NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES_V1 V1 with IDL{Case = [1]};
} with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES_V1
{
    string HubName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string OldDnsHostName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 2};
    ULONG SupportedEncTypes
    with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
}

typedef LSA_RPC_UNICODE_STRING = RPC_UNICODE_STRING;
typedef PLSA_RPC_UNICODE_STRING = RPC_UNICODE_STRING with IDL{IndirectionLevel = 1};

// ---------------------------- Not defined in IDL ----------------------------//
bool RPCUnicodeStringValidationCheck(RPC_UNICODE_STRING rpcUnicodeString, string fieldName, string typeName)
{
    return ValidationCheck((rpcUnicodeString.Length == 0) && (rpcUnicodeString.MaximumLength == 0) && (rpcUnicodeString.Buffer == null), null, DiagnosisLevel.Error, 
    "NRPC: The " + fieldName + " in type " + typeName + " must contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field.");
}
// 2.2.1.2.1   DOMAIN_CONTROLLER_INFOW
pattern DOMAIN_CONTROLLER_INFOW_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000004,
    C = 0x00000008,
    D = 0x00000010,
    E = 0x00000020,
    F = 0x00000040,
    G = 0x00000080,
    H = 0x00000100,
    I = 0x00000200,
    J = 0x00000400,
    K = 0x00000800,
    L = 0x00001000,
    P = 0x00002000,
    Q = 0x00004000,
    M = 0x20000000,
    N = 0x40000000,
    O = 0x80000000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.3.6   NETLOGON_WORKSTATION_INFO
pattern NETLOGON_WORKSTATION_INFO_WorkstationFlags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.3.11   NETLOGON_DOMAIN_INFO
pattern NETLOGON_DOMAIN_INFO_WorkstationFlags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.3.15   NL_OSVERSIONINFO_V1
pattern NL_OSVERSIONINFO_V1_wSuiteMask = flags USHORT
{
    VER_SUITE_BACKOFFICE = 0x00000004,
    VER_SUITE_BLADE = 0x00000400,
    VER_SUITE_COMPUTE_SERVER = 0x00004000,
    VER_SUITE_DATACENTER = 0x00000080,
    VER_SUITE_ENTERPRISE = 0x00000002,
    VER_SUITE_EMBEDDENT = 0x00000040,
    VER_SUITE_PERSONAL = 0x00000200,
    VER_SUITE_SINGLEUSERTS = 0x00000100,
    VER_SUITE_SMALLBUSINESS = 0x00000001,
    VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x00000020,
    VER_SUITE_STORAGE_SERVER = 0x00002000,
    VER_SUITE_TERMINAL = 0x00000010,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.4.7   NETLOGON_SID_AND_ATTRIBUTES
pattern NETLOGON_SID_AND_ATTRIBUTES_Attributes  = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x20000000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.4.10   GROUP_MEMBERSHIP
pattern GROUP_MEMBERSHIP_Attributes = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

//  2.2.1.5.13   NETLOGON_DELTA_GROUP
pattern NETLOGON_DELTA_GROUP_Attributes = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.4.15   NETLOGON_LOGON_IDENTITY_INFO
pattern NETLOGON_LOGON_IDENTITY_INFO_ParameterControl = flags ULONG
{
    A = 0x00000002,
    B = 0x00000004,
    C = 0x00000008,
    D = 0x00000010,
    E = 0x00000020,
    F = 0x00000040,
    G = 0x00000080,
    
    H = 0x00000100,
    I = 0x00000200,
    J = 0x00000400,
    K = 0x00000800,
    L = 0x00001000,
    M = 0x00002000,
    N = 0x00004000,
    
    O = 0x00010000,
    P = 0x00100000,
    
    Q = 0x01000000,
    R = 0x02000000,
    S = 0x04000000,
    T = 0x08000000,
    U = 0x10000000,
    V = 0x20000000,
    W = 0x40000000,
    X = 0x80000000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.5.3   NETLOGON_DELTA_ACCOUNTS
pattern NETLOGON_DELTA_ACCOUNTS_PrivilegeControl = flags ULONG
{
    A = 0x00000001,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.6.2   DS_DOMAIN_TRUSTSW
pattern DS_DOMAIN_TRUSTSW_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x00000010,
    F = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.6.2   DS_DOMAIN_TRUSTSW
pattern DS_DOMAIN_TRUSTSW_TrustAttributes = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x00000010,
    F = 0x00000020,
    G = 0x00000040,
    H = 0x00400000,
    I = 0x00800000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.7.2   NETLOGON_INFO_1
pattern NETLOGON_INFO_1_netlog1_flags = flags DWORD
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x00000010,
    F = 0x00000020,
    G = 0x00000040,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.7.3   NETLOGON_INFO_2
pattern NETLOGON_INFO_2_netlog2_flags = flags DWORD
{
    A = 0x00000010,
    B = 0x00000020,
    C = 0x00000080,
    ...
} with IDL{DoNotGenerate = true};

// 3.1.4.2   Netlogon Negotiable Options
pattern NetlogonNegotiableOptions = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x00000010,
    F = 0x00000020,
    G = 0x00000040,
    H = 0x00000080,
    
    I = 0x00000100,
    J = 0x00000200,
    K = 0x00000400,
    L = 0x00000800,
    M = 0x00001000,
    N = 0x00002000,
    O = 0x00004000,
    P = 0x00008000,
    
    Q = 0x00010000,
    R = 0x00020000,
    S = 0x00040000,
    T = 0x00080000,
    U = 0x00100000,
    V = 0x00200000,
    
    W = 0x01000000,
    X = 0x20000000,
    Y = 0x40000000,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.3.1   DsrGetDcNameEx2 (Opnum 34)
pattern DsrGetDcNameEx2_AllowableAccountControlBits = flags ULONG
{
    A = 0x00000100,
    B = 0x00000200,
    C = 0x00000800,
    D = 0x00001000,
    E = 0x00002000,
    F = 0x02000000,
    ...
} with IDL{DoNotGenerate = true};

pattern DsrGetDcName_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000010,
    C = 0x00000020,
    D = 0x00000040,
    E = 0x00000080,
    
    F = 0x00000100,
    G = 0x00000200,
    H = 0x00000400,
    I = 0x00000800,
    J = 0x00001000,
    K = 0x00002000,
    L = 0x00004000,
    M = 0x00008000,
    
    N = 0x00010000,
    O = 0x00020000,
    P = 0x00040000,
    Q = 0x00080000,
    T = 0x00100000,
    U = 0x00200000,
    
    R = 0x40000000,
    S = 0x80000000,
    ...
} with IDL{DoNotGenerate = true};

pattern DsrGetDcNameEx_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000010,
    C = 0x00000020,
    D = 0x00000040,
    E = 0x00000080,
    
    F = 0x00000100,
    G = 0x00000200,
    H = 0x00000400,
    I = 0x00000800,
    J = 0x00001000,
    K = 0x00002000,
    L = 0x00004000,
    M = 0x00008000,
    
    N = 0x00010000,
    O = 0x00020000,
    P = 0x00040000,
    Q = 0x00080000,
    T = 0x00100000,
    U = 0x00200000,
    
    R = 0x40000000,
    S = 0x80000000,
    ...
} with IDL{DoNotGenerate = true};

pattern DsrGetDcNameEx2_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000010,
    C = 0x00000020,
    D = 0x00000040,
    E = 0x00000080,
    
    F = 0x00000100,
    G = 0x00000200,
    H = 0x00000400,
    I = 0x00000800,
    J = 0x00001000,
    K = 0x00002000,
    L = 0x00004000,
    M = 0x00008000,
    
    N = 0x00010000,
    O = 0x00020000,
    P = 0x00040000,
    Q = 0x00080000,
    T = 0x00100000,
    U = 0x00200000,
    
    R = 0x40000000,
    S = 0x80000000,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.7.1   DsrEnumerateDomainTrusts (Opnum 40)
pattern DsrEnumerateDomainTrusts_Flags = flags ULONG
{
    A = 0x00000001,
    B = 0x00000002,
    C = 0x00000004,
    D = 0x00000008,
    E = 0x00000010,
    F = 0x00000020,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.7.5   DsrGetForestTrustInformation (Opnum 43)
pattern DsrGetForestTrustInformation_Flags= flags DWORD
{
    A = 0x00000001,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.8.5   NetrLogonSetServiceBits (Opnum 22)
pattern NetrLogonSetServiceBits_ServiceBits = flags DWORD
{
    A = 0x00000040,
    B = 0x00000200,
    C = 0x00002000,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.8.5   NetrLogonSetServiceBits (Opnum 22)
pattern NetrLogonSetServiceBits_ServiceBitsOfInterest = flags DWORD
{
    A = 0x00000040,
    B = 0x00000200,
    C = 0x00002000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.2.1   DOMAIN_CONTROLLER_INFOW
pattern DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType = enum ULONG
{
    IPAddress = 0x00000001,
    NetBIOSName = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.2.5   NL_DNS_NAME_INFO
pattern NL_DNS_NAME_INFO_Type = enum ULONG
{
    NlDnsLdapAtSite = 22,
    NlDnsGcAtSite = 25,
    NlDnsDsaCname = 28,
    NlDnsKdcAtSite = 30,
    NlDnsDcAtSite = 32,
    NlDnsRfc1510KdcAtSite = 34,
    NlDnsGenericGcAtSite = 36,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.2.5   NL_DNS_NAME_INFO
pattern NL_DNS_NAME_INFO_DnsDomainInfoType = enum ULONG
{
    NlDnsDomainName = 1,
    NlDnsDomainNameAlias = 2,
    NlDnsForestName = 3,
    NlDnsForestNameAlias = 4,
    NlDnsNdncDomainName = 5,
    NlDnsRecordName = 6,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.3.15   NL_OSVERSIONINFO_V1
pattern NL_OSVERSIONINFO_V1_wProductType = enum UCHAR
{
    VER_NT_DOMAIN_CONTROLLER = 0x0000002,
    VER_NT_SERVER = 0x0000003,
    VER_NT_WORKSTATION = 0x0000001,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.6.2   DS_DOMAIN_TRUSTSW
pattern DS_DOMAIN_TRUSTSW_TrustType = enum ULONG
{
    WindowsNTDomain = 0x00000001,
    WindowsADBasedDomain = 0x00000002,
    MITKerberosRealm = 0x00000003,
    DCERealm = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

// 3.5.4.4.9   NetrLogonGetDomainInfo (Opnum 29)
pattern NetrLogonGetDomainInfo_Level = enum DWORD
{
    NetlogopnDomainInfo = 0x00000001,
    NetlogonLSAPolicyInfo = 0x00000002,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrDatabaseDeltas_DatabaseID = enum DWORD
{
    SAMDatabase = 0x00000001,
    SAMBuiltInDatabase = 0x00000002,
    LSADatabase = 0x00000003,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrDatabaseSync_DatabaseID = enum DWORD
{
    SAMDatabase = 0x00000001,
    SAMBuiltInDatabase = 0x00000002,
    LSADatabase = 0x00000003,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrDatabaseSync2_DatabaseID = enum DWORD
{
    SAMDatabase = 0x00000001,
    SAMBuiltInDatabase = 0x00000002,
    LSADatabase = 0x00000003,
    ...
} with IDL{DoNotGenerate = true};

pattern DBChangeInfo_DatabaseID = enum DWORD
{
    SAMDatabase = 0x00000001,
    SAMBuiltInDatabase = 0x00000002,
    LSADatabase = 0x00000003,
    ...
} with IDL{DoNotGenerate = true};

pattern ChangeLogEntry_DatabaseID = enum DWORD
{
    SAMDatabase = 0x00000001,
    SAMBuiltInDatabase = 0x00000002,
    LSADatabase = 0x00000003,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl_QueryLevel = enum DWORD
{
    NetlogonInfo1 = 0x00000001,
    NetlogonInfo2 = 0x00000002,
    NetlogonInfo3 = 0x00000003,
    NetlogonInfo4 = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl2_QueryLevel = enum DWORD
{
    NetlogonInfo1 = 0x00000001,
    NetlogonInfo2 = 0x00000002,
    NetlogonInfo3 = 0x00000003,
    NetlogonInfo4 = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl2Ex_QueryLevel = enum DWORD
{
    NetlogonInfo1 = 0x00000001,
    NetlogonInfo2 = 0x00000002,
    NetlogonInfo3 = 0x00000003,
    NetlogonInfo4 = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl_FunctionCode = enum DWORD
{
    NETLOGON_CONTROL_QUERY = 0x00000001,
    NETLOGON_CONTROL_REPLICATE = 0x00000002,
    NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
    NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
    NETLOGON_CONTROL_REDISCOVER = 0x00000005,
    NETLOGON_CONTROL_TC_QURY = 0x00000006,
    NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
    NETLOGON_CONTROL_FIND_USER = 0x00000008,
    NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
    NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
    NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
    NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
    NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
    NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
    NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
    NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl2_FunctionCode = enum DWORD
{
    NETLOGON_CONTROL_QUERY = 0x00000001,
    NETLOGON_CONTROL_REPLICATE = 0x00000002,
    NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
    NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
    NETLOGON_CONTROL_REDISCOVER = 0x00000005,
    NETLOGON_CONTROL_TC_QURY = 0x00000006,
    NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
    NETLOGON_CONTROL_FIND_USER = 0x00000008,
    NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
    NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
    NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
    NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
    NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
    NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
    NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
    NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
    ...
} with IDL{DoNotGenerate = true};

pattern NetrLogonControl2Ex_FunctionCode = enum DWORD
{
    NETLOGON_CONTROL_QUERY = 0x00000001,
    NETLOGON_CONTROL_REPLICATE = 0x00000002,
    NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
    NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
    NETLOGON_CONTROL_REDISCOVER = 0x00000005,
    NETLOGON_CONTROL_TC_QURY = 0x00000006,
    NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
    NETLOGON_CONTROL_FIND_USER = 0x00000008,
    NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
    NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
    NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
    NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
    NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
    NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
    NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
    NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
    ...
} with IDL{DoNotGenerate = true};

pattern AddressFamilyEnum = enum short
{
    IPv4Address = 0x0002,
    IPv6Address = 0x0017,
    ...
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

//// 2.2.1.3.1   NL_AUTH_MESSAGE
//type NL_Auth_Message
//{
//NL_Auth_Message_MessageType MessageType;
//NL_Auth_Message_Flags Flags;
//array<string> Buffer where (value == nothing || (value != null && value.Count == FlagToInt(Flags << (32 - 5))));
//} with IDL{DoNotGenerate = true};
//
//uint FlagToInt(ULONG flag)
//{
//uint num = 0;
//while (flag > 0)
//{
//flag = (flag << 1);
//num ++;
//}
//return num;
//}
//
//pattern NL_Auth_Message_MessageType = enum ULONG
//{
//NegotiateRequest = 0x00000000,
//NegotiateResponse  = 0x00000001,
//} with IDL{DoNotGenerate = true};
//
//pattern NL_Auth_Message_Flags = flags ULONG
//{
//A = 0x00000001,
//B = 0x00000002,
//C = 0x00000004,
//D = 0x00000008,
//E = 0x00000010,
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.3.2   NL_AUTH_SIGNATURE
//type NL_AUTH_SIGNATURE
//{
//USHORT SignatureAlgorithm where value == 0x0077 with BinaryEncoding{Endian = Endian.Little};
//NL_AUTH_SIGNATURE_SealAlgorithm SealAlgorithm with BinaryEncoding{Endian = Endian.Little};
//USHORT Pad where value == 0xFFFF;
//USHORT Flags where value == 0x0000;
//ULONG64 SequenceNumber with BinaryEncoding{Endian = Endian.Little};
//binary Checksum with BinaryEncoding{Length = 8};
//binary Confounder with BinaryEncoding{Length = 8};
//} with IDL{DoNotGenerate = true};
//
//pattern NL_AUTH_SIGNATURE_SealAlgorithm = enum USHORT
//{
//NotEncrypted = 0xFFFF,
//EncryptedWithRC4  = 0x007A,
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.3.3   NL_AUTH_SHA2_SIGNATURE
//type NL_AUTH_SHA2_SIGNATURE
//{
//USHORT SignatureAlgorithm where value == 0x0013 with BinaryEncoding{Endian = Endian.Little};
//NL_AUTH_SHA2_SIGNATURE_SealAlgorithm SealAlgorithm with BinaryEncoding{Endian = Endian.Little};
//USHORT Pad where value == 0xFFFF;
//USHORT Flags where value == 0x0000;
//ULONG64 SequenceNumber with BinaryEncoding{Endian = Endian.Little};
//ULONG64 Checksum with BinaryEncoding{Length = 32};
//binary Confounder with BinaryEncoding{Length = 8};
//} with IDL{DoNotGenerate = true};
//
//pattern NL_AUTH_SHA2_SIGNATURE_SealAlgorithm = enum USHORT
//{
//NotEncrypted = 0xFFFF,
//EncryptedWithAES128  = 0x001A,
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.3.8   NL_PASSWORD_VERSION
//type NL_PASSWORD_VERSION
//{
//ULONG ReservedField;
//ULONG PasswordVersionNumber;
//ULONG PasswordVersionPresent;
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.3.10   NETLOGON_ONE_DOMAIN_INFO
//type NETLOGON_ONE_DOMAIN_INFO_TrustExtension
//{
//ULONG Flags;
//ULONG ParentIndex;
//ULONG TrustType;
//ULONG TrustAttributes;
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.5.1   NETLOGON_DB_CHANGE (Announcement) Message
//type NETLOGON_DB_CHANGE
//{
//USHORT MessageType where value == 0x000A;
//DWORD LowSerialNumber;
//ULONG DateAndTime;
//ULONG Pulse;
//ULONG Random;
//string PrimaryDCName;
//string DomainName;
//string UnicodePrimaryDCName;
//string UnicodeDomainName;
//ULONG DBCount;
//array<DBChangeInfo> Route with BinaryEncoding{Length = DBCount};
//ULONG DomainSidSize;
//binary DomainSid with BinaryEncoding{Length = DomainSidSize};
//ULONG MessageFormatVersion where value == 0x00000001;
//ULONG MessageToken where value == 0xFFFFFFFF;
//} with IDL{DoNotGenerate = true};
//
//type DBChangeInfo
//{
//DBChangeInfo_DatabaseID DBIndex;
//ULONG64 LargeSerialNumber;
//ULONG64 DateAndTime;
//} with IDL{DoNotGenerate = true};
//
//// 2.2.1.5.15   NLPR_USER_PRIVATE_INFO
//type NLPR_USER_PRIVATE_INFO_Data
//{
//ULONG DataType where value == 0x00000002;
//USHORT LmLength where (value == 0x0010 || value == 0x0000);
//USHORT LmMaximumLength  where (value == LmLength);
//ULONG Unused1 where value == 0x00000000;
//array<BYTE> LmHash with BinaryEncoding{Length = 16};
//USHORT NtLength where (value == 0x0010 || value == 0x0000);
//USHORT NtMaximumLength where (value == NtLength);
//ULONG Unused2 where value == 0x00000000;
//array<BYTE> NtHash with BinaryEncoding{Length = 16};
//USHORT LmHistoryLength;
//USHORT LmHistoryMaximumLength where (value == LmHistoryLength);
//ULONG Unused3 where value == 0x00000000;
//USHORT NtHistoryLength;
//USHORT NtHistoryMaximumLength where (value == NtHistoryLength);
//ULONG Unused4 where value == 0x00000000;
//array<BYTE> NtHistoryArray with BinaryEncoding{Length = (NtHistoryLength / 2)};
//array<BYTE> LmHistoryArray with BinaryEncoding{Length = (LmHistoryMaximumLength / 2)};
//} with IDL{DoNotGenerate = true};
//
//// 3.5.4.6.4   NetrDatabaseRedo (Opnum 17)
//type CHANGELOG_ENTRY
//{
//ULONG64 SerialNumber;
//ULONG ObjectRid;
//ChangeLogEntryFlags Flags;
//ChangeLogEntry_DatabaseID DBIndex;
//BYTE DeltaType;
//optional RPC_SID ObjectSid;
//optional string ObjectName;
//} with IDL{DoNotGenerate = true};
//
//pattern CHANGELOG_ENTRY_Flags = flags ULONG
//{
//A = 0x00000001,
//B = 0x00000002,
//C = 0x00000004,
//D = 0x00000008,
//E = 0x00000010,
//} with IDL{DoNotGenerate = true};
//

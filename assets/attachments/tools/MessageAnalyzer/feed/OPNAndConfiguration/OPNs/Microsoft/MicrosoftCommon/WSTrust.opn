protocol WSTrust with 
XmlEncodingDefaults{Namespace = WSTrustNamespace},
Documentation
{
    ProtocolName = "Web Services Trust Language",
    ShortName = "WSTrust",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WS-Trust", Link = "http://specs.xmlsoap.org/ws/2005/02/trust/WS-Trust.pdf"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="371750", Date="12/02/2014"}
        ]
};

using XSD;
using Standard;
using Utility;
using SOAP;
using WSA2004;
using Technologies.SOAP;
using SAMLCore;
using XMLEnc;
using WSS;
using WSPolicy;

endpoint Server over IntermediateServer provides OperationContract;
client endpoint Client connected to Server;

endpoint IntermediateServer over SOAP.Server provides MessageContract;
client endpoint IntermediateClient connected to IntermediateServer;

autostart actor WSTrustOverSOAP(SOAP.Server node)
{
    // Issue request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTrustIssueRequstAction || soap.WsaAction == WSTrustIssueResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.IssueRequest from XmlDecoder<MessageContract.IssueRequest> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSTrust", "IssueRequest");
        }
    }
    
    // Issue response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTrustIssueResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.IssueResponse from XmlDecoder<MessageContract.IssueResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSTrust", "IssueResponse");
        }
    }
    
    // Renew request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTrustRenewRequstAction || soap.WsaAction == WSTrustRenewResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.RenewRequest from XmlDecoder<MessageContract.RenewRequest> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSTrust", "RenewRequest");
        }
    }
    
    // Renew response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTrustRenewResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.RenewResponse from XmlDecoder<MessageContract.RenewResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSTrust", "RenewResponse");
        }
    }
    
    // Cancel request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTrustCancelRequstAction || soap.WsaAction == WSTrustCancelResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.CancelRequest from XmlDecoder<MessageContract.CancelRequest> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSTrust", "CancelRequest");
        }
    }
    
    // Cancel response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTrustCancelResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.CancelResponse from XmlDecoder<MessageContract.CancelResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSTrust", "CancelResponse");
        }
    }
    
    // Validate request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTrustValidateRequstAction || soap.WsaAction == WSTrustValidateResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.ValidateRequest from XmlDecoder<MessageContract.ValidateRequest> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSTrust", "ValidateRequest");
        }
    }
    
    // Validate response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTrustValidateResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.ValidateResponse from XmlDecoder<MessageContract.ValidateResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSTrust", "ValidateResponse");
        }
    }
    
    // KET request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTrustKetRequstAction || soap.WsaAction == WSTrustKetResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.KetRequest from XmlDecoder<MessageContract.KetRequest> =>
                dispatch (endpoint IntermediateServer over node) accepts m;
            default =>
                ThrowDecodingException("WSTrust", "KetRequest");
        }
    }
    
    // KET response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTrustKetResponseAction
    {
        switch (soap.Body)
        {
            case m:MessageContract.KetResponse from XmlDecoder<MessageContract.KetResponse> =>
                dispatch (endpoint IntermediateServer over node) issues m;
            default =>
                ThrowDecodingException("WSTrust", "KetResponse");
        }
    }
}

autostart actor OperationActor(IntermediateServer node)
{
    MessageContract.IssueRequest issue = null;
    MessageContract.RenewRequest renew = null;
    MessageContract.CancelRequest cancel = null;
    MessageContract.ValidateRequest validate = null;
    MessageContract.KetRequest ket = null;
    
    // Issue request
    process node accepts req:MessageContract.IssueRequest
    {
        if (issue == null)
        {
            issue = req;
        }
        else
        {
            ValidationCheck(false, issue, "Incomplete Issue operation due to missing Issue response.");
            DisplayTopLevelMessage(issue);
            issue = req;
        }
    }
    
    // Issue response
    process node issues res:MessageContract.IssueResponse
    {
        if (issue == null)
        {
            ValidationCheck(false, res, "Incomplete Issue operation due to missing Issue request.");
            reject;
        }
        else
        {
            var issueOp = new OperationContract.IssueOp
            {
                RequestSecurityToken = issue.RequestSecurityToken,
                RequestSecurityTokenResponse1 = issue.RequestSecurityTokenResponse,
                RequestSecurityTokenResponse2 = res.RequestSecurityTokenResponse,
                RequestSecurityTokenResponseCollection = res.RequestSecurityTokenResponseCollection
            };
            issueOp.Origins = [issue as any message, res as any message];
            issue = null;
            dispatch (endpoint Server over node) accepts issueOp;
        }
    }
    
    // Renew request
    process node accepts req:MessageContract.RenewRequest
    {
        if (renew == null)
        {
            renew = req;
        }
        else
        {
            ValidationCheck(false, renew, "Incomplete Renew operation due to missing Renew response.");
            DisplayTopLevelMessage(renew);
            renew = req;
        }
    }
    
    // Renew response
    process node issues res:MessageContract.RenewResponse
    {
        if (renew == null)
        {
            ValidationCheck(false, res, "Incomplete Renew operation due to missing Renew request.");
            reject;
        }
        else
        {
            var renewOp = new OperationContract.RenewOp
            {
                RequestSecurityToken = renew.RequestSecurityToken,
                RequestSecurityTokenResponse1 = renew.RequestSecurityTokenResponse,
                RequestSecurityTokenResponse2 = res.RequestSecurityTokenResponse,
            };
            renewOp.Origins = [renew as any message, res as any message];
            renew = null;
            dispatch (endpoint Server over node) accepts renewOp;
        }
    }
    
    // Cancel request
    process node accepts req:MessageContract.CancelRequest
    {
        if (cancel == null)
        {
            cancel = req;
        }
        else
        {
            ValidationCheck(false, cancel, "Incomplete Cancel operation due to missing Cancel response.");
            DisplayTopLevelMessage(cancel);
            cancel = req;
        }
    }
    
    // Cancel response
    process node issues res:MessageContract.CancelResponse
    {
        if (cancel == null)
        {
            ValidationCheck(false, res, "Incomplete Cancel operation due to Cancel request is missing");
            reject;
        }
        else
        {
            var cancelOp = new OperationContract.CancelOp
            {
                RequestSecurityToken = cancel.RequestSecurityToken,
                RequestSecurityTokenResponse1 = cancel.RequestSecurityTokenResponse,
                RequestSecurityTokenResponse2 = res.RequestSecurityTokenResponse,
            };
            cancelOp.Origins = [cancel as any message, res as any message];
            cancel = null;
            dispatch (endpoint Server over node) accepts cancelOp;
        }
    }
    
    // Validate request
    process node accepts req:MessageContract.ValidateRequest
    {
        if (validate == null)
        {
            validate = req;
        }
        else
        {
            ValidationCheck(false, validate, "Incomplete Validate operation due to missing Validate response.");
            DisplayTopLevelMessage(validate);
            validate = req;
        }
    }
    
    // Validate response
    process node issues res:MessageContract.ValidateResponse
    {
        if (validate == null)
        {
            ValidationCheck(false, res, "Incomplete Validate operation due to missing Validate request.");
            reject;
        }
        else
        {
            var validateOp = new OperationContract.ValidateOp
            {
                RequestSecurityToken = validate.RequestSecurityToken,
                RequestSecurityTokenResponse1 = validate.RequestSecurityTokenResponse,
                RequestSecurityTokenResponse2 = res.RequestSecurityTokenResponse,
            };
            validateOp.Origins = [validate as any message, res as any message];
            validate = null;
            dispatch (endpoint Server over node) accepts validateOp;
        }
    }
    
    // KET request
    
    process node accepts req:MessageContract.KetRequest
    {
        if (ket == null)
        {
            ket = req;
        }
        else
        {
            ValidationCheck(false, ket, "Incomplete KET operation due to response is missing when operation is constructed.");
            DisplayTopLevelMessage(ket);
            ket = req;
        }
    }
    
    // KET response
    process node issues res:MessageContract.KetResponse
    {
        if (ket == null)
        {
            ValidationCheck(false, res, "Incomplete KET operation due to request is missing when operation is constructed.");
            reject;
        }
        else
        {
            var ketOp = new OperationContract.KetOp
            {
                RequestSecurityToken = ket.RequestSecurityToken,
                RequestSecurityTokenResponse1 = ket.RequestSecurityTokenResponse,
                RequestSecurityTokenResponse2 = res.RequestSecurityTokenResponse,
            };
            ketOp.Origins = [ket as any message, res as any message];
            ket = null;
            dispatch (endpoint Server over node) accepts ketOp;
        }
    }

    ~endpoint(IntermediateServer node)
    {
        if (issue != null)
        {
            ReportInsufficientOperation(issue, "WSTrust", "IssueOp", false);
            release issue;
        }
        if (renew != null)
        {
            ReportInsufficientOperation(renew, "WSTrust", "RenewOp", false);
            release renew;
        }
        if (cancel != null)
        {
            ReportInsufficientOperation(cancel, "WSTrust", "CancelOp", false);
            release cancel;
        }
        if (validate != null)
        {
            ReportInsufficientOperation(validate, "WSTrust", "ValidateOp", false);
            release validate;
        }
        if (ket != null)
        {
            ReportInsufficientOperation(ket, "WSTrust", "KetOp", false);
            release ket;
        }

        issue = null;
        renew = null;
        cancel = null;
        validate = null;
        ket = null;
    }
}

contract MessageContract
{
    accepts message IssueRequest
    {
        optional RequestSecurityTokenType RequestSecurityToken;
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    issues message IssueResponse
    {
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
        optional RequestSecurityTokenResponseCollectionType RequestSecurityTokenResponseCollection;
    }
    
    accepts message RenewRequest
    {
        optional RequestSecurityTokenType RequestSecurityToken;
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    issues message RenewResponse
    {
        RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    accepts message CancelRequest
    {
        optional RequestSecurityTokenType RequestSecurityToken;
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    issues message CancelResponse
    {
        RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    accepts message ValidateRequest
    {
        optional RequestSecurityTokenType RequestSecurityToken;
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    issues message ValidateResponse
    {
        RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    accepts message KetRequest
    {
        optional RequestSecurityTokenType RequestSecurityToken;
        optional RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
    
    issues message KetResponse
    {
        RequestSecurityTokenResponseType RequestSecurityTokenResponse;
    }
}

contract OperationContract
{
    accepts operation IssueOp
    {
        in optional RequestSecurityTokenType RequestSecurityToken;
        in optional RequestSecurityTokenResponseType RequestSecurityTokenResponse1;
        out optional RequestSecurityTokenResponseType RequestSecurityTokenResponse2;
        out optional RequestSecurityTokenResponseCollectionType RequestSecurityTokenResponseCollection;
        
        override string ToString()
        {
            return "WSTrust: Issue Operation";
        }
    }
    with SoapMessageInfo
    {
        Action = WSTrustIssueRequstAction,
        ReplyAction = WSTrustIssueResponseAction
    };
    
    accepts operation RenewOp
    {
        in optional RequestSecurityTokenType RequestSecurityToken;
        in optional RequestSecurityTokenResponseType RequestSecurityTokenResponse1;
        out RequestSecurityTokenResponseType RequestSecurityTokenResponse2;
        
        override string ToString()
        {
            return "WSTrust: Renew Operation";
        }
    }
    with SoapMessageInfo
    {
        Action = WSTrustRenewRequstAction,
        ReplyAction = WSTrustRenewResponseAction
    };
    
    accepts operation CancelOp
    {
        in optional RequestSecurityTokenType RequestSecurityToken;
        in optional RequestSecurityTokenResponseType RequestSecurityTokenResponse1;
        out RequestSecurityTokenResponseType RequestSecurityTokenResponse2;
        
        override string ToString()
        {
            return "WSTrust: Cancel Operation";
        }
    }
    with SoapMessageInfo
    {
        Action = WSTrustCancelRequstAction,
        ReplyAction = WSTrustCancelResponseAction
    };
    
    accepts operation ValidateOp
    {
        in optional RequestSecurityTokenType RequestSecurityToken;
        in optional RequestSecurityTokenResponseType RequestSecurityTokenResponse1;
        out RequestSecurityTokenResponseType RequestSecurityTokenResponse2;
        
        override string ToString()
        {
            return "WSTrust: Validate Operation";
        }
    }
    with SoapMessageInfo
    {
        Action = WSTrustValidateRequstAction,
        ReplyAction = WSTrustValidateResponseAction
    };
    
    accepts operation KetOp
    {
        in optional RequestSecurityTokenType RequestSecurityToken;
        in optional RequestSecurityTokenResponseType RequestSecurityTokenResponse1;
        out RequestSecurityTokenResponseType RequestSecurityTokenResponse2;
        
        override string ToString()
        {
            return "WSTrust: KET Operation";
        }
    }
    with SoapMessageInfo
    {
        Action = WSTrustKetRequstAction,
        ReplyAction = WSTrustKetResponseAction
    };
}

type IssuedTokens
{
    array<RequestSecurityTokenResponseType> RequestSecurityTokenResponse;
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type WstrustHeader
{
    optional array<IssuedTokens> IssuedTokens;
}

type RequestSecurityTokenType
{
    optional TokenType TokenType;
    RequestType RequestType;
    optional AppliesTo AppliesTo with XmlEncoding{Namespace = Wsp};
    optional ClaimsType Claims;
    optional EntropyType Entropy;
    optional LifetimeType Lifetime;
    optional RenewTargetType RenewTarget;
    optional CancelTargetType CancelTarget;
    optional AllowPostdatingType AllowPostdating;
    optional RenewingType Renewing;
    optional SignChallengeType SignChallenge;
    optional SignChallengeType SignChallengeResponse;
    optional BinaryExchangeType BinaryExchange;
    optional RequestKETType RequestKET;
    optional KeyExchangeTokenType KeyExchangeToken;
    optional OnBehalfOfType OnBehalfOf;
    optional WSA2004.EndpointReferenceType Issuer with XmlEncoding{Namespace = WSAddressing2004Namespace};
    optional AuthenticationType AuthenticationType;
    optional KeyType KeyType;
    optional KeySize KeySize;
    optional SignatureAlgorithm SignatureAlgorithm;
    optional EncryptionType Encryption;
    optional EncryptionAlgorithm EncryptionAlgorithm;
    optional CanonicalizationAlgorithm CanonicalizationAlgorithm;
    optional ProofEncryptionType ProofEncryption;
    optional UseKeyType UseKey;
    optional SignWith SignWith;
    optional EncryptWith EncryptWith;
    optional DelegateToType DelegateTo;
    optional Forwardable Forwardable;
    optional Delegatable Delegatable;
    optional Policy Policy with XmlEncoding{Namespace = Wsp};
    optional PolicyReference PolicyReference with XmlEncoding{Namespace = Wsp};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Context with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type RequestSecurityTokenResponseType
{
    optional TokenType TokenType;
    optional RequestType RequestType;
    optional RequestedSecurityTokenType RequestedSecurityToken;
    optional AppliesTo AppliesTo with XmlEncoding{Namespace = Wsp};
    optional RequestedReferenceType RequestedAttachedReference;
    optional RequestedReferenceType RequestedUnattachedReference;
    optional RequestedProofTokenType RequestedProofToken;
    optional EntropyType Entropy;
    optional LifetimeType Lifetime;
    optional RequestedTokenCancelledType RequestedTokenCancelled;
    optional StatusType Status;
    optional AllowPostdatingType AllowPostdating;
    optional RenewingType Renewing;
    optional SignChallengeType SignChallenge;
    optional SignChallengeType SignChallengeResponse;
    optional BinaryExchangeType BinaryExchange;
    optional RequestKETType RequestKET;
    optional KeyExchangeTokenType KeyExchangeToken;
    optional OnBehalfOfType OnBehalfOf;
    optional WSA2004.EndpointReferenceType Issuer with XmlEncoding{Namespace = WSAddressing2004Namespace};
    optional AuthenticationType AuthenticationType;
    optional AuthenticatorType Authenticator;
    optional KeyType KeyType;
    optional KeySize KeySize;
    optional SignatureAlgorithm SignatureAlgorithm;
    optional EncryptionType Encryption;
    optional EncryptionAlgorithm EncryptionAlgorithm;
    optional CanonicalizationAlgorithm CanonicalizationAlgorithm;
    optional ProofEncryptionType ProofEncryption;
    optional UseKeyType UseKey;
    optional SignWith SignWith;
    optional EncryptWith EncryptWith;
    optional DelegateToType DelegateTo;
    optional Forwardable Forwardable;
    optional Delegatable Delegatable;
    optional Policy Policy with XmlEncoding{Namespace = Wsp};
    optional PolicyReference PolicyReference with XmlEncoding{Namespace = Wsp};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Context with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{ Order = XmlOrderIndicator.All};

pattern TokenType = XSAnyURI;
pattern RequestTypeEnum = XSAnyURI;
pattern RequestTypeOpenEnum = XSAnyURI;
pattern RequestType = RequestTypeOpenEnum;

type RequestedSecurityTokenType
{
    optional string EncryptedKey with XmlEncoding{Namespace = Xenc};
    optional SAMLCore.AssertionType Assertion with XmlEncoding{ Namespace = SamlNamespace};
    optional XMLEnc.EncryptedDataType EncryptedData with XmlEncoding{ Namespace = XencNamespace};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type BinarySecretType
{
    optional string Value with XmlEncoding{Kind = XmlKind.Text};
    optional XSAnyURI Type with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ClaimsType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type EntropyType
{
    optional BinarySecretType BinarySecret;
    optional string EncryptedKey with XmlEncoding{Namespace = Xenc};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type LifetimeType
{
    optional AttributedDateTime Created with XmlEncoding{Namespace = Wsu};
    optional AttributedDateTime Expires with XmlEncoding{Namespace = Wsu};
}

type RequestedReferenceType
{
    SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
}

type RequestedProofTokenType
{
    optional BinarySecretType BinarySecret;
    optional string EncryptedKey with XmlEncoding{Namespace = Xenc};
    optional XSAnyURI ComputedKey;
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type RequestSecurityTokenResponseCollectionType
{
    array<RequestSecurityTokenResponseType> RequestSecurityTokenResponse;
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type RenewTargetType
{
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type AllowPostdatingType
{
}

type RenewingType
{
    optional bool Allow with XmlEncoding{Kind = XmlKind.Attribute};
    optional bool OK with XmlEncoding{Kind = XmlKind.Attribute};
}

type CancelTargetType
{
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type RequestedTokenCancelledType
{
}

type StatusType
{
    XSAnyURI Code;
    optional string Reason;
}

type SignChallengeType
{
    string Challenge;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type BinaryExchangeType
{
    string Value with XmlEncoding{Kind = XmlKind.Text};
    XSAnyURI ValueType with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    XSAnyURI EncodingType with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type RequestKETType
{
}

type KeyExchangeTokenType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type AuthenticatorType
{
    optional string CombinedHash;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type OnBehalfOfType
{
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
    optional WSA2004.EndpointReferenceType EndpointReference with XmlEncoding{Namespace = WSAddressing2004Namespace};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern AuthenticationType = XSAnyURI;
pattern KeyType = XSAnyURI;
pattern KeySize = uint;
pattern SignatureAlgorithm = XSAnyURI;
pattern EncryptionAlgorithm = XSAnyURI;
pattern CanonicalizationAlgorithm = XSAnyURI;
pattern ComputedKeyAlgorithm = XSAnyURI;

type EncryptionType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type ProofEncryptionType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type UseKeyType
{
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Sig with XmlEncoding{Kind = XmlKind.Attribute};
}

pattern SignWith = XSAnyURI;
pattern EncryptWith = XSAnyURI;

type DelegateToType
{
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = Wsse};
    optional xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

pattern Forwardable = bool;
pattern Delegatable = bool;

type ParticipantsType
{
    optional ParticipantType Primary;
    array<ParticipantType> Participant;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

type ParticipantType
{
    xml AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
}

const string WSTrustNamespace = "http://schemas.xmlsoap.org/ws/2005/02/trust";
const string Wsp = "http://schemas.xmlsoap.org/ws/2004/09/policy";
const string Wsu = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";
const string Wsse = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
const string Xenc = "http://www.w3.org/2001/04/xmlenc#";

const string WSTrustRequstAction = "http://schemas.xmlsoap.org/ws/2005/02/trust/RST";
const string WSTrustResponseAction = "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR";
const string WSTrustIssueRequstAction = WSTrustRequstAction + "/Issue";
const string WSTrustIssueResponseAction = WSTrustResponseAction + "/Issue";
const string WSTrustRenewRequstAction = WSTrustRequstAction + "/Renew";
const string WSTrustRenewResponseAction = WSTrustResponseAction + "/Renew";
const string WSTrustCancelRequstAction = WSTrustRequstAction + "/Cancel";
const string WSTrustCancelResponseAction = WSTrustResponseAction + "/Cancel";
const string WSTrustValidateRequstAction = WSTrustRequstAction + "/Validate";
const string WSTrustValidateResponseAction = WSTrustResponseAction + "/Validate";
const string WSTrustKetRequstAction = WSTrustRequstAction + "/KET";
const string WSTrustKetResponseAction = WSTrustResponseAction + "/KET";

module SkypeforBusinessShared with
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using SIP;
using SDP;
using Standard;
using HTTP;
using TURN;

message SipRequestMessage
{
	string Method;
	string Uri;
	SIP.SipHeadersType Headers;
	optional xml Body;
} 

// Initialize a SIP message according to SipRequestMessage format from SIP.Request, with desired headers. 
void InitializeSIPReq(SIP.Request sipReqMsg, array<string> targetHeaders, SipRequestMessage sipMsg)
{
	sipMsg.Method = sipReqMsg.Method;
	sipMsg.Uri = sipReqMsg.Uri;
	sipMsg.Headers = GetHeaders(sipReqMsg.Headers, targetHeaders);
	optional binary bodyBinary = sipReqMsg.Body;
	
	if (bodyBinary == nothing || bodyBinary == null)
	{
		sipMsg.Body = nothing;
	}
	else
	{
		xml tempBody = BuildXml(bodyBinary as binary);

		if (tempBody == null)
		{
			sipMsg.Body = nothing;
		}
		else
		{	
			sipMsg.Body = tempBody;
		}
	}
}

// Initialize a SIP message according to SipResponseMessage format from SIP.Request, with desired headers. 
// Certain SIP messages are defined as request in SIP layer, but actually is response in higher layer. So make a direction change here.  
void InitializeSIPReq(SIP.Request sipReqMsg, array<string> targetHeaders, SipResponseMessage sipMsg)
{		
	sipMsg.Headers = GetHeaders(sipReqMsg.Headers, targetHeaders);
	optional binary bodyBinary = sipReqMsg.Body;
	
	if (bodyBinary == nothing || bodyBinary == null)
	{
		sipMsg.Body = nothing;
	}
	else
	{
		xml tempBody = BuildXml(bodyBinary as binary);

		if (tempBody == null)
		{
			sipMsg.Body = nothing;
		}
		else
		{	
			sipMsg.Body = tempBody;
		}
	}
}

message SipResponseMessage
{
	uint StatusCode;
	string ReasonPhrase;
	SIP.SipHeadersType Headers;
	optional xml Body;
} 

// Initialize a SIP message according to SipResponseMessage format from SIP.Response, with desired headers. 
void InitializeSIPRsp(SIP.Response sipRspMsg, array<string> targetHeaders, SipResponseMessage sipMsg)
{
	sipMsg.StatusCode = sipRspMsg.StatusCode;
	sipMsg.ReasonPhrase = sipRspMsg.ReasonPhrase;
	sipMsg.Headers = GetHeaders(sipRspMsg.Headers, targetHeaders);
	optional binary bodyBinary = sipRspMsg.Body;
	
	if (bodyBinary == nothing || bodyBinary == null)
	{
		sipMsg.Body = nothing;
	}
	else
	{
		xml tempBody = BuildXml(bodyBinary as binary);

		if (tempBody == null)
		{
			sipMsg.Body = nothing;
		}
		else
		{	
			sipMsg.Body = tempBody;
		}
	}
}

// Get desired headers.
SIP.SipHeadersType GetHeaders(SIP.SipHeadersType sourceHeaders, array<string> targetHeaders)
{
	if (sourceHeaders == null || sourceHeaders.Count == 0)
	{	
		return null;
	}

	if (targetHeaders == null || targetHeaders.Count == 0)
	{	
		return null;
	}

	SIP.SipHeadersType tempHeaders = {};

	foreach (string header in targetHeaders)
	{
		if (header in sourceHeaders)
		{
			tempHeaders += {header -> sourceHeaders[header]};
		}
	}			
	return tempHeaders;
}

// Check if the header exists and if so returns the header value as string.
string TryGetHeaderValue(string header, SIP.SipHeadersType sipHeaders)
{
	if (header == null)
	{	
		return null;
	}

	if (sipHeaders == null || sipHeaders.Count == 0)
	{	
		return null;
	}

	string headerValue = null;

	if (ContainsHeaders([header], sipHeaders))
	{ 
		headerTypes targetHeader = sipHeaders[header];		
		
		if (targetHeader is SIP.HeaderFieldType)
		{
			SIP.HeaderFieldType tempHeaderFieldTypeHeader = targetHeader as SIP.HeaderFieldType;

			if ((tempHeaderFieldTypeHeader != null) && (tempHeaderFieldTypeHeader.Value != null))
			{	
				headerValue = tempHeaderFieldTypeHeader.Value as string;
			}
		}
		
		if (targetHeader is SIP.CSeq)
		{		
			SIP.CSeq tempCseqHeader = targetHeader as SIP.CSeq;

			if ((tempCseqHeader != null) && (tempCseqHeader.Method != null))
			{	
				headerValue = tempCseqHeader.Method as string;
			}
		}

		if (targetHeader is HTTP.Credentials)
		{
			HTTP.Credentials tempHttpCredentialsHeader = targetHeader as HTTP.Credentials;

			if ((tempHttpCredentialsHeader != null) && (tempHttpCredentialsHeader.AuthSchema != null))
			{	
				headerValue = tempHttpCredentialsHeader.AuthSchema as string;
			}
		}

		if (targetHeader is string)
		{
			headerValue = targetHeader as string;
		}
	}	
	return headerValue;
}

// Check if the header exists and if so returns the header value as array of string.
array<string> TryGetHeaderValues(string header, SIP.SipHeadersType sipHeaders)
{
	if (header == null)
	{	
		return null;
	}

	if (sipHeaders == null || sipHeaders.Count == 0)
	{	
		return null;
	}

	array<string> headerValues = [];

	if (ContainsHeaders([header], sipHeaders))
	{
		headerArrayTypes targetHeader = sipHeaders[header];

		if (targetHeader is array<SIP.HeaderFieldType>)
		{			
			array<SIP.HeaderFieldType> tempHeaderFieldTypeHeader = targetHeader as array<SIP.HeaderFieldType>;
		
			if (tempHeaderFieldTypeHeader != null && tempHeaderFieldTypeHeader.Count != 0)
			{
				for (int i=0; i < tempHeaderFieldTypeHeader.Count; i++)
				{
					headerValues += [tempHeaderFieldTypeHeader[i].Value as string];
				}
			}
		}
		
		if (targetHeader is array<string>)
		{	
			array<string> tempHeader = targetHeader as array<string>;

			if (tempHeader != null && tempHeader.Count != 0)
			{
				for (int i=0; i < tempHeader.Count; i++)
				{
					headerValues += [tempHeader[i]];
				}
			}
		}
	}	
	return headerValues;
}

// Check if all the headers exist in certain SIP Headers.
bool ContainsHeaders(array<string> headers, SIP.SipHeadersType sipHeaders)
{
	if ((headers == null) || (headers.Count == 0))
	{	
		return false;
	}

	if (sipHeaders == null || sipHeaders.Count == 0)
	{	
		return false;
	}

	bool found = false;

	foreach (string header in headers)
	{
		if (header in sipHeaders)
		{
			found = true;
			continue;
		}
		found = false;
		break;
	}
	
	return found;
}

// Check whether SDP messages contain protocol MediaDescription
bool ContainsSdpMD(SDP.SessionDescription sdpMsg, string targetMediaField)
{
	if ((sdpMsg == null) || (sdpMsg.MediaDescriptions == nothing) || (sdpMsg.MediaDescriptions == null))
	{
		return false;
	}

	if (targetMediaField == null) 
	{
		return false;
	}

	array<MediaDescriptionType> sdpBody = sdpMsg.MediaDescriptions as array<MediaDescriptionType>;
	

	foreach (MediaDescriptionType mediaDescription in sdpBody)
	{
		if (mediaDescription.MediaField == targetMediaField)
		{
			return true;
		}
	}
	return false;
}

// Check whether SDP messages contain all the defined Attributes by each extension protocol
bool ContainsSdpAtts(SDP.SessionDescription sdpMsg, array<string> targetAttributes)
{
	if ((sdpMsg == null) || (sdpMsg.MediaDescriptions == nothing) || (sdpMsg.MediaDescriptions == null))
	{
		return false;
	}
	
	if ((targetAttributes == null) || (targetAttributes.Count == 0))
	{
		return false;
	}

	array<MediaDescriptionType> sdpBody = sdpMsg.MediaDescriptions as array<MediaDescriptionType>;
	map<string, bool> results = {};

	foreach (MediaDescriptionType mediaDescription in sdpBody)
	{				
		if ((mediaDescription.AttributeFields == nothing) || (mediaDescription.AttributeFields == null))
		{
			continue;
		}
			
		array<AttributeFieldType> sdpAttibutes = mediaDescription.AttributeFields as array<AttributeFieldType>;

		foreach (AttributeFieldType attributeType in sdpAttibutes)
		{			
			foreach (string target in targetAttributes)
			{	
				if ((target != null) && (target in results.Keys))
				{
					continue;
				}

				if ((target != null) && (attributeType.Attribute == target))
				{					
					results += {target -> true};
					break;
				}
			}
		}
		
		if (results.Count == targetAttributes.Count)
		{
			break;	
		}
	}		
	return results.Count == targetAttributes.Count;
}

string TryGetErrorDetails(string header, SIP.SipHeadersType sipHeaders)
{
	if (header == null)
	{
		return null;
	}

	if ((sipHeaders == null) || (sipHeaders.Count == 0))
	{
		return null;
	}

	string headerValue = TryGetHeaderValue(header, sipHeaders);
	
	if (headerValue == null)
	{
		return null;
	}
	else
	{
		array<string> tempStrings = headerValue.Split([";"]);

		if (tempStrings.Count >= 2)
		{
			return tempStrings[0] + " " + tempStrings[1];
		}
		else
		{
			return null;
		}
	}	
}

// Check whether TURN messages contain all the defined Attributes by each extension protocol
bool ContainsTurnAtts(TURN.Message turnMsg, array<ushort> targetAttributeTypes)
{
	if (turnMsg == null)
	{
		return false;
	}
	
	if ((targetAttributeTypes == null) || (targetAttributeTypes.Count == 0))
	{
		return false;
	}
	
	array<Attributes> turnAttributes = turnMsg.Attributes;

	if ((turnAttributes == null) || (turnAttributes.Count == 0))
	{
		return false;
	}

	map<ushort, bool> results = {};
	
	foreach (Attributes attribute in turnAttributes)
	{			
		ushort typeOfTurnAttr = GetTurnAttributeType(attribute);

		if (typeOfTurnAttr == 0)
		{
			continue;	
		}

		foreach (ushort targetType in targetAttributeTypes)
		{			
			if ((targetType != null) && (targetType in results.Keys))
			{
				continue;
			}

			if ((targetType != null) && (typeOfTurnAttr == targetType))
			{					
				results += {targetType -> true};
				break;
			}
		}
		
		if (results.Count == targetAttributeTypes.Count)
		{
			break;	
		}
	}		
	return results.Count == targetAttributeTypes.Count;
}

ushort GetTurnAttributeType(Attributes attribute)
{
	ushort typeOfTurnAttribute;

	if (attribute is MappedAddress)
	{
		typeOfTurnAttribute = (attribute as MappedAddress).Type;
	}
	else if (attribute is XorMappedAddress)
	{
		typeOfTurnAttribute = (attribute as XorMappedAddress).Type;
	}
	else if (attribute is AlternateServer)
	{
		typeOfTurnAttribute = (attribute as AlternateServer).Type;
	}
	else if (attribute is UserName)
	{
		typeOfTurnAttribute = (attribute as UserName).Type;
	}
	else if (attribute is MessageIntegrity)
	{
		typeOfTurnAttribute = (attribute as MessageIntegrity).Type;
	}
	else if (attribute is Fingerprint)
	{
		typeOfTurnAttribute = (attribute as Fingerprint).Type;
	}
	else if (attribute is ErrorCode)
	{
		typeOfTurnAttribute = (attribute as ErrorCode).Type;
	}
	else if (attribute is Realm)
	{
		typeOfTurnAttribute = (attribute as Realm).Type;
	}
	else if (attribute is Nonce)
	{
		typeOfTurnAttribute = (attribute as Nonce).Type;
	}
	else if (attribute is UnknownAttributes)
	{
		typeOfTurnAttribute = (attribute as UnknownAttributes).Type;
	}
	else if (attribute is Software)
	{
		typeOfTurnAttribute = (attribute as Software).Type;
	}
	else if (attribute is AlternateServer)
	{
		typeOfTurnAttribute = (attribute as AlternateServer).Type;
	}
	else if (attribute is ChannelNumber)
	{
		typeOfTurnAttribute = (attribute as ChannelNumber).Type;
	}
	else if (attribute is LifeTime)
	{
		typeOfTurnAttribute = (attribute as LifeTime).Type;
	}
	else if (attribute is XorPeerAddress)
	{
		typeOfTurnAttribute = (attribute as XorPeerAddress).Type;
	}
	else if (attribute is Data)
	{
		typeOfTurnAttribute = (attribute as Data).Type;
	}
	else if (attribute is XorRelayedAddress)
	{
		typeOfTurnAttribute = (attribute as XorRelayedAddress).Type;
	}
	else if (attribute is EvenPort)
	{
		typeOfTurnAttribute = (attribute as EvenPort).Type;
	}
	else if (attribute is RequestedTransport)
	{
		typeOfTurnAttribute = (attribute as RequestedTransport).Type;
	}
	else if (attribute is DontFragment)
	{
		typeOfTurnAttribute = (attribute as DontFragment).Type;
	}
	else if (attribute is ReservationToken)
	{
		typeOfTurnAttribute = (attribute as ReservationToken).Type;
	}
	else if (attribute is GenericAttribute)
	{
		typeOfTurnAttribute = (attribute as GenericAttribute).Type;
	}
	return typeOfTurnAttribute;
}

pattern headerTypes = (SIP.HeaderFieldType | SIP.CSeq | HTTP.Credentials | string);
pattern headerArrayTypes = (array<string> | array<SIP.HeaderFieldType>);
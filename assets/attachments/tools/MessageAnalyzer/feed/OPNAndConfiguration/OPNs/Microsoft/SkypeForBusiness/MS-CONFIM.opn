protocol MSCONFIM with
Documentation
{
    ProtocolName = "Centralized Conference Control Protocol: Instant Messaging Extensions",
    ShortName = "MS-CONFIM",
    DocumentName = "MS-CONFIM",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-CONFIM", Version = "4.3"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using Standard;
using SkypeforBusinessShared;

const string ModuleName = "MSCONFIM";

endpoint Server 
	over SIP.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{	
	process node accepts sipMsg:SIP.Request where (IsConfimSipReq(sipMsg))
    {   
		RequestMessage msg = new InstantMessageRequestMessage(sipMsg);		
		dispatch (endpoint Server over node) accepts msg;
    }

	process node issues sipMsg:SIP.Request where (IsConfimSipReq(sipMsg))
    {   
		RequestMessage msg;

		if (sipMsg.Method == "MESSAGE")
		{
			msg = new MessageForwardingSipRequestMessage(sipMsg);
		}

		if (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/ms-imdn+xml")
		{
			msg = new IMDNMessage(sipMsg);
		}

		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Response where (IsConfimSipRsp(sipMsg))
    {       	
		ResponseMessage msg = new InstantMessageResponseMessage(sipMsg);
		dispatch (endpoint Server over node) issues msg;
    }

	process node accepts sipMsg:SIP.Response where (IsConfimSipRsp(sipMsg))
    {       	
		ResponseMessage msg = new MessageForwardingSipResponseMessage(sipMsg);
		dispatch (endpoint Server over node) issues msg;
    }
}

bool IsConfimSipReq(SIP.Request sipMsg)
{	
	if ((sipMsg.Method == "MESSAGE" && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "text/plain"))
		|| (sipMsg.Method == "MESSAGE" && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "text/rtf"))
		|| (sipMsg.Method == "BENOTIFY") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/ms-imdn+xml"))		
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool IsConfimSipRsp(SIP.Response sipMsg)
{	
	string cSeq = TryGetHeaderValue("CSeq", sipMsg.Headers);
	
	if (cSeq == "MESSAGE") 
	{
		return true;
	}
	else
	{
		return false;
	}
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq"], this);
	}
		
	override string ToString()
	{
		return "Request";
	}
}

message InstantMessageRequestMessage : RequestMessage
{
	optional string TextBody;

	InstantMessageRequestMessage(SIP.Request sipReqMsg)
	{	
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Content-Type", "Message-Id"]);

		optional binary bodyBinary = sipReqMsg.Body;

		if (bodyBinary == nothing || bodyBinary == null)
		{
			this.TextBody = nothing;
		}
        else
        {
			optional string tempBody = BinaryStringDecoder(bodyBinary as binary, TextEncoding.ASCII);
			
			if (tempBody == nothing || tempBody == null)
			{	
				this.TextBody = nothing;
			}
			else
			{
				this.TextBody = tempBody;
			}
        }
	}
		
	override string ToString()
	{
		return "Instant Message Request";
	}
}

message MessageForwardingSipRequestMessage : RequestMessage
{
	optional string TextBody;

	MessageForwardingSipRequestMessage(SIP.Request sipReqMsg)
	{	
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Content-Type", "Ms-Sender", "Message-Id"]);

		optional binary bodyBinary = sipReqMsg.Body;

		if (bodyBinary == nothing || bodyBinary == null)
		{
			this.TextBody = nothing;
		}
        else
        {
			optional string tempBody = BinaryStringDecoder(bodyBinary as binary, TextEncoding.ASCII);
			
			if (tempBody == nothing || tempBody == null)
			{	
				this.TextBody = nothing;
			}
			else
			{
				this.TextBody = tempBody;
			}
        }
	}
		
	override string ToString()
	{
		return "Instant Message Forwarding Request";		
	}
}

message IMDNMessage : RequestMessage
{	
	IMDNMessage(SIP.Request sipReqMsg)
	{	
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Content-Type", "Ms-Sender", "Message-Id"]);
	}
		
	override string ToString()
	{
		return "Instant Message Delivery Notification Message";		
	}
}

message ResponseMessage : SipResponseMessage
{			
	ResponseMessage(SIP.Response sipRspMsg)
	{	
		InitializeSIPRsp(sipRspMsg, ["From", "To", "CSeq"], this);	
	}
		
	override string ToString()
	{
		return Format("Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message InstantMessageResponseMessage : ResponseMessage
{
	InstantMessageResponseMessage(SIP.Response sipRspMsg)
	{			
		base.ResponseMessage(sipRspMsg);
	}
	
	override string ToString()
	{
		return Format("Instant Message Response, {0} {1}", this.StatusCode, this.ReasonPhrase);		
	}
}

message MessageForwardingSipResponseMessage : ResponseMessage
{	
	MessageForwardingSipResponseMessage(SIP.Response sipRspMsg)
	{			
		base.ResponseMessage(sipRspMsg);
		this.Headers += GetHeaders(sipRspMsg.Headers, ["Message-Id"]);
	}
	
	override string ToString()
	{
		return Format("Instant Message Forwarding Response, {0} {1}", this.StatusCode, this.ReasonPhrase);	
	}
}
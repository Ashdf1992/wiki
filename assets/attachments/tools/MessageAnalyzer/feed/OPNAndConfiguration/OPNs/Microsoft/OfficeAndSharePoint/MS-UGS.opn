protocol MSUGS with
Documentation
{
    ProtocolName = "UserGroup Web Service Protocol",
    ShortName = "MS-UGS",
    DocumentName = "MS-UGS",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-UGS", Version = "3.4"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSUGS";

const map<string, string> SoapActionsMap =
{
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddGroup" -> "AddGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddGroupToRole" -> "AddGroupToRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddRole" -> "AddRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddRoleDef" -> "AddRoleDef",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToGroup" -> "AddUserCollectionToGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToRole" -> "AddUserCollectionToRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToGroup" -> "AddUserToGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToRole" -> "AddUserToRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetAllUserCollectionFromWeb" -> "GetAllUserCollectionFromWeb",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetCurrentUserInfo" -> "GetCurrentUserInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollection" -> "GetGroupCollection",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromRole" -> "GetGroupCollectionFromRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromSite" -> "GetGroupCollectionFromSite",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromUser" -> "GetGroupCollectionFromUser",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromWeb" -> "GetGroupCollectionFromWeb",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupInfo" -> "GetGroupInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollection" -> "GetRoleCollection",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromGroup" -> "GetRoleCollectionFromGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromUser" -> "GetRoleCollectionFromUser",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromWeb" -> "GetRoleCollectionFromWeb",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleInfo" -> "GetRoleInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForCurrentUser" -> "GetRolesAndPermissionsForCurrentUser",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForSite" -> "GetRolesAndPermissionsForSite",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollection" -> "GetUserCollection",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromGroup" -> "GetUserCollectionFromGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromRole" -> "GetUserCollectionFromRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromSite" -> "GetUserCollectionFromSite",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromWeb" -> "GetUserCollectionFromWeb",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserInfo" -> "GetUserInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserLoginFromEmail" -> "GetUserLoginFromEmail",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroup" -> "RemoveGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroupFromRole" -> "RemoveGroupFromRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveRole" -> "RemoveRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromGroup" -> "RemoveUserCollectionFromGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromRole" -> "RemoveUserCollectionFromRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromSite" -> "RemoveUserCollectionFromSite",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromGroup" -> "RemoveUserFromGroup",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromRole" -> "RemoveUserFromRole",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromSite" -> "RemoveUserFromSite",
    "http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromWeb" -> "RemoveUserFromWeb",
    "http://schemas.microsoft.com/sharepoint/soap/directory/UpdateGroupInfo" -> "UpdateGroupInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleDefInfo" -> "UpdateRoleDefInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleInfo" -> "UpdateRoleInfo",
    "http://schemas.microsoft.com/sharepoint/soap/directory/UpdateUserInfo" -> "UpdateUserInfo"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        this.SoapAction = soapMsg.SoapAction as string;
        this.ContainsFault = soapMsg.ContainsFault;
        
        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        return SoapActionsMap[this.SoapAction];
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}


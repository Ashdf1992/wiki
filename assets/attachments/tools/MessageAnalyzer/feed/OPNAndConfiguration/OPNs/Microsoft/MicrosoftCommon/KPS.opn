protocol KPS 
    with XmlEncodingDefaults{Namespace = ""},
Documentation
{
    ProtocolName = "Key Protection Service Protocol",
    ShortName = "KPS",
    DocumentName = "MS-KPS",
    Description = "Key Protection Service (KPS) Protocol is a component of the Host Guradian service, which provides security assurance for shielded virtual machines."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
    [
        new Reference {Name = "MS-KPS", Version = "3.0", Date = "09/15/2017", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary =
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = ""}
    ]
};

using HTTP;
using Utility;
using XSD;

const string KPSRollTransportKeyUri = "/rolltransportkey";
const string KPSGetMetaDataUri = "/keyprotection/service/metadata/2014-07/metadata.xml";

endpoint Server over HTTP.Server 
    accepts RollTransportKeyRequest
    issues RollTransportKeyResponse
    accepts GetMetaData
    issues GetMetaDataResponse
    issues ErrorResponse;

autostart actor KPSOverHTTP(HTTP.Server server)
{
    process server accepts p:HttpContract.Request where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
                && IsKPSRequest(p)
    {
        var absPath = p.Uri.AbsPath as string;
        if (absPath.Contains(KPSRollTransportKeyUri))
        {
            switch (p.Payload)
            {
                case msg:RollTransportKeyRequest from XmlDecoder<RollTransportKeyRequest> =>
                    dispatch (endpoint Server over server) accepts msg;
                default =>
                    ThrowDecodingException("RollTransportKeyRequest");
            }
        }
        else if (absPath.Contains(KPSGetMetaDataUri))
        {
            switch (p.Payload)
            {
                case msg:GetMetaData from XmlDecoder<GetMetaData> =>
                    dispatch (endpoint Server over server) accepts msg;
                default =>
                    ThrowDecodingException("GetMetaData");
            }
        }
        else
        {
            reject;
        }
    }
    
    process server issues p:HttpContract.Response where (p.Headers.ContentTypeContains("application/xml") || p.Headers.ContentTypeContains("text/xml"))
            && IsKPSResponse(p)
    {
        if (p.StatusCode == 200)
        {
            var absPath = (p#Uri as UriType).AbsPath as string;
            if (absPath.Contains(KPSRollTransportKeyUri))
            {
                switch (p.Payload)
                {
                    case msg:RollTransportKeyResponse from XmlDecoder<RollTransportKeyResponse> =>
                            dispatch (endpoint Server over server) issues msg;
                    default =>
                        ThrowDecodingException("RollTransportKeyResponse");
                }
            }
            else if (absPath.Contains(KPSGetMetaDataUri))
            {
                switch (p.Payload)
                {
                    case msg:GetMetaDataResponse from XmlDecoder<GetMetaDataResponse> =>
                            dispatch (endpoint Server over server) issues msg;
                    default =>
                        ThrowDecodingException("GetMetaDataResponse");
                }
            }
            else
            {
                reject;
            }
        }
        else
        {
            switch (p.Payload)
            {
                case msg:ErrorResponse from XmlDecoder<ErrorResponse> =>
                        dispatch (endpoint Server over server) issues msg;
                default =>
                    ThrowDecodingException("ErrorResponse");
            }
        }
    }
}

bool IsKPSRequest(HttpContract.Request httpReq)
{
    if (httpReq.Uri.AbsPath is absPath:string)
    {
        if ((absPath.Contains(KPSRollTransportKeyUri) && (httpReq.Method == "RollTransportKey")) || 
            (absPath.Contains(KPSGetMetaDataUri) && httpReq.Method == "GET"))
        {
            return true;
        }
    }
    return false;
}

bool IsKPSResponse(HttpContract.Response httpRes)
{
    if (httpRes#Uri is uri:UriType && uri.AbsPath is absPath:string && httpRes#HttpMethod is method:string)
    {
        if ((absPath.Contains(KPSRollTransportKeyUri) && method == "POST") || 
            (absPath.Contains(KPSGetMetaDataUri) && (method == "GET" || method == "POST")))
        {
            return true;
        }
    }
    return false;
}

message RollTransportKeyRequest
{
    RollTransportKeyRequest_T RollTransportKeyRequest;
}

message RollTransportKeyResponse
{
    RollTransportKeyResponse_T RollTransportKeyResponse;
}

message GetMetaData
{
    GetMetaData_T GetMetaData;
}

type GetMetaData_T
{
    optional Certificate_T PrimaryEncryptionCertificate;
    optional Certificate_T PrimarySigningCertificate;
    optional Certificate_T OtherSigningCertificates;
}

message GetMetaDataResponse
{
    Metadata_T Metadata;
}

message ErrorResponse
{
    Error_T Error;
}

type RollTransportKeyRequest_T
{
     string IngressProtector;
     string HealthCertificate;
     string TransferKeyEncryptionAlgorithm;
     string WrappingKeyEncryptionAlgorithm;
     string TransportKeysEncryptionAlgorithm;
}

type RollTransportKeyResponse_T
{
     string EgressProtector;
     string EncryptedTransferKey;
     string EncryptedWrappingKey;
     string EncryptedTransportKeys;
}

type CryptoParameters_T
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

type Signature_T
{
    CryptoParameters_T Parameters;
    string SignatureValue;
    CryptoAlgorithm_T Algorithm with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

pattern CryptoAlgorithm_T = XSAnyURI;

type EncryptedData_T
{
    optional CryptoParameters_T Parameters;
    string CipherValue;
    CryptoAlgorithm_T Algorithm with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type KeyDerivationMethod_T
{
    optional CryptoParameters_T Parameters;
    CryptoAlgorithm_T Algorithm with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type SigningCertificateSignature_T
{
    uint ParentWrappingId with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    Signature_T Signature;
}

type EncryptionCertificateSignature_T
{
    Signature_T Signature;
}

type TransportKey_T
{
    EncryptedData_T EncryptedData;
}

type Wrapping_T
{
    uint Id;
    Certificate_T SigningCertificate;
    SigningCertificateSignature_T SigningCertificateSignature;
    Certificate_T EncryptionCertificate;
    EncryptionCertificateSignature_T EncryptionCertificateSignature;
    TransportKey_T TransportKey;
}

type WrappingCollection_T
{
    array<Wrapping_T> Wrapping;
}

type TransportKeySignature_T
{
    KeyDerivationMethod_T KeyDerivationMethod;
    Signature_T Signature;
}

type GuardianSignature_T
{
    Signature_T Signature;
    uint WrappingId with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type Protector_T
{
    WrappingCollection_T Wrappings;
    TransportKeySignature_T TransportKeySignature;
    GuardianSignature_T GuardianSignature;
}

type GuardianInformation_T
{
    uint Version;
    Certificate_T EncryptionCertificate;
    Certificate_T SigningCertificate;
    Signature_T EncryptionCertificateSignature;
    Signature_T SigningCertificateSelfSignature;
}

type Metadata_T
{
    optional string ID with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    uint Version with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    GuardianInformation_T GuardianInformation;
    Signature_T Signature;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

type Error_T
{
    string Code;
    string Message;
}

typedef Certificate_T = string; // TODO: A certificate in the DER-encoded binary X.509 format
protocol Digest with 
Documentation
{
    ProtocolName = "Using Digest Authentication as a SASL Mechanism",
    ShortName = "Digest",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-DPSP", Version = "10.0", Date = "05/15/2014", ProgramName = ProgramName.WSPP},
        new Reference {Name = "RFC 2831"},
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = "07/24/2015"}
    ]
};

using Utility;

// Digest challenge
syntax DigestChallengeSyntax    = s2:(LWS* s21:DigestChallengeElement s22:(LWS* "," LWS* s221:DigestChallengeElement => s221)* => ([s21] + s22))
                                    =>  new DigestChallenge
                                        {
                                            DigestChallenge = ConvertArrayToMap(s2)
                                        };

type DigestChallenge
{
    map<string, any> DigestChallenge;

    string GetSummaryInfo()
    {
        string summaryLine = "Digest";
        if (DigestChallenge.Keys["username"])
        {
            summaryLine += (" with User: " + DigestChallenge["username"].ToString());
        }
        return summaryLine;
    }
}

syntax LWS                      = regex{(\r\n)?[\x20\t]+};

// Used by parsing HTTP Auth
map<string, any> ConvertArrayToMap(array<KeyValuePair> params)
{
    map<string, any> result = {};
    foreach (KeyValuePair pair in params)
    {
        result[pair.Key] = pair.Value;
    }
    return result;
}

syntax DigestChallengeElement   = realm | nonce | QopOptions | stale | maxbuf | charset | algorithm | CipherOpts | AuthParam;

syntax realm                    = s1:"realm" "=" s3:realmValue
                                    => new KeyValuePair{Key = s1, Value = s3};
syntax realmValue               = QuotedString;
syntax nonce                    = s1:"nonce" "=" s2:NonceValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax NonceValue               = QuotedString;
syntax QopOptions               = s1:"qop" "=" Quote s2:(LWS* s21:QopValue s22:(LWS* "," LWS* s221:QopValue => s221)*=> ([s21] + s22)) Quote
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax QopValue                 = "auth" | "auth-int" | "auth-conf" | Token;
syntax stale                    = s1:"stale" "=" s2:"true"
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax maxbuf                   = s1:"maxbuf" "=" s2:Digits
                                    => new KeyValuePair{Key = s1, Value = s2};
pattern Digits                  = regex{[0-9]+};
syntax charset                  = s1:"charset" "=" s2:"utf-8"
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax algorithm                = s1:"algorithm" "=" s2:"md5-sess"
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax CipherOpts               = s1:"cipher" "=" Quote s2:(LWS* s21:CipherValue s22:(LWS* "," LWS* s221:CipherValue => s221)*=> ([s21] + s22)) Quote
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax CipherValue              = "3des" | "des" | "rc4-40" | "rc4" | "rc4-56" | Token;

syntax AuthParam                = s1:Token ("=")? s2:(Token | QuotedString | "=")?
                                    => new KeyValuePair{Key = s1, Value = (s2.Count == 0 ? "" : s2[0])};

syntax QuotedString             = Quote s:(QDText | QuotedPair)* Quote => ConvertStringArrayToString(s);
pattern Quote                   = regex{\x22};
// BUG: Escape ", for QDText
syntax QDText                   = regex{[!\x23-\x7E \r\n]};
syntax QuotedPair               = regex{\x5C[\x00-\x7F]}; // "\\" Char

syntax Token                    = regex{[0-9a-zA-Z!#%&`*+._'|~\x5E\x2D\x24]+};

type KeyValuePair
{
    string Key;
    any Value;
}

// Digest Response
type DigestResponse
{
    map<string, any> DigestResponse;

    string GetSummaryInfo()
    {
        string summaryLine = "Digest";
        if (DigestResponse.Keys["username"])
        {
            summaryLine += (" with User: " + DigestResponse["username"].ToString());
        }
        return summaryLine;
    }

}
syntax DigestResponseSyntax     = s2:(LWS* s21:DigestResponseElement s22:(LWS* "," LWS* s221:DigestResponseElement => s221)* => ([s21] + s22))
                                    =>  new DigestResponse
                                        {
                                            DigestResponse = ConvertArrayToMap(s2)
                                        };

syntax DigestResponseElement    = s1:(username | realm | nonce | cnonce | NonceCount | qop | DigestUri | response | maxbuf | charset | cipher | authzid | AuthParam) => s1;
syntax username                 = s1:"username" "=" s2:UsernameValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax UsernameValue            = QuotedString;

syntax cnonce                   = s1:"cnonce" "=" s2:CnonceValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax CnonceValue              = QuotedString;

syntax NonceCount               = s1:"nc" "=" s2:NcValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax NcValue                  = s:regex{[0-9a-f]{8}} => s;

syntax qop                      = s1:"qop" "=" s2:QopValue
                                    => new KeyValuePair{Key = s1, Value = s2};

syntax DigestUri                = s1:"digest-uri" "=" Quote s2:DigestUriValue Quote
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax DigestUriValue           = s1:ServType s2:"/" s3:host s4:(s41:"/" s42:ServName  => (s41 + s42))? => (s1 + s2 + s3 + (s4.Count == 0 ? "" : s4[0]));
syntax ServType                 = regex{[A-Za-z]+};
syntax host                     = regex{[A-Za-z0-9\\-\\.]+};
syntax ServName                 = host;

syntax response                 = s1:"response" "=" s2:ResponseValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax ResponseValue            = regex{[0-9a-f]{32}};

syntax cipher                  = s1:"cipher" "=" s2:CipherValue
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax authzid                 = s1:"authzid" "=" Quote s2:AuthzidValue Quote
                                    => new KeyValuePair{Key = s1, Value = s2};
syntax AuthzidValue            = QuotedString;

// response-auth
syntax ResponseAuthSyntax        = s1:("rspauth" | "rsPauth") "=" s2:ResponseValue
                                    => new ResponseAuth
                                        {
                                            rspauth = new KeyValuePair{Key = s1, Value = s2}
                                        };

type ResponseAuth
{
    KeyValuePair rspauth;

    string GetSummaryInfo()
    {
        return "Digest";
    }

}

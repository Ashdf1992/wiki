protocol RAA with 
Documentation
{
    ProtocolName = "Remote Authorization API Protocol",
    ProtocolType = "rpc",
    ShortName = "RAA",
    DocumentName = "MS-RAA",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
    [
        new Reference{Name = "MS-RAA", Version = "1.0", Date = "10/25/2012", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary =
    [
        new Revision{Class = RevisionClass.Major, Version = "355026", Date = "10/10/2013"}
    ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;

endpoint AuthzrService over MSRPCE.Server provides authzr;

contract authzr
{
    accepts operation AuthzrFreeContext
    {
        in out AUTHZR_HANDLE ContextHandle with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 0};
    
    accepts operation AuthzrInitializeContextFromSid
    {
        in optional handle_t Binding;
        in DWORD Flags;
        in RPC_SID Sid with IDL{IndirectionLevel = 1};
        in LARGE_INTEGER pExpirationTime 
            with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in LUID Identifier;
        out AUTHZR_HANDLE ContextHandle with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 1};
    
    accepts operation AuthzrInitializeCompoundContext
    {
        in AUTHZR_HANDLE UserContextHandle;
        in AUTHZR_HANDLE DeviceContextHandle;
        out AUTHZR_HANDLE CompoundContextHandle with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 2};
    
    accepts operation AuthzrAccessCheck
    {
        in AUTHZR_HANDLE ContextHandle;
        in DWORD Flags;
        in AUTHZR_ACCESS_REQUEST pRequest with IDL{IndirectionLevel = 1};
        in DWORD SecurityDescriptorCount
            with IDL{Range = new RangePattern {Low = 1, High = 16}};
        in SR_SD pSecurityDescriptors
            with IDL{Size_is = [SecurityDescriptorCount], IndirectionLevel = 1};
        in out AUTHZR_ACCESS_REPLY pReply with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 3};
    
    accepts operation AuthzGetInformationFromContext
    {
        in AUTHZR_HANDLE ContextHandle;
        in AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass;
        out AUTHZR_CONTEXT_INFORMATION ppContextInformation
            with IDL{IndirectionLevel = 2};
        result DWORD ReturnValue;
    } with IDL{Opnum = 4};
    
    accepts operation AuthzrModifyClaims
    {
        in AUTHZR_HANDLE ContextHandle;
        in AUTHZ_CONTEXT_INFORMATION_CLASS ClaimClass;
        in DWORD OperationCount
            with IDL{Range = new RangePattern {Low = 1, High = 65535}};
        in AUTHZ_SECURITY_ATTRIBUTE_OPERATION pClaimOperations
            with IDL{Size_is = [OperationCount], IndirectionLevel = 1};
        in AUTHZR_SECURITY_ATTRIBUTES_INFORMATION pClaims
            with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 5};
    
    accepts operation AuthzrModifySids
    {
        in AUTHZR_HANDLE ContextHandle;
        in AUTHZ_CONTEXT_INFORMATION_CLASS SidClass;
        in DWORD OperationCount
            with IDL{Range = new RangePattern {Low = 1, High = 65535}};
        in AUTHZ_SID_OPERATION pSidOperations
            with IDL{Size_is = [OperationCount], IndirectionLevel = 1};
        in TOKEN_GROUPS pSids
            with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result DWORD ReturnValue;
    } with IDL{Opnum = 6};
} with IDL{
        Uuid = {0b1c2170-5732-4e0e-8cd3-d9b16f3b84d7},
        Version = "0.0",
        Pointer_default = PointerKind.FullPtr,
        Ms_union = true
    };

typedef AUTHZR_HANDLE = PVOID with IDL {Context_handle = true};

type AUTHZR_ACCESS_REQUEST
{
    ACCESS_MASK DesiredAccess;
    RPC_SID PrincipalSelfSid with IDL{IndirectionLevel = 1};
    DWORD ObjectTypeListLength
        with IDL{Range = new RangePattern {Low = 0, High = 256}};
    OBJECT_TYPE_LIST ObjectTypeList
        with IDL{Size_is = [ObjectTypeListLength], IndirectionLevel = 1};
}

type SR_SD
{
    DWORD dwLength with IDL{Range = new RangePattern {Low = 20, High = 131228}};
    BYTE pSrSd with IDL{Size_is = [dwLength], IndirectionLevel = 1};
}

type AUTHZR_ACCESS_REPLY
{
    DWORD ResultListLength
        with IDL{Range = new RangePattern {Low = 0, High = 256}};
    ACCESS_MASK GrantedAccessMask
        with IDL{Size_is = [ResultListLength], IndirectionLevel = 1};
    DWORD Error with IDL{Size_is = [ResultListLength], IndirectionLevel = 1};
}

pattern AUTHZ_CONTEXT_INFORMATION_CLASS = enum 
{
    AuthzContextInfoUserSid = 1,
    AuthzContextInfoGroupsSids = 2,
    AuthzContextInfoRestrictedSids = 3,
    ReservedEnumValue4 = 4,
    ReservedEnumValue5 = 5,
    ReservedEnumValue6 = 6,
    ReservedEnumValue7 = 7,
    ReservedEnumValue8 = 8,
    ReservedEnumValue9 = 9,
    ReservedEnumValue10 = 10,
    ReservedEnumValue11 = 11,
    AuthzContextInfoDeviceSids = 12,
    AuthzContextInfoUserClaims = 13,
    AuthzContextInfoDeviceClaims = 14,
    ReservedEnumValue15 = 15,
    ReservedEnumValue16 = 16
};

type AUTHZR_CONTEXT_INFORMATION
{
    USHORT ValueType;
    AUTHZR_CONTEXT_INFORMATION_UNION[ValueType] ContextInfoUnion
        with IDL{Switch_Is = ValueType};
}

type AUTHZR_CONTEXT_INFORMATION_UNION[USHORT tag]
{
    optional [|tag in {0x1}|] TOKEN_USER pTokenUser
        with IDL{Case = [0x1], IndirectionLevel = 1};
    optional [|tag in {0x2, 0x3, 0xC}|] TOKEN_GROUPS pTokenGroups
        with IDL{Case = [0x2, 0x3, 0xC], IndirectionLevel = 1};
    optional [|tag in {0xD, 0xE}|] AUTHZR_SECURITY_ATTRIBUTES_INFORMATION pTokenClaims
        with IDL{Case = [0xD, 0xE], IndirectionLevel = 1};
} with IDL{
    UnionKind = UnionKind.NonEncapsulated
};

type TOKEN_USER
{
    SID_AND_ATTRIBUTES User;
}

type SID_AND_ATTRIBUTES
{
    RPC_SID Sid with IDL{IndirectionLevel = 1};
    DWORD Attributes;
}

type TOKEN_GROUPS
{
    DWORD GroupCount;
    array<SID_AND_ATTRIBUTES> Groups
        with IDL{Size_is = [GroupCount], Dimensions = [null]};
}

type AUTHZR_SECURITY_ATTRIBUTES_INFORMATION
{
    USHORT Version;
    USHORT Reserved;
    ULONG AttributeCount
        with IDL{Range = new RangePattern {Low = 0, High = 1024}};
    AUTHZR_SECURITY_ATTRIBUTE_V1 Attributes
        with IDL{Size_is = [AttributeCount], IndirectionLevel = 1};
}

type AUTHZR_SECURITY_ATTRIBUTE_V1
{
    ULONG Length with IDL{Range = new RangePattern {Low = 2, High = 256}};
    string Value 
        with IDL{ Size_is = [Length], BaseStringType = TypeOf<WCHAR>(), IndirectionLevel = 1};
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount with IDL{Range = new RangePattern {Low = 0, High = 1024}};
    AUTHZR_SECURITY_ATTRIBUTE_V1_VALUE Values
        with IDL{Size_is = [ValueCount], IndirectionLevel = 1};
}

type AUTHZR_SECURITY_ATTRIBUTE_V1_VALUE
{
    USHORT ValueType;
    AUTHZR_SECURITY_ATTRIBUTE_UNION[ValueType] AttributeUnion
        with IDL{Switch_Is = ValueType};
}

type AUTHZR_SECURITY_ATTRIBUTE_UNION[USHORT tag]
{
    optional [|tag in {0x1}|] LONG64 Int64
        with IDL{Case = [0x1]};
    optional [|tag in {0x2, 0x6}|] ULONG64 Uint64
        with IDL{Case = [0x2, 0x6]};
    optional [|tag in {0x3}|] AUTHZR_SECURITY_ATTRIBUTE_STRING_VALUE String
        with IDL{Case = [0x3]};
} with IDL{
        UnionKind = UnionKind.NonEncapsulated
    };

type AUTHZR_SECURITY_ATTRIBUTE_STRING_VALUE
{
    ULONG Length with IDL{Range = new RangePattern {Low = 2, High = 32768}};
    string Value 
        with IDL{Size_is = [Length], BaseStringType = TypeOf<WCHAR>(), IndirectionLevel = 1};
}

pattern AUTHZ_SECURITY_ATTRIBUTE_OPERATION = enum 
{
    AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = 0,
    AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1,
    AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = 2,
    AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3,
    AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4
};

pattern AUTHZ_SID_OPERATION = enum 
{
    AUTHZ_SID_OPERATION_NONE = 0,
    AUTHZ_SID_OPERATION_REPLACE_ALL = 1,
    AUTHZ_SID_OPERATION_ADD = 2,
    AUTHZ_SID_OPERATION_DELETE = 3,
    AUTHZ_SID_OPERATION_REPLACE = 4
};

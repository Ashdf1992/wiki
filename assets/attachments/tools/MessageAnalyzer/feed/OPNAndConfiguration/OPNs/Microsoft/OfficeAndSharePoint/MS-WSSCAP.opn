protocol MSWSSCAP with
StreamEncodingDefaults{Encoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "Windows SharePoint Services Collaborative Application Protocol",
    ShortName = "MS-WSSCAP",
    DocumentName = "MS-WSSCAP",
    ProtocolType = "XML",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-WSSCAP", Version = "4.2"},
        ],
    RevisionSummary =    
        [
            new Revision{Class=RevisionClass.Major, Version="1.0.0", Date="05/12/2013"},
        ]
};

using Diagnostics;
using HTTP;
using Standard;
using Utility;

const string SharePointWSSCAPURL = "/_vti_bin/owssvr.dll";

const map<uint, string> CltreqResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Page not found."
};

const map<uint, string> DeleteResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> DeleteFieldResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> DeleteListResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> DeleteViewResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error because of an incorrect location parameter."
};

const map<uint, string> DialogViewResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error.",
    410 -> "Error."
};

const map<uint, string> DisplayResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> DisplayPostResponseStatusMap =
{
    200 -> "The protocol server called the DisplayPost method successfully.",
    302 -> "The protocol server MUST give this response only when the protocol client supplies a NextUsing parameter.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> ExportlistResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> GetProjSchemaResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> GetUsageBlobResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> HitCounterResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> ModListSettingsResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> MtgKeepResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> MtgMoveResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> NewFieldResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> NewListResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> NewViewResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> NewViewPageResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> NewWebPageResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> RenderViewResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> ReorderFieldsResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> SiteProvisionResponseStatusMap =
{
    200 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> UpdateProjectResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

const map<uint, string> UpdateViewResponseStatusMap =
{
    302 -> "Success.",
    401 -> "Security not validated. The credentials that were supplied by the user are not valid.",
    404 -> "Error."
};

//
// Note: Unless otherwise specified in TD, please keep the below map key as lower-case.
// That's because the actual WSSCAP traffic treat 'cmd' keyword as case-insensitive.
// Also, it seems OPN have no such Dictionary which can ignore the key case like c#
//
const map<string, map<uint, string>> ResponseStatusMap =
{
    "cltreq"           -> CltreqResponseStatusMap,
    "delete"           -> DeleteResponseStatusMap,
    "deletefield"      -> DeleteFieldResponseStatusMap,
    "deletelist"       -> DeleteListResponseStatusMap,
    "deleteview"       -> DeleteViewResponseStatusMap,
    "dialogview"       -> DialogViewResponseStatusMap,
    "display"          -> DisplayResponseStatusMap,
    "displaypost"      -> DisplayPostResponseStatusMap,
    "exportlist"       -> ExportlistResponseStatusMap,
    "getprojschema"    -> GetProjSchemaResponseStatusMap,
    "getusageblob"     -> GetUsageBlobResponseStatusMap,
    "hitcounter"       -> HitCounterResponseStatusMap,
    "modlistsettings"  -> ModListSettingsResponseStatusMap,
    "mtgkeep"          -> MtgKeepResponseStatusMap,
    "mtgmove"          -> MtgMoveResponseStatusMap,
    "newfield"         -> NewFieldResponseStatusMap,
    "newlist"          -> NewListResponseStatusMap,
    "newview"          -> NewViewResponseStatusMap,
    "newviewpage"      -> NewViewPageResponseStatusMap,
	"newwebpage"       -> NewWebPageResponseStatusMap,
    "renderview"       -> RenderViewResponseStatusMap,
    "reorderfields"    -> ReorderFieldsResponseStatusMap,
    "siteprovision"    -> SiteProvisionResponseStatusMap,
    "updateproject"    -> UpdateProjectResponseStatusMap,
    "updateview"       -> UpdateViewResponseStatusMap
};

pattern MSWSSCAPHeadersType = map<string, HTTP.HttpHeaderFieldValueType>;

syntax PlayloadTextQuery = cmd:CommandSpec s2:("&" s1:ParameterSpec => s1)*
            => new PlayloadMethodType
            {
                Method = cmd,
                Parameters = s2 as optional array<PlayloadParameterType>
            };

syntax ParameterSpec = s1:ParameterName "=" s2:ParameterValue
                       => new PlayloadParameterType
                        {
                            Name = s1,
                            Value = s2
                        };
                        
syntax CommandSpec = "Cmd=" s:CommandName => s;
syntax CommandName = s:(Alpha)+ => ConvertStringArrayToString(s);

syntax ParameterName = s:(Alpha)+ => ConvertStringArrayToString(s);
syntax ParameterValue = s:(VChar)+ => ConvertStringArrayToString(s);

syntax Alpha = regex{[a-zA-Z]};
syntax VChar = regex{[\x20-\x25\x27-\x7e]}; // exclude the '&'

endpoint Server over HTTP.Server accepts WSSCAPContract.Request issues WSSCAPContract.Response;
client endpoint Client connected to Server;

autostart actor ActorOverHttpServer(HTTP.Server node)
{
    optional PlayloadMethodType RequestMethod;
    
    process node accepts httpReq:HttpContract.Request where IsMSWSSCAPUri(httpReq.Uri)
        && (httpReq.Method == "POST" || httpReq.Method == "OPTIONS")
    {
        WSSCAPContract.Request msg = MSWSSCAPRequestDecoder(httpReq);
        RequestMethod = msg.WSSCAPMethod;
        dispatch (endpoint Server over node) accepts msg;
    }
    
    process node issues httpRes:HttpContract.Response where IsMSWSSCAPUri(httpRes#Uri)
    {
         WSSCAPContract.Response msg = MSWSSCAPResponseDecoder(httpRes, RequestMethod);
         dispatch (endpoint Server over node) issues msg;
    }
}

contract WSSCAPContract
{
    message Request
    {
        MSWSSCAPHeadersType Headers;
        PlayloadMethodType WSSCAPMethod;
        binary Payload with MimeDescription{
            Format = (("Content-Type" in Headers) && (Headers["Content-Type"] is HeaderFieldType))
                ? (Headers["Content-Type"] as HeaderFieldType).Value : ""};
                
        override string ToString()
        {
            return WSSCAPMethod.Method + " Request";
        }
    }
    
    message Response
    {
        uint StatusCode;
        string ReasonPhrase;
        MSWSSCAPHeadersType Headers;
        PlayloadMethodType WSSCAPMethod = new PlayloadMethodType();
        binary Payload with MimeDescription{
            Format = (("Content-Type" in Headers) && (Headers["Content-Type"] is HeaderFieldType))
                ? (Headers["Content-Type"] as HeaderFieldType).Value : ""};
        
        override string ToString()
        {
            // Only touch the failed HTTP response.
            if (this.StatusCode >= 400)
                return Format("{0} Response ({1}, {2})", WSSCAPMethod.Method, this.StatusCode, this.ReasonPhrase);
            
            return WSSCAPMethod.Method + " Response";
        }
    }
}

type PlayloadParameterType
{
    string Name;
    string Value;
}

type PlayloadMethodType
{
    string Method;
    optional array<PlayloadParameterType> Parameters;
}

MSWSSCAPHeadersType HeadersDecoder(HTTP.HttpHeadersType httpHeaders)
{
    map<string, HTTP.HttpHeaderFieldValueType> headers = {};
    
    if ("Content-Type" in httpHeaders)
        headers["Content-Type"] = httpHeaders["Content-Type"] as HTTP.HttpHeaderFieldValueType;
    
    if ("Content-Length" in httpHeaders)
        headers["Content-Length"] = httpHeaders["Content-Length"] as HTTP.HttpHeaderFieldValueType;
        
    if ("MicrosoftSharePointTeamServices" in httpHeaders)
        headers["MicrosoftSharePointTeamServices"] = httpHeaders["MicrosoftSharePointTeamServices"] as HTTP.HttpHeaderFieldValueType;
            
    if ("User-Agent" in httpHeaders)
        headers["User-Agent"] = httpHeaders["User-Agent"]as HTTP.HttpHeaderFieldValueType;
        
    return headers;    
}

WSSCAPContract.Request MSWSSCAPRequestDecoder(HTTP.HttpContract.Request httpRequest)
{
    WSSCAPContract.Request request = new WSSCAPContract.Request();
    optional PlayloadMethodType queryValue;

    // Headers
    request.Headers = HeadersDecoder(httpRequest.Headers);
    
    // Try to decode Method from URL or Payload
    bool methodInQuery = false;
    if (httpRequest.Uri.Query is query:map<string, string> && "Cmd" in query)
    {
        queryValue = new PlayloadMethodType {Method = query["Cmd"]};
        methodInQuery = true;
    }
    else
        queryValue = PlayloadTextQuery(httpRequest.Payload);
    
    if (queryValue == nothing)
        throw "MS-WSSCAP: Failed to decode MS-WSSCAP incomplete message due to invalid Method."; 
    
    // WSSCAPMethod
    request.WSSCAPMethod = queryValue as PlayloadMethodType;
    // Payload
    request.Payload = httpRequest.Payload;

     // Set SourceData 
    if (httpRequest.Payload != null && httpRequest.Payload.Count > 0)
    {
        request.SourceData = httpRequest.Payload;
        if (!methodInQuery)
            request.AssignFieldEncodingInfo("WSSCAPMethod", 0, request.Payload.Count * 8);
        request.AssignFieldEncodingInfo("Payload", 0, request.Payload.Count * 8);
    }
    
    return request;
}

WSSCAPContract.Response MSWSSCAPResponseDecoder(HTTP.HttpContract.Response httpResponse, optional PlayloadMethodType RequestMethod)
{
    WSSCAPContract.Response response = new WSSCAPContract.Response();

    // Headers
    response.Headers = HeadersDecoder(httpResponse.Headers);
    // StatusCode
    response.StatusCode = httpResponse.StatusCode;
    // ReasonPhrase
    response.ReasonPhrase = httpResponse.ReasonPhrase;
    // Payload
    response.Payload = httpResponse.Payload;

    // Method
    if(RequestMethod == nothing)
        throw "MS-WSSCAP: Failed to decode MS-WSSCAP incomplete message due to invalid Method."; 
        
    response.WSSCAPMethod.Method = (RequestMethod as PlayloadMethodType).Method;
    
    // Override the response status reason with the specific description in [MS-WSSCAP]
    var lowerCaseMethod = response.WSSCAPMethod.Method.ToLower();
    if (lowerCaseMethod in ResponseStatusMap && response.StatusCode in ResponseStatusMap[lowerCaseMethod]) {
        response.ReasonPhrase = ResponseStatusMap[lowerCaseMethod][response.StatusCode];
    }
    // Set SourceData 
    if (httpResponse.Payload != null && httpResponse.Payload.Count > 0)
    {
        response.SourceData = httpResponse.Payload;
        response.AssignFieldEncodingInfo("Payload", 0, response.Payload.Count * 8);
    }

    return response;
}

bool IsMSWSSCAPUri(optional UriType uri)
{
    if (uri == nothing)
        return false; 
    
    UriType tmpUriType = uri as UriType;
    
    if (tmpUriType.AbsPath == nothing)
        return false;
        
    return (tmpUriType.AbsPath as string).EndsWith(SharePointWSSCAPURL, false);
}

bool EndsWith(this string source, string key, bool ignoreCase)
{
    if (null == source || null == key || 0 == source.Count || 0 == key.Count)
        return false;
        
    if (source.Count < key.Count)
        return false;
    
    if (ignoreCase)
        return source.Segment(source.Count - key.Count).ToLower() == key.ToLower();
       
    return source.Segment(source.Count - key.Count) == key;
}

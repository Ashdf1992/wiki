module XMLDSig with
Documentation
{
    ProtocolName = "XML Signature Syntax and Processing",
    ShortName = "XMLDSig",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "XMLDSig", Version = "20080610", Link = "http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/"}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "363307", Date = "05/05/2014"}
    ]
};

using XSD;
using Utility;

//----------------------------------------- Namespace -----------------------------------------//
// The prefix for this namespace name is "ds:"
const string DsNamespace = "http://www.w3.org/2000/09/xmldsig#";

//----------------------------------------- Types ---------------------------------------------//
// 4.1 The Signature element
type SignatureType
{
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    SignedInfoType SignedInfo with XmlEncoding{Name = "SignedInfo", Namespace = DsNamespace};
    SignatureValueType SignatureValue with XmlEncoding{Name = "SignatureValue", Namespace = DsNamespace};
    optional KeyInfoType KeyInfo with XmlEncoding{Name = "KeyInfo", Namespace = DsNamespace};
    optional array<ObjectType> Object with XmlEncoding{Name = "Object", Namespace = DsNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.2 The SignatureValue Element
type SignatureValueType
{
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    Base64Binary Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Namespace = DsNamespace};

// 4.3 The SignedInfo Element
type SignedInfoType
{
    CanonicalizationMethodType CanonicalizationMethod with XmlEncoding{Name = "CanonicalizationMethod", Namespace = DsNamespace};
    SignatureMethodType SignatureMethod with XmlEncoding{Name = "SignatureMethod", Namespace = DsNamespace};
    array<ReferenceType> Reference with XmlEncoding{Name = "Reference", Namespace = DsNamespace};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.3.1 The CanonicalizationMethod Element
type CanonicalizationMethodType
{
    XSAnyURI Algorithm with XmlEncoding{Name = "Algorithm", Kind = XmlKind.Attribute};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.3.2 The SignatureMethod Element
type SignatureMethodType
{
    optional HMACOutputLengthType HMACOutputLength with XmlEncoding{Name = "HMACOutputLength", Namespace = DsNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    XSAnyURI Algorithm with XmlEncoding{Name = "Algorithm", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.3.3 The Reference Element
type ReferenceType
{
    optional TransformsType Transforms with XmlEncoding{Name = "Transforms", Namespace = DsNamespace};
    DigestMethodType DigestMethod with XmlEncoding{Name = "DigestMethod", Namespace = DsNamespace};
    DigestValueType DigestValue with XmlEncoding{Name = "DigestValue", Namespace = DsNamespace};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    optional XSAnyURI URI with XmlEncoding{Name = "URI", Kind = XmlKind.Attribute};
    optional XSAnyURI Type with XmlEncoding{Name = "Type", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.3.3.4 The Transforms Element
type TransformsType : IComparable<TransformsType>
{
    array<TransformType> Transform with XmlEncoding{Name = "Transform", Namespace = DsNamespace};
    
    int CompareTo(TransformsType other)
    {
        if (other == null)
        {
            return 1;
        }
        
        if (this.Transform.Count != other.Transform.Count)
        {
            return 1;
        }
        
        array<TransformType> sortedThisArray = this.Transform.Sort(TransformTypeComparison);
        array<TransformType> sortedOtherArray = other.Transform.Sort(TransformTypeComparison);
        for (int index = 0; index < this.Transform.Count; index++)
        {
            int cmpRet = TransformTypeComparison(sortedThisArray[index], sortedOtherArray[index]);
            if (cmpRet != 0)
            {
                return cmpRet;
            }
        }
        return 0;
    }
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

type TransformType : IComparable<TransformType>
{
    optional string XPath with XmlEncoding{Name = "XPath"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    XSAnyURI Algorithm with XmlEncoding{Name = "Algorithm", Kind = XmlKind.Attribute};
    
    override string ToString()
    {
        if (XPath != nothing)
        {
            return "XPath: " + (XPath as string) + ", Algorithm: " + Algorithm;
        }
        return "Algorithm: " + Algorithm;
    }
    
    int CompareTo(TransformType other)
    {
        if (other == null)
        {
            return 1;
        }
        
        return TransformTypeComparison(this, other);
    }
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = DsNamespace};

int TransformTypeComparison(TransformType t1, TransformType t2)
{
    string t1Str = t1.ToString();
    string t2Str = t2.ToString();
    if (t1Str > t2Str)
    {
        return 1;
    }
    else if (t1Str == t2Str)
    {
        return 0;
    }
    return -1;
}

// 4.3.3.5 The DigestMethod Element
type DigestMethodType
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    XSAnyURI Algorithm with XmlEncoding{Name = "Algorithm", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.3.3.6 The DigestValue Element
type DigestValueType
{
    Base64Binary Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Namespace = DsNamespace};

// 4.4 The KeyInfo Element
type KeyInfoType : IComparable<KeyInfoType>
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional KeyNameType KeyName with XmlEncoding{Name = "KeyName", Namespace = DsNamespace};
    optional KeyValueType KeyValue with XmlEncoding{Name = "KeyValue", Namespace = DsNamespace};
    optional RetrievalMethodType RetrievalMethod with XmlEncoding{Name = "RetrievalMethod", Namespace = DsNamespace};
    optional X509DataType X509Data with XmlEncoding{Name = "X509Data", Namespace = DsNamespace};
    optional PGPDataType PGPData with XmlEncoding{Name = "PGPData", Namespace = DsNamespace};
    optional PGPDataType SPKIData with XmlEncoding{Name = "SPKIData", Namespace = DsNamespace};
    optional MgmtDataType MgmtData with XmlEncoding{Name = "MgmtData", Namespace = DsNamespace};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    optional array<any> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    
    int CompareTo(KeyInfoType other)
    {
        if (other == null)
        {
            return 1;
        }
        if (KeyNameEqual(other) && KeyValueEqual(other) && RetrievalMethodEqual(other) && X509DataEqual(other) &&
            PGPDataEqual(other) && SPKIDataDataEqual(other) && MgmtDataEqual(other) &&
            ((Id == nothing && other.Id == nothing) || (this.Id is thisId:XSDId && other.Id is otherId:XSDId && thisId == otherId)))
        {
            return 0;
        }
        return 1;
    }
    
    bool KeyNameEqual(KeyInfoType other)
    {
        return (this.KeyName == nothing && other.KeyName == nothing) ||
            (this.KeyName is thisKeyName:KeyNameType && other.KeyName is otherKeyName:KeyNameType && thisKeyName.ToString() == otherKeyName.ToString());
    }
    
    bool KeyValueEqual(KeyInfoType other)
    {
        return (this.KeyValue == nothing && other.KeyValue == nothing) ||
            (this.KeyValue is thisKeyValue:KeyValueType && other.KeyValue is otherKeyValue:KeyValueType && thisKeyValue.CompareTo(otherKeyValue) == 0);
    }

    bool RetrievalMethodEqual(KeyInfoType other)
    {
        return (this.RetrievalMethod == nothing && other.RetrievalMethod == nothing) ||
            (this.RetrievalMethod is thisRetrievalMethod:RetrievalMethodType && other.RetrievalMethod is otherRetrievalMethod:RetrievalMethodType &&
            thisRetrievalMethod.CompareTo(otherRetrievalMethod) == 0);
    }
    
    bool X509DataEqual(KeyInfoType other)
    {
        return (this.X509Data == nothing && other.X509Data == nothing) ||
            (this.X509Data is thisX509Data:X509DataType && other.X509Data is otherX509Data:X509DataType && thisX509Data.CompareTo(otherX509Data) == 0);
    }
    
    bool PGPDataEqual(KeyInfoType other)
    {
        return (this.PGPData == nothing && other.PGPData == nothing) ||
            (this.PGPData is thisPGPData:PGPDataType && other.PGPData is otherPGPData:PGPDataType && thisPGPData.CompareTo(otherPGPData) == 0);
    }
    
    bool SPKIDataDataEqual(KeyInfoType other)
    {
        return (this.SPKIData == nothing && other.SPKIData == nothing) ||
            (this.SPKIData is thisSPKIData:PGPDataType && other.SPKIData is otherSPKIData:PGPDataType && thisSPKIData.CompareTo(otherSPKIData) == 0);
    }
    
    bool MgmtDataEqual(KeyInfoType other)
    {
        return (this.MgmtData == nothing && other.MgmtData == nothing) ||
            (this.MgmtData is thisMgmtData:MgmtDataType && other.MgmtData is otherMgmtData:MgmtDataType && thisMgmtData.ToString() == otherMgmtData.ToString());
    }
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 4.4.1 The KeyName Element
type KeyNameType
{
    string Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Namespace = DsNamespace};

// 4.4.2 The KeyValue Element
type KeyValueType : IComparable<KeyValueType>
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional DSAKeyValueType DSAKeyValue with XmlEncoding{Name = "DSAKeyValue", Namespace = DsNamespace};
    optional RSAKeyValueType RSAKeyValue with XmlEncoding{Name = "RSAKeyValue", Namespace = DsNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    
    int CompareTo(KeyValueType other)
    {
        if (other == null)
        {
            return 1;
        }
        
        if ((this.DSAKeyValue == nothing && other.DSAKeyValue == nothing) ||
                (this.DSAKeyValue is thisDSAKeyValue:DSAKeyValueType && other.DSAKeyValue is otherDSAKeyValue:DSAKeyValueType &&
                thisDSAKeyValue.ToString() == otherDSAKeyValue.ToString()) &&
            (this.RSAKeyValue == nothing && other.RSAKeyValue == nothing) ||
                (this.RSAKeyValue is thisRSAKeyValue:RSAKeyValueType && other.RSAKeyValue is otherRSAKeyValue:RSAKeyValueType &&
                thisRSAKeyValue.ToString() ==otherRSAKeyValue.ToString())
            )
        {
            return 0;
        }
        return 1;
    }
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = DsNamespace};

// 4.4.2.1 The DSAKeyValue Element
type DSAKeyValueType
{
    optional CryptoBinary P with XmlEncoding{Name = "P", Namespace = DsNamespace};
    optional CryptoBinary Q with XmlEncoding{Name = "Q", Namespace = DsNamespace};
    CryptoBinary G with XmlEncoding{Name = "G", Namespace = DsNamespace};
    CryptoBinary Y with XmlEncoding{Name = "P", Namespace = DsNamespace};
    CryptoBinary J with XmlEncoding{Name = "J", Namespace = DsNamespace};
    optional CryptoBinary Seed with XmlEncoding{Name = "Seed", Namespace = DsNamespace};
    optional CryptoBinary PgenCounter with XmlEncoding{Name = "PgenCounter", Namespace = DsNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.4.2.2 The RSAKeyValue Element
type RSAKeyValueType
{
    CryptoBinary Modules with XmlEncoding{Name = "Modules", Namespace = DsNamespace};
    CryptoBinary Exponent with XmlEncoding{Name = "Exponent", Namespace = DsNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 4.4.3 The RetrievalMethod Element
type RetrievalMethodType : IComparable<RetrievalMethodType>
{
    optional TransformsType Transforms with XmlEncoding{Name = "Transforms", Namespace = DsNamespace};
    XSAnyURI URI with XmlEncoding{Name = "URI", Kind = XmlKind.Attribute};
    optional XSAnyURI Type with XmlEncoding{Name = "Type", Kind = XmlKind.Attribute};
    
    int CompareTo(RetrievalMethodType other)
    {
        if (other == null)
        {
            return 1;
        }
        
        if ((this.Transforms == nothing && other.Transforms == nothing) ||
                (this.Transforms is thisTransforms:TransformsType && other.Transforms is otherTransforms:TransformsType && 
                thisTransforms.CompareTo(otherTransforms) == 0) &&
            this.URI == other.URI && this.Type == other.Type)
        {
            return 0;
        }
        return 1;
    }
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace}; 

// 4.4.4 The X509Data Element
type X509DataType : IComparable<X509DataType>
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional X509IssuerSerialType X509IssuerSerial with XmlEncoding{Name = "X509IssuerSerial", Namespace = DsNamespace};
    optional Base64Binary X509SKI with XmlEncoding{Name = "X509SKI", Namespace = DsNamespace};
    optional string X509SubjectName with XmlEncoding{Name = "X509SubjectName", Namespace = DsNamespace};
    optional Base64Binary X509Certificate with XmlEncoding{Name = "X509Certificate", Namespace = DsNamespace};
    optional Base64Binary X509CRL with XmlEncoding{Name = "X509CRL", Namespace = DsNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    
    int CompareTo(X509DataType other)
    {
        if (other == null)
        {
            return 1;
        }
        if (X509IssuerSerialEquals(other) && this.X509SKI == other.X509SKI && this.X509SubjectName == other.X509SubjectName
            && this.X509Certificate == other.X509Certificate && this.X509CRL == other.X509CRL)
        {
            return 0;
        }
        return 1;
    }
    
    bool X509IssuerSerialEquals(X509DataType other)
    {
        return (this.X509IssuerSerial == nothing && other.X509IssuerSerial == nothing)
            || this.X509IssuerSerial.ToString() == other.X509IssuerSerial.ToString();
    }
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = DsNamespace}; 

type X509IssuerSerialType
{
    string X509IssuerName with XmlEncoding{Name = "X509IssuerName"};
    XSInt X509SerialNumber with XmlEncoding{Name = "X509SerialNumber"};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace}; 

// 4.4.5 The PGPData Element
type PGPDataType : IComparable<PGPDataType>
{
    optional Base64Binary PGPKeyID with XmlEncoding{Name = "PGPKeyID"};
    optional Base64Binary PGPKeyPacket with XmlEncoding{Name = "PGPKeyPacket"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    
    int CompareTo(PGPDataType other)
    {
        if (other == null)
        {
            return 1;
        }
        if (this.PGPKeyID == other.PGPKeyID && this.PGPKeyPacket == other.PGPKeyPacket)
        {
            return 0;
        }
        return 1;
    }
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace}; 

// 4.4.6 The SPKIData Element
type SPKIDataType
{
    optional Base64Binary SPKISexp with XmlEncoding{Name = "SPKISexp"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace}; 

// 4.4.7 The MgmtData Element
type MgmtDataType
{
    string Content with XmlEncoding{Kind = XmlKind.Text};
    
    override string ToString()
    {
        return Content;
    }
};

// 4.5 The Object Element
type ObjectType
{
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    optional string MimeType with XmlEncoding{Name = "MimeType", Kind = XmlKind.Attribute};
    optional XSAnyURI Encoding with XmlEncoding{Name = "Encoding", Kind = XmlKind.Attribute};
    
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = DsNamespace};

// 6.3.1 HMAC
type HMACOutputLengthType
{
    int Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Namespace = DsNamespace};

protocol MSPRES with
Documentation
{
    ProtocolName = "Presence Protocol Specification",
    ShortName = "MS-PRES",
    DocumentName = "MS-PRES",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-PRES", Version = "2.03"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server 
	accepts RequestMessage issues ResponseMessage
	accepts NotifyMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{		
    process node accepts sipMsg:SIP.Request
    {   	
		RequestMessage msg;

		switch (GetPresReqMsgType(sipMsg))
		{
			case ("ActiveDirectorySearchRequestMessage") =>
			{
				msg = new ActiveDirectorySearchRequestMessage(sipMsg);
			}
			case ("PresencePublishRequestMessage") =>
			{
				msg = new PresencePublishRequestMessage(sipMsg);
			}
			case ("SetContainerMemberRequestMessage") =>
			{
				msg = new SetContainerMemberRequestMessage(sipMsg);
			}
			case ("SetSubscribersRequestMessage") =>
			{
				msg = new SetSubscribersRequestMessage(sipMsg);
			}
			case ("SetDelegateRequestMessage") =>
			{
				msg = new SetDelegateRequestMessage(sipMsg);
			}
			case ("SelfSubscribeRequestMessage") =>
			{
				msg = new SelfSubscribeRequestMessage(sipMsg);
			}
			case ("CategorySubscribeRequestMessage") =>
			{
				msg = new CategorySubscribeRequestMessage(sipMsg);
			}
			case ("PIDF/RPIDSubscriptionRequestMessage") =>
			{
				msg = new PIDFOrRPIDSubscriptionRequestMessage(sipMsg);
			}
			case ("MSRTCSubscriptionRequestMessage") =>
			{
				msg = new MSRTCSubscriptionRequestMessage(sipMsg);
			}
			default => 
			{
				reject;
			}
		}		
		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Request
    {   
		NotifyMessage notifyMsg;

		switch (GetPresReqMsgType(sipMsg))
		{
			case ("SelfSubscribeNotifyMessage") =>
			{
				notifyMsg = new SelfSubscribeNotifyMessage(sipMsg);
			}
			case ("CategorySubscribeNotifyMessage") =>
			{
				notifyMsg = new CategorySubscribeNotifyMessage(sipMsg);
			}
			case ("PIDF/RPIDSubscriptionNotifyMessage") =>
			{
				notifyMsg = new PIDFOrRPIDSubscriptionNotifyMessage(sipMsg);
			}
			case ("MSRTCSubscriptionNotifyMessage") =>
			{
				notifyMsg = new MSRTCSubscriptionNotifyMessage(sipMsg);
			}
			default => 
			{
				reject;
			}			
		}
		dispatch (endpoint Server over node) accepts notifyMsg;
	}

	process node issues sipMsg:SIP.Response
    {       	
		ResponseMessage msg;
		switch (GetPresRspMsgType(sipMsg))
		{
			case ("ActiveDirectorySearchResponseMessage") =>
			{
				msg = new ActiveDirectorySearchResponseMessage(sipMsg);
			}
			case ("PresencePublishResponseMessage") =>
			{
				msg = new PresencePublishResponseMessage(sipMsg);
			}			
			case ("SetDelegateResponseMessage") =>
			{
				msg = new SetDelegateResponseMessage(sipMsg);
			}			
			case ("CategorySubscribeResponseMessage") =>
			{
				msg = new CategorySubscribeResponseMessage(sipMsg);
			}			
			case ("MSRTCSubscriptionResponseMessage") =>
			{
				msg = new MSRTCSubscriptionResponseMessage(sipMsg);
			}
			case ("VersionConflictResponseMessage") =>
			{
				msg = new VersionConflictResponseMessage(sipMsg);
			}
			default => 
			{
				reject;
			}
		}
		dispatch (endpoint Server over node) issues msg;
    } 
}

string GetPresReqMsgType(SIP.Request sipMsg)
{
	if ((sipMsg.Body == nothing) || (sipMsg.Body == null))
	{
		return null;
	}
	
	string contentType =  TryGetHeaderValue("Content-Type", sipMsg.Headers);

	if (contentType == null)
	{
		return null;
	}

	if (sipMsg.Method == "SERVICE")
	{
		switch (contentType)
		{
			case ("application/SOAP+xml") => 
			{
				return "ActiveDirectorySearchRequestMessage";
			}
			case ("application/msrtc-category-publish+xml") => 
			{
				return "PresencePublishRequestMessage";
			}
			case ("application/msrtc-setcontainermembers+xml") => 
			{
				return "SetContainerMemberRequestMessage";
			}
			case ("application/msrtc-presence-setsubscriber+xml") => 
			{
				return "SetSubscribersRequestMessage";
			}
			case ("application/msrtc-setdelegate +xml")	=> 
			{
				return "SetDelegateRequestMessage";
			}
			default	=> 
			{
				return null;
			}
		}
	}
	else if (sipMsg.Method == "SUBSCRIBE")
	{
		string eventType = TryGetHeaderValue("Event", sipMsg.Headers);
		array<string> acceptHeaderValues = TryGetHeaderValues("Accept", sipMsg.Headers);
			
		if ((eventType == "vnd-microsoft-roaming-self")	&& 
			(contentType == "application/vnd-microsoft-roaming-self+xml") && 
			("application/vnd-microsoft-roaming-self+xml" in acceptHeaderValues))
		{
			return "SelfSubscribeRequestMessage";
		}

		if (eventType == "presence")
		{
			array<string> requireHeaderValues = TryGetHeaderValues("Require", sipMsg.Headers);
			array<string> supportedHeaderValues = TryGetHeaderValues("Supported", sipMsg.Headers);

			if ((contentType == "application/msrtc-adrl-categorylist+xml") && 
				("application/msrtc-event-categories+xml" in acceptHeaderValues) && 
				("application/rlmi+xml" in acceptHeaderValues) && 
				("multipart/related" in acceptHeaderValues)	&& 
				("adhoclist" in requireHeaderValues) && 
				("categoryList" in requireHeaderValues) && 
				("eventlist" in supportedHeaderValues))
			{
				return "CategorySubscribeRequestMessage";
			}
			
			if (("application/pidf+xml" in acceptHeaderValues) && 
				(!ContainsHeaders(["Require"], sipMsg.Headers)) && 
				(ContainsHeaders(["Contact"], sipMsg.Headers)))
			{
				return "PIDF/RPIDSubscriptionRequestMessage";
			}

			if (("text/xml+msrtc.pidf" in acceptHeaderValues) && 
				(ContainsHeaders(["Contact"], sipMsg.Headers)))
			{
				return "MSRTCSubscriptionRequestMessage";
			}
			else
			{
				return null;
			}
		}
		else
		{
			return null;
		}
	} 
	else if (sipMsg.Method == "NOTIFY" || sipMsg.Method == "BENOTIFY")
	{
		switch (contentType)
		{
			case ("application/vnd-microsoft-roaming-self+xml")	=> 
			{
				return "SelfSubscribeNotifyMessage";
			}
			case ("application/msrtc-event-categories+xml")	=> 
			{
				return "CategorySubscribeNotifyMessage";
			}
			case ("text/xml+pidf") => 
			{
				return "PIDF/RPIDSubscriptionNotifyMessage";
			}
			case ("text/xml+msrtc.pidf") => 
			{
				return "MSRTCSubscriptionNotifyMessage";
			}
			default => 
			{
				return null;
			}
		}
	}
	else
	{
		return null;
	}
}

string GetPresRspMsgType(SIP.Response sipMsg)
{
	if ((sipMsg.Body == nothing) || (sipMsg.Body == null))
	{
		return null;
	}
	else
	{
		string contentType =  TryGetHeaderValue("Content-Type", sipMsg.Headers);
		string cSeq= TryGetHeaderValue("CSeq", sipMsg.Headers);

		if ((contentType != null) && (cSeq != null))
		{
			if (cSeq == "SERVICE")
			{
				switch (contentType)
				{
					case ("application/SOAP+xml") => 
					{
						return "ActiveDirectorySearchResponseMessage";
					}
					case ("application/vnd-microsoft-roaming-self+xml")	=>
					{
						xml body = BuildXml(sipMsg.Body as binary);

						if (body != null)
						{
							array<xml> categoriesNodes = body select xpath{//roamingData/categories/category};
							array<xml> delegatesNodes = body select xpath{//roamingData/delegates/delegate};

							if (categoriesNodes != null && categoriesNodes.Count != 0)
							{
								return "PresencePublishResponseMessage";
							}

							if (delegatesNodes != null && delegatesNodes.Count != 0)
							{
								return "SetDelegateResponseMessage";
							}
						}					
					} 
					case ("application/msrtc-fault+xml") => 
					{
						return "VersionConflictResponseMessage";
					}
					default => 
					{
						return null;
					}
				}
			}
			else if (cSeq == "SUBSCRIBE")
			{
				string eventType = TryGetHeaderValue("Event", sipMsg.Headers);
				
				if ((eventType == "vnd-microsoft-roaming-self") && (contentType == "application/vnd-microsoft-roaming-self+xml"))
				{
					return "SelfSubscribeResponseMessage";
				}

				if (eventType == "presence")
				{				
					if (contentType == "multipart/related; type=\"application/rlmi+xml\";start=resourceList;")
					{	
						return "CategorySubscribeResponseMessage";
					}
					else if (contentType == "text/xml+msrtc.pidf")
					{
						return "MSRTCSubscriptionResponseMessage";
					}				
				}
			} 
		}
	}
	return null;
}

message RequestMessage : SipRequestMessage
{	
	RequestMessage(SIP.Request sipReqMsg)
	{
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq", "Content-Type"], this);
	}

	override string ToString()
	{ 
		return "Request";
	}
}

message ActiveDirectorySearchRequestMessage : RequestMessage
{
	ActiveDirectorySearchRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "Active Directory Search Request";
	}
}

message PresencePublishRequestMessage : RequestMessage
{
	PresencePublishRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "Presence Publish Request";
	}
}

message SetContainerMemberRequestMessage : RequestMessage
{
	SetContainerMemberRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "SetContainerMember Request";
	}
}

message SetSubscribersRequestMessage : RequestMessage
{
	SetSubscribersRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "SetSubscribers Request";
	}
}

message SetDelegateRequestMessage : RequestMessage
{
	SetDelegateRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "SetDelegate Request";
	}
}

message SelfSubscribeRequestMessage : RequestMessage
{
	SelfSubscribeRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Accept", "Supported", "Proxy-Require"]);
	}

	override string ToString()
	{
		return "Self Subscribe Request";
	}
}

message CategorySubscribeRequestMessage : RequestMessage
{
	CategorySubscribeRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Accept", "Supported", "Proxy-Require", "Require"]);
	}

	override string ToString()
	{
		return "Category Subscribe Request";
	}
}

message PIDFOrRPIDSubscriptionRequestMessage : RequestMessage
{
	PIDFOrRPIDSubscriptionRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Accept", "Supported", "Proxy-Require", "Require", "Contact"]);
	}

	override string ToString()
	{
		return "PIDF/RPID Subscription Request";
	}
}

message MSRTCSubscriptionRequestMessage : RequestMessage
{
	MSRTCSubscriptionRequestMessage(SIP.Request sipReqMsg)
	{
		base.RequestMessage(sipReqMsg);
		this.Headers += GetHeaders(sipReqMsg.Headers, ["Accept", "Supported", "Proxy-Require", "Require", "Contact"]);
	}

	override string ToString()
	{
		return "MSRTC Subscription Request";
	}
}

message ResponseMessage : SipResponseMessage
{	
	ResponseMessage(SIP.Response sipRspMsg)
	{
		InitializeSIPRsp(sipRspMsg, ["From", "To", "CSeq", "Content-Type"], this);
	}
	
	override string ToString()
	{ 
		return Format("Active Directory Search Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message ActiveDirectorySearchResponseMessage : ResponseMessage
{
	ActiveDirectorySearchResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
	}

	override string ToString()
	{
		return Format("Active Directory Search Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message PresencePublishResponseMessage : ResponseMessage
{
	PresencePublishResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
	}

	override string ToString()
	{
		return Format("Presence Publish Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message SetDelegateResponseMessage : ResponseMessage
{
	SetDelegateResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
	}

	override string ToString()
	{
		return Format("SetDelegate Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message CategorySubscribeResponseMessage : ResponseMessage
{
	CategorySubscribeResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
		this.Headers += GetHeaders(sipRspMsg.Headers, ["Supported", "Require", "Event", "subscription-state", "ms-piggyback-cseq"]);
	}

	override string ToString()
	{
		return Format("Category Subscribe Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message MSRTCSubscriptionResponseMessage : ResponseMessage
{
	MSRTCSubscriptionResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
		this.Headers += GetHeaders(sipRspMsg.Headers, ["Supported", "Contact", "Event", "subscription-state", "ms-piggyback-cseq"]);
	}

	override string ToString()
	{
		return Format("MSRTC Subscribe Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message VersionConflictResponseMessage : ResponseMessage
{
	VersionConflictResponseMessage(SIP.Response sipRspMsg)
	{
		base.ResponseMessage(sipRspMsg);
		this.Headers += GetHeaders(sipRspMsg.Headers, ["Ms-Diagnostics"]);
	}

	override string ToString()
	{
		string msDiagnosticsValue =  TryGetErrorDetails("Ms-Diagnostics", this.Headers);
		
		if (msDiagnosticsValue == null)
		{
			return Format("Version Conflict Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
		}
		else
		{
			return "Version Conflict Response, " + msDiagnosticsValue;
		}
	}
}

message NotifyMessage : SipRequestMessage
{
	NotifyMessage(SIP.Request sipReqMsg)
	{
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq", "Content-Type"], this);
	}

	override string ToString()
	{ 
		return "Notify Request";
	}
}

message SelfSubscribeNotifyMessage : NotifyMessage
{
	SelfSubscribeNotifyMessage(SIP.Request sipReqMsg)
	{
		base.NotifyMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "Self Subscribe Notify";
	}
}

message CategorySubscribeNotifyMessage : NotifyMessage
{
	CategorySubscribeNotifyMessage(SIP.Request sipReqMsg)
	{
		base.NotifyMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "Category Subscribe Notify";
	}
}

message PIDFOrRPIDSubscriptionNotifyMessage : NotifyMessage
{
	PIDFOrRPIDSubscriptionNotifyMessage(SIP.Request sipReqMsg)
	{
		base.NotifyMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "PIDF/RPID Subscription Notify";
	}
}

message MSRTCSubscriptionNotifyMessage : NotifyMessage
{
	MSRTCSubscriptionNotifyMessage(SIP.Request sipReqMsg)
	{
		base.NotifyMessage(sipReqMsg);
	}

	override string ToString()
	{
		return "MSRTC Subscription Notify";
	}
}
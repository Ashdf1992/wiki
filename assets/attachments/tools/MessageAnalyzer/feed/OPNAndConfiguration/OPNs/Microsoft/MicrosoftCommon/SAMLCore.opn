module SAMLCore with
Documentation
{
    ProtocolName = "Assertions and Protocol for the OASIS 2 Security Assertion Markup Language 3 (SAML)",
    ShortName = "SAMLCore",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "SAMLCore", Version = "V1.1", Link = "http://go.microsoft.com/fwlink/?LinkId=90508"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "363307", Date = "05/05/2014"}
        ]
};

using Standard;
using XSD;
using XMLDSig;
using Utility;

//----------------------------------------- Namespace -----------------------------------------//
// The prefix for this namespace name is "saml:"
const string SamlNamespace = "urn:oasis:names:tc:SAML:1.0:assertion";

//----------------------------------------- Types ---------------------------------------------//
// 2.2.1 DecisionType
pattern DecisionType = enum string
{
    Permit = "Permit",
    Deny = "Deny",
    Indeterminate = "Indeterminate",
    ...
};

// 2.3.1 Element <AssertionIDReference>
type AssertionIDReferenceType
{
    XSNCName content with XmlEncoding{Kind = XmlKind.Text};
};

// 2.3.2 Element <Assertion>
type AssertionType
{
    XSInt MajorVersion with XmlEncoding{Name = "MajorVersion", Kind = XmlKind.Attribute};
    XSInt MinorVersion with XmlEncoding{Name = "MinorVersion", Kind = XmlKind.Attribute};
    XSDId AssertionID with XmlEncoding{Name = "AssertionID", Kind = XmlKind.Attribute};
    string Issuer with XmlEncoding{Name = "Issuer", Kind = XmlKind.Attribute};
    XSDDateTime IssueInstant with XmlEncoding{Name = "IssueInstant", Kind = XmlKind.Attribute};

    optional ConditionsType Conditions;
    optional AdviceType Advice;
    
    // Future Reference: use Choice and IsWrapped aspect.
    optional StatementType Statement with XmlEncoding{Name = "Statement"};
    optional SubjectStatementType SubjectStatement with XmlEncoding{Name = "SubjectStatement", Namespace = SamlNamespace};
    optional AuthenticationStatementType AuthenticationStatement with XmlEncoding{Name = "AuthenticationStatement", Namespace = SamlNamespace};
    optional AuthorizationDecisionStatementType AuthorizationDecisionStatement with XmlEncoding{Name = "AuthorizationDecisionStatement", Namespace = SamlNamespace};
    optional AttributeStatementType AttributeStatement with XmlEncoding{Name = "AttributeStatement", Namespace = SamlNamespace};

    optional XMLDSig.SignatureType Signature with XmlEncoding{Name = "Signature", Namespace = DsNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.3.2.1 Element <Conditions>
type ConditionsType
{
    optional XSDDateTime NotBefore with XmlEncoding{Name = "NotBefore", Kind = XmlKind.Attribute};
    optional XSDDateTime NotOnOrAfter with XmlEncoding{Name = "NotOnOrAfter", Kind = XmlKind.Attribute};

    // Future Reference: use Choice and IsWrapped aspect.
    optional array<ConditionType> Condition with XmlEncoding{Name = "Condition", Namespace = SamlNamespace};
    optional array<AudienceRestrictionConditionType> AudienceRestrictionCondition with XmlEncoding{Name = "AudienceRestrictionCondition", Namespace = SamlNamespace};
    optional array<DoNotCacheConditionType> DoNotCacheCondition with XmlEncoding{Name = "DoNotCacheCondition", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.3.2.1.2 Element <Condition>
// abstract 
pattern ConditionType = ConditionAbstractType | any;

type ConditionAbstractType
{
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.3.2.1.3 Elements <AudienceRestrictionCondition>
type AudienceType
{
    XSAnyURI Content with XmlEncoding{Kind = XmlKind.Text};
};

type AudienceRestrictionConditionType : ConditionAbstractType
{
    array<AudienceType> Audience with XmlEncoding{Name = "Audience", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

// 2.3.2.1.4 Element <DoNotCacheCondition>
type DoNotCacheConditionType: ConditionAbstractType
{
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.3.2.2 Element <Advice>
type AdviceType
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional AssertionIDReferenceType AssertionIDReference with XmlEncoding{Name = "AssertionIDReference", Namespace = SamlNamespace};
    optional AssertionType Assertion with XmlEncoding{Name = "Assertion", Namespace = SamlNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.1 Element <Statement> 
pattern StatementType = StatementAbstractType | any;

type StatementAbstractType
{
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.2 Element <SubjectStatement>
pattern SubjectStatementType = SubjectStatementAbstractType | any;

type SubjectStatementAbstractType : StatementAbstractType
{
    SubjectType Subject with XmlEncoding{Name = "Subject", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

// 2.4.2.1 Element <Subject>
type SubjectType : IComparable<SubjectType>
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional NameIdentifierType NameIdentifier with XmlEncoding{Name = "NameIdentifier", Namespace = SamlNamespace};
    optional SubjectConfirmationType SubjectConfirmation with XmlEncoding{Name = "SubjectConfirmation", Namespace = SamlNamespace};
    
    int CompareTo(SubjectType sub)
    {
        if (sub == null) 
        {
            return 1;
        }
        
        if (((this.NameIdentifier == nothing && sub.NameIdentifier == nothing) ||
                (this.NameIdentifier is thisNameId:NameIdentifierType && sub.NameIdentifier is otherNameId:NameIdentifierType &&
                    thisNameId.ToString() == otherNameId.ToString())) &&
            ((this.SubjectConfirmation == nothing && sub.SubjectConfirmation == nothing) ||
                (this.SubjectConfirmation is thisSubConf:SubjectConfirmationType && sub.SubjectConfirmation is otherSubConf:SubjectConfirmationType &&
                    thisSubConf.CompareTo(otherSubConf) == 0)))
        {
            return 0;
        }
        return 1;
    }
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.2.2 Element <NameIdentifier>
type NameIdentifierType
{
    optional string NameQualifier with XmlEncoding{Name = "NameQualifier", Kind = XmlKind.Attribute};
    optional XSAnyURI Format with XmlEncoding{Name = "Format", Kind = XmlKind.Attribute};

    string Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.2.3 Elements <SubjectConfirmation>, <ConfirmationMethod>, and <SubjectConfirmationData>
type SubjectConfirmationDataType
{
    AnySimpleType Content with XmlEncoding{Kind = XmlKind.Text};
};

type ConfirmationMethodType
{
    XSAnyURI Content with XmlEncoding{Kind = XmlKind.Text};
};

type SubjectConfirmationType : IComparable<SubjectConfirmationType>
{
    array<ConfirmationMethodType> ConfirmationMethod with XmlEncoding{Name = "ConfirmationMethod", Namespace = SamlNamespace};
    optional SubjectConfirmationDataType SubjectConfirmationData with XmlEncoding{Name = "SubjectConfirmationData", Namespace = SamlNamespace};
    optional XMLDSig.KeyInfoType KeyInfo with XmlEncoding{Name = "KeyInfo", Namespace = SamlNamespace};
    
    int CompareTo(SubjectConfirmationType other) 
    {
        if (other == null)
        {
            return 1;
        }
        
        if (ConfirmMethodEqual(other) &&
            ((this.SubjectConfirmationData == nothing && other.SubjectConfirmationData == nothing) ||
                this.SubjectConfirmationData is thisConfData:SubjectConfirmationDataType && other.SubjectConfirmationData is otherConfData:SubjectConfirmationDataType && 
                thisConfData.ToString() == otherConfData.ToString()) &&
            ((this.KeyInfo == nothing && other.KeyInfo == nothing) ||
                this.KeyInfo is thisKeyInfo:KeyInfoType && other.KeyInfo is otherKeyInfo:KeyInfoType && thisKeyInfo.CompareTo(otherKeyInfo) == 0)
            )
        {
            return 0;
        }
        return 1;
    }
    
    bool ConfirmMethodEqual(SubjectConfirmationType other)
    {
        if (this.ConfirmationMethod.Count != other.ConfirmationMethod.Count)
        {
            return false;
        }
        
        array<ConfirmationMethodType> thisConfirmationMethod = this.ConfirmationMethod.Sort(ConfirmationMethodComparison);
        array<ConfirmationMethodType> otherConfirmationMethod = other.ConfirmationMethod.Sort(ConfirmationMethodComparison);
        for (int i = 0; i < thisConfirmationMethod.Count; i++)
        {
            int ret = ConfirmationMethodComparison(thisConfirmationMethod[i], otherConfirmationMethod[i]);
            if (ret != 0)
            {
                return false;
            }
        }
        
        return true;
    }
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

int ConfirmationMethodComparison(ConfirmationMethodType c1, ConfirmationMethodType c2)
{
    string c1Str = c1.ToString();
    string c2Str = c2.ToString();
    if (c1Str > c2Str)
    {
        return 1;
    }
    else if (c1Str == c2Str)
    {
        return 0;
    }
    return -1;
}

// 2.4.3 Element <AuthenticationStatement> 
type AuthenticationStatementType : SubjectStatementAbstractType
{
    XSAnyURI AuthenticationMethod with XmlEncoding{Name = "AuthenticationMethod", Kind = XmlKind.Attribute};
    XSDatatime AuthenticationInstant with XmlEncoding{Name = "AuthenticationInstant", Kind = XmlKind.Attribute};
    optional SubjectLocalityType SubjectLocality with XmlEncoding{Name = "SubjectLocality", Namespace = SamlNamespace};
    optional array<AuthorityBindingType> AuthorityBinding with XmlEncoding{Name = "AuthorityBinding", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.3.1 Element <SubjectLocality>
type SubjectLocalityType
{
    optional XSDIpAddress IPAddress with XmlEncoding{Name = "IPAddress", Kind = XmlKind.Attribute};
    optional XSDDnsAddress DNSAddress with XmlEncoding{Name = "DNSAddress", Kind = XmlKind.Attribute};
} with XmlEncoding{Namespace = SamlNamespace};

// 2.4.3.2 Element <AuthorityBinding>
type AuthorityBindingType
{
    XSQName AuthorityKind with XmlEncoding{Name = "AuthorityKind", Kind = XmlKind.Attribute};
    XSAnyURI Location with XmlEncoding{Name = "Location", Kind = XmlKind.Attribute};
    XSAnyURI Binding with XmlEncoding{Name = "Binding", Kind = XmlKind.Attribute};
} with XmlEncoding{Namespace = SamlNamespace};

// 2.4.4 Element <AttributeStatement>
type AttributeStatementType : SubjectStatementAbstractType
{
    array<AttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

// 2.4.4.1 Elements <AttributeDesignator> and <Attribute> 
type AttributeDesignatorType
{
    string AttributeNamespace with XmlEncoding{Name = "AttributeNamespace", Kind = XmlKind.Attribute};
    XSAnyURI AttributeName with XmlEncoding{Name = "AttributeName", Kind = XmlKind.Attribute};
} with XmlEncoding{Namespace = SamlNamespace};

type AttributeType : AttributeDesignatorType
{
    array<AttributeValueType> AttributeValue with XmlEncoding{Name = "AttributeValue", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

type AttributeValueType
{
    AnySimpleType Content with XmlEncoding{Kind = XmlKind.Text};
};

// 2.4.5 Element <AuthorizationDecisionStatement>
type AuthorizationDecisionStatementType: SubjectStatementAbstractType
{
    array<ActionType> Action with XmlEncoding{Name = "Action", Namespace = SamlNamespace};
    optional EvidenceType Evidence with XmlEncoding{Name = "Evidence", Namespace = SamlNamespace};
    XSAnyURI AttributeName with XmlEncoding{Name = "AttributeName", Kind = XmlKind.Attribute};

    DecisionType Decision with XmlEncoding{Name = "Decision", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = SamlNamespace};

// 2.4.5.1 Element <Action>
type ActionType
{
    optional XSAnyURI Namespace with XmlEncoding{Name = "Namespace", Kind = XmlKind.Attribute};
    string Content with XmlEncoding{Kind = XmlKind.Text};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

// 2.4.5.2 Element <Evidence>
type EvidenceType
{
    optional AssertionIDReferenceType AssertionIDReference with XmlEncoding{Name = "AssertionIDReference", Namespace = SamlNamespace};
    optional AssertionType Assertion with XmlEncoding{Name = "Assertion", Namespace = SamlNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = SamlNamespace};

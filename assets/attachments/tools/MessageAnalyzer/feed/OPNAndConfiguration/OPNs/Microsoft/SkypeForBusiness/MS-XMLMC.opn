protocol MSXMLMC with
Documentation
{
    ProtocolName = "XML Schema for Media Control Extensions",
    ShortName = "MS-XMLMC",
    DocumentName = "MS-XMLMC",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-XMLMC", Version = "3.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server
	accepts RequestMessage;
		
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{	
    process node issues sipMsg:SIP.Request	where IsXmlmcReqMsg(sipMsg)
    { 	
		RequestMessage msg = new RequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;
    }		
}

bool IsXmlmcReqMsg(SIP.Request sipMsg)
{
	if (sipMsg.Body == nothing || sipMsg.Body == null)
	{
		return false;
	}
	else if (sipMsg.Method == "INFO")
	{
		return IsXmlmcbody(sipMsg.Body as binary);
	}
	else
	{	
		return false;
	}
}

bool IsXmlmcbody(binary sipBody)
{	
	if (sipBody == nothing || sipBody == null)
	{		
		return false;
	}	
	else
	{	
		xml tempBody = BuildXml(sipBody);

		if (tempBody == null)
		{
			return false;
		}
		else
		{
			array<xml> pictureFreezeXml = tempBody select xpath{//vc_primitive/to_encoder/picture_freeze};
			
			if ((pictureFreezeXml != null) && (pictureFreezeXml.Count != 0))
			{
				return true;
			}
			else 
			{
				return false;
			}
		}				
	}		
}

message RequestMessage : SipRequestMessage
{	
	RequestMessage(SIP.Request sipReqMsg)
	{
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq"], this);
	}
	
	override string ToString()
	{ 
		xml tempBody = this.Body as xml;

		if (tempBody == nothing || tempBody == null)
		{		
			return "Invalid Message: Message Body Is Not XML Format";
		}	
		else
		{	
			array<xml> pictureFreezeXml = tempBody select xpath{//vc_primitive/to_encoder/picture_freeze};
			
			if ((pictureFreezeXml == null) || (pictureFreezeXml.Count != 0))
			{
				return "Invalid Message: Missing picture_free Element in Message Body";
			}
			else if (pictureFreezeXml.Count > 1)
			{
				return "Invalid Message: More Than One picture_free Element in Message Body";
			}
			else
			{
				return "picture_Freeze Request";
			}
		}
	}
}
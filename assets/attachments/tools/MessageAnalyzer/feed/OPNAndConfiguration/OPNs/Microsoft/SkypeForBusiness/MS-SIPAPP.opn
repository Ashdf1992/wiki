protocol MSSIPAPP with
Documentation
{
    ProtocolName = "Session Initiation Protocol (SIP) Application Protocol",
    ShortName = "MS-SIPAPP",
    DocumentName = "MS-SIPAPP",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-SIPAPP", Version = "1.5"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{	
	process node accepts sipMsg:SIP.Request where (GetSipappReqMsgType(sipMsg) == "ParkRequestMessage")
    {   
		RequestMessage msg = new ParkRequestMessage(sipMsg);		
		dispatch (endpoint Server over node) accepts msg;
    }

	process node issues sipMsg:SIP.Request where (GetSipappReqMsgType(sipMsg) == "UnparkNotificationMessage")
    {   
		RequestMessage msg = new UnparkNotificationMessage(sipMsg);		
		dispatch (endpoint Server over node) accepts msg;
    }

	process node issues sipMsg:SIP.Response where (GetSipappRspMsgType(sipMsg) == "ParkResponseMessage")
    {  
		ResponseMessage msg = new ParkResponseMessage(sipMsg);
		dispatch (endpoint Server over node) issues msg;
    }
}

string GetSipappReqMsgType(SIP.Request sipMsg)
{	
	bool isSipappContentType = (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/ms-call-park+xml");

	if ((sipMsg.Method == "INVITE") && isSipappContentType)			
	{
		return "ParkRequestMessage";
	}
	else if ((sipMsg.Method == "INFO") && isSipappContentType)
	{
		return "UnparkNotificationMessage";
	}
	else
	{	
		return null;
	}
}

string GetSipappRspMsgType(SIP.Response sipMsg)
{	
	string cSeq = TryGetHeaderValue("CSeq", sipMsg.Headers);
	
	if ((cSeq == "INVITE") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/ms-call-park+xml")) 
	{
		return "ParkResponseMessage";
	}
	else
	{
		return null;
	}
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "Content-Type"], this);
	}
		
	override string ToString()
	{
		return "Request";
	}
}

message ParkRequestMessage : RequestMessage
{	
	ParkRequestMessage(SIP.Request sipReqMsg)
	{	
		base.RequestMessage(sipReqMsg);
	}
		
	override string ToString()
	{
		return "Park Request";		
	}
}

message UnparkNotificationMessage : RequestMessage
{
	UnparkNotificationMessage(SIP.Request sipReqMsg)
	{	
		base.RequestMessage(sipReqMsg);
	}
		
	override string ToString()
	{
		if ((this.Body == nothing) || (this.Body == null))
		{
			return "Unpark Notification Invalid Message Body: Should Be XML Message Body";
		}
		else 
		{
			xml tempBody = this.Body as xml;

			if (tempBody == null)
			{
				return "Unpark Notification Invalid Message Body: Should Be XML Message Body";
			}
			else
			{
				array<xml> reasonXmls = tempBody select xpath{//unpark-notification/reason};

				if ((reasonXmls == null) || (reasonXmls.Count == 0))
				{
					return "Unpark Notification Invalid Message Body: No reason Element for unpark-notification Element In Message Body";
				}
				else if (reasonXmls.Count > 1)
				{
					return "Unpark Notification Invalid Message Body: More Than One reason Element for unpark-notification Element In Message Body";
				}
				else
				{
					string reason = reasonXmls[0].Value as string;

					if (reason == null)
					{
						return "Unpark Notification Invalid Message Body: Value of The reason Element In Message Body Is Not String";
					}
					else
					{
						return "Unpark Notification, " + reason;
					}
				}
			}
		}	
	}
}

message ResponseMessage : SipResponseMessage
{			
	ResponseMessage(SIP.Response sipRspMsg)
	{	
		InitializeSIPRsp(sipRspMsg, ["From", "To", "Content-Type"], this);	
	}
		
	override string ToString()
	{
		return Format("Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message ParkResponseMessage : ResponseMessage
{
	ParkResponseMessage(SIP.Response sipRspMsg)
	{			
		base.ResponseMessage(sipRspMsg);
		this.Headers += GetHeaders(sipRspMsg.Headers, ["Contact"]);
	}
	
	override string ToString()
	{
		return Format("Park Response, {0} {1}", this.StatusCode, this.ReasonPhrase);		
	}
}
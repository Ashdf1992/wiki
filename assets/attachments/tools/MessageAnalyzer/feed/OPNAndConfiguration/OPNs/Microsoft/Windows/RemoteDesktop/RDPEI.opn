protocol RDPEI with
    BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    DocumentName = "MS-RDPEI",
    ProtocolName = "Remote Desktop Protocol: Input Virtual Channel Extension",
    ProtocolType = "block",
    ShortName    = "RDPEI",
    Description  = ""
},
OPNAuthoring
{
    Copyright  = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RDPEI", Version = "6.0", Date = "09/15/2017", ProgramName = ProgramName.MCPP}
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "383234", Date = "12/23/2015"}
        ]
};

using Standard;
using Utility;
using RDPEDYC;

endpoint Server over RDPEDYC.Server issues RDPINPUT_SC_READY_PDU accepts RDPINPUT_CS_READY_PDU
                                    accepts RDPINPUT_TOUCH_EVENT_PDU
                                    issues RDPINPUT_SUSPEND_INPUT_PDU
                                    issues RDPINPUT_RESUME_INPUT_PDU
                                    accepts RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU
                                    accepts RDPINPUT_PEN_EVENT_PDU;

client endpoint Client connected to Server;

autostart actor RDPEIOverRDPEDYC(RDPEDYC.Server dycServer)
{
    process dycServer issues s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && ((s#EDYCChannelName as string) == "Microsoft::Windows::RDS::Input"))
    {
        ushort eventType = (s.Data[0] + ((s.Data[1] as ushort) << 8)) as ushort;
        Server server = endpoint Server over dycServer;
        
        switch (eventType)
        {
            case 0x0001 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_SC_READY_PDU from BinaryDecoder<RDPINPUT_SC_READY_PDU> =>
                        dispatch server issues m;
                    default =>
                        ThrowDecodingException("RDPEI", "RDPINPUT_SC_READY_PDU");
                }
            case 0x0004 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_SUSPEND_INPUT_PDU from BinaryDecoder<RDPINPUT_SUSPEND_INPUT_PDU> =>
                        dispatch server issues m;
                    default =>
                        ThrowDecodingException("RDPEI", "RDPINPUT_SUSPEND_INPUT_PDU");
                }
            case 0x0005 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_RESUME_INPUT_PDU from BinaryDecoder<RDPINPUT_RESUME_INPUT_PDU> =>
                        dispatch server issues m;
                    default =>
                        ThrowDecodingException("RDPEI", "RDPINPUT_RESUME_INPUT_PDU");
                }
            default =>
                ThrowDecodingException("RDPEI");
        }
    }
    
    process dycServer accepts s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && ((s#EDYCChannelName as string) == "Microsoft::Windows::RDS::Input"))
    {
        ushort eventType = (s.Data[0] + ((s.Data[1] as ushort) << 8)) as ushort;
        Server server = endpoint Server over dycServer;
            
        switch (eventType)
        {
            case 0x0002 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_CS_READY_PDU from BinaryDecoder<RDPINPUT_CS_READY_PDU> =>
                        dispatch server accepts m;
                    default =>
                        ThrowDecodingException("RDPEI", "RDPINPUT_CS_READY_PDU");
                }
            case 0x0003 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_TOUCH_EVENT_PDU from BinaryDecoder<RDPINPUT_TOUCH_EVENT_PDU> =>
                        dispatch server accepts m;
                    default => 
                        ThrowDecodingException("RDPEI", "RDPINPUT_TOUCH_EVENT_PDU");
                }
            case 0x0006 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU from BinaryDecoder<RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU> =>
                        dispatch server accepts m;
                    default => 
                        ThrowDecodingException("RDPEI", "RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU");
                }
            case 0x0008 => 
                switch (s.Data)
                {
                    case m:RDPINPUT_PEN_EVENT_PDU from BinaryDecoder<RDPINPUT_PEN_EVENT_PDU> =>
                        dispatch server accepts m;
                    default => 
                        ThrowDecodingException("RDPEI", "RDPINPUT_PEN_EVENT_PDU");
                }
            default =>
                ThrowDecodingException("RDPEI");
        }
    }
}

// --------------------------messages-----------------------------------------//

message RDPINPUT_SC_READY_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_SC_READY) header
        where ValidationCheck(value.pduLength == 10, this, "RDPEI: The pduLength in Message RDPINPUT_SC_READY_PDU must be 10.");
    
    RDPINPUT_SC_READY_PDU_PROTOCOL_VERSION protocolVersion 
        where ValidationCheck(InRange<RDPINPUT_SC_READY_PDU_PROTOCOL_VERSION>(value), this, "RDPEI: The protocolVersion in Message RDPINPUT_SC_READY_PDU should be 0x00010000.");
    optional [|protocolVersion == RDPINPUT_SC_READY_PDU_PROTOCOL_VERSION.RDPINPUT_PROTOCOL_V300|] RDPINPUT_SC_READY_PDU_SUPPORTED_FEATURES supportedFeatures;
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_SC_READY_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_CS_READY_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_CS_READY) header
        where ValidationCheck(value.pduLength == 16, this, "RDPEI: The pduLength in Message RDPINPUT_CS_READY_PDU must be 16.");
    
    RDPINPUT_CS_READY_PDU_FLAGS Flags
        where ValidationCheck(InRange<RDPINPUT_CS_READY_PDU_FLAGS>(value), this, "RDPEI: The Flags in Message RDPINPUT_CS_READY_PDU should only contain 0x00000001 and 0x00000002.");
    
    RDPINPUT_CS_READY_PDU_PROTOCOL_VERSION protocolVersion 
        where ValidationCheck(value == RDPINPUT_CS_READY_PDU_PROTOCOL_VERSION.RDPINPUT_PROTOCOL_V1, this, "RDPEI: The protocolVersion in Message RDPINPUT_CS_READY_PDU should be 0x00010000.");
        
    ushort maxTouchContacts;
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_CS_READY_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_TOUCH_EVENT_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_TOUCH) header;
    FOUR_BYTE_UNSIGNED_INTEGER encodeTime;
    TWO_BYTE_UNSIGNED_INTEGER frameCount;
    array<RDPINPUT_TOUCH_FRAME> frames with BinaryEncoding{Length = frameCount.Value()};
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_TOUCH_EVENT_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_SUSPEND_INPUT_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_SUSPEND_INPUT) header
        where ValidationCheck(value.pduLength == 6, this, "RDPEI: The pduLength in Message RDPINPUT_SUSPEND_INPUT_PDU must be 6.");
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_SUSPEND_INPUT_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_RESUME_INPUT_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_RESUME_INPUT) header
        where ValidationCheck(value.pduLength == 6, this, "RDPEI: The pduLength in Message RDPINPUT_RESUME_INPUT_PDU must be 6.");
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_RESUME_INPUT_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_DISMISS_HOVERING_TOUCH_CONTACT) header
        where ValidationCheck(value.pduLength == 7, this, "RDPEI: The pduLength in Message RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU must be 7.");
        
    byte contactId;
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_DISMISS_HOVERING_TOUCH_CONTACT_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

message RDPINPUT_PEN_EVENT_PDU
{
    (RDPINPUT_HEADER where value.eventId == RDPINPUT_HEADER_EVENT_EVENTID.EVENTID_PEN) header;
    FOUR_BYTE_UNSIGNED_INTEGER encodeTime;
    TWO_BYTE_UNSIGNED_INTEGER frameCount;
    array<RDPINPUT_PEN_FRAME> frames with BinaryEncoding{Length = frameCount.Value()};
        
    override string ToString()
    {
        string summary;
        summary = "RDPINPUT_TOUCH_EVENT_PDU, ";
        summary += "EventId = " + (header.eventId as string) + ", ";
        summary += "Length = " + (header.pduLength as string);
        return summary;
    } 
}

// --------------------------types-----------------------------------------//

type TWO_BYTE_UNSIGNED_INTEGER
{
    TWO_BYTE_UNSIGNED_INTEGER_C c 
        with BinaryEncoding{Width = 1};
         
    byte val1 
        with BinaryEncoding{Width = 7};
        
    optional ([|c == 1|] byte) val2;
    
    uint Length()
    {
        if (c == 1) 
        {
            return 2;
        }
        return 1;
    }
    
    ushort Value()
    {   
        uint len = Length();
        int v = val1 << (8 * (len - 1) as int);
        if (c == 1) 
        {
            v += (val2 as int);
        }
        return v as ushort;
    }
    
    override string ToString()
    {
        ushort v = Value();
        return v.ToString();
    } 
};

type TWO_BYTE_SIGNED_INTEGER
{
    TWO_BYTE_SIGNED_INTEGER_C c with BinaryEncoding{Width = 1};
    TWO_BYTE_SIGNED_INTEGER_S s with BinaryEncoding{Width = 1};
    byte val1 with BinaryEncoding{Width = 6};
    optional ([|c == 1|] byte) val2;
    
    uint Length()
    {
        if (c == 1) 
        {
            return 2;
        }
        return 1;
    }
    
    short Value()
    {
        uint len = Length();
        int v = (val1 << ((8 * (len - 1)) as int));
        
        if (c == 1) 
        {
            v += (val2 as int);
        }
        
        if (s == 1)
        {
            v = (v * (-1));
        }
        
        return v as short;
    }
    
    override string ToString()
    {
        short v = Value();
        return v.ToString();
    }
};

type FOUR_BYTE_UNSIGNED_INTEGER
{
    FOUR_BYTE_UNSIGNED_INTEGER_C c with BinaryEncoding{Width = 2};
    byte val1 with BinaryEncoding{Width = 6};
    optional ([|c >= 1|] byte) val2;
    optional ([|c >= 2|] byte) val3;
    optional ([|c == 3|] byte) val4;
    
    uint Length()
    {
        return (c + 1) as uint;
    }
    
    uint Value()
    {   
        uint len = Length();
        int v = (val1 << ((8 * (len - 1)) as int));
        
        if (c >= 1) 
        {
            v += ((val2 as int) << ((8 * (len - 2)) as int));
        }
        
        if (c >= 2) 
        {
            v += ((val3 as int) << ((8 * (len - 3)) as int));
        }
        
        if (c == 3) 
        {
            v += ((val4 as int) << ((8 * (len - 4)) as int));
        }
        
        return v as uint;
    }
    
    override string ToString()
    {
        uint v = Value();
        return v.ToString();
    }
};

type FOUR_BYTE_SIGNED_INTEGER
{
    FOUR_BYTE_SIGNED_INTEGER_C c with BinaryEncoding{Width = 2};
    FOUR_BYTE_SIGNED_INTEGER_S s with BinaryEncoding{Width = 1};
    byte val1 with BinaryEncoding{Width = 5};
    optional ([|c >= 1|] byte) val2;
    optional ([|c >= 2|] byte) val3;
    optional ([|c == 3|] byte) val4;

    uint Length()
    {
        return (c + 1) as uint;
    }
    
    int Value()
    {   
        uint len = Length();
        int v = (val1 << ((8 * (len - 1)) as int));
        
        if (c >= 1) 
        {
            v += ((val2 as int) << ((8 * (len - 2)) as int));
        }
        
        if (c >= 2) 
        {
            v += ((val3 as int) << ((8 * (len - 3)) as int));
        }
        
        if (c == 3) 
        {
            v += ((val4 as int) << ((8 * (len - 4)) as int));
        }
        
        if (s == 1) 
        {
            v = (v * (-1));
        }
        
        return v;
    }
    
    override string ToString()
    {
        int v = Value();
        return v.ToString();
    }    
};

type EIGHT_BYTE_UNSIGNED_INTEGER
{
    EIGHT_BYTE_UNSIGNED_INTEGER_C c with BinaryEncoding{Width = 3};
    byte val1 with BinaryEncoding{Width = 5};
    optional ([|c >= 1|] byte) val2;
    optional ([|c >= 2|] byte) val3;
    optional ([|c >= 3|] byte) val4;
    optional ([|c >= 4|] byte) val5;
    optional ([|c >= 5|] byte) val6;
    optional ([|c >= 6|] byte) val7;
    optional ([|c == 7|] byte) val8;
    
    uint Length()
    {
        return (c + 1) as uint;
    }
    
    ulong Value()
    {   
        uint len = Length();
        long v = (val1 << ((8 * (len - 1)) as int));
        
        if (c >= 1) 
        {
            v += ((val2 as long) << ((8 * (len - 2)) as int));
        }
        
        if (c >= 2) 
        {
            v += ((val3 as long) << ((8 * (len - 3)) as int));
        }
        
        if (c >= 3) 
        {
            v += ((val4 as long) << ((8 * (len - 4)) as int));
        }
        
        if (c >= 4) 
        {
            v += ((val5 as long) << ((8 * (len - 5)) as int));
        }
        
        if (c >= 5) 
        {
            v += ((val6 as long) << ((8 * (len - 6)) as int));
        }
        
        if (c >= 6)
        {
            v += ((val7 as long) << ((8 * (len - 7)) as int));
        }
        
        if (c == 7) 
        {
            v += ((val8 as long) << ((8 * (len - 8)) as int));
        }
        
        return v as ulong;
    }
    
    override string ToString()
    {
        ulong v = Value();
        return v.ToString();
    }
};

type RDPINPUT_HEADER
{
    RDPINPUT_HEADER_EVENT_EVENTID eventId;
    uint pduLength;
};

type RDPINPUT_CONTACT_DATA
{
    byte contactId;
    TWO_BYTE_UNSIGNED_INTEGER fieldsPresent;
    FOUR_BYTE_SIGNED_INTEGER x;
    FOUR_BYTE_SIGNED_INTEGER y;
    FOUR_BYTE_UNSIGNED_INTEGER contactFlags 
        where ValidationCheck( 
            value.Value() in 
            {
                0x0004, // UP
                0x0024, // UP | CANCELED
                0x0002, // UPDATE
                0x0022, // UPDATE | CANCELED
                0x0019, // DOWN | INRANGE | INCONTACT
                0x001A, // UPDATE | INRANGE | INCONTACT
                0x000C, // UP | INRANGE
                0x000A  // UPDATE | INRANGE
            },
            null,
            "RDPEI: The contactFlags in type RDPINPUT_CONTACT_DATA must contain one of the following combinations of the contact state flags and must not contain any other combination:" +
            "UP, UP | CANCELED, UPDATE, UPDATE | CANCELED, DOWN | INRANGE | INCONTACT, UPDATE | INRANGE | INCONTACT, UP | INRANGE, UPDATE | INRANGE"
        );
        
    optional ([|(fieldsPresent.Value() & 0x0001) == 0x0001|] TWO_BYTE_SIGNED_INTEGER) contactRectLeft;
    optional ([|(fieldsPresent.Value() & 0x0001) == 0x0001|] TWO_BYTE_SIGNED_INTEGER) contactRectTop;
    optional ([|(fieldsPresent.Value() & 0x0001) == 0x0001|] TWO_BYTE_SIGNED_INTEGER) contactRectRight;
    optional ([|(fieldsPresent.Value() & 0x0001) == 0x0001|] TWO_BYTE_SIGNED_INTEGER) contactRectBottom;
    optional ([|(fieldsPresent.Value() & 0x0002) == 0x0002|] FOUR_BYTE_UNSIGNED_INTEGER) orientation;
    optional ([|(fieldsPresent.Value() & 0x0004) == 0x0004|] FOUR_BYTE_UNSIGNED_INTEGER) pressure;
    
    uint Length()
    {
        long len = 1; // contactId
        len += fieldsPresent.Length();
        len += x.Length();
        len += y.Length();
        len += contactFlags.Length();
        
        if ((fieldsPresent.Value() & 0x0001) == 0x0001)
        {
            len += (contactRectLeft as TWO_BYTE_SIGNED_INTEGER).Length();
            len += (contactRectTop as TWO_BYTE_SIGNED_INTEGER).Length();
            len += (contactRectRight as TWO_BYTE_SIGNED_INTEGER).Length();
            len += (contactRectBottom as TWO_BYTE_SIGNED_INTEGER).Length();
        }
        
        if ((fieldsPresent.Value() & 0x0002) == 0x0002)
        {
            len += (orientation as FOUR_BYTE_UNSIGNED_INTEGER).Length();
        }
        
        if ((fieldsPresent.Value() & 0x0004) == 0x0004)
        {
            len += (pressure as FOUR_BYTE_UNSIGNED_INTEGER).Length();
        }
        
        return len as uint;
    }

    override string ToString()
    {
        return "RDPINPUT_CONTACT_DATA, contactId: " + contactId.ToString();
    }
};

type RDPINPUT_TOUCH_FRAME
{
    TWO_BYTE_UNSIGNED_INTEGER contactCount;
    EIGHT_BYTE_UNSIGNED_INTEGER frameOffset;
    array<RDPINPUT_CONTACT_DATA> contacts with BinaryEncoding{Length = contactCount.Value()};

    override string ToString()
    {
        return "RDPINPUT_TOUCH_FRAME, contactCount: " + contactCount.ToString() + ", frameOffset: " + frameOffset.ToString();
    }
};

type RDPINPUT_PEN_FRAME
{
    TWO_BYTE_UNSIGNED_INTEGER contactCount;
    EIGHT_BYTE_UNSIGNED_INTEGER frameOffset;
    array<RDPINPUT_PEN_CONTACT> contacts with BinaryEncoding{Length = contactCount.Value()};

    override string ToString()
    {
        return "RDPINPUT_PEN_FRAME, contactCount: " + contactCount.ToString() + ", frameOffset: " + frameOffset.ToString();
    }
};

type RDPINPUT_PEN_CONTACT
{
    byte deviceId;
    TWO_BYTE_UNSIGNED_INTEGER fieldsPresent;
    FOUR_BYTE_SIGNED_INTEGER x;
    FOUR_BYTE_SIGNED_INTEGER y;
    FOUR_BYTE_UNSIGNED_INTEGER contactFlags 
        where ValidationCheck( 
            value.Value() in 
            {
                0x0004, // UP
                0x0024, // UP | CANCELED
                0x0002, // UPDATE
                0x0022, // UPDATE | CANCELED
                0x0019, // DOWN | INRANGE | INCONTACT
                0x001A, // UPDATE | INRANGE | INCONTACT
                0x000C, // UP | INRANGE
                0x000A  // UPDATE | INRANGE
            },
            null,
            "RDPEI: The contactFlags in type RDPINPUT_PEN_CONTACT must contain one of the following combinations of the contact state flags and must not contain any other combination:" +
            "UP, UP | CANCELED, UPDATE, UPDATE | CANCELED, DOWN | INRANGE | INCONTACT, UPDATE | INRANGE | INCONTACT, UP | INRANGE, UPDATE | INRANGE"
        );
        
    optional ([|(fieldsPresent.Value() & 0x0001) == 0x0001|] FOUR_BYTE_UNSIGNED_INTEGER) penFlags;
    optional ([|(fieldsPresent.Value() & 0x0002) == 0x0002|] FOUR_BYTE_UNSIGNED_INTEGER) pressure;
    optional ([|(fieldsPresent.Value() & 0x0004) == 0x0004|] TWO_BYTE_UNSIGNED_INTEGER) rotation;
    optional ([|(fieldsPresent.Value() & 0x0004) == 0x0008|] TWO_BYTE_UNSIGNED_INTEGER) tiltX;
    optional ([|(fieldsPresent.Value() & 0x0004) == 0x00010|] TWO_BYTE_UNSIGNED_INTEGER) tiltY;

    override string ToString()
    {
        return "RDPINPUT_PEN_CONTACT, deviceId: " + deviceId.ToString();
    }
};

// --------------------------patterns-----------------------------------------//

pattern TWO_BYTE_UNSIGNED_INTEGER_C = enum byte
{
    ONE_BYTE_VAL = 0,
    TWO_BYTE_VAL = 1 
};

pattern TWO_BYTE_SIGNED_INTEGER_C = enum byte
{
    ONE_BYTE_VAL = 0,
    TWO_BYTE_VAL = 1 
};

pattern FOUR_BYTE_UNSIGNED_INTEGER_C = enum byte
{
    ONE_BYTE_VAL = 0,
    TWO_BYTE_VAL = 1, 
    THREE_BYTE_VAL = 2,
    FOUR_BYTE_VAL = 3 
};

pattern FOUR_BYTE_SIGNED_INTEGER_C = enum byte
{
    ONE_BYTE_VAL = 0,
    TWO_BYTE_VAL = 1,
    THREE_BYTE_VAL = 2,
    FOUR_BYTE_VAL = 3 
};

pattern EIGHT_BYTE_UNSIGNED_INTEGER_C = enum byte
{
    ONE_BYTE_VAL = 0,
    TWO_BYTE_VAL = 1, 
    THREE_BYTE_VAL = 2, 
    FOUR_BYTE_VAL = 3, 
    FIVE_BYTE_VAL = 4,
    SIX_BYTE_VAL = 5,
    SEVEN_BYTE_VAL = 6,
    EIGHT_BYTE_VAL = 7 
};

pattern TWO_BYTE_SIGNED_INTEGER_S = enum byte
{
    POSITIVE_VAL = 0,
    NEGATIVE_VAL = 1
};

pattern FOUR_BYTE_SIGNED_INTEGER_S = enum byte
{
    POSITIVE_VAL = 0, 
    NEGATIVE_VAL = 1 
};

pattern RDPINPUT_HEADER_EVENT_EVENTID = enum ushort
{
    EVENTID_SC_READY = 0x0001,
    EVENTID_CS_READY = 0x0002,
    EVENTID_TOUCH = 0x0003,
    EVENTID_SUSPEND_INPUT = 0x0004,
    EVENTID_RESUME_INPUT = 0x0005,
    EVENTID_DISMISS_HOVERING_TOUCH_CONTACT = 0x0006,
    EVENTID_PEN = 0x0008,
    ...
};

pattern RDPINPUT_SC_READY_PDU_PROTOCOL_VERSION = enum uint
{
    RDPINPUT_PROTOCOL_V1 = 0x00010000,
    RDPINPUT_PROTOCOL_V101 = 0x00010001,
    RDPINPUT_PROTOCOL_V200 = 0x00020000,
    RDPINPUT_PROTOCOL_V300 = 0x00030000,
    ...
};

pattern RDPINPUT_CS_READY_PDU_PROTOCOL_VERSION = enum uint
{
    RDPINPUT_PROTOCOL_V1 = 0x00010000,
    RDPINPUT_PROTOCOL_V101 = 0x00010001,
    RDPINPUT_PROTOCOL_V200 = 0x00020000,
    RDPINPUT_PROTOCOL_V300 = 0x00030000,
    ...
};

pattern RDPINPUT_CS_READY_PDU_FLAGS = flags uint 
{
    CS_READY_FLAGS_SHOW_TOUCH_VISUALS = 0x00000001
        with Documentation
            {Description = "Touch gesture and contact visuals SHOULD be rendered by the server in the remote session."},
    CS_READY_FLAGS_DISABLE_TIMESTAMP_INJECTION = 0x00000002
        with Documentation
            {Description = "The client does not support touch frame timestamp remoting."},
    CS_READY_FLAGS_ENABLE_MULTIPEN_INJECTION = 0x00000004
        with Documentation
            {Description = "The server should configure the pen injection subsystem so that the simultaneous injection of input from up to four pen devices is possible."},
    ...
};

pattern RDPINPUT_SC_READY_PDU_SUPPORTED_FEATURES = enum uint
{
    SC_READY_MULTIPEN_INJECTION_SUPPORTED = 0x00000001,
    ...
};

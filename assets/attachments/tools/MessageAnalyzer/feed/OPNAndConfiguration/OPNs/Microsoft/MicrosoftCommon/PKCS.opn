// partial implemented for WSTEP
module PKCS with
Asn1EncodingDefaults{EncodingRule = Asn1EncodingRule.BER},
Documentation
{
    ProtocolName = "Cryptographic Message Syntax",
    ShortName = "PKCS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2986"},
            new Reference{Name = "RFC 2315"},
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="369482", Date="10/15/2014"}
        ]
};

using Technologies.ASN1;
using X509;

// RFC 2986 PKCS #10: Certification Request Syntax Specification Version 1.7
pattern Attributes = set<Attribute>;

type CertificationRequest
{
    CertificationRequestInfo certificationRequestInfo;
    AlgorithmIdentifier signatureAlgorithm;
    BitString signature;
}

type CertificationRequestInfo
{
    Version version;
    Name subject;
    SubjectPublicKeyInfo subjectPKInfo;
    Attributes attributes with Asn1Encoding{TagNumber = 0};
}

pattern Version = enum Integer {V1 = 0, ...};

type SubjectPublicKeyInfo
{
    AlgorithmIdentifier Algorithm;
    BitString SubjectPublicKey;
}

// PKCS #6: Extended-Certificate Syntax Standard
type ExtendedCertificate
{
    ExtendedCertificateInfo extendedCertificateInfo;
    SignatureAlgorithmIdentifier signatureAlgorithm;
    Signature signature;
}

pattern SignatureAlgorithmIdentifier = AlgorithmIdentifier;
pattern Signature = BitString;

type ExtendedCertificateInfo
{
    Version_PKCS6 version;
    Certificate certificate;
    Attributes attributes;
}

pattern Version_PKCS6 = Integer;

// RFC 1422
type CertificateRevocationList
{
    AlgorithmIdentifier signature;
    Name issuer;
    UTCTime lastUpdate;
    UTCTime nextUpdate;
    optional array<CRLEntry> revokedCertificates;
}

type CRLEntry
{
    SerialNumber userCertificate;
    UTCTime revocationDate;
}

pattern SerialNumber = CertificateSerialNumber;

// RFC 2315 PKCS #7: Cryptographic Message Syntax Version 1.5
pattern CertificateRevocationLists = set<CertificateRevocationList>;
pattern ContentEncryptionAlgorithmIdentifier = AlgorithmIdentifier;
pattern DigestAlgorithmIdentifier = AlgorithmIdentifier;
pattern DigestEncryptionAlgorithmIdentifier = AlgorithmIdentifier;

// Choice type
pattern ExtendedCertificateOrCertificate = Certificate | ExtendedCertificateOrCertificate_ExtendedCertificate;
pattern ExtendedCertificateOrCertificate_ExtendedCertificate = ExtendedCertificate with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};

pattern ExtendedCertificatesAndCertificates = set<ExtendedCertificateOrCertificate>;

type IssuerAndSerialNumber
{
    Name issuer;
    CertificateSerialNumber serialNumber;
}

pattern KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier;

type ContentInfo
{
    ContentType contentType;
    optional ([|contentType == signedDataOID|] SignedData
        | [|contentType == envelopedDataOID|] EnvelopedData
        | [|contentType == signedAndEnvelopedDataOID|] SignedAndEnvelopedData
        | [|contentType == digestedDataOID|] DigestedData
        | [|contentType == encryptedDataOID|] EncryptedData
        | OctetString) content with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
}

pattern Data = OctetString;

type SignedData
{
    Version_PKCS6 version;
    DigestAlgorithmIdentifiers digestAlgorithms;
    ContentInfo contentInfo;
    optional ExtendedCertificatesAndCertificates certificates with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional CertificateRevocationLists crls with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    SignerInfos signerInfos;
}

pattern DigestAlgorithmIdentifiers = set<DigestAlgorithmIdentifier>;
pattern SignerInfos = set<SignerInfo>;

type SignerInfo
{
    Version_PKCS6 version;
    IssuerAndSerialNumber issuerAndSerialNumber;
    DigestAlgorithmIdentifier digestAlgorithm;
    optional Attributes authenticatedAttributes with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    DigestEncryptionAlgorithmIdentifier digestEncryptionAlgorithm;
    EncryptedDigest encryptedDigest;
    optional Attributes unauthenticatedAttributes with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern EncryptedDigest = OctetString;

type DigestInfo
{
    DigestAlgorithmIdentifier digestAlgorithm;
    Digest digest;
}

pattern Digest = OctetString;

type EnvelopedData
{
    Version_PKCS6 version;
    RecipientInfos recipientInfos;
    EncryptedContentInfo encryptedContentInfo;
}

pattern RecipientInfos = set<RecipientInfo>;

type EncryptedContentInfo
{
    ContentType contentType;
    ContentEncryptionAlgorithmIdentifier contentEncryptionAlgorithm;
    optional EncryptedContent encryptedContent with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
}

pattern EncryptedContent = OctetString;

type RecipientInfo
{
    Version_PKCS6 version;
    IssuerAndSerialNumber issuerAndSerialNumber;
    KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
    EncryptedKey encryptedKey;
}

pattern EncryptedKey = OctetString;

type SignedAndEnvelopedData
{
    Version_PKCS6 version;
    RecipientInfos recipientInfos;
    DigestAlgorithmIdentifiers digestAlgorithms;
    EncryptedContentInfo encryptedContentInfo;
    optional ExtendedCertificatesAndCertificates certificates with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional CertificateRevocationLists crls with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

type DigestedData
{
    Version_PKCS6 version;
    DigestAlgorithmIdentifier digestAlgorithm;
    ContentInfo contentInfo;
    Digest digest;
}

type EncryptedData
{
    Version_PKCS6 version;
    EncryptedContentInfo encryptedContentInfo;
}

// Object identifiers
const array<int> pkcs7OID = [1, 2, 840, 113549, 1, 7];
const array<int> dataOID = pkcs7OID + [1];
const array<int> signedDataOID = pkcs7OID + [2];
const array<int> envelopedDataOID = pkcs7OID + [3];
const array<int> signedAndEnvelopedDataOID = pkcs7OID + [4];
const array<int> digestedDataOID = pkcs7OID + [5];
const array<int> encryptedDataOID = pkcs7OID + [6];

// RFC 2985 PKCS #9 Selected Object Classes and Attribute Types Version 2.0
pattern PKCS9String = IA5String | DirectoryString;

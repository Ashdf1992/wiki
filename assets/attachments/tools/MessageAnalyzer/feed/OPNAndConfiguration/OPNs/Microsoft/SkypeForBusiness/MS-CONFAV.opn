protocol MSCONFAV with
Documentation
{
    ProtocolName = "Centralized Conference Control Protocol: Instant Messaging Extensions",
    ShortName = "MS-CONFAV",
    DocumentName = "MS-CONFAV",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-CONFAV", Version = "4.3"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Standard;
using MSCONFBAS;

endpoint Server 
	over MSCONFBAS.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverCONFBAS(MSCONFBAS.Server node)
{	
    process node accepts confbasMsg:MSCONFBAS.RequestMessage where (IsConfavReq(confbasMsg))
    {       	
		RequestMessage msg = new RequestMessage(confbasMsg);
		dispatch (endpoint Server over node) accepts msg;
    }	
	
	process node issues confbasMsg:MSCONFBAS.ResponseMessage where (IsConfavRsp(confbasMsg))
    {       	
		ResponseMessage msg = new ResponseMessage(confbasMsg);
		dispatch (endpoint Server over node) issues msg;
    }	
}

string mediaType = null;

bool IsConfavReq(MSCONFBAS.RequestMessage confbasMsg)
{	
	if (confbasMsg.Body == nothing)
	{		
		return false;
	}	
	else
	{	
		xml tempBody = confbasMsg.Body as xml;

		if (tempBody == null)
		{
			return false;
		}
		else
		{
			array<xml> addUserMediaLabelXml = tempBody select xpath{//addUser/user/endpoint/media/label};
			array<xml> addUserMediaTypeXml = tempBody select xpath{//addUser/user/endpoint/media/type};
			
			bool addUser = false;
			
			if (addUserMediaLabelXml != null && addUserMediaLabelXml.Count != 0)
			{
				if (addUserMediaTypeXml == null || addUserMediaTypeXml.Count == 0) 
				{				
					addUser = true;
				}				
				else if (addUserMediaTypeXml.Count == 1)
				{							
					mediaType = addUserMediaTypeXml[0].Value as string;

					if (mediaType != null)
					{							
						addUser = mediaType == "audio" || mediaType == "video" || mediaType == "panoramic-video";
					}
				}
			}

			if (addUser)
			{
				return true;
			}
			else
			{
				array<xml> modifyEndpointMediaXml = tempBody select xpath{//modifyEndpointMedia/mediaKeys};
		
				bool modifyEndpointMedia = false;
				
				if (modifyEndpointMediaXml != null && modifyEndpointMediaXml.Count == 1)
				{			
					xml tempXml = modifyEndpointMediaXml[0];

					if (tempXml != null)					
					{
						modifyEndpointMedia = tempXml select xpath{//@userEntity} != null &&
							tempXml select xpath{//@endpointEntity} != null &&
							tempXml select xpath{//@mediaId} != null;
					}				
				}
						
				if (modifyEndpointMedia)
				{
					return true;
				}
				else
				{
					array<xml> modifyConferenceAnnouncementsXml = tempBody select xpath{//modifyConferenceAnnouncements};
			
					bool modifyConferenceAnnoucements = false;

					if (modifyConferenceAnnouncementsXml != null && modifyConferenceAnnouncementsXml.Count == 1)
					{
						array<xml> enabledElement = modifyConferenceAnnouncementsXml[0] select xpath{//conferenceKeys/enabled};
						modifyConferenceAnnoucements = (enabledElement != null) && (enabledElement.Count == 1);
					}

					if (modifyConferenceAnnoucements)
					{
						return true;
					}
									
					return false;
				}
			}				
		}				
	}		
}

bool IsConfavRsp(MSCONFBAS.ResponseMessage confbasMsg)
{	
	if (confbasMsg.Body == nothing)
	{
		return false;
	}
	
	xml tempBody = confbasMsg.Body as xml;

	if (tempBody == null)
	{	
		return false;
	}
	else
	{
		array<xml> addUserMediaLabelXml = tempBody select xpath{//addUser/user/endpoint/media/label};
		array<xml> addUserMediaTypeXml = tempBody select xpath{//addUser/user/endpoint/media/type};
		bool addUser = false;

		if (addUserMediaLabelXml != null && addUserMediaLabelXml.Count != 0)
		{
			if (addUserMediaTypeXml == null) 
			{	
				addUser = true;
			}
			else if (addUserMediaTypeXml.Count == 1)
			{
				mediaType = addUserMediaTypeXml[0].Value as string;

				if (mediaType != null)
				{						
					addUser = mediaType == "audio" || mediaType == "video" || mediaType == "panoramic-video";
				}		
			}
		}

		if (addUser)
		{
			return true;
		}
		else
		{
			array<xml> modifyEndpointMediaXml = tempBody select xpath{//modifyEndpointMedia};
			bool modifyEndpointMedia = false;

			if (modifyEndpointMediaXml != null && modifyEndpointMediaXml.Count != 0)
			{
				modifyEndpointMedia = true;
			}

			if (modifyEndpointMedia)
			{
				return true;
			}
			else
			{
				array<xml> modifyConferenceAnnouncementsXml = tempBody select xpath{//modifyConferenceAnnouncements};

				if (modifyConferenceAnnouncementsXml != null && modifyConferenceAnnouncementsXml.Count != 0)
				{					
					return true;
				}
								
				return false;
			}
		}
	}
}

message RequestMessage
{
	xml Body;
			
	RequestMessage(MSCONFBAS.RequestMessage confbasReqMsg)
	{
		// IsConfavReq method makes sure the Body is xml. Here just to cast optional xml to xml.
		this.Body = confbasReqMsg.Body as xml;
	}

	override string ToString()
	{	
		array<xml> labelXmls = this.Body select xpath{//addUser/user/endpoint/media/label};

		if ((labelXmls != null) && (labelXmls.Count != 0))
		{
			array<xml> joiningMethodXmls = this.Body select xpath{//addUser/user/endpoint/joining-method};

			if (joiningMethodXmls == null || joiningMethodXmls.Count == 0)
			{
				return "Invalid Request Message: Missing joining-method Element for endpoint Element in Message Body";
			}
			else
			{
				string joiningMethod = null;

				foreach (xml joiningMethodXml in joiningMethodXmls)
				{
					joiningMethod = joiningMethodXml.Value as string;

					if (joiningMethod == null)
					{
						return "Invalid Request Message: Value of joining-method Element for endpoint Element in Message Body is not string";
					}
										
					if (joiningMethod == "dialed-in")
					{
						joiningMethod =  "Dial-In";
						break;
					}

					if (joiningMethod == "dialed-out")
					{
						joiningMethod =  "Dial-Out";
						break;
					}
				}
				return "addUser " + joiningMethod + " Request" + ((mediaType == null)? null: (": " + mediaType));
			}
		}		
		else if (this.Body select xpath{//modifyEndpointMedia/mediaKeys}.Count != 0)
		{
			return "modifyEndpointMedia Request";
		}
		else if (this.Body select xpath{//modifyConferenceAnnouncements}.Count != 0)
		{
			return "modifyConferenceAnnouncements Request";
		}
		else
		{
			return  "Unknown Request";
		}
	}		
}
	
message ResponseMessage
{
	xml Body;

	// IsConfavRsp method makes sure the Body is xml. Here just to cast optional xml to xml.
	ResponseMessage(MSCONFBAS.ResponseMessage confbasRspMsg)
	{
		this.Body = confbasRspMsg.Body as xml;
	}

	override string ToString()
	{	
		array<xml> codeXmls = this.Body select xpath{//response/@code};

		if ((codeXmls == null) || (codeXmls.Count == 0))
		{
			return "Invalid Response Message: Missing code Attribute for response Element in Message Body";
		}

		if (codeXmls.Count > 1)
		{	
			return "Invalid Response Message: More Than One code Attribute for response Element in Message Body";
		}

		string code = null;
		code = codeXmls[0].Value as string;

		if (code == null)
		{
			return "Invalid Response Message: Value of code Attribute for response Element in Message Body is Not string";
		}
		
		if (this.Body select xpath{//addUser/user/endpoint/media/label}.Count != 0)
		{
			string errorMessage = null;
			array<xml> joiningMethodXmls = this.Body select xpath{//addUser/user/endpoint/joining-method};

			if (joiningMethodXmls == null || joiningMethodXmls.Count == 0)
			{
				return "Invalid Response Message: Missing joining-method Element for endpoint Element in Message Body";
			}
			else
			{
				string joiningMethod = null;

				foreach (xml joiningMethodXml in joiningMethodXmls)
				{
					joiningMethod = joiningMethodXml.Value as string;

					if (joiningMethod == null)
					{
						return "Invalid Response Message: Value of joining-method Element for endpoint Element in Message Body is not string";
					}

					if (joiningMethod == "dialed-in")
					{
						joiningMethod =  "Dial-In";
						break;
					}

					if (joiningMethod == "dialed-out")
					{
						joiningMethod =  "Dial-Out";
						break;
					}
					return "addUser Response";
				}	
				
				array<xml> errorXml = this.Body select xpath{//addUser/@reason};

				if (errorXml.Count == 0)
				{
					return "addUser " + joiningMethod + " Response" + ((mediaType == null)? null: (": " + mediaType)) + ", " + code;
				}
				else if (errorXml.Count > 1)
				{	
					return "Invalid Message: More Than One reason Attribute for addUser Element in Message Body";
				}
				
				errorMessage = errorXml[0].Value as string;
				
				if (errorMessage != null)
				{							
					return "addUser " + joiningMethod + " Response" + ((mediaType == null)? null: (": " + mediaType)) + ", " + code + ": " + errorMessage;
				}
				else
				{
					return "addUser " + joiningMethod + " Response" + ((mediaType == null)? null: (": " + mediaType)) + ", Invalid Message: reason Attribute Value Is Not String, " + code;
				}
			}
		}
	
		if (this.Body select xpath{//modifyEndpointMedia}.Count != 0)
		{			
			string errorMessage = null;
			array<xml> errorXml = (this.Body select xpath{//modifyEndpointMedia/@reason});

			if (errorXml.Count == 0)
			{
				return "modifyEndpointMedia Response, " + code; // success
			}
			else if (errorXml.Count > 1)
			{	
				return "Invalid Message: More Than One reason Attribute for modifyEndpointMedia Element in Message Body";
			}
			else if (errorXml[0].Value != null)
			{
				errorMessage = errorXml[0].Value as string;					
			}

			switch (errorMessage)
			{
				case ("endpointDoesntExist") => 
				{
					return "modifyEndpointMedia Response, " + code + ": Endpoint Doesn't Exist";
				}
				case ("userDoesntExist") => 
				{
					return "modifyEndpointMedia Response, " + code + ": User Doesn't Exist";
				}
				case ("otherFailure") => 
				{
					return "modifyEndpointMedia Response, " + code + ": Other Failure";
				}
				default => 
				{
					return "modifyEndpointMedia Response, " + code + ": " + errorMessage;
				}
			}				
		}
	
		if (this.Body select xpath{//modifyConferenceAnnouncements}.Count != 0)
		{	
			string errorMessage = null;
			array<xml> errorXml = (this.Body select xpath{//modifyConferenceAnnouncements/@reason});

			if (errorXml.Count == 0)
			{
				return "modifyConferenceAnnouncements Response, " + code; // success
			}
			else if (errorXml.Count > 1)
			{	
				return "Invalid Message: More Than One reason Attribute for modifyConferenceAnnoucements Element in Message Body";
			}
			
			errorMessage = errorXml[0].Value as string;

			if (errorMessage != null)
			{
				switch (errorMessage)
				{
					case ("conferenceDoesntExist") => 
					{
						return "modifyConferenceAnnouncements Response, " + code + ": Conference Doesn't Exist";
					}
					case ("notSupported") => 
					{
						return "modifyConferenceAnnouncements Response, " + code + ": Not Supported";
					}
					default => 
					{	
						return "modifyConferenceAnnouncements Response, " + code + ": " + errorMessage;
					}
				}	
			}
			else 
			{
				return "modifyConferenceAnnouncements Response, Invalid Message: reason Attribute Value Is Not String, " + code;
			}	
		}
		return "Unknown Response";
	}
}
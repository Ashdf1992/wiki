protocol MSSSAS with
XmlEncodingDefaults{Namespace = XMLANamespace},
Documentation
{
    ProtocolName = "SQL Server Analysis Services Protocol & SQL Server Analysis Services Tabular Protocol ",
    ShortName = "MS-SSAS, MS-SSAS-T",
    DocumentName = "MS-SSAS, MS-SSAS-T",
    ProtocolType = "SOAP",
    Description = "MS-SSAS-T, the extention protocol of MS-SSAS, is merged together with MS-SSAS in this MSSSAS protocol module."
},
OPNAuthoring
{
    Copyright = "(c) 2016 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-SSAS", Version = "18.0", Date = "05/10/2016"},
            new Reference {Name = "MS-SSAS-T", Version = "4.0", Date = "03/16/2018"},
        ],
    RevisionSummary =    
        [
            new Revision {Class = RevisionClass.Major, Version = "1.0", Date = "11/9/2018"},
        ]
};

using XSD;
using Standard;
using Utility;
using SOAP;

endpoint Server
    over SOAP.Server 
    accepts DiscoverMessage
    issues DiscoverResponseMessage
    accepts ExecuteMessage
    issues ExecuteResponseMessage
    accepts AuthenticateMessage
    issues AuthenticateResponseMessage;

client endpoint Client connected to Server;

// To save what discover command is requeseted
RequestTypeEnum discoverCommand;

autostart actor SQLServerAnalysisServiceOverSOAP(SOAP.Server node)
{
    // Execute message
    process node accepts soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "Execute"
    {
        switch (soap.Body)
        {
            case m:ExecuteMessage from XmlDecoder<ExecuteMessage> =>
             // Get JSON content from m.Execute.Command.Statement element, and use JsonDecoder to parse, then put parsed result back to Statement.
            if (soap.Body != null && soap.Body.ChildCount > 0)
            {
                if (soap.Body.Children[0] != null && soap.Body.Children[0].ChildCount > 0)
                {
                    if (soap.Body.Children[0].Children[0] != null && soap.Body.Children[0].Children[0].ChildCount > 0)
                    {;
                            if (soap.Body.Children[0].Children[0].Children[0] != null && soap.Body.Children[0].Children[0].Children[0].Value != nothing)
                            {
                                if ((soap.Body.Children[0].Children[0].Children[0].Name as XmlName).LocalName == "Statement"
                                && (soap.Body.Children[0].Children[0].Children[0].Value as string).Trim().Count > 0 )
                                {
                                    string statement = soap.Body.Children[0].Children[0].Children[0].Value as string;

                                    JsonCommandType jsonStatement;

                                    stream streamStatement= statement as stream;
                                    jsonStatement = JsonDecoder<JsonCommandType>(streamStatement) as JsonCommandType;
            
                                    if (jsonStatement != null)
                                    {
                                        m.Execute.Command.Statement = jsonStatement;
                                    }
                                }
                            }
                    }
                }    
            }
            var ep = endpoint Server over node;
            dispatch ep accepts m;

            default =>
                ThrowDecodingException("MS-SSAS", "Execute");
        }
    }

    process node issues soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "ExecuteResponse"
    {
        switch (soap.Body)
        {
            case m:ExecuteResponseMessage from XmlDecoder<ExecuteResponseMessage> =>
            var ep = endpoint Server over node;
            dispatch ep issues m;

            default =>
                ThrowDecodingException("MS-SSAS", "ExecuteResponse");
        }
    }

    // Discover message
    process node accepts soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "Discover"
    {
        discoverCommand = GetDiscoverCommandFromSoapBody(soap.Body);
        if ("" == discoverCommand)
        {
            ThrowDecodingException("MS-SSAS", "Discover: Unknown discover command.");
        }

        switch (soap.Body)
        {
            case m:DiscoverMessage from XmlDecoder<DiscoverMessage> =>
            var ep = endpoint Server over node;
            dispatch ep accepts m;

            default =>
                ThrowDecodingException("MS-SSAS", "Discover");
        }
    }

    process node issues soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "DiscoverResponse"
    {
        switch (soap.Body)
        {
            case m:DiscoverResponseMessage from XmlDecoder<DiscoverResponseMessage[discoverCommand]> =>
                DiscoverResponseMessage msg = null;
                if (m != nothing)
                {
                    var returnElem = nothing;
                    if (m.DiscoverResponse.$"return" != nothing)
                    {
                        var rt = (m.DiscoverResponse.$"return" as DiscoverReturnType).root;
                        var rootElem = nothing;
                        if (rt != nothing)
                        {
                            rootElem = new rowsetTypeForDiscover
                            {
                                Schema = (rt as rowsetTypeForDiscover).Schema,
                                row = (rt as rowsetTypeForDiscover).row,
                                Exception = (rt as rowsetTypeForDiscover).Exception,
                                Messages = (rt as rowsetTypeForDiscover).Messages
                            };
                        }
                        else
                        {
                            rootElem = new rowsetTypeForDiscover
                            {
                                Schema = nothing,
                                row = nothing,
                                Exception = nothing,
                                Messages = nothing
                            };
                        }

                        returnElem = new DiscoverReturnType
                        {
                            root = rootElem
                        };
                    }

                    msg = new DiscoverResponseMessage
                    {
                        DiscoverResponse = new DiscoverResponseType
                        {
                            $"return" = returnElem
                        }
                    };
                    
                    var ep = endpoint Server over node;
                    dispatch ep issues msg;
                }
                else
                {
                    ThrowDecodingException("MS-SSAS", "DiscoverResponse");
                }
            default =>
                ThrowDecodingException("MS-SSAS", "DiscoverResponse");
        }
    }

    // Authenticate message
    process node accepts soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "Authenticate"
    {
        switch (soap.Body)
        {
            case m:AuthenticateMessage from XmlDecoder<AuthenticateMessage> =>
            var ep = endpoint Server over node;
            dispatch ep accepts m;

            default =>
                ThrowDecodingException("MS-SSAS", "Authenticate");
        }
    }

    process node issues soap:SOAP.SoapMessage where GetXMLAOperationNameFromSoapBody(soap.Body) == "AuthenticateResponse"
    {
        switch (soap.Body)
        {
            case m:AuthenticateResponseMessage from XmlDecoder<AuthenticateResponseMessage> =>
            var ep = endpoint Server over node;
            dispatch ep issues m;

            default =>
                ThrowDecodingException("MS-SSAS", "AuthenticateResponse");
        }
    }

    string GetXMLAOperationNameFromSoapBody(xml body)
    {
        if (body != null && body.ChildCount > 0)
        {
            if (body.Children[0].NamespaceUri == XMLANamespace)
            {
                return (body.Children[0].Name as XmlName).LocalName;
            }
        }

        return "Undefined Operation";
    }
}

// Define all the types and messages were used in the MS-SSAS protocol here.
/*--------------- Add all const strings here. ---------------*/
/*
** xsd namespace constant.
*/
const string XSDNamespace = "http://www.w3.org/2001/XMLSchema";

/*
** xsi namespace constant.
*/
const string XSINamespace = "http://www.w3.org/2001/XMLSchema-instance";

/*
** sql namespace constant.
*/
const string SQLNamespace = "urn:schemas-microsoft-com:xml-sql";

/*
** xmla namespace constant.
*/
const string XMLANamespace = "urn:schemas-microsoft-com:xml-analysis";

/*
** xmla-ds namespace constant.
*/
const string XMLADSNamespace = "urn:schemas-microsoft-com:xml-analysis:mddataset";

/*
** xmla-rs namespace constant.
*/
const string XMLARSNamespace = "urn:schemas-microsoft-com:xml-analysis:rowset";

/*
** xmla-e namespace constant.
*/
const string XMLAEmptyNamespace = "urn:schemas-microsoft-com:xml-analysis:empty";

/*
** xmla-x namespace constant.
*/
const string XMLAXNamespace = "urn:schemas-microsoft-com:xml-analysis:exception";

const string MSXMLANamespace = "http://schemas.microsoft.com/analysisservices/2003/xmla";

/*
** xmla-m namespace constant.
*/
const string XMLAMNamespace = "http://schemas.microsoft.com/analysisservices/2003/xmla-multipleresults";

/*
** eng namespace constant.
*/
const string XMLAEngNamespace = "http://schemas.microsoft.com/analysisservices/2003/engine";

/*
** eng2 namespace constant.
*/
const string XMLAEng2Namespace = "http://schemas.microsoft.com/analysisservices/2003/engine/2";

/*
** eng2_2 namespace constant.
*/
const string XMLAEng2_2Namespace = "http://schemas.microsoft.com/analysisservices/2003/engine/2/2";

/*
** eng100 namespace constant.
*/
const string XMLAEng100Namespace = "http://schemas.microsoft.com/analysisservices/2008/engine/100";

/*
** eng100_100 namespace constant.
*/
const string XMLAEng100_100Namespace = "http://schemas.microsoft.com/analysisservices/2008/engine/100/100";

/*
** eng200 namespace constant.
*/
const string XMLAEng200Namespace = "http://schemas.microsoft.com/analysisservices/2010/engine/200";

/*
** eng200_200 namespace constant.
*/
const string XMLAEng200200Namespace = "http://schemas.microsoft.com/analysisservices/2010/engine/200/200";

/*
** eng300 namespace constant.
*/
const string XMLAEng300Namespace = "http://schemas.microsoft.com/analysisservices/2011/engine/300";

/*
** eng300_300 namespace constant.
*/
const string XMLAEng300300Namespace = "http://schemas.microsoft.com/analysisservices/2011/engine/300/300";

/*
** eng400 namespace constant.
*/
const string XMLAEng400Namespace = "http://schemas.microsoft.com/analysisservices/2012/engine/400";

/*
** eng400_400 namespace constant.
*/
const string XMLAEng400_400Namespace = "http://schemas.microsoft.com/analysisservices/2012/engine/400/400";

/*
** eng500 namespace constant.
*/
const string XMLAEng500Namespace = "http://schemas.microsoft.com/analysisservices/2013/engine/500";

/*
** eng500_500 namespace constant.
*/
const string XMLAEng500_500Namespace = "http://schemas.microsoft.com/analysisservices/2013/engine/500/500";

/*
** eng600 namespace constant.
*/
const string XMLAEng600Namespace = "http://schemas.microsoft.com/analysisservices/2013/engine/600";

/*
** eng600_600 namespace constant.
*/
const string XMLAEng600_600Namespace = "http://schemas.microsoft.com/analysisservices/2013/engine/600/600";

/*
** engtab namespace constant.
*/
const string XMLAEngTabNamespace = "http://schemas.microsoft.com/analysisservices/2014/engine";

/*--------------- Add all messages here. ---------------*/
// 3.1.4.1 Authenticate
message AuthenticateMessage
{
    AuthenticateType Authenticate;

    override string ToString()
    {
        return "Authenticate";
    }
}

message AuthenticateResponseMessage
{
    AuthenticateResponseType AuthenticateResponse;

    override string ToString()
    {
        return "Authenticate Response";
    }
}

// 3.1.4.2    Discover    
message DiscoverMessage
{
    DiscoverType Discover;

    override string ToString()
    {
        return "Discover";
    }
}

message DiscoverResponseMessage[RequestTypeEnum DiscoverCommand]
{
    DiscoverResponseType[DiscoverCommand] DiscoverResponse;

    override string ToString()
    {
        return "Discover Response";
    }
}

// 3.1.4.3    Execute
message ExecuteMessage
{
    ExecuteType Execute;

    override string ToString()
    {
        return "Execute";
    }
}

message ExecuteResponseMessage
{
    ExecuteResponseType ExecuteResponse;

    override string ToString()
    {
        return "Execute Response";
    }
}

/*--------------- Add all Complex Types here. ---------------*/
// 2.2.4.1.1    xmla-ds:mddataset Complex Type
type mddatasetType
{
    xml Schema with XmlEncoding{Name = "schema", Namespace = XSDNamespace};
    optional OlapInfoType OlapInfo with XmlEncoding{Namespace = XMLADSNamespace};
    optional AxesType Axes with XmlEncoding{Namespace = XMLADSNamespace};
    optional CellDataType CellData with XmlEncoding{Namespace = XMLADSNamespace};
    optional ExceptionType Exception with XmlEncoding{Namespace = XMLAXNamespace};
    optional MessagesType Messages with XmlEncoding{Namespace = XMLAXNamespace};
}

// 2.2.4.1.1.1    xmla-ds:OlapInfo Complex Type
type OlapInfoType 
{
    CubeInfoType CubeInfo with XmlEncoding{Namespace = XMLADSNamespace};
    AxesInfoType AxesInfo with XmlEncoding{Namespace = XMLADSNamespace};
    CellInfoType CellInfo with XmlEncoding{Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.1.1    xmla-ds:CubeInfo
type CubeInfoType 
{
    array<OlapInfoCubeType> Cube with XmlEncoding{Name = "Cube", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.1.1.1    OlapInfoCube
type OlapInfoCubeType 
{
    string CubeName with XmlEncoding{Namespace = XMLADSNamespace};
    optional DateTime LastDataUpdate with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastSchemaUpdate with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.1.1.1.2    xmla-ds:AxesInfo
type AxesInfoType 
{
    optional array<AxisInfoType> AxisInfo with XmlEncoding{Name = "AxisInfo", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.1.2.1    xmla-ds:AxisInfo Complex Type
type AxisInfoType 
{
    optional array<HierarchyInfoType> HierarchyInfo with XmlEncoding{Name = "HierarchyInfo", Namespace = XMLADSNamespace};
    optional string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.1.1.2.1.1    xmla-ds:HierarchyInfo Complex Type
type HierarchyInfoType 
{
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.1.1.3    xmla-ds:CellInfo Complex Type
type CellInfoType 
{
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
}

// 2.2.4.1.1.2    xmla-ds:Axes Complex Type
type AxesType 
{
    array<AxisType> Axis with XmlEncoding{Name = "Axis", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.2.1    Axis
type AxisType
{
    // reference SetType group;
    optional array<SetType_MembersType> Members with XmlEncoding{Name = "Members", Namespace = XMLADSNamespace};
    optional array<TuplesType> Tuples with XmlEncoding{Name = "Tuples", Namespace = XMLADSNamespace};
    optional array<SetListType> CrossProduct with XmlEncoding{Name = "CrossProduct", Namespace = XMLADSNamespace};
    optional array<NormTupleSetType> NormTupleSet with XmlEncoding{Name = "NormTupleSet", Namespace = MSXMLANamespace};
    optional array<UnionType> Union with XmlEncoding{Name = "Union", Namespace = XMLADSNamespace};

    // reference NormType group;
    optional array<MetadatasType> MetadataSet with XmlEncoding{Name = "MetadataSet", Namespace = MSXMLANamespace};
    optional array<TuplesNormType> TupleSet with XmlEncoding{Name = "TupleSet", Namespace = MSXMLANamespace};
    optional array<KeysNormType> KeySet with XmlEncoding{Name = "KeySet", Namespace = MSXMLANamespace};
    optional array<MeasureFormatStringsNormType> MeasureFormatStringSet with XmlEncoding{Name = "MeasureFormatStringSet", Namespace = MSXMLANamespace};

    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type UnionType
{
    optional array<SetType_MembersType> Members with XmlEncoding{Name = "Members", Namespace = XMLADSNamespace};
    optional array<TuplesType> Tuples with XmlEncoding{Name = "Tuples", Namespace = XMLADSNamespace};
    optional array<SetListType> CrossProduct with XmlEncoding{Name = "CrossProduct", Namespace = XMLADSNamespace};
    optional array<NormTupleSetType> NormTupleSet with XmlEncoding{Name = "NormTupleSet", Namespace = MSXMLANamespace};
    optional array<UnionType> Union with XmlEncoding{Name = "Union", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.2.1.1.1    MembersType Complex Type
type SetType_MembersType 
{
    optional array<SetType_MemberType> Member with XmlEncoding{Name = "Member", Namespace = XMLADSNamespace};
    string Hierarchy with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.1.2.1.1.2    MemberType Complex Type
type SetType_MemberType 
{
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
    string Hierarchy with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.1.2.1.1.3    TuplesType Complex Type
type TuplesType 
{
    optional array<TupleType> Tuple with XmlEncoding{Name = "Tuple", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.2.1.1.4    TupleType Complex Type
type TupleType 
{
    optional array<SetType_MemberType> Member with XmlEncoding{Name = "Member", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.2.1.1.5    SetListType Complex Type
type SetListType
{
    // SetType group;
    optional array<SetType_MembersType> Members with XmlEncoding{Name = "Members", Namespace = XMLADSNamespace};
    optional array<TuplesType> Tuples with XmlEncoding{Name = "Tuples", Namespace = XMLADSNamespace};
    optional array<SetListType> CrossProduct with XmlEncoding{Name = "CrossProduct", Namespace = XMLADSNamespace};
    optional array<NormTupleSetType> NormTupleSet with XmlEncoding{Name = "NormTupleSet", Namespace = MSXMLANamespace};
    optional array<UnionType> Union with XmlEncoding{Name = "Union", Namespace = XMLADSNamespace};

    uint Size with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.1.2.1.1.6    msxmla:NormTupleSet Complex Type
type NormTupleSetType
{
    NormTuplesType NormTuples with XmlEncoding{Namespace = MSXMLANamespace};
    MembersLookupType MembersLookup with XmlEncoding{Namespace = MSXMLANamespace};
}

type NormTuplesType
{
    optional array<NormTupleType> NormTuple with XmlEncoding{Name = "NormTuple", Namespace = MSXMLANamespace};
}

type NormTupleType
{
    optional array<MemberRefType> MemberRef with XmlEncoding{Name = "MemberRef", Namespace = MSXMLANamespace};
}

type MemberRefType
{
    int MemberOrdinal with XmlEncoding{Namespace = MSXMLANamespace};
    optional int MemberDispInfo with XmlEncoding{Namespace = MSXMLANamespace};
}

type MembersLookupType
{
    array<TupleType> Members with XmlEncoding{Name = "Members", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.2.1.2.1    MetadatasType Complex Type
type MetadatasType
{
    optional array<MetadataType> Metadata with XmlEncoding{Name = "Metadata", Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.2.1.2.2    MetadataType Complex Type
type MetadataType
{
    string HierUName with XmlEncoding{Namespace = MSXMLANamespace};
    int HierFlags with XmlEncoding{Namespace = MSXMLANamespace};
    string AllMemberName with XmlEncoding{Namespace = MSXMLANamespace};
    string L0UName with XmlEncoding{Namespace = MSXMLANamespace};
    optional string L1UName with XmlEncoding{Namespace = MSXMLANamespace};
    string MemberFormatString with XmlEncoding{Namespace = MSXMLANamespace};
    int DLValType with XmlEncoding{Namespace = MSXMLANamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.1.1.2.1.2.3    TuplesNormType Complex Type
type TuplesNormType
{
    int TupleCount with XmlEncoding{Namespace = MSXMLANamespace};
    Base64Binary Data with XmlEncoding{Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.2.1.2.4    KeysNormType Complex Type
type KeysNormType
{
    array<KeyNormType> KeySet with XmlEncoding{Name = "KeySet", Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.2.1.2.5    KeyNormType Complex Type
type KeyNormType
{
    string DistinctCountMember with XmlEncoding{Namespace = MSXMLANamespace};
    optional array<Base64Binary> Data with XmlEncoding{Name = "Data", Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.2.1.2.6    MeasureFormatStringsNormType Complex Type
type MeasureFormatStringsNormType
{
    optional array<MeasureFormatStringNormType> MeasureFormatStringSet with XmlEncoding{Name = "MeasureFormatStringSet", Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.2.1.2.7    MeasureFormatStringNormType Complex Type
type MeasureFormatStringNormType
{
    int DistinctMemberCount with XmlEncoding{Namespace = MSXMLANamespace};
    array<Base64Binary> DataMeasureFormatStringSet with XmlEncoding{Name = "DataMeasureFormatStringSet", Namespace = MSXMLANamespace};
}

// 2.2.4.1.1.3    xmla-ds:CellData Complex Type
type CellDataType
{
    optional array<xmlaCellType> Cell with XmlEncoding{Name = "Cell", Namespace = XMLADSNamespace};
    optional CellSetType CellSet with XmlEncoding{Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.3.1    xmla-ds:CellType ComplexType
type xmlaCellType
{
    optional CellValueType Value with XmlEncoding{Namespace = XMLADSNamespace};
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
    uint CellOrdinal with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type CellValueType
{
    optional array<CellValueErrorType> Error with XmlEncoding{Name = "Error", Namespace = XMLADSNamespace};
}

// 2.2.4.1.1.3.1.1    Cell Value Errors
type CellValueErrorType
{
    optional int ErrorCode with XmlEncoding{Namespace = XMLADSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLADSNamespace};
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.1.1.3.2    CellSetType ComplexType
type CellSetType
{
    array<Base64Binary> Data with XmlEncoding{Name = "Data", Namespace = XMLADSNamespace};
}

// 2.2.4.1.2    xmla-e:emptyresult Complex Type
type emptyresultType
{
    optional ExceptionType Exception with XmlEncoding{Namespace = XMLAXNamespace};
    optional MessagesType Messages with XmlEncoding{Namespace = XMLAXNamespace};
}

// 2.2.4.1.3    xmla-rs:rowset Complex Type
type rowsetType
{
    optional xml Schema with XmlEncoding{Name = "schema", Namespace = XSDNamespace};
    optional array<rowType> row with XmlEncoding{Name = "row", Namespace = XMLARSNamespace};
    optional ExceptionType Exception with XmlEncoding{Namespace = XMLAXNamespace};
    optional MessagesType Messages with XmlEncoding{Namespace = XMLAXNamespace};
}

type rowsetTypeForDiscover[RequestTypeEnum DiscoverCommand]
{
    optional xml Schema with XmlEncoding{Name = "schema", Namespace = XSDNamespace};
    optional (
        /*---------- The Discover command types defined in protocol MS-SSAS-T ----------*/
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_MODEL|] array<TMSCHEMA_MODEL_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_DATA_SOURCES|] array<TMSCHEMA_DATA_SOURCES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_TABLES|] array<TMSCHEMA_TABLES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_COLUMNS|] array<TMSCHEMA_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_ATTRIBUTE_HIERARCHIES|] array<TMSCHEMA_ATTRIBUTE_HIERARCHIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PARTITIONS|] array<TMSCHEMA_PARTITIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_RELATIONSHIPS|] array<TMSCHEMA_RELATIONSHIPS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_MEASURES|] array<TMSCHEMA_MEASURES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_HIERARCHIES|] array<TMSCHEMA_HIERARCHIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_LEVELS|] array<TMSCHEMA_LEVELS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_ANNOTATIONS|] array<TMSCHEMA_ANNOTATIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_KPIS|] array<TMSCHEMA_KPIS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_CULTURES|] array<TMSCHEMA_CULTURES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_OBJECT_TRANSLATIONS|] array<TMSCHEMA_OBJECT_TRANSLATIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_LINGUISTIC_METADATA|] array<TMSCHEMA_LINGUISTIC_METADATA_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PERSPECTIVES|] array<TMSCHEMA_PERSPECTIVES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PERSPECTIVE_TABLES|] array<TMSCHEMA_PERSPECTIVE_TABLES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PERSPECTIVE_COLUMNS|] array<TMSCHEMA_PERSPECTIVE_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PERSPECTIVE_HIERARCHIES|] array<TMSCHEMA_PERSPECTIVE_HIERARCHIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_PERSPECTIVE_MEASURES|] array<TMSCHEMA_PERSPECTIVE_MEASURES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_ROLES|] array<TMSCHEMA_ROLES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_ROLE_MEMBERSHIPS|] array<TMSCHEMA_ROLE_MEMBERSHIPS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_TABLE_PERMISSIONS|] array<TMSCHEMA_TABLE_PERMISSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_VARIATIONS|] array<TMSCHEMA_VARIATIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_EXTENDED_PROPERTIES|] array<TMSCHEMA_EXTENDED_PROPERTIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_EXPRESSIONS|] array<TMSCHEMA_EXPRESSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_COLUMN_PERMISSIONS|] array<TMSCHEMA_COLUMN_PERMISSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.TMSCHEMA_DETAIL_ROWS_DEFINITIONS|] array<TMSCHEMA_DETAIL_ROWS_DEFINITIONS_RowType> |

        /*---------- The Discover command types defined in protocol MS-SSAS ----------*/
        [|DiscoverCommand == RequestTypeEnum.DBSCHEMA_CATALOGS|] array<DBSCHEMA_CATALOGS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DBSCHEMA_TABLES|] array<DBSCHEMA_TABLES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DBSCHEMA_COLUMNS|] array<DBSCHEMA_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DBSCHEMA_PROVIDER_TYPES|] array<DBSCHEMA_PROVIDER_TYPES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_CUBES|] array<MDSCHEMA_CUBES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_DIMENSIONS|] array<MDSCHEMA_DIMENSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_HIERARCHIES|] array<MDSCHEMA_HIERARCHIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_LEVELS|] array<MDSCHEMA_LEVELS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_MEASURES|] array<MDSCHEMA_MEASURES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_PROPERTIES|] array<MDSCHEMA_PROPERTIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_MEMBERS|] array<MDSCHEMA_MEMBERS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_ACTIONS|] array<MDSCHEMA_ACTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_SETS|] array<MDSCHEMA_SETS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_INSTANCES|] array<DISCOVER_INSTANCES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_KPIS|] array<MDSCHEMA_KPIS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_MEASUREGROUPS|] array<MDSCHEMA_MEASUREGROUPS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_MEASUREGROUP_DIMENSIONS|] array<MDSCHEMA_MEASUREGROUP_DIMENSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_INPUT_DATASOURCES|] array<MDSCHEMA_INPUT_DATASOURCES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_SERVICES|] array<DMSCHEMA_MINING_SERVICES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_SERVICE_PARAMETERS|] array<DMSCHEMA_MINING_SERVICE_PARAMETERS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_FUNCTIONS|] array<DMSCHEMA_MINING_FUNCTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_MODEL_CONTENT|] array<DMSCHEMA_MINING_MODEL_CONTENT_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_MODEL_XML|] array<DMSCHEMA_MINING_MODEL_XML_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_MODEL_CONTENT_PMML|] array<DMSCHEMA_MINING_MODEL_CONTENT_PMML_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_MODELS|] array<DMSCHEMA_MINING_MODELS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_COLUMNS|] array<DMSCHEMA_MINING_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_STRUCTURES|] array<DMSCHEMA_MINING_STRUCTURES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DMSCHEMA_MINING_STRUCTURE_COLUMNS|] array<DMSCHEMA_MINING_STRUCTURE_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_PROPERTIES|] array<DISCOVER_PROPERTIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_LITERALS|] array<DISCOVER_LITERALS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_SCHEMA_ROWSETS|] array<DISCOVER_SCHEMA_ROWSETS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_KEYWORDS|] array<DISCOVER_KEYWORDS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_DATASOURCES|] array<DISCOVER_DATASOURCES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_ENUMERATORS|] array<DISCOVER_ENUMERATORS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XML_METADATA|] array<DISCOVER_XML_METADATA_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_TRACES|] array<DISCOVER_TRACES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_TRACE_DEFINITION_PROVIDERINFO|] array<DISCOVER_TRACE_DEFINITION_PROVIDERINFO_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_TRACE_COLUMNS|] array<DISCOVER_TRACE_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_TRACE_EVENT_CATEGORIES|] array<DISCOVER_TRACE_EVENT_CATEGORIES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_MEMORYUSAGE|] array<DISCOVER_MEMORYUSAGE_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_MEMORYGRANT|] array<DISCOVER_MEMORYGRANT_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_LOCKS|] array<DISCOVER_LOCKS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_CONNECTIONS|] array<DISCOVER_CONNECTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_SESSIONS|] array<DISCOVER_SESSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_JOBS|] array<DISCOVER_JOBS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_TRANSACTIONS|] array<DISCOVER_TRANSACTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_DB_CONNECTIONS|] array<DISCOVER_DB_CONNECTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_MASTER_KEY|] array<DISCOVER_MASTER_KEY_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_PERFORMANCE_COUNTERS|] array<DISCOVER_PERFORMANCE_COUNTERS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_LOCATIONS|] array<DISCOVER_LOCATIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_PARTITION_DIMENSION_STAT|] array<DISCOVER_PARTITION_DIMENSION_STAT_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_PARTITION_STAT|] array<DISCOVER_PARTITION_STAT_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_DIMENSION_STAT|] array<DISCOVER_DIMENSION_STAT_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_COMMANDS|] array<DISCOVER_COMMANDS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_COMMAND_OBJECTS|] array<DISCOVER_COMMAND_OBJECTS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_OBJECT_ACTIVITY|] array<DISCOVER_OBJECT_ACTIVITY_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_OBJECT_MEMORY_USAGE|] array<DISCOVER_OBJECT_MEMORY_USAGE_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_STORAGE_TABLES|] array<DISCOVER_STORAGE_TABLES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_STORAGE_TABLE_COLUMNS|] array<DISCOVER_STORAGE_TABLE_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS|] array<DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_CSDL_METADATA|] array<DISCOVER_CSDL_METADATA_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_CALC_DEPENDENCY|] array<DISCOVER_CALC_DEPENDENCY_RowType> |
        [|DiscoverCommand == RequestTypeEnum.MDSCHEMA_FUNCTIONS|] array<MDSCHEMA_FUNCTIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_RING_BUFFERS|] array<DISCOVER_RING_BUFFERS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_TRACE_DEFINITION|] array<DISCOVER_XEVENT_TRACE_DEFINITION_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_PACKAGES|] array<DISCOVER_XEVENT_PACKAGES_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_OBJECTS|] array<DISCOVER_XEVENT_OBJECTS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_OBJECT_COLUMNS|] array<DISCOVER_XEVENT_OBJECT_COLUMNS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_SESSIONS|] array<DISCOVER_XEVENT_SESSIONS_RowType> |
        [|DiscoverCommand == RequestTypeEnum.DISCOVER_XEVENT_SESSION_TARGETS|] array<DISCOVER_XEVENT_SESSION_TARGETS_RowType>)
        row with XmlEncoding{Name = "row", Namespace = XMLARSNamespace};
    optional ExceptionType Exception with XmlEncoding{Namespace = XMLAXNamespace};
    optional MessagesType Messages with XmlEncoding{Namespace = XMLAXNamespace};
}

// 2.2.4.1.3.1    xmla-rs:row Complex Type
type rowType
{
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

// 2.2.4.1.4    xmla-m:results Complex Type
type resultsType
{
    optional array<emptyresultType> root with XmlEncoding{Name = "root", Namespace = XMLAEmptyNamespace};
}

// 2.2.4.1.5.1    xmla-x:Exception
type ExceptionType
{
}

// 2.2.4.1.5.2    xmla-x:Messages
type MessagesType
{
    optional array<WarningType> Warning with XmlEncoding{Name = "Warning", Namespace = XMLAXNamespace};
    optional array<ErrorType> Error with XmlEncoding{Name = "Error", Namespace = XMLAXNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.1.5.2.1    WarningType
type WarningType
{
    optional MessageLocationType Location with XmlEncoding{Namespace = XMLAXNamespace};

    long WarningCode with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Description with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Source with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string HelpFile with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.1.5.2.2    ErrorType
type ErrorType
{
    optional MessageLocationType Location with XmlEncoding{Namespace = XMLAXNamespace};
    optional string Callstack with XmlEncoding{Namespace = XMLAXNamespace};

    long ErrorCode with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Description with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Source with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string HelpFile with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.1.5.2.3    MessageLocation
type MessageLocationType
{
    optional StartType Start with XmlEncoding{Namespace = XMLAXNamespace};
    optional EndType End with XmlEncoding{Namespace = XMLAXNamespace};
    optional int LineOffset with XmlEncoding{Namespace = XMLAXNamespace};
    optional int textLength with XmlEncoding{Namespace = XMLAXNamespace};
    optional eng200_WarningLocationObjectType SourceObject with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional eng200_WarningLocationObjectType DependsOnObject with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional int RowNumber;
} with XmlEncoding{Order = XmlOrderIndicator.All};

type StartType
{
    optional int Line with XmlEncoding{Namespace = XMLAXNamespace};
    optional int Column with XmlEncoding{Namespace = XMLAXNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type EndType
{
    optional int Line with XmlEncoding{Namespace = XMLAXNamespace};
    optional int Column with XmlEncoding{Namespace = XMLAXNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type eng200_WarningLocationObjectType
{
    optional WarningColumnType WarningColumn with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional WarningMeasureType WarningMeasure with XmlEncoding{Namespace = XMLAEng200Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type WarningColumnType
{
    optional string Dimension with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional string Attribute with XmlEncoding{Namespace = XMLAEng200Namespace};
}

type WarningMeasureType
{
    optional string Cube with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional string MeasureGroup with XmlEncoding{Namespace = XMLAEng200Namespace};
    optional string MemberName with XmlEncoding{Namespace = XMLAEng200Namespace};
}

// 2.2.4.2.2.1    MajorObject
type MajorObjectType
{
    optional AggregationDesignType AggregationDesign with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AssemblyType Assembly with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubeType Cube with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DatabaseType Database with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceType DataSource with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewType DataSourceView with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionType Dimension with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MdxScriptType MdxScript with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupType MeasureGroup with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelType MiningModel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningStructureType MiningStructure with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PartitionType Partition with XmlEncoding{Namespace = XMLAEngNamespace};

    optional PermissionType Permission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DatabasePermissionType DatabasePermission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourcePermissionType DataSourcePermission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionPermissionType DimensionPermission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubePermissionType CubePermission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningStructurePermissionType MiningStructurePermission with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelPermissionType MiningModelPermission with XmlEncoding{Namespace = XMLAEngNamespace};

    optional PerspectiveType Perspective with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RoleType Role with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ServerType Server with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TraceType Trace with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MajorObjectCommonElementsType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime CreatedTimestamp with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastSchemaUpdate with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.2    Server
type ServerType : MajorObjectCommonElementsType
{
    optional string ProductName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional EditionEnum Edition where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<EditionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Edition", "Server", "Server", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EditionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Version with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ServerModeEnum ServerMode where ValidationCheckEnumValue((value == nothing || InRange<ServerModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ServerMode", "Server", "Multidimensional, Tabular, SharePoint", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ProductLevel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DatabasesType Databases with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AssembliesType Assemblies with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TracesType Traces with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RolesType Roles with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ServerPropertiesType ServerProperties with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AnnotationsType
{
    optional array<AnnotationType> Annotation with XmlEncoding{Name = "Annotation", Namespace = XMLAEngNamespace};
}

type DatabasesType
{
    optional array<DatabaseType> Database with XmlEncoding{Name = "Database", Namespace = XMLAEngNamespace};
}

type AssembliesType
{
    optional AssemblyTypeArrayPattern Assembly with XmlEncoding{Name = "Assembly", Namespace = XMLAEngNamespace};
}

type TracesType
{
    optional array<TraceType> Trace with XmlEncoding{Name = "Trace", Namespace = XMLAEngNamespace};
}

type RolesType
{
    optional array<RoleType> Role with XmlEncoding{Name = "Role", Namespace = XMLAEngNamespace};
}

type ServerPropertiesType
{
    optional array<ServerPropertyType> ServerProperty with XmlEncoding{Name = "ServerProperty", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.2.1    ServerProperty
type ServerPropertyType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    string Value with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool RequiresRestart with XmlEncoding{Namespace = XMLAEngNamespace};

    optional XsdPrimitiveTypes PendingValue with XmlEncoding{Namespace = XMLAEngNamespace};
    optional XsdPrimitiveTypes DefaultValue with XmlEncoding{Namespace = XMLAEngNamespace};

    optional bool DisplayFlag with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Type with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.3    Assembly
type AssemblyType : MajorObjectCommonElementsType
{
    optional ImpersonationInfoType ImpersonationInfo with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.3.1    ComAssembly
type ComAssemblyType : AssemblyType
{
    optional string Source with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.3.2    ClrAssembly
type ClrAssemblyType : AssemblyType
{
    ClrAssemblyFilesType Files where ValidationCheck(AtleastOneFileIsMainType(Files.File), null, "MSSSAS: The Files field in type ClrAssembly MUST have a Type element that has a value of 'Main', but there isn't Main type File.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PermissionSetEnum PermissionSet where ValidationCheckEnumValue((value == nothing || InRange<PermissionSetEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "PermissionSet", "ClrAssembly", "Safe, ExternalAccess, Unrestricted", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

type ClrAssemblyFilesType
{
    array<ClrAssemblyFileType> File with XmlEncoding{Name = "File", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.3.2.1    ClrAssemblyFile
type ClrAssemblyFileType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    ClrAssemblyFileTypeEnum Type where ValidationCheckEnumValue(InRange<ClrAssemblyFileTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "ClrAssemblyFile", "Main, Dependent, Debug", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    DataBlockType Data with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.3.2.2    DataBlock
type DataBlockType
{
    optional array<Base64Binary> Block with XmlEncoding{Name = "Block", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.4    Trace
type TraceType : MajorObjectCommonElementsType
{
    optional string LogFileName where ValidationCheck(value == nothing || value == null || (value != nothing && value != null && ((value as string).IndexOf(".trc") > -1)), null,
        "MSSSAS: The Files LogFileName in type Trace MUST contain the .trc file name extension, but it does not contain.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool LogFileAppend with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long LogFileSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Audit with XmlEncoding{Namespace = XMLAEngNamespace};

    optional bool LogFileRollover with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AutoRestart with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime StopTime with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TraceFilterType Filter with XmlEncoding{Namespace = XMLAEngNamespace};

    optional EventsType Events with XmlEncoding{Namespace = XMLAEngNamespace};
    optional eng300_300_XEventType XEvent with XmlEncoding{Namespace = XMLAEng300300Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type EventsType
{
    optional array<EventType> Event with XmlEncoding{Name = "Event", Namespace = XMLAEngNamespace};
}

type eng300_300_XEventType
{
    EventSessionType event_session with XmlEncoding{Namespace = XMLAEng300300Namespace};
}

// 2.2.4.2.2.4.1    Event
type EventType
{
    string EventID with XmlEncoding{Namespace = XMLAEngNamespace};
    EventColumnIDType Columns with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.4.1.1    EventColumnID
type EventColumnIDType
{
    array<string> ColumnID with XmlEncoding{Name = "ColumnID", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.4.2    TraceFilter
type TraceFilterType
{
    optional not_type Not with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type Or with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type And with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Equal with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Less with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type LessOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Greater with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type GreaterOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Like with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotLike with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type not_type
{
    optional not_type Not with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type Or with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type And with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Equal with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Less with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type LessOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Greater with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type GreaterOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Like with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotLike with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type and_or_type 
{
    optional not_type Not with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type Or with XmlEncoding{Namespace = XMLAEngNamespace};
    optional and_or_type And with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Equal with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Less with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type LessOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Greater with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type GreaterOrEqual with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type Like with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool_binop_type NotLike with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type bool_binop_type
{
    string ColumnID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Value with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.4.3    Event_Session
type EventSessionType
{
    optional string templateCategory with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string templateName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string templateDescription with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<eventType> event with XmlEncoding{Name = "event", Namespace = XMLAEngNamespace};
    optional array<targetType> target with XmlEncoding{Name = "target", Namespace = XMLAEngNamespace};

    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional long maxMemory with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional retentionModesEnum eventRetentionMode where ValidationCheckEnumValue(value == nothing || InRange<retentionModesEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "eventRetentionMode", "Event_Session", "allowSingleEventLoss, allowMultipleEventLoss, noEventLoss", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional uint dispatchLatency with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional uint maxEventSize where ValidationCheckGreaterThan(value > maxMemory, null, false, ReferenceType.Type,
                    "MSSSAS", "maxEventSize", "EventSession", "maxMemory", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional partitionModesEnum memoryPartitionMode where ValidationCheckEnumValue(value == nothing || InRange<partitionModesEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "memoryPartitionMode", "Event_Session", "none, perNode, perCpu", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional bool trackCausality with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.4.3.1    event
type eventType
{
    optional array<actionType> action with XmlEncoding{Name = "action", Namespace = XMLAEngNamespace};
    optional array<parameterType> parameter with XmlEncoding{Name = "parameter", Namespace = XMLAEngNamespace};
    optional unary_expr_type predicate with XmlEncoding{Namespace = XMLAEngNamespace};

    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.4.3.2    action
type actionType
{
    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.4.3.3    target
type targetType
{
    optional array<parameterType> parameter with XmlEncoding{Name = "parameter", Namespace = XMLAEngNamespace};

    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.4.3.5    parameter
type parameterType
{
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    xml $"value" with XmlEncoding{Kind = XmlKind.Attribute, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

// 2.2.4.2.2.4.3.6    unary_expr
type unary_expr_type
{
    optional unary_expr_type not with XmlEncoding{Namespace = XMLAEngNamespace};
    optional boolean_expr_type and with XmlEncoding{Namespace = XMLAEngNamespace};
    optional boolean_expr_type or with XmlEncoding{Namespace = XMLAEngNamespace};
    optional pred_leaf_type leaf with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type boolean_expr_type
{
    optional array<boolean_expr_type> and with XmlEncoding{Name = "and", Namespace = XMLAEngNamespace};
    optional array<boolean_expr_type> or with XmlEncoding{Name = "or", Namespace = XMLAEngNamespace};
    optional array<unary_expr_type> not with XmlEncoding{Name = "not", Namespace = XMLAEngNamespace};
    optional array<pred_leaf_type> leaf with XmlEncoding{Name = "leaf", Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type pred_leaf_type
{
    comparatorType comparator with XmlEncoding{Namespace = XMLAEngNamespace};
    optional pred_leaf_event_type event with XmlEncoding{Namespace = XMLAEngNamespace};
    optional pred_leaf_global_type global with XmlEncoding{Namespace = XMLAEngNamespace};
    xml $"value" with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

type pred_leaf_event_type
{
    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string field with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type pred_leaf_global_type
{
    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type comparatorType
{
    optional string $"module" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string package with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string name with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.5    Database
type DatabaseType : MajorObjectCommonElementsType
{
    optional DateTime LastUpdate with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue(value == nothing || InRange<StateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "State", "Database", "Processed, PartiallyProcessed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadWriteModeEnum ReadWriteMode where ValidationCheckEnumValue(value == nothing || InRange<ReadWriteModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ReadWriteMode", "Database", "ReadWrite, ReadOnly, ReadOnlyExclusive", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DbStorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AggregationPrefix with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int ProcessingPriority with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string MasterDataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImpersonationInfoType DataSourceImpersonationInfo with XmlEncoding{Namespace = XMLAEngNamespace};

    optional AccountsType Accounts with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewsType DataSourceViews with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubesType Cubes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningStructuresType MiningStructures with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RolesType Roles with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AssembliesType Assemblies with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DatabasePermissionsType DatabasePermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StorageEngineUsedEnum StorageEngineUsed where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<StorageEngineUsedEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "StorageEngineUsed", "Database", "Database", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ImagePath with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ImageUrl with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ImageUniqueID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ImageVersion with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Token with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int CompatibilityLevel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DirectQueryModeEnum DirectQueryMode where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DirectQueryModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DirectQueryMode", "Database", "Database", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AccountsType
{
    optional array<AccountType> Account with XmlEncoding{Name = "Account", Namespace = XMLAEngNamespace};
}

type DataSourcesType
{
    optional array<DataSourceType> DataSource with XmlEncoding{Name = "DataSource", Namespace = XMLAEngNamespace};
}

type DataSourceViewsType
{
    optional array<DataSourceViewType> DataSourceView with XmlEncoding{Name = "DataSourceView", Namespace = XMLAEngNamespace};
}

type DimensionsType
{
    optional array<DimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

type CubesType
{
    optional array<CubeType> Cube with XmlEncoding{Name = "Cube", Namespace = XMLAEngNamespace};
}

type MiningStructuresType
{
    optional array<MiningStructureType> MiningStructure with XmlEncoding{Name = "MiningStructure", Namespace = XMLAEngNamespace};
}

type DatabasePermissionsType
{
    optional array<DatabasePermissionType> DatabasePermission with XmlEncoding{Name = "DatabasePermission", Namespace = XMLAEngNamespace};
}

type TranslationsType
{
    optional array<TranslationType> Translation with XmlEncoding{Name = "Translation", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.5.1    Account
type AccountType
{
    string AccountType with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationFunctionEnum AggregationFunction where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AggregationFunctionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AggregationFunction", "Account", "Account", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AliasesType Aliases with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AliasesType
{
    optional array<string> Alias with XmlEncoding{Name = "Alias", Namespace = XMLAEngNamespace};
}
// 2.2.4.2.2.6    DataSource
type DataSourceType : MajorObjectCommonElementsType
{
    optional string ManagedProvider with XmlEncoding{Namespace = XMLAEngNamespace};
    string ConnectionString with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ConnectionStringSecurityEnum ConnectionStringSecurity where ValidationCheckEnumValue(value == nothing || InRange<ConnectionStringSecurityEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ConnectionStringSecurity", "DataSource", "PasswordRemoved, Unchanged", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImpersonationInfoType ImpersonationInfo with XmlEncoding{Namespace = XMLAEngNamespace};
    optional IsolationEnum Isolation where ValidationCheckEnumValue(value == nothing || InRange<IsolationEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Isolation", "DataSource", "ReadCommitted, Snapshot", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int MaxActiveConnections with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan Timeout with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourcePermissionsType DataSourcePermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImpersonationInfoType QueryImpersonationInfo with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string QueryHints with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type DataSourcePermissionsType
{
    optional array<DataSourcePermissionType> DataSourcePermission with XmlEncoding{Name = "DataSourcePermission", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.6.3    PushedDataSource
type PushedDataSourceType
{
    rootType root with XmlEncoding{Namespace = XMLAEngNamespace};
    EndOfDataType EndOfData with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type rootType
{
    ParameterEnum Parameter where ValidationCheckValue(value == ParameterEnum.InputRowset, null, true, ReferenceType.Type, "MSSSAS", "Parameter", "PushedDataSource", "InputRowset", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type EndOfDataType
{
    ParameterEnum Parameter where ValidationCheckValue(value == ParameterEnum.EndOfInputRowset, null, true, ReferenceType.Type, "MSSSAS", "Parameter", "EndOfData", "EndOfInputRowset", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 2.2.4.2.2.7    DataSourceView
type DataSourceViewType : MajorObjectCommonElementsType
{
    string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    xml Schema with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.8    Dimension
type DimensionType : MajorObjectCommonElementsType
{
     optional BindingTypeOfDimensionTypePattern Source where ValidationCheck(value == nothing || value == null || ((value != null) && (Source is DataSourceViewBindingType || Source is DimensionBindingType || Source is CubeDimensionBindingType || Source is TimeBindingType)), null,
         "MSSSAS: The Source field in type Dimension MUST be one of the following derived types: DataSourceViewBinding, DimensionBinding, CubeDimensionBinding and TimeBinding, but it is not.") with XmlEncoding{Namespace = XMLAEngNamespace};

    optional string MiningModelID where ValidationCheckValid((value == nothing || value == null || (value != null && Source != null && Source is DataSourceViewBindingType)
        && ValidationCheck(((Source as DataSourceViewBindingType).DataSourceViewID == "."), null,
        "MSSSAS: For data mining dimensions, the DataSourceViewID property of the DataSourceViewBinding Source in type Dimension MUST be set to the value '.', but it is not.")),
        null, true, ReferenceType.Type, "MSSSAS", "MiningModelID", "Dimension",
        "For data mining dimensions, the Source field in type Dimension MUST be of type DataSourceViewbinding, but it is not.") with XmlEncoding{Namespace = XMLAEngNamespace};

    optional DimensionTypeEnum Type where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DimensionTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Type", "Dimension", "Dimension", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UnknownMemberType UnknownMember with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StorageModeEnum StorageMode where ValidationCheckEnumValue((value == nothing || InRange<StorageModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "StorageMode", "Dimension", "Molap, Rolap, InMemory", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool WriteEnabled with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int ProcessingPriority with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionPermissionsType DimensionPermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DependsOnDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string UnknownMemberName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UnknownMemberTranslationsType UnknownMemberTranslations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue(value == nothing || InRange<StateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "State", "Dimension", "Processed, PartiallyProcessed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProactiveCachingType ProactiveCaching where ValidationCheckValid(value == nothing || ValidationCheck_DimensionType_ProactiveCaching(value as ProactiveCachingType), null, true, ReferenceType.Type, "MSSSAS", "ProactiveCaching", "Dimension", " - AggregationStorage: On a dimension, it MUST be 'Regular'") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingModeEnum ProcessingMode where ValidationCheckEnumValue((value == nothing || InRange<ProcessingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingMode", "Dimension", "Regular, LazyAggregations", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingGroupEnum ProcessingGroup where ValidationCheckEnumValue((value == nothing || InRange<ProcessingGroupEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingGroup", "Dimension", "ByAttribute, ByTable", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CurrentStorageModeType CurrentStorageMode with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AttributeAllMemberName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeAllMemberTranslationsType AttributeAllMemberTranslations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional HierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingRecommendationEnum ProcessingRecommendation where ValidationCheckEnumValue((value == nothing || InRange<ProcessingRecommendationEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingRecommendation", "Dimension", "None, Stale", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RelationshipsType Relationships with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StringStoresCompatibilityLevelEnum StringStoresCompatibilityLevel where ValidationCheckEnumValue((value == nothing || InRange<StringStoresCompatibilityLevelEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "StringStoresCompatibilityLevel", "Dimension", "1050, 1100", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CurrentStringStoresCompatibilityLevelEnum CurrentStringStoresCompatibilityLevel where ValidationCheckEnumValue((value == nothing || InRange<CurrentStringStoresCompatibilityLevelEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "CurrentStringStoresCompatibilityLevel", "Dimension", "1050, 1100", value) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type RelationshipsType
{
    optional RelationshipType Relationship with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncodingDefaults{Namespace = XMLAEng300300Namespace};

type DimensionAttributesType
{
    optional array<DimensionAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

type AttributeAllMemberTranslationsType
{
    optional array<TranslationType> MemberAllMemberTranslation with XmlEncoding{Name = "MemberAllMemberTranslation", Namespace = XMLAEngNamespace};
}

type HierarchiesType
{
    optional array<HierarchyType> Hierarchy with XmlEncoding{Name = "Hierarchy", Namespace = XMLAEngNamespace};
}

type CurrentStorageModeType
{
    DimensionCurrentStorageModeEnum Value where ValidationCheckValid(ValidateInMemory(Value as DimensionCurrentStorageModeEnum, valuens as Eng200200ValuensEnum) 
    && ValidationCheckEnumValue(InRange<DimensionCurrentStorageModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "CurrentStorageMode", "Dimension", "Molap, InMemory, Rolap", value)
    , null, true, ReferenceType.Type, "MSSSAS", "CurrentStorageMode", "Dimension", "When the enumeration value of CurrentStorageMode is 'InMemory', the valuens attribute MUST be included.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional Eng200200ValuensEnum valuens with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XMLAEng200200Namespace};
}

type UnknownMemberTranslationsType
{
    optional array<TranslationType> UnknownMemberTranslation with XmlEncoding{Name = "UnknownMemberTranslation", Namespace = XMLAEngNamespace};
}

type DimensionPermissionsType
{
    array<DimensionPermissionType> DimensionPermission with XmlEncoding{Name = "DimensionPermission", Namespace = XMLAEngNamespace};
}

type UnknownMemberType
{
    UnknownMemberEnum Value where ValidationCheckValid(ValidateAutomaticNull(Value as UnknownMemberEnum, valuens as Eng200200ValuensEnum) 
    && ValidationCheckEnumValueTooManyItems(InRange<UnknownMemberEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "UnknownMember", "DataSourceView", "MS-SSAS")
    , null, true, ReferenceType.Type, "MSSSAS", "UnknownMember", "Dimension", "If the AutomaticNull value is used as UnknownMember, the valuens attribute MUST be used.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional Eng200200ValuensEnum valuens with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XMLAEng200200Namespace};
}

// 2.2.4.2.2.8.1    DimensionAttribute
type DimensionAttributeType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionAttributeTypeEnumType Type where (value == nothing || ExtendedType == nothing || ValidateDimensionAttributeExtendedType(Type as DimensionAttributeTypeEnum, ExtendedType as string));
    optional UsageEnum Usage where ValidationCheckValid(value == nothing || UnaryOperatorColumn == nothing || ValidateUnaryOperatorColumnSource(Usage as UsageEnum, UnaryOperatorColumn as DataItemType) 
    && ValidationCheckEnumValue((value == nothing || InRange<UsageEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Usage", "DimensionAttribute", "Regular, Key, Parent", value)
    , null, true, ReferenceType.Type, "MSSSAS", "Usage", "DimensionAttribute", "When Usage = Parent, the Source element within UnaryOperatorColumn in Type DimensionAttribute MUST be of AttributeBinding or ColumnBinding, but it is not.") with XmlEncoding{Namespace = XMLAEngNamespace};

    optional BindingTypeOfDimensionAttributeTypePattern Source where ValidationCheck(value == nothing || value == null || (value != null && (Source is AttributeBindingType || Source is UserDefinedGroupBindingType || Source is UserDefinedGroupBindingType ||
        Source is MeasureBindingType || Source is CalculatedMeasureBindingType || Source is CubeAttributeBindingType ||Source is TimeAttributeBindingType)), null, 
        "MSSSAS: Souce field in DimensionAttribute MUST be one of the following binding: AttributeBinding, UserDefinedGroupBinding, MeasureBinding, CalculatedMeasureBinding, CubeAttributeBinding and TimeAttributeBinding, but it is not.") with XmlEncoding{Namespace = XMLAEngNamespace};

    optional long EstimatedCount with XmlEncoding{Namespace = XMLAEngNamespace};
    AttributeKeyColumnsType KeyColumns where (KeyColumns.KeyColumn == nothing || ValidateKeyColumnSource(KeyColumns.KeyColumn as array<DataItemType>)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType NameColumn where (value == nothing || ValidateNameColumnSource(NameColumn as DataItemType)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType ValueColumn where (value == nothing || ValidateValueColumnSource(ValueColumn as DataItemType)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeRelationshipsType AttributeRelationships with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DiscretizationMethodEnum DiscretizationMethod where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DiscretizationMethodEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DiscretizationMethod", "DimensionAttribute", "DimensionAttribute", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int DiscretizationBucketCount with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RootMemberIfEnum RootMemberIf where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<RootMemberIfEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "RootMemberIf", "DimensionAttribute", "DimensionAttribute", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OrderByEnum OrderBy where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<OrderByEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "OrderBy", "DimensionAttribute", "DimensionAttribute", "MS-SSAS");
    optional string DefaultMember with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string OrderByAttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType SkippedLevelsColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string NamingTemplate with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MembersWithDataEnum MembersWithData where ValidationCheckEnumValue((value == nothing || InRange<MembersWithDataEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MembersWithData", "DimensionAttribute", "NonLeafDataHidden, NonLeafDataVisible", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string MembersWithDataCaption with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NamingTemplateTranslationsType NamingTemplateTranslations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType CustomRollupColumn where (value == nothing || ValidateCustomRollupColumnSource(CustomRollupColumn as DataItemType)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType CustomRollupPropertiesColumn where (value == nothing || ValidateCustomRollupPropertiesColumnSource(CustomRollupPropertiesColumn as DataItemType)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType UnaryOperatorColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyOrdered with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool MemberNamesUnique with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool IsAggregatable with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyEnabled with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyVisible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AttributeHierarchyDisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool KeyUniquenessGuarantee with XmlEncoding{Namespace = XMLAEngNamespace};
    optional GroupingBehaviorEnum GroupingBehavior where ValidationCheckEnumValue((value == nothing || InRange<GroupingBehaviorEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "GroupingBehavior", "DimensionAttribute", "EncourageGrouping, DiscourageGrouping", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InstanceSelectionEnum InstanceSelection where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<InstanceSelectionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "InstanceSelection", "DimensionAttribute", "DimensionAttribute", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingStateEnum ProcessingState where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ProcessingStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingState", "DimensionAttribute", "DimensionAttribute", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeHierarchyProcessingStateEnum AttributeHierarchyProcessingState where ValidationCheckEnumValue((value == nothing || InRange<AttributeHierarchyProcessingStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AttributeHierarchyProcessingState", "DimensionAttribute", "Processed, Unprocessed, DependencyError", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DimensionAttributeVisualizationPropertiesType VisualizationProperties with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ExtendedType with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type NamingTemplateTranslationsType
{
    optional array<TranslationType> NamingTemplateTranslation with XmlEncoding{Name = "NamingTemplateTranslation", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.8.1.1    AttributeRelationship
type AttributeRelationshipType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RelationshipTypeEnum RelationshipType where ValidationCheckEnumValue((value == nothing || InRange<RelationshipTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "RelationshipType", "AttributeRelationship", "Rigid, Flexible", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CardinalityEnum Cardinality where ValidationCheckEnumValue((value == nothing || InRange<CardinalityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Cardinality", "AttributeRelationship", "One, Many", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OptionalityEnum Optionality where ValidationCheckEnumValue((value == nothing || InRange<OptionalityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Optionality", "AttributeRelationship", "Mandatory, Optional", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OverrideBehaviorEnum OverrideBehavior where ValidationCheckEnumValue((value == nothing || InRange<OverrideBehaviorEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "OverrideBehavior", "AttributeRelationship", "None, Strong", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.8.1.2    DimensionAttributeVisualizationProperties
type DimensionAttributeVisualizationPropertiesType
{
    optional int FolderPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional ContextualNameRuleEnum ContextualNameRule where ValidationCheckEnumValue((value == nothing || InRange<ContextualNameRuleEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ContextualNameRule", "DimensionAttributeVisualizationProperties", "None, Context, Merge", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional AlignmentEnum Alignment where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AlignmentEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Alignment", "DimensionAttributeVisualizationProperties", "DimensionAttributeVisualizationProperties", "MS-SSAS") with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsFolderDefault with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsRightToLeft with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional SortDirectionEnum SortDirection where ValidationCheckEnumValue((value == nothing || InRange<SortDirectionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "SortDirection", "DimensionAttributeVisualizationProperties", "Default, Ascending, Descending", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional string Units with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int Width with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int DefaultDetailsPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int CommonIdentifierPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int SortPropertiesPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int DisplayKeyPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsDefaultImage with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional DefaultAggregateFunctionEnum DefaultAggregateFunction where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DefaultAggregateFunctionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DefaultAggregateFunction", "DimensionAttributeVisualizationProperties", "DimensionAttributeVisualizationProperties", "MS-SSAS") with XmlEncoding{Namespace = XMLAEng300Namespace};
};

type AttributeRelationshipsType
{
    optional array<AttributeRelationshipType> AttributeRelationship with XmlEncoding{Name = "AttributeRelationship", Namespace = XMLAEngNamespace};
}

type DimensionAttributeTypeEnumType
{
    DimensionAttributeTypeEnum Value where ValidationCheckValid(ValidateRowNumber(Value as DimensionAttributeTypeEnum, valuens as Eng200200ValuensEnum) 
    && ValidationCheckEnumValueTooManyItems(InRange<DimensionAttributeTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "DimensionAttribute", "DimensionAttribute", "MS-SSAS")
    , null, true, ReferenceType.Type, "MSSSAS", "Type", "DimensionAttribute", "If the value 'RowNumber' is used for the Type element, the valuens attribute MUST be present.") with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional Eng200200ValuensEnum valuens with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XMLAEng200200Namespace};
}

type AttributeKeyColumnsType
{
    optional array<DataItemType> KeyColumn with XmlEncoding{Name = "KeyColumn", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.8.2    Hierarchy
type HierarchyType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional Eng300ProcessingStateEnum ProcessingState where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<Eng300ProcessingStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingState", "Hierarchy", "Hierarchy", "MS-SSAS") with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional StructureTypeEnum StructureType where ValidationCheckEnumValue((value == nothing || InRange<StructureTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "StructureType", "Hierarchy", "Natural, Unnatural, Unknown", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AllMemberName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AllMemberTranslationsType AllMemberTranslations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool MemberNamesUnique with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MemberKeysUniqueEnum MemberKeysUnique where ValidationCheckEnumValue((value == nothing || InRange<MemberKeysUniqueEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MemberKeysUnique", "Hierarchy", "NotUnique, Unique", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AllowDuplicateNames with XmlEncoding{Namespace = XMLAEngNamespace};
    LevelsType Levels with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional HierarchyVisualizationPropertiesType VisualizationProperties with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AllMemberTranslationsType
{
    optional array<TranslationType> AllMemberTranslation with XmlEncoding{Name = "AllMemberTranslation", Namespace = XMLAEng300Namespace};
}

type LevelsType
{
    array<LevelType> Level with XmlEncoding{Name = "Level", Namespace = XMLAEngNamespace};
}

type HierarchyVisualizationPropertiesType
{
    optional ContextualNameRuleEnum ContextualNameRule where ValidationCheckEnumValue((value == nothing || InRange<ContextualNameRuleEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ContextualNameRule", "HierarchyVisualizationProperties", "None, Context, Merge", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int FolderPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
};

// 2.2.4.2.2.8.2.1    Level
type LevelType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string SourceAttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional HideMemberIfEnum HideMemberIf where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<HideMemberIfEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "HideMemberIf", "Level", "Level", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.8.3    Relationship
type RelationshipType
{
    string Name with XmlEncoding{Namespace = XMLAEng300300Namespace};
    bool Visible with XmlEncoding{Namespace = XMLAEng300300Namespace};
    RelationshipEndType FromRelationshipEnd with XmlEncoding{Namespace = XMLAEng300300Namespace};
    RelationshipEndType ToRelationshipEnd with XmlEncoding{Namespace = XMLAEng300300Namespace};
}

type RelationshipEndType
{
    string Role with XmlEncoding{Namespace = XMLAEng300300Namespace};
    MultiplicityEnum Multiplicity where ValidationCheckEnumValue((value == nothing || InRange<MultiplicityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Multiplicity", "RelationshipEnd", "One, Many", value) with XmlEncoding{Namespace = XMLAEng300300Namespace};
    string DimensionID with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional RelationshipAttributesType Attributes with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional eng300_300_RelationshipEndTranslationsType Translations with XmlEncoding{Namespace = XMLAEng300300Namespace};
}

type RelationshipAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEng300300Namespace};
}

type RelationshipAttributesType
{
    optional array<RelationshipAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEng300300Namespace};
    optional RelationshipEndVisualizationPropertiesType VisualizationProperties with XmlEncoding{Namespace = XMLAEng300300Namespace};
}

type eng300_300_RelationshipEndTranslationsType
{
    optional array<RelationshipEndTranslationType> Translation with XmlEncoding{Name = "Translation", Namespace = XMLAEng300300Namespace};
}

type RelationshipEndTranslationType
{
    uint Language with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional string Caption with XmlEncoding{Namespace = XMLAEng300300Namespace};
    string CollectionCaption with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional string Description with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional eng300_300_AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEng300300Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type eng300_300_AnnotationType
{
    string Name with XmlEncoding{Namespace = XMLAEng300300Namespace};
    optional VisibilityEnum Visibility where ValidationCheckEnumValue((value == nothing || InRange<VisibilityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Visibility", "Relationship", "SchemaRowset, None", value) with XmlEncoding{Namespace = XMLAEng300300Namespace};
    xml Value with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

type eng300_300_AnnotationsType
{
    optional array<eng300_300_AnnotationType> Annotation with XmlEncoding{Name = "Annotation", Namespace = XMLAEng300300Namespace};
}

type RelationshipEndVisualizationPropertiesType
{
    optional int FolderPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional Eng300ContextualNameRuleEnum ContextualNameRule with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int DefaultDetailsPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int DisplayKeyPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int CommonIdentifierPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsDefaultMeasure with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsDefaultImage with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int SortPropertiesPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
}

// 2.2.4.2.2.9    Cube
type CubeType : MajorObjectCommonElementsType
{
    optional int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    CubeDimensionsType Dimensions where ValidateNameUniqueInDimensionAndMeasureGroup(Dimensions, MeasureGroups) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubePermissionsType CubePermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MdxScriptsType MdxScripts with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveType Perspectives with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue(value == nothing || InRange<StateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "State", "Cube", "Processed, PartiallyProcessed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DefaultMeasure with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    MeasureGroupsType MeasureGroups with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewBindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AggregationPrefix with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int ProcessingPriority with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubeStorageModeType StorageMode with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingModeEnum ProcessingMode where ValidationCheckEnumValue((value == nothing || InRange<ProcessingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingMode", "Cube", "Regular, LazyAggregations", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ScriptCacheProcessingModeEnum ScriptCacheProcessingMode where ValidationCheckEnumValue((value == nothing || InRange<ScriptCacheProcessingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ScriptCacheProcessingMode", "Cube", "Regular, Lazy", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ScriptErrorHandlingModeEnum ScriptErrorHandlingMode where ValidationCheckEnumValue((value == nothing || InRange<ScriptErrorHandlingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ScriptErrorHandlingMode", "Cube", "IgnoreNone, IgnoreAll", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProactiveCachingType ProactiveCaching with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KpisType Kpis with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ActionsType Actions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string StorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedRows with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CubeDimensionsType
{
    array<CubeDimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.9.1    CubeDimension
type CubeDimensionType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    string DimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationUsageEnum AllMemberAggregationUsage where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AggregationUsageEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AllMemberAggregationUsage", "CubeDimension", "CubeDimension", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional HierarchyUniqueNameStyleEnum HierarchyUniqueNameStyle where ValidationCheckEnumValue((value == nothing || InRange<HierarchyUniqueNameStyleEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "HierarchyUniqueNameStyle", "CubeDimension", "IncludeDimensionName, ExcludeDimensionName", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MemberUniqueNameStyleEnum MemberUniqueNameStyle where ValidationCheckEnumValue((value == nothing || InRange<MemberUniqueNameStyleEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MemberUniqueNameStyle", "CubeDimension", "Native, NamePath", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubeAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubeHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CubeAttributesType
{
    optional array<CubeAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

type CubeHierarchiesType
{
    optional array<CubeHierarchyType> Hierarchy with XmlEncoding{Name = "Hierarchy", Namespace = XMLAEngNamespace};
}

type CubePermissionsType
{
    optional array<CubePermissionType> CubePermission with XmlEncoding{Name = "CubePermission", Namespace = XMLAEngNamespace};
}

type MdxScriptsType
{
    optional array<MdxScriptType> MdxScript with XmlEncoding{Name = "MdxScript", Namespace = XMLAEngNamespace};
}

type PerspectivesType
{
    optional array<PerspectiveType> Perspective with XmlEncoding{Name = "Perspective", Namespace = XMLAEngNamespace};
}

type MeasureGroupsType
{
    optional array<MeasureGroupType> MeasureGroup with XmlEncoding{Name = "MeasureGroup", Namespace = XMLAEngNamespace};
}

type CubeStorageModeType
{
    CubeStorageModeEnum Value where ValidationCheckEnumValueTooManyItems(InRange<CubeStorageModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "CubeStorageMode", "Cube", "Cube", "MS-SSAS") with XmlEncoding{Kind = XmlKind.Text};
    Eng200200ValuensEnum valuens where ValidationCheckCubeStorageMode(Value as CubeStorageModeEnum, valuens as Eng200200ValuensEnum) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XMLAEng200200Namespace};
}

type KpisType
{
    optional array<KpiType> Kpi with XmlEncoding{Name = "Kpi", Namespace = XMLAEngNamespace};
}

type ActionsType
{
    optional ActionTypeArrayPattern Action with XmlEncoding{Name = "Action", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.9.2    CubeAttribute
type CubeAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationUsageEnum AggregationUsage where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AggregationUsageEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AggregationUsage", "CubeAttribute", "CubeAttribute", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeHierarchyOptimizedStateEnum AttributeHierarchyOptimizedState where ValidationCheckEnumValue((value == nothing || InRange<AttributeHierarchyOptimizedStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AttributeHierarchyOptimizedState", "CubeAttribute", "FullyOptimized, NotOptimized", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyEnabled with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyVisible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.3    CubeHierarchy
type CubeHierarchyType
{
    string HierarchyID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeHierarchyOptimizedStateEnum OptimizedState where ValidationCheckEnumValue((value == nothing || InRange<AttributeHierarchyOptimizedStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "OptimizedState", "CubeHierarchy", "FullyOptimized, NotOptimized", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Enabled with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.4    Kpi
type KpiType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AssociatedMeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Value with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Goal with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Status with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Trend with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Weight with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string TrendGraphic with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string StatusGraphic with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string CurrentTimeMember with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ParentKpiID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.5    Action
type ActionType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Caption with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool CaptionIsMdx with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    TargetTypeEnum TargetType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<TargetTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "TargetType", "Action", "Action", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Target with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Condition with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InvocationEnum Invocation where ValidationCheckEnumValue((value == nothing || InRange<InvocationEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Invocation", "Action", "Interactive, OnOpen, Batch", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Application with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.5.1    StandardAction
type StandardActionType : ActionType
{
    ActionTypeEnum Type where ValidationCheckEnumValueTooManyItems(InRange<ActionTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "StandardAction", "StandardAction", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    string Expression with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.5.2    ReportAction
type ReportActionType : ActionType
{
    ActionTypeEnum Type where ValidationCheck(value == ActionTypeEnum.Report, null, ("MSSSAS: In the derived action type ReportAction, this feild Type MUST be set to 'Report', but the actual value is " + value)) with XmlEncoding{Namespace = XMLAEngNamespace};
    string ReportServer with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Path with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReportParametersType ReportParameters with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReportFormatParametersType ReportFormatParameters with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ReportParametersType
{
    optional array<ReportParameterType> ReportParameter with XmlEncoding{Name = "ReportParameter", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.9.5.2.1    ReportParameter
type ReportParameterType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    string Value with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ReportFormatParametersType
{
    optional array<ReportFormatParameterType> ReportFormatParameterType with XmlEncoding{Name = "ReportFormatParameterType", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.9.5.2.2    ReportFormatParameter
type ReportFormatParameterType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    string Value with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.9.5.3    DrillThroughAction
type DrillThroughActionType : ActionType
{
    ActionTypeEnum Type where ValidationCheck(value == ActionTypeEnum.DrillThrough, null, ("MSSSAS: In the derived action type DrillThroughAction, this feild Type MUST be set to 'DrillThrough', but the actual value is " + value)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Default with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ColumnsType Columns where ValidateColumns(Columns as ColumnsType) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int MaximumRows with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ColumnsType
{
    optional BindingTypeArrayPattern Column with XmlEncoding{Name = "Column", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.10    MdxScript
type MdxScriptType : MajorObjectCommonElementsType
{
     optional CommandsType Commands with XmlEncoding{Namespace = XMLAEngNamespace};
     optional bool DefaultScript with XmlEncoding{Namespace = XMLAEngNamespace};
     optional CalculationPropertiesType CalculationProperties with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CommandsType
{
    optional array<CommandType> Command with XmlEncoding{Name = "Command", Namespace = XMLAEngNamespace};
}

type CalculationPropertiesType
{
    optional array<CalculationPropertyType> CalculationProperty with XmlEncoding{Name = "CalculationProperty", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.10.1    CalculationProperty
type CalculationPropertyType
{
    string CalculationReference with XmlEncoding{Namespace = XMLAEngNamespace};
    CalculationTypeEnum CalculationType where ValidationCheckEnumValue(InRange<CalculationTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "CalculationType", "CalculationProperty", "Member, Set, Cells", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int SolveOrder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ForeColor with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string BackColor with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FontName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FontSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FontFlags with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string NonEmptyBehavior with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AssociatedMeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CalculationPropertiesVisualizationPropertiesType VisualizationProperties with XmlEncoding{Namespace = XMLAEng300Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.10.2    CalculationPropertiesVisualizationProperties
type CalculationPropertiesVisualizationPropertiesType
{
    optional int FolderPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional ContextualNameRuleEnum ContextualNameRule where ValidationCheckEnumValue((value == nothing || InRange<ContextualNameRuleEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ContextualNameRule", "CalculationPropertiesVisualizationProperties", "None, Context, Merge", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional AlignmentEnum Alignment where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AlignmentEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Alignment", "CalculationPropertiesVisualizationProperties", "CalculationPropertiesVisualizationProperties", "MS-SSAS") with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsFolderDefault with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsRightToLeft with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional SortDirectionEnum SortDirection where ValidationCheckEnumValue((value == nothing || InRange<SortDirectionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "SortDirection", "CalculationPropertiesVisualizationProperties", "Default, Ascending, Descending", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional string Units with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int Width with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsDefaultMeasure with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int DefaultDetailsPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional int SortPropertiesPosition with XmlEncoding{Namespace = XMLAEng300Namespace};
    optional bool IsSimpleMeasure with XmlEncoding{Namespace = XMLAEng300Namespace};
}

// 2.2.4.2.2.10.3    Command
type CommandType
{
    string Text with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11    MeasureGroup
type MeasureGroupType : MajorObjectCommonElementsType
{
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupTypeEnum Type where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<MeasureGroupTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Type", "MeasureGroup", "MeasureGroup", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue(value == nothing || InRange<StateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "State", "MeasureGroup", "Processed, PartiallyProcessed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    MeasuresType Measures with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataAggregationEnum DataAggregation where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DataAggregationEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DataAggregation", "MeasureGroup", "MeasureGroup", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupBindingType Source where ValidationCheck(value == nothing || value == null || value != null && value is MeasureGroupBindingType, null, "MSSSAS: The Source field in MeasureGroup structure, if exists, MUST be of type MeasureGroupBinding, but not.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupStorageModeType StorageMode with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string StorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool IgnoreUnrelatedDimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProactiveCachingType ProactiveCaching with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedRows with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingModeEnum ProcessingMode where ValidationCheckEnumValue((value == nothing || InRange<ProcessingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingMode", "MeasureGroup", "Regular, LazyAggregations", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    MeasureGroupDimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PartitionsType Partitions where (value == nothing || ValidateAggregationFunction(Partitions as PartitionsType, Measures as MeasuresType)) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AggregationPrefix with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int ProcessingPriority with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationDesignsType AggregationDesigns with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MeasuresType
{
    optional array<MeasureType> Measure with XmlEncoding{Name = "Measure", Namespace = XMLAEngNamespace};
}

type MeasureGroupDimensionsType
{
    optional MeasureGroupDimensionTypeArrayPattern Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

type MeasureGroupStorageModeType
{
    MeasureGroupStorageModeEnum Value where ValidationCheckValid(ValidationCheckInMemory(Value as MeasureGroupStorageModeEnum, valuens as Eng200200ValuensEnum) 
    && ValidationCheckEnumValueTooManyItems(InRange<DimensionAttributeTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "DimensionAttribute", "DimensionAttribute", "MS-SSAS")
    , null, true, ReferenceType.Type, "MSSSAS", "StorageMode", "MeasureGroup", "When the value of StorageMode field is 'InMemory', the valuens attribute MUST be used, buy not.");
    Eng200200ValuensEnum valuens with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XMLAEng200200Namespace};
}

type PartitionsType
{
    optional array<PartitionType> Partition with XmlEncoding{Name = "Partition", Namespace = XMLAEngNamespace};
}

type AggregationDesignsType
{
    optional array<AggregationDesignType> AggregationDesign with XmlEncoding{Name = "AggregationDesign", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.11.1    MeasureGroupDimension
type MeasureGroupDimensionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupDimensionBindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.1.1    ManyToManyMeasureGroupDimension
type ManyToManyMeasureGroupDimensionType : MeasureGroupDimensionType
{
    optional string MeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DirectSlice with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.1.2    RegularMeasureGroupDimension
type RegularMeasureGroupDimensionType : MeasureGroupDimensionType
{
    optional CardinalityEnum Cardinality where ValidationCheckEnumValue((value == nothing || InRange<CardinalityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Cardinality", "RegularMeasureGroupDimension", "One, Many", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    MeasureGroupAttributesType Attributes where ValidateGranularityAttribute(Attributes as MeasureGroupAttributesType) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.1.3    ReferenceMeasureGroupDimension
type ReferenceMeasureGroupDimensionType : MeasureGroupDimensionType
{
    string IntermediateCubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    string IntermediateGranularityAttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MaterializationEnum Materialization where ValidationCheckEnumValue((value == nothing || InRange<MaterializationEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Materialization", "ReferenceMeasureGroupDimension", "Regular, Indirect", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingStateEnum ProcessingState where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ProcessingStateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingState", "ReferenceMeasureGroupDimension", "ReferenceMeasureGroupDimension", "MS-SSAS") with XmlEncoding{Namespace = XMLAEng200200Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.1.4    DegenerateMeasureGroupDimension
type DegenerateMeasureGroupDimensionType : MeasureGroupDimensionType
{
    optional ShareDimensionStorageEnum ShareDimensionStorage where ValidationCheckEnumValue((value == nothing || InRange<ShareDimensionStorageEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ShareDimensionStorage", "DegenerateMeasureGroupDimension", "Distinct, Shared", value) with XmlEncoding{Namespace = XMLAEng200200Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.1.5    DataMiningMeasureGroupDimension
type DataMiningMeasureGroupDimensionType : MeasureGroupDimensionType
{
    string CaseCubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MeasureGroupAttributesType
{
    optional array<MeasureGroupAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.11.2    MeasureGroupAttribute
type MeasureGroupAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributeKeyColumnsType KeyColumns where ValidationKeyColumnSource(KeyColumns as AttributeKeyColumnsType) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureTypeEnum Type where ValidationCheckEnumValue((value == nothing || InRange<MeasureTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Type", "MeasureGroupAttribute", "Regular, Granularity", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.11.3    Measure
type MeasureType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregateFunctionEnum AggregateFunction where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AggregateFunctionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AggregateFunction", "Measure", "Measure", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataTypeEnum DataType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DataTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DataType", "Measure", "Measure", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    DataItemType Source where ValidationCheckValid(ValidationCheck_MeasureType_Source(Source as DataItemType)
    && ValidationCheck(value.Source == nothing ||
        value.Source is RowBindingType ||
        value.Source is ColumnBindingType ||
        value.Source is MeasureBindingType ||
        value.Source is CubeDimensionBindingType, null, 
        "MSSSAS: In struct Measure, the The Source element within the Source field MUST be one of the following types: RowBinding, ColumnBinding, MeasureBinding, or CubeDimensionBinding, but it is not")
    , null, true, ReferenceType.Type, "MSSSAS", "Source", "Measure", " - Source field's property NullProcessing MUST NOT use UnknownMember/Error as value, if the column is associated with a measure.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Visible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string MeasureExpression with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string BackColor with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ForeColor with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FontName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FontSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FontFlagsEnum FontFlags where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<FontFlagsEnum>(value as byte)), null, false, ReferenceType.Type, "MSSSAS", "FontFlags", "Measure", "Measure", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.12 AggregationDesign
type AggregationDesignType : MajorObjectCommonElementsType
{
    optional long EstimatedRows with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationDesignDimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationsType Aggregations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int EstimatedPerformanceGain with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationDesignDimensionsType
{
    optional array<AggregationDesignDimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

type AggregationsType
{
    optional array<AggregationType> Aggregation with XmlEncoding{Name = "Aggregation", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.12.1 AggregationDesignDimension
type AggregationDesignDimensionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationDesignDimensionAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationDesignDimensionAttributesType
{
    optional array<AggregationDesignAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.12.1.1 AggregationDesignAttribute
type AggregationDesignAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedCount with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.12.2 Aggregation
type AggregationType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationDimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationDimensionsType
{
    optional array<AggregationDimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.12.2.1 AggregationDimension
type AggregationDimensionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.12.2.1.1 AggregationAttribute
type AggregationAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.13 Partition
type PartitionType : MajorObjectCommonElementsType
{
    optional TabularBindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AggregationPrefix with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ExPartitionStorageModeEnum StorageMode where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ExPartitionStorageModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "StorageMode", "Partition", "Partition", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessingModeEnum ProcessingMode where ValidationCheckEnumValue((value == nothing || InRange<ProcessingModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ProcessingMode", "Partition", "Regular, LazyAggregations", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string StorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string RemoteDatasourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Slice with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProactiveCachingType ProactiveCaching with XmlEncoding{Namespace = XMLAEngNamespace};

    optional PartitionTypeEnum Type where ValidationCheckValid(ValidationCheckEnumValue((value == nothing || InRange<PartitionTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Type", "Partition", "Data, Writeback", value) && (value == nothing || Source == nothing || ValidateWriteBackSource(Type as PartitionTypeEnum, Source as TabularBindingType))
    , null, true, ReferenceType.Type, "MSSSAS", "Type", "Partition", "If Type field is set to 'Writeback', the Source field MUST NOT be empty, but it is empty or not exist.") with XmlEncoding{Namespace = XMLAEngNamespace};
    
    optional long EstimatedSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long EstimatedRows with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ExPartitionStorageModeEnum CurrentStorageMode where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ExPartitionStorageModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "CurrentStorageMode", "Partition", "Partition", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AggregationDesignID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationInstancesType AggregationInstances with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewBindingType AggregationInstanceSource with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue(value == nothing || InRange<StateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "State", "Partition", "Processed, PartiallyProcessed, Unprocessed", value);
    optional StringStoresCompatibilityLevelEnum StringStoresCompatibilityLevel where ValidationCheckEnumValue((value == nothing || InRange<StringStoresCompatibilityLevelEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "StringStoresCompatibilityLevel", "Partition", "1050, 1100", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CurrentStringStoresCompatibilityLevelEnum CurrentStringStoresCompatibilityLevel where ValidationCheckEnumValue((value == nothing || InRange<CurrentStringStoresCompatibilityLevelEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "CurrentStringStoresCompatibilityLevel", "Partition", "1050, 1100", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DirectQueryUsageEnum DirectQueryUsage where ValidationCheckEnumValue((value == nothing || InRange<DirectQueryUsageEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DirectQueryUsage", "Partition", "InMemoryWithDirectQuery, DirectQueryOnly, InMemoryOnly", value) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationInstancesType
{
    optional array<AggregationInstanceType> AggregationInstance with XmlEncoding{Name = "AggregationInstance", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.13.1 AggregationInstance
type AggregationInstanceType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    AggregationTypeEnum AggregationType where ValidationCheckEnumValue((value == nothing || InRange<AggregationTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AggregationType", "AggregationInstance", "IndexedView, Table, UserDefined", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TabularBindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationInstanceDimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationInstanceMeasuresType Measures with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
}

type AggregationInstanceDimensionsType
{
    optional array<AggregationInstanceDimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.13.1.1 AggregationInstanceDimension
type AggregationInstanceDimensionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationInstanceAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationInstanceAttributesType
{
    optional array<AggregationInstanceAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.13.1.2 AggregationInstanceAttribute
type AggregationInstanceAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyColumnsType KeyColumns where ValidateAggregationInstanceAttributeKeyColumnSource(KeyColumns as KeyColumnsType) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AggregationInstanceMeasuresType
{
    optional array<AggregationInstanceMeasureType> Measure with XmlEncoding{Name = "Measure", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.13.1.3 AggregationInstanceMeasure
type AggregationInstanceMeasureType
{
    string MeasureID with XmlEncoding{Namespace = XMLAEngNamespace};
    ColumnBindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.14 Perspective
type PerspectiveType : MajorObjectCommonElementsType
{
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DefaultMeasure with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveDimensionsType Dimensions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveMeasureGroupsType MeasureGroups with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveCalculationsType Calculations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveKpisType Kpis with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveActionsType Actions with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveDimensionsType
{
    optional array<PerspectiveDimensionType> Dimension with XmlEncoding{Name = "Dimension", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.1 PerspectiveDimension
type PerspectiveDimensionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveAttributesType
{
    optional array<PerspectiveAttributeType> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.1.1 PerspectiveAttribute
type PerspectiveAttributeType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AttributeHierarchyVisible with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DefaultMember with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveHierarchiesType
{
    optional array<PerspectiveHierarchyType> Hierarchy with XmlEncoding{Name = "Hierarchy", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.1.2 PerspectiveHierarchy
type PerspectiveHierarchyType
{
    string HierarchyID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveMeasureGroupsType
{
    optional array<PerspectiveMeasureGroupType> MeasureGroup with XmlEncoding{Name = "MeasureGroup", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.2 PerspectiveMeasureGroup
type PerspectiveMeasureGroupType
{
    string MeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PerspectiveMeasuresType Measures with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveMeasuresType
{
    optional array<PerspectiveMeasureType> Measure with XmlEncoding{Name = "Measure", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.2.1 PerspectiveMeasure
type PerspectiveMeasureType
{
    string MeasureID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
}

type PerspectiveCalculationsType
{
    optional array<PerspectiveCalculationType> Calculation with XmlEncoding{Name = "Calculation", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.3 PerspectiveCalculation
type PerspectiveCalculationType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    PerspectiveCalculationEnum Type where ValidationCheckEnumValue(InRange<PerspectiveCalculationEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "PerspectiveCalculation", "Member, Set", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveKpisType
{
    optional array<PerspectiveKpiType> Kpi with XmlEncoding{Name = "Kpi", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.4 PerspectiveKpi
type PerspectiveKpiType
{
    string KpiID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type PerspectiveActionsType
{
    optional array<PerspectiveActionType> Action with XmlEncoding{Name = "Action", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.14.5 PerspectiveAction
type PerspectiveActionType
{
    string ActionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.15 MiningStructure
type MiningStructureType : MajorObjectCommonElementsType
{
    optional BindingTypeOfMiningStructureTypePattern Source where ValidationCheckValid(value == nothing || Source is DataSourceViewBindingType || Source is DimensionBindingType || Source is CubeDimensionBindingType, null, true, ReferenceType.Type, "MSSSAS", "Source", "MiningStructure", " - One of the following derived classes MUST be used: DataSourceViewBinding, DimensionBinding, or CubeDimensionBinding.");

    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CacheModeEnum CacheMode where ValidationCheckEnumValue((value == nothing || InRange<CacheModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "CacheMode", "MiningStructure", "KeepTrainingCases, ClearAfterProcessing", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int HoldoutMaxPercent with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int HoldoutMaxCases with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int HoldoutSeed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int HoldoutActualSize with XmlEncoding{Namespace = XMLAEngNamespace};
    MiningStructureColumnsType Columns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue((value == nothing || InRange<StateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "State", "MiningStructure", "Processed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelsType MiningModes with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MiningStructurePermissionsType
{
    optional array<MiningStructurePermissionType> MiningStructurePermission with XmlEncoding{Name = "MiningStructurePermission", Namespace = XMLAEngNamespace};
};

type MiningModelsType
{
    optional array<MiningModelType> MiningModel with XmlEncoding{Name = "MiningModel", Namespace = XMLAEngNamespace};
};

type MiningStructureColumnsType
{
    array<MiningStructureColumnType> Column with XmlEncoding{Name = "Column", Namespace = XMLAEngNamespace};
};

// 2.2.4.2.2.15.1 MiningStructureColumn
type MiningStructureColumnType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    MiningStructureColumnTypeEnum Type where ValidationCheckEnumValueTooManyItems(InRange<MiningStructureColumnTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "MiningStructureColumn", "MiningStructureColumn", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.15.1.1 ScalarMiningStructureColumn
type ScalarMiningStructureColumnType : MiningStructureColumnType
{
    optional bool IsKey with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BindingTypeOfScalarMiningStructureColumnTypePattern Source where ValidationCheckValid(Source is AttributeBindingType || Source is CubeAttributeBindingType || Source is MeasureBindingType, null, true, ReferenceType.Type, "MSSSAS", "Source", "ScalarMiningStructureColumn", "one of the following derived classes MUST be used: AttributeBinding, CubeAttributeBinding, or MeasureBinding.");

    optional string Distribution with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ModelingFlagsType ModelingFlags with XmlEncoding{Namespace = XMLAEngNamespace};
    ScalarMiningStructureColumnContentEnum Content where ValidationCheckEnumValueTooManyItems(InRange<ScalarMiningStructureColumnContentEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Content", "ScalarMiningStructureColumn", "ScalarMiningStructureColumn", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ClassifiedColumnsType ClassifiedColumns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DiscretizationMethod with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int DiscretizationBucketCount with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyColumnsType KeyColumns where ValidationCheckValid(ValidationCheck_ScalarMiningStructureColumnType_KeyColumns(KeyColumns as KeyColumnsType), null, true, ReferenceType.Type, "MSSSAS", "KeyColumns", "ScalarMiningStructureColumn", "The Source element within the DataItem MUST be of type ColumnBinding.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType NameColumn where ValidationCheckValid(ValidationCheck_ScalarMiningStructureColumnType_NameColumn(NameColumn as DataItemType), null, true, ReferenceType.Type, "MSSSAS", "NameColumn", "ScalarMiningStructureColumn", "The Source element within the DataItem MUST be of type ColumnBinding.") with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ModelingFlagsType
{
    optional array<MiningModelingFlagType> ModelingFlag with XmlEncoding{Name = "ModelingFlag", Namespace = XMLAEngNamespace};
};

type ClassifiedColumnsType
{
    optional array<string> ClassifiedColumnID with XmlEncoding{Name = "ClassifiedColumnID", Namespace = XMLAEngNamespace};
};

type KeyColumnsType
{
    optional array<DataItemType> KeyColumn with XmlEncoding{Name = "KeyColumn", Namespace = XMLAEngNamespace};
};

// 2.2.4.2.2.15.1.2 TableMiningstructureColumn
type TableMiningStructureColumnType : MiningStructureColumnType
{
    optional ForeignKeyColumnsType ForeignKeyColumns where ValidationCheckValid(ValidationCheck_TableMiningStructureColumnType_ForeignKeyColumns(ForeignKeyColumns as ForeignKeyColumnsType), null, true, ReferenceType.Type, "MSSSAS", "ForeignKeyColumns", "TableMiningStructureColumn", "The Source element within the DataItem MUST be of type ColumnBinding.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MeasureGroupBindingType SourceMeasureGroup with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningStructureColumnsType Columns with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ForeignKeyColumnsType
{
    optional array<DataItemType> ForeignKeyColumn with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.16 MiningModel
type MiningModelType : MajorObjectCommonElementsType
{
    AlgorithmEnum Algorithm where ValidationCheckEnumValueTooManyItems(InRange<AlgorithmEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Algorithm", "MiningModel", "MiningModel", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DateTime LastProcessed with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AlgorithmParametersType AlgorithmParameters with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelTranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelColumnsType Columns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StateEnum State where ValidationCheckEnumValue((value == nothing || InRange<StateEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "State", "MiningModel", "Processed, Unprocessed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FoldingParametersType FoldingParameters with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Filter with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MiningModelPermissionsType MiningModelPermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MiningModelPermissionsType
{
    optional array<MiningModelPermissionType> MiningModelPermission with XmlEncoding{Name = "MiningModelPermission", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.16.1 MiningModelingFlag
type MiningModelingFlagType
{
    string ModelingFlag with XmlEncoding{Namespace = XMLAEngNamespace};
}

type MiningModelColumnsType
{
    optional array<MiningModelColumnType> Column with XmlEncoding{Name = "Column", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.16.2 MiningModelColumn
type MiningModelColumnType
{
    optional string ID with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    string SourceColumnID with XmlEncoding{Namespace = XMLAEngNamespace};
    MiningModelColumnUsageEnum Usage where ValidationCheckEnumValue(InRange<MiningModelColumnUsageEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Usage", "MiningModelColumn", "Key, Input, Predict, PredictOnly", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Filter with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ColumnsType Columns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ModelingFlagsType ModelingFlags with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MiningModelTranslationsType
{
    optional array<AttributeTranslationType> Translation with XmlEncoding{Name = "Translation", Namespace = XMLAEngNamespace};
}

type AlgorithmParametersType
{
    optional array<AlgorithmParameterType> AlgorithmParameter with XmlEncoding{Name = "AlgorithmParameter", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.16.3 AlgorithmParameter
type AlgorithmParameterType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    xml Value with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.16.4   FoldingParameters
type FoldingParametersType
{
    int FoldIndex with XmlEncoding{Namespace = XMLAEngNamespace};
    int FoldCount with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long FoldMaxCases where ValidationCheckValid(value == nothing || value > 0, null, true, ReferenceType.Type, "MSSSAS", "FoldMaxCases", "FoldingParameters", "This value MUST be a positive integer.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string FoldTargetAttribute with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.17    Annotation
type AnnotationType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional VisibilityEnum Visibility where ValidationCheckEnumValue(value == nothing || InRange<VisibilityEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Visibility", "Annotation", "SchemaRowset, None", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional any Value with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.17.1    LinguisticSchemas Annotation
type LinguisticSchemasType
{
    array<LinguisticSchemaType> LinguisticSchema with XmlEncoding{Name = "LinguisticSchema", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.17.1.1    LinguisticSchema
type LinguisticSchemaType
{
    optional EntitiesType Entities with XmlEncoding{Namespace = XMLAEngNamespace};
    string Language with XmlEncoding{Namespace = XMLAEngNamespace};
}

type EntitiesType
{
    // Blocked by TDI #XXX.
    array<EntityType> Entity with XmlEncoding{Name = "Entity", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.17.1.1.1    Entity
type EntityType
{
    optional WordsType Words with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    string EdmEntitySet with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string EdmProperty with XmlEncoding{Namespace = XMLAEngNamespace};
}

type WordsType
{
    string Word with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.18    Translation
type TranslationType
{
    uint Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Caption with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.18.1    AttributeTranslation
type AttributeTranslationType
{
    uint Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Caption with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemType CaptionColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string MembersWithDataCaption with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.19    DataItem
type DataItemType
{
    DataTypeEnum DataType with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int DataSize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string MimeType with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NullProcessingEnum NullProcessing where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<NullProcessingEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "NullProcessing", "DataItem", "DataItem", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TrimmingEnum Trimming where ValidationCheckEnumValue(value == nothing || InRange<TrimmingEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Trimming", "DataItem", "Left, Right, LeftRight, None", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InvalidXmlCharactersEnum InvalidXmlCharacters where ValidationCheckEnumValue(value == nothing || InRange<InvalidXmlCharactersEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "InvalidXmlCharacters", "DataItem", "Preserve, Remove, Replace", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataItemFormatEnum Format where ValidationCheckEnumValue(value == nothing || InRange<DataItemFormatEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Format", "DataItem", "TrimRight, TrimLeft, TrimAll, TrimNone", value) with XmlEncoding{Namespace = XMLAEngNamespace};

    optional BindingTypeOfDataItemTypePattern Source with XmlEncoding{Namespace = XMLAEngNamespace};

    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20    Binding
type BindingType
{
}

// 2.2.4.2.2.20.1    ColumnBinding
type ColumnBindingType : BindingType
{
    string TableID with XmlEncoding{Namespace = XMLAEngNamespace};
    string ColumnID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.2    RowBinding
type RowBindingType : BindingType
{
    string TableID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.3    DataSourceViewBinding
type DataSourceViewBindingType : BindingType
{
    string DataSourceViewID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.4    MeasureBinding
type MeasureBindingType : BindingType
{
    string MeasureID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.5    AttributeBinding
type AttributeBindingType : BindingType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    AttributeBindingEnum Type where ValidationCheckEnumValueTooManyItems(InRange<AttributeBindingEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "AttributeBinding", "AttributeBinding", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Ordinal with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.6    UserDefinedGroupBinding
type UserDefinedGroupBindingType : BindingType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    UserDefinedGroupsType Groups with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type UserDefinedGroupsType
{
    optional array<GroupType> Group with XmlEncoding{Name = "Group", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.6.1    Group
type GroupType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional GroupMembersType Members with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type GroupMembersType
{
    optional array<string> Member with XmlEncoding{Name = "Member", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.7    CubeAttributeBinding
type CubeAttributeBindingType : BindingType
{
    string CubeID with XmlEncoding{Namespace = XMLAEngNamespace};
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    AttributeBindingEnum Type where ValidationCheckEnumValueTooManyItems(InRange<AttributeBindingEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Type", "CubeAttributeBinding", "CubeAttributeBinding", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OrdinalType Ordinal with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type OrdinalType
{
    optional array<int> Ordinal with XmlEncoding{Name = "Ordinal", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.8    DimensionBinding
type DimensionBindingType : BindingType
{
    string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    string DimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PersistenceEnum Persistence where ValidationCheckEnumValue(value == nothing || InRange<PersistenceEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Persistence", "DimensionBinding", "NotPersisted, Metadata, All", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RefreshPolicyEnum RefreshPolicy where ValidationCheckEnumValue(value == nothing || InRange<RefreshPolicyEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "RefreshPolicy", "DimensionBinding", "ByQuery, ByInterval", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan RefreshInterval with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.9    CubeDimensionBinding
type CubeDimensionBindingType : BindingType
{
    string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    string CubeID with XmlEncoding{Namespace = XMLAEngNamespace};
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Filter with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.10    MeasureGroupBinding
type MeasureGroupBindingType : BindingType
{
    string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    string CubeID with XmlEncoding{Namespace = XMLAEngNamespace};
    string MeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional PersistenceEnum Persistence where ValidationCheckEnumValue(value == nothing || InRange<PersistenceEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Persistence", "MeasureGroupBinding", "NotPersisted, Metadata, All", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RefreshPolicyEnum RefreshPolicy where ValidationCheckEnumValue(value == nothing || InRange<RefreshPolicyEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "RefreshPolicy", "MeasureGroupBinding", "ByQuery, ByInterval", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan RefreshInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Filter with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.11    MeasureGroupDimensionBinding
type MeasureGroupDimensionBindingType : BindingType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.12    TimeBinding
type TimeBindingType : BindingType
{
    DateTime CalendarStartDate with XmlEncoding{Namespace = XMLAEngNamespace};
    DateTime CalendarEndDate with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FirstDayOfWeek FirstDayOfWeek with XmlEncoding{Namespace = XMLAEngNamespace};
    optional LCIDEnum CalendarLanguage where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<LCIDEnum>(value as long)), null, true, ReferenceType.Type, "MSSSAS", "CalendarLanguage", "TimeBinding", "TimeBinding", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FiscalFirstMonth FiscalFirstMonth with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FiscalFirstDayOfMonth FiscalFirstDayOfMonth with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FiscalYearNameEnum FiscalYearName where ValidationCheckEnumValue(value == nothing || InRange<FiscalYearNameEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "FiscalYearName", "TimeBinding", "CalendarYearName, NextCalendarYearName", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReportingFirstMonth ReportingFirstMonth with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReportingFirstWeekOfMonthEnum ReportingFirstWeekOfMonth where ValidationCheckEnumValue(value == nothing || InRange<ReportingFirstWeekOfMonthEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ReportingFirstWeekOfMonth", "TimeBinding", "1, 2, 3, 4", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReportingWeekToMonthPatternEnum ReportingWeekToMonthPattern where ValidationCheckEnumValue(value == nothing || InRange<ReportingWeekToMonthPatternEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ReportingWeekToMonthPattern", "TimeBinding", "Weeks445, Weeks454, Weeks544", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ManufacturingFirstMonth ManufacturingFirstMonth with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ManufacturingFirstWeekOfMonth ManufacturingFirstWeekOfMonth with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ManufacturingExtraMonthQuarter ManufacturingExtraMonthQuarter with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.13    TimeAttributeBinding
type TimeAttributeBindingType : BindingType
{
}

// 2.2.4.2.2.20.14    InheritedBinding
type InheritedBindingType : BindingType
{
}

// 2.2.4.2.2.20.14    InheritedBinding
type TabularBindingType : BindingType
{
}

// 2.2.4.2.2.20.16    TableBinding
type TableBindingType : TabularBindingType
{
    optional string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    string DbTableName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DbSchemaName with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.17    QueryBinding
type QueryBindingType : TabularBindingType
{
    optional string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    string QueryDefinition with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.18    DSVTableBinding
type DSVTableBindingType : TabularBindingType
{
    optional string DataSourceViewID with XmlEncoding{Namespace = XMLAEngNamespace};
    string TableID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional eng300_DataEmbeddingStyleEnum DataEmbeddingStyle where ValidationCheckEnumValue(value == nothing || InRange<eng300_DataEmbeddingStyleEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "DataEmbeddingStyle", "DSVTableBinding", "Embedded, NotEmbedded", value) with XmlEncoding{Namespace = XMLAEng300Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.19    ProactiveCachingBinding
type ProactiveCachingBindingType : BindingType
{
}

// 2.2.4.2.2.20.20    ProactiveCachingObjectNotificationBinding
type ProactiveCachingObjectNotificationBindingType : ProactiveCachingBindingType
{
}

// 2.2.4.2.2.20.21    ProactiveCachingInheritedBinding
type ProactiveCachingInheritedBindingType : ProactiveCachingObjectNotificationBindingType
{
    optional NotificationTechniqueEnum NotificationTechnique where ValidationCheckEnumValue(value == nothing || InRange<NotificationTechniqueEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "NotificationTechnique", "ProactiveCachingInheritedBinding", "Client, Server", value) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.22    ProactiveCachingTablesBinding
type ProactiveCachingTablesBindingType : ProactiveCachingObjectNotificationBindingType
{
    optional NotificationTechniqueEnum NotificationTechnique where ValidationCheckEnumValue(value == nothing || InRange<NotificationTechniqueEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "NotificationTechnique", "ProactiveCachingTablesBinding", "Client, Server", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    TableNotificationsType TableNotifications with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type TableNotificationsType
{
    optional array<TableNotificationType> TableNotification with XmlEncoding{Name = "TableNotification", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.22.1    TableNotification
type TableNotificationType
{
    string DbTableName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DbSchemaName with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.23    ProactiveCachingQueryBinding
type ProactiveCachingQueryBindingType : ProactiveCachingBindingType
{
    TimeSpan RefreshInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    QueryNotificationsType QueryNotifications with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type QueryNotificationsType
{
    optional array<QueryNotificationType> QueryNotification with XmlEncoding{Name = "QueryNotification", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.23.1    QueryNotification
type QueryNotificationType
{
    string Query with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.24    ProactiveCachingIncrementalProcessingBinding
type ProactiveCachingIncrementalProcessingBindingType : ProactiveCachingBindingType
{
    optional TimeSpan RefreshInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    IncrementalProcessingNotificationsType IncrementalProcessingNotifications with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type IncrementalProcessingNotificationsType
{
    optional array<IncrementalProcessingNotificationType> IncrementalProcessingNotification with XmlEncoding{Name = "IncrementalProcessingNotification", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.20.24.1    IncrementalProcessingNotification
type IncrementalProcessingNotificationType
{
    optional string TableID with XmlEncoding{Namespace = XMLAEngNamespace};
    string ProcessingQuery with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.25    eng200_200:RowNumberBinding
type eng200_200_RowNumberBindingType : BindingType
{
}

// 2.2.4.2.2.20.26    CalculatedMeasureBinding
type CalculatedMeasureBindingType : BindingType
{
    string MeasureName with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.20.27    eng200_200:ExpressionBinding
type eng200_200_ExpressionBindingType : BindingType
{
    string Expression with XmlEncoding{Namespace = XMLAEng200200Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.21    Permission
type PermissionType : MajorObjectCommonElementsType
{
    string RoleID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Process with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadDefinitionEnum ReadDefinition where ValidationCheckEnumValue(value == nothing || InRange<ReadDefinitionEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ReadDefinition", "Permission", "None, Basic, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadEnum Read where ValidationCheckEnumValue(value == nothing || InRange<ReadEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Read", "Permission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.21.1    CubeDimensionPermission
type CubeDimensionPermissionType
{
    string CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadEnum Read where ValidationCheckEnumValue(value == nothing || InRange<ReadEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Read", "CubeDimensionPermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "CubeDimensionPermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttributePermissionsType AttributePermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type AttributePermissionsType
{
    optional array<AttributePermissionType> AttributePermission with XmlEncoding{Name = "AttributePermission", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.21.2    AttributePermission
type AttributePermissionType
{
    string AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DefaultMember with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string VisualTotals with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AllowedSet with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DeniedSet with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.21.3    CellPermission
type CellPermissionType
{
    AccessEnum Access where ValidationCheckEnumValue(InRange<AccessEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Access", "CellPermission", "Read, ReadContingent, ReadWrite", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.22    DatabasePermission
type DatabasePermissionType : PermissionType
{
    optional bool Administer with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "CubeDimensionPermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.23    DataSourcePermission
type DataSourcePermissionType : PermissionType
{
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "DataSourcePermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.24    DimensionPermission
type DimensionPermissionType : PermissionType
{
    optional AttributePermissionsType AttributePermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "DimensionPermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string AllowedRowsExpression with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.25    MiningStructurePermission
type MiningStructurePermissionType : PermissionType
{
    optional bool AllowDrillThrough with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "MiningStructurePermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.26    MiningModelPermission
type MiningModelPermissionType : PermissionType
{
    optional bool AllowDrillThrough with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AllowBrowsing with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "MiningModelPermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.27    CubePermission
type CubePermissionType : PermissionType
{
    optional ReadSourceDataEnum ReadSourceData where ValidationCheckEnumValue(value == nothing || InRange<ReadSourceDataEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ReadSourceData", "CubePermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CubeDimensionPermissionsType DimensionPermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CellPermissionsType CellPermissions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteEnum Write where ValidationCheckEnumValue(value == nothing || InRange<WriteEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Write", "CubePermission", "None, Allowed", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

type CubeDimensionPermissionsType
{
    optional array<CubeDimensionPermissionType> DimensionPermission with XmlEncoding{Name = "DimensionPermission", Namespace = XMLAEngNamespace};
}

type CellPermissionsType
{
    array<CellPermissionType> CellPermission with XmlEncoding{Name = "CellPermission", Namespace = XMLAEngNamespace};
    invariant CellPermission.Count <= 3;
}

// 2.2.4.2.2.28    Role
type RoleType : MajorObjectCommonElementsType
{
    optional MembersType Members with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type MembersType
{
    optional array<MemberType> Member with XmlEncoding{Name = "Member", Namespace = XMLAEngNamespace};
}

// 2.2.4.2.2.28.1    Member
type MemberType
{
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Sid with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.29    ProactiveCaching
type ProactiveCachingType
{
    optional OnlineModeEnum OnlineMode where ValidationCheckEnumValue(value == nothing || InRange<OnlineModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "OnlineMode", "ProactiveCaching", "Immediate, OnCacheComplete", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AggregationStorageEnum AggregationStorage where ValidationCheckEnumValue(value == nothing || InRange<AggregationStorageEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "AggregationStorage", "ProactiveCaching", "Regular, MolapOnly", value) with XmlEncoding{Namespace = XMLAEngNamespace};

    optional ProactiveCachingBindingTypePattern Source with XmlEncoding{Namespace = XMLAEngNamespace};

    optional TimeSpan SilenceInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan Latency with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan SilenceOverrideInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan ForceRebuildInterval with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Enabled with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.30    ErrorConfiguration
type ErrorConfigurationType
{
    optional long KeyErrorLimit with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string KeyErrorLogFile with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyErrorActionEnum KeyErrorAction where ValidationCheckEnumValue(value == nothing || InRange<KeyErrorActionEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "KeyErrorAction", "ErrorConfiguration", "ConvertToUnknown, DiscardRecord", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyErrorLimitActionEnum KeyErrorLimitAction where ValidationCheckEnumValue(value == nothing || InRange<KeyErrorLimitActionEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "KeyErrorLimitAction", "ErrorConfiguration", "StopProcessing, StopLogging", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyNotFoundEnum KeyNotFound where ValidationCheckEnumValue(value == nothing || InRange<KeyNotFoundEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "KeyNotFound", "ErrorConfiguration", "IgnoreError, ReportAndContinue, ReportAndStop", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeyDuplicateEnum KeyDuplicate where ValidationCheckEnumValue(value == nothing || InRange<KeyDuplicateEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "KeyDuplicate", "ErrorConfiguration", "IgnoreError, ReportAndContinue, ReportAndStop", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NullKeyConvertedToUnknownEnum NullKeyConvertedToUnknown where ValidationCheckEnumValue(value == nothing || InRange<NullKeyConvertedToUnknownEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "NullKeyConvertedToUnknown", "ErrorConfiguration", "IgnoreError, ReportAndContinue, ReportAndStop", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NullKeyNotAllowedEnum NullKeyNotAllowed where ValidationCheckEnumValue(value == nothing || InRange<NullKeyNotAllowedEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "NullKeyNotAllowed", "ErrorConfiguration", "IgnoreError, ReportAndContinue, ReportAndStop", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CalculationErrorEnum CalculationError where ValidationCheckEnumValue(value == nothing || InRange<CalculationErrorEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "CalculationError", "ErrorConfiguration", "IgnoreError, ReportAndStop", value) with XmlEncodingDefaults{Namespace = XMLAEng200Namespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.2.2.31    ImpersonationInfo
type ImpersonationInfoType
{
    ImpersonationModeEnum ImpersonationMode where ValidationCheckEnumValue(InRange<ImpersonationModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ImpersonationMode", "ImpersonationInfo", "Default, ImpersonateServiceAccount, ImpersonateAnonymous, ImpersonateCurrentUser, ImpersonateAccount", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Account with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImpersonationInfoSecurityEnum ImpersonationInfoSecurity where ValidationCheckEnumValue(value == nothing || InRange<ImpersonationInfoSecurityEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ImpersonationInfoSecurity", "ImpersonationInfo", "PasswordRemoved, Unchanged", value) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.3.1    Trace_Definition_ProviderInfo
type Trace_Definition_ProviderInfo_Type
{
    Trace_Definition_ProviderInfo_DataType Data with XmlEncoding{Namespace = XMLAEngNamespace};
}

type Trace_Definition_ProviderInfo_DataType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    VersionType Version with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Type with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type VersionType
{
    optional string Major with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Minor with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string BuildNumber with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.3.2    Trace_Event_Categories
type Trace_Event_Categories_Type
{
    Trace_Event_Categories_DataType Data with XmlEncoding{Namespace = XMLAEngNamespace};
}

type Trace_Event_Categories_DataType
{
    EventCategoryType EventCategory with XmlEncoding{Namespace = XMLAEngNamespace};
}

type EventCategoryType
{
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Type with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    EventListType EventList with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type EventListType
{
    optional array<TraceEventType> Event with XmlEncoding{Name = "Event", Namespace = XMLAEngNamespace};
}

// 2.2.4.3.2.1    TraceEvent
type TraceEventType
{
    int ID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Description with XmlEncoding{Namespace = XMLAEngNamespace};
    EventColumnListType EventColumnList with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type EventColumnListType
{
    optional array<EventColumnType> EventColumn with XmlEncoding{Name = "EventColumn", Namespace = XMLAEngNamespace};
}

// 2.2.4.3.2.1.1    EventColumn
type EventColumnType
{
    int ID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional EventColumnSubclassListType EventColumnSubclassList with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type EventColumnSubclassListType
{
    optional array<EventColumnSubclassType> EventColumnSubclass with XmlEncoding{Name = "EventColumnSubclass", Namespace = XMLAEngNamespace};
}

type EventColumnSubclassType
{
    int ID with XmlEncoding{Namespace = XMLAEngNamespace};
    int name with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 2.2.4.3.3    Trace_Columns
type Trace_Columns_Type
{
    Trace_Columns_DataType Data with XmlEncoding{Namespace = XMLAEngNamespace};
}

type Trace_Columns_DataType
{
    TraceColumnType Column with XmlEncoding{Namespace = XMLAEngNamespace};
}

type TraceColumnType
{
    int ID with XmlEncoding{Namespace = XMLAEngNamespace};
    int Type with XmlEncoding{Namespace = XMLAEngNamespace};
    string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int Description with XmlEncoding{Namespace = XMLAEngNamespace};
    bool Filterable with XmlEncoding{Namespace = XMLAEngNamespace};
    bool Repeatable with XmlEncoding{Namespace = XMLAEngNamespace};
    bool RepeatedBase with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.1.2.1    Authenticate
type AuthenticateType
{
    Base64Binary SspiHandshake with XmlEncoding{Kind = XmlKind.Element};
}

// 3.1.4.1.2.2    AuthenticateResponse        
type AuthenticateResponseType
{
    AuthenticateType $"return";
}

// 3.1.4.2.2.1    Discover
type DiscoverType
{
    RequestTypeEnum RequestType where ValidationCheckEnumValueTooManyItems(InRange<RequestTypeEnum>(value), null, false, ReferenceType.Type, "MSSSAS", "RequestType", "Discover", "Discover", "MS-SSAS");
    RestrictionsType Restrictions;
    optional PropertiesType Properties;
}

type RestrictionsType
{
    optional RestrictionListType RestrictionList;
}

type RestrictionListType
{
    optional array<xml> Any with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.TargetNamespace};
}

// 3.1.4.2.2.1.2.1    PropertyList
type PropertyListType
{
    optional string DataSourceInfo;
    optional int Timeout;
    optional string UserName;
    optional string Password;
    optional int LocaleIdentifier;
    optional string Catalog;
    optional StateSupportEnum StateSupport where ValidationCheckEnumValue((value == nothing || InRange<StateSupportEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "StateSupport", "PropertyList", "None, Sessions", value);
    optional ContentEnum Content where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ContentEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Content", "PropertyList", "PropertyList", "MS-SSAS");
    optional PropertyListFormatEnum Format where ValidationCheckEnumValue((value == nothing || InRange<PropertyListFormatEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Format", "PropertyList", "Tabular, Multidimensional, Native", value);
    optional AxisFormatEnum AxisFormat where ValidationCheckEnumValue((value == nothing || InRange<AxisFormatEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AxisFormat", "PropertyList", "ClusterFormat, CustomFormat, TupleFormat", value);
    optional int BeginRange;
    optional int EndRange;
    optional MDXSupportEnum MDXSupport where ValidationCheckEnumValue((value == nothing || InRange<MDXSupportEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MDXSupport", "PropertyList", "Core", value);
    optional string ProviderName;
    optional string ProviderVersion;
    optional string DBMSVersion;
    optional ProviderTypeEnum ProviderType where ValidationCheckEnumValue((value == nothing || InRange<ProviderTypeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "ProviderType", "PropertyList", "1, 2, 3, 4", value);
    optional bool ShowHiddenCubes;
    optional int SQLSupport;
    optional int TransactionDDL;
    optional int MaximumRows;
    optional string Roles;
    optional VisualModeEnum VisualMode where ValidationCheckEnumValue((value == nothing || InRange<VisualModeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "VisualMode", "PropertyList", "0, 1, 2", value);
    optional string EffectiveRoles;
    optional string EffectiveUserName;
    optional string ServerName;
    optional CatalogLocationEnum CatalogLocation where ValidationCheckEnumValue((value == nothing || InRange<CatalogLocationEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "CatalogLocation", "PropertyList", "1, 2", value);
    optional string DbpropCatalogTerm;
    optional int DbpropCatalogUsage;
    optional int DbpropColumnDefinition;
    optional DbpropConcatNullBehaviorEnum DbpropConcatNullBehavior where ValidationCheckEnumValue((value == nothing || InRange<DbpropConcatNullBehaviorEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropConcatNullBehavior", "PropertyList", "1, 2", value);
    optional bool DbpropDataSourceReadOnly;
    optional int DbpropGroupBy;
    optional int DbpropHeterogeneousTables;
    optional DbpropIdentifierCaseEnum DbpropIdentifierCase where ValidationCheckEnumValue((value == nothing || InRange<DbpropIdentifierCaseEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropIdentifierCase", "PropertyList", "1, 2, 4, 8", value);
    optional int DbpropMaxIndexSize;
    optional int DbpropMaxOpenChapters;
    optional int DbpropMaxRowSize;
    optional bool DbpropMaxRowSizeIncludeBlob;
    optional int DbpropMaxTablesInSelect;
    optional bool DbpropMultiTableUpdate;
    optional DbpropNullCollationEnum DbpropNullCollation where ValidationCheckEnumValue((value == nothing || InRange<DbpropNullCollationEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropNullCollation", "PropertyList", "1, 2, 4, 8", value);
    optional bool DbpropOrderByColumnsInSelect;
    optional DbpropOutputParameterAvailableEnum DbpropOutputParameterAvailable where ValidationCheckEnumValue((value == nothing || InRange<DbpropOutputParameterAvailableEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropOutputParameterAvailable", "PropertyList", "1, 2, 4", value);
    optional DbpropPersistentIdTypeEnum DbpropPersistentIdType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DbpropPersistentIdTypeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropPersistentIdType", "PropertyList", "PropertyList", "MS-SSAS");
    optional DbpropPrepareAbortBehaviorEnum DbpropPrepareAbortBehavior where ValidationCheckEnumValue((value == nothing || InRange<DbpropPrepareAbortBehaviorEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropPrepareAbortBehavior", "PropertyList", "1, 2", value);
    optional DbpropPrepareCommitBehaviorEnum DbpropPrepareCommitBehavior where ValidationCheckEnumValue((value == nothing || InRange<DbpropPrepareCommitBehaviorEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropPrepareCommitBehavior", "PropertyList", "1, 2", value);
    optional string DbpropProcedureTerm;
    optional DbpropQuotedIdentifierCaseEnum DbpropQuotedIdentifierCase where ValidationCheckEnumValue((value == nothing || InRange<DbpropQuotedIdentifierCaseEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropQuotedIdentifierCase", "PropertyList", "1, 2, 4, 8", value);
    optional int DbpropSchemaUsage;
    optional int DbpropSqlSupport;
    optional int DbpropSubqueries;
    optional int DbpropSupportedTxnDdl;
    optional int MdpropMdxSubqueries;
    optional int DbpropSupportedTxnIsoLevels;
    optional int DbpropSupportedTxnIsoRetain;
    optional string DbpropTableTerm;
    optional MdpropAggregateCellUpdateEnum MdpropAggregateCellUpdate where ValidationCheckEnumValue((value == nothing || InRange<MdpropAggregateCellUpdateEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MdpropAggregateCellUpdate", "PropertyList", "0, 1, 2", value);
    optional int MdpropAxes where ValidationCheckGreaterThanOrEqualTo(value == nothing || value >= 3, null, true, ReferenceType.Type, "MSSSAS", "MdpropAxes", "PropertyList", "3", value);
    optional MdpropFlatteningSupportEnum MdpropFlatteningSupport where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<MdpropFlatteningSupportEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MdpropFlatteningSupport", "PropertyList", "PropertyList", "MS-SSAS");
    optional int MdpropMdxCaseSupport;
    optional int MdpropMdxDescFlags where ValidationCheckGreaterThanOrEqualTo(value == nothing || value >= 1, null, true, ReferenceType.Type, "MSSSAS", "MdpropMdxDescFlags", "PropertyList", "1", value);
    optional int MdpropMdxDrillFunctions;
    optional int MdpropMdxFormulas;
    optional int MdpropMdxJoinCubes;
    optional int MdpropMdxMemberFunctions;
    optional MdpropMdxNonMeasureExpressionsEnum MdpropMdxNonMeasureExpressions where ValidationCheckEnumValue((value == nothing || InRange<MdpropMdxNonMeasureExpressionsEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MdpropMdxNonMeasureExpressions", "PropertyList", "0, 1", value);
    optional int MdpropMdxNumericFunctions;
    optional int MdpropMdxObjQualification;
    optional int MdpropMdxOuterReference;
    optional bool MdpropMdxQueryByProperty;
    optional MdpropMdxRangeRowsetEnum MdpropMdxRangeRowset where ValidationCheckEnumValue((value == nothing || InRange<MdpropMdxRangeRowsetEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MdpropMdxRangeRowset", "PropertyList", "1, 2, 4", value);
    optional int MdpropMdxSetFunctions;
    optional MdpropMdxSlicerEnum MdpropMdxSlicer where ValidationCheckEnumValue((value == nothing || InRange<MdpropMdxSlicerEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MdpropMdxSlicer", "PropertyList", "1, 2", value);
    optional int MdpropMdxStringCompop;
    optional int MdpropNamedLevels;
    optional int DbpropMsmdMDXCompatibility where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 3)), null, false, ReferenceType.Type, "MSSSAS", "DbpropMsmdMDXCompatibility", "PropertyList", "0", "3", value);
    optional int DbpropMsmdSqlCompatibility;
    optional int DbpropMsmdMDXUniqueNameStyle;
    optional int DbpropMsmdCachePolicy;
    optional int DbpropMsmdCacheRatio;
    optional int DbpropMsmdCacheMode;
    optional DbpropMsmdCompareCaseSensitiveStringFlagsEnum DbpropMsmdCompareCaseSensitiveStringFlags where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DbpropMsmdCompareCaseSensitiveStringFlagsEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DbpropMsmdCompareCaseSensitiveStringFlags", "PropertyList", "PropertyList", "MS-SSAS");
    optional int DbpropMsmdCompareCaseNotSensitiveStringFlags;
    optional bool DbpropMsmdFlattened2;
    optional int DbpropInitMode;
    optional string SspropInitAppName;
    optional string SspropInitWsid;
    optional int SspropInitPacketsize;
    optional int ReadOnlySession;
    optional int SecuredCellValue where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 5)), null, false, ReferenceType.Type, "MSSSAS", "SecuredCellValue", "PropertyList", "0", "5", value);
    optional int NonEmptyThreshold;
    optional SafetyOptionsEnum SafetyOptions where ValidationCheckEnumValue((value == nothing || InRange<SafetyOptionsEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SafetyOptions", "PropertyList", "0, 1, 2, 3", value);
    optional double DbpropMsmdCacheRatio2;
    optional string DbpropMsmdUseFormulaCache;
    optional int DbpropMsmdDynamicDebugLimit;
    optional string DbpropMsmdDebugMode;
    optional DialectEnum Dialect where ValidationCheckEnumValue((value == nothing || InRange<DialectEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Dialect", "PropertyList", "MDX, DMX, SQL", value);
    optional bool ImpactAnalysis;
    optional SQLQueryModeEnum SQLQueryMode where ValidationCheckEnumValue((value == nothing || InRange<SQLQueryModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "SQLQueryMode", "PropertyList", "Data, Calculated, IncludeEmpty, DataKeys", value);
    optional int ClientProcessID;
    optional string Cube;
    optional bool ReturnCellProperties;
    optional int CommitTimeout;
    optional int ForceCommitTimeout;
    optional string ExecutionMode;
    optional bool RealTimeOlap;
    optional MdxMissingMemberModeEnum MdxMissingMemberMode where ValidationCheckEnumValue((value == nothing || InRange<MdxMissingMemberModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MdxMissingMemberMode", "PropertyList", "Default, Ignore, Error", value);
    optional int MdpropMdxNamedSets;
    optional int DbpropMsmdSubqueries where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 2)), null, false, ReferenceType.Type, "MSSSAS", "DbpropMsmdSubqueries", "PropertyList", "0", "2", value);
    optional int DbpropMsmdAutoExists where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 3)), null, false, ReferenceType.Type, "MSSSAS", "DbpropMsmdAutoExists", "PropertyList", "0", "3", value);
    optional string CustomData;
    optional bool DisablePrefetchFacts;
    optional UpdateIsolationLevelEnum UpdateIsolationLevel where ValidationCheckEnumValue((value == nothing || InRange<UpdateIsolationLevelEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "UpdateIsolationLevel", "PropertyList", "1, 2", value);
    optional int DbpropMsmdErrorMessageMode;
    optional int MdpropMdxDdlExtensions;
    optional ResponseEncodingEnum ResponseEncoding where ValidationCheckEnumValue((value == nothing || InRange<ResponseEncodingEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ResponseEncoding", "PropertyList", "Default, UTF-8, UTF-16", value);
    optional MemoryLockingModeEnum MemoryLockingMode where ValidationCheckEnumValue((value == nothing || InRange<MemoryLockingModeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MemoryLockingMode", "PropertyList", "0, 1", value);
    optional int DbpropMsmdOptimizeResponse;
    optional string DbpropMsmdActivityID;
    optional string DbpropMsmdRequestID;
    optional int ReturnAffectedObjects;
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.2.2.1.3.1    DBSCHEMA_CATALOGS
type DBSCHEMA_CATALOGS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ROLES with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_MODIFIED with XmlEncoding{Namespace = XMLARSNamespace};
    optional int COMPATIBILITY_LEVEL with XmlEncoding{Namespace = XMLARSNamespace};
    optional CATALOGS_TYPE_ENUM TYPE where ValidationCheckEnumValue((value == nothing || InRange<CATALOGS_TYPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "CATALOGS_TYPE", "DBSCHEMA_CATALOGS", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional long VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DATABASE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_QUERIED with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool CURRENTLY_USED with XmlEncoding{Namespace = XMLARSNamespace};
    optional float POPULARITY with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.2    DBSCHEMA_TABLES
type DBSCHEMA_TABLES_RowType
{
    optional string TABLE_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TABLE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint TABLE_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_CREATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_MODIFIED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_OLAP_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.3    DBSCHEMA_COLUMNS
type DBSCHEMA_COLUMNS_RowType
{
    optional string TABLE_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint COLUMN_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint ORDINAL_POSITION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool COLUMN_HAS_DEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_DEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    optional COLUMN_FLAGS_ENUM COLUMN_FLAGS where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<COLUMN_FLAGS_ENUM>(value as uint)), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_FLAGS", "DBSCHEMA_COLUMNS", "DBSCHEMA_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_NULLABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort DATA_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TYPE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_MAXIMUM_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_OCTET_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint NUMERIC_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short NUMERIC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint DATETIME_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_OLAP_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.4    DBSCHEMA_PROVIDER_TYPES
type DBSCHEMA_PROVIDER_TYPES_RowType
{
    optional string TYPE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort DATA_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint COLUMN_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LITERAL_PREFIX with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LITERAL_SUFFIX with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CREATE_PARAMS with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_NULLABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool CASE_SENSITIVE with XmlEncoding{Namespace = XMLARSNamespace};
    optional SEARCHABLE_ENUM SEARCHABLE where ValidationCheckEnumValue((value == nothing || InRange<SEARCHABLE_ENUM>(value as uint)), null, false, ReferenceType.Type, "MSSSAS", "SEARCHABLE", "DBSCHEMA_PROVIDER_TYPES", "0, 2, 3, 4", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool UNSIGNED_ATTRIBUTE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool FIXED_PREC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool AUTO_UNIQUE_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCAL_TYPE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional short MINIMUM_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional short MAXIMUM_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TYPELIB with XmlEncoding{Namespace = XMLARSNamespace};
    optional string VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_LONG with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool BEST_MATCH with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_FIXEDLENGTH with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.5    MDSCHEMA_CUBES
type MDSCHEMA_CUBES_RowType
{
    string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid CUBE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CREATED_ON with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LAST_SCHEMA_UPDATE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_UPDATED_BY with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LAST_DATA_UPDATE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DATA_UPDATED_BY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_DRILLTHROUGH_ENABLED with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_LINKABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_WRITE_ENABLED with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_SQL_ENABLED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string BASE_CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_CUBES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort PREFERRED_QUERY_PATTERNS with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.6    MDSCHEMA_DIMENSIONS
type MDSCHEMA_DIMENSIONS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid DIMENSION_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint DIMENSION_ORDINAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional DIMENSION_TYPE_ENUM DIMENSION_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DIMENSION_TYPE_ENUM>(value as short)), null, false, ReferenceType.Type, "MSSSAS", "DIMENSION_TYPE", "MDSCHEMA_DIMENSIONS", "MDSCHEMA_DIMENSIONS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint DIMENSION_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DEFAULT_HIERARCHY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_VIRTUAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_READWRITE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DIMENSION_UNIQUE_SETTINGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_MASTER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool DIMENSION_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_DIMENSIONS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM DIMENSION_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "DIMENSION_VISIBILITY", "MDSCHEMA_DIMENSIONS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.7    MDSCHEMA_HIERARCHIES
type MDSCHEMA_HIERARCHIES_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid HIERARCHY_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional DIMENSION_TYPE_ENUM DIMENSION_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DIMENSION_TYPE_ENUM>(value as short)), null, false, ReferenceType.Type, "MSSSAS", "DIMENSION_TYPE", "MDSCHEMA_HIERARCHIES", "MDSCHEMA_HIERARCHIES", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint HIERARCHY_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DEFAULT_MEMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ALL_MEMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short STRUCTURE where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 3)), null, false, ReferenceType.Type, "MSSSAS", "STRUCTURE", "MDSCHEMA_HIERARCHIES", 0, 3, value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_VIRTUAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_READWRITE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DIMENSION_UNIQUE_SETTINGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_MASTER_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool DIMENSION_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint HIERARCHY_ORDINAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool DIMENSION_IS_SHARED with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool HIERARCHY_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort HIERARCHY_ORIGIN with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_DISPLAY_FOLDER with XmlEncoding{Namespace = XMLARSNamespace};
    optional INSTANCE_SELECTION_ENUM INSTANCE_SELECTION where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<INSTANCE_SELECTION_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "INSTANCE_SELECTION", "MDSCHEMA_HIERARCHIES", "MDSCHEMA_HIERARCHIES", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort GROUPING_BEHAVIOR where ValidationCheckValueInRange((value == nothing || (value >= 1 && value <= 2)), null, false, ReferenceType.Type, "MSSSAS", "GROUPING_BEHAVIOR", "MDSCHEMA_HIERARCHIES", 1, 2, value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional STRUCTURE_TYPE_ENUM STRUCTURE_TYPE where ValidationCheckEnumValue((value == nothing || InRange<STRUCTURE_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "STRUCTURE_TYPE", "MDSCHEMA_HIERARCHIES", "Natural, Unnatural, Unknown", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_HIERARCHIES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM HIERARCHY_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "HIERARCHY_VISIBILITY", "MDSCHEMA_HIERARCHIES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.8    MDSCHEMA_LEVELS
type MDSCHEMA_LEVELS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid LEVEL_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint LEVEL_NUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint LEVEL_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional LEVEL_TYPE_ENUM LEVEL_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<LEVEL_TYPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "LEVEL_TYPE", "MDSCHEMA_LEVELS", "MDSCHEMA_LEVELS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int CUSTOM_ROLLUP_SETTINGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional int LEVEL_UNIQUE_SETTINGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool LEVEL_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_ORDERING_PROPERTY with XmlEncoding{Namespace = XMLARSNamespace};
    optional LEVEL_DBTYPE_ENUM LEVEL_DBTYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<LEVEL_DBTYPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "LEVEL_DBTYPE", "MDSCHEMA_LEVELS", "MDSCHEMA_LEVELS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_MASTER_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_NAME_SQL_COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_KEY_SQL_COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_UNIQUE_NAME_SQL_COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_ATTRIBUTE_HIERARCHY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort LEVEL_KEY_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort LEVEL_ORIGIN with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_LEVELS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM LEVEL_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "LEVEL_VISIBILITY", "MDSCHEMA_LEVELS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.9    MDSCHEMA_MEASURES
type MDSCHEMA_MEASURES_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid MEASURE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional MEASURE_AGGREGATOR_ENUM MEASURE_AGGREGATOR where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<MEASURE_AGGREGATOR_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "MEASURE_AGGREGATOR", "MDSCHEMA_MEASURES", "MDSCHEMA_MEASURES", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort DATA_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort NUMERIC_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short NUMERIC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_UNITS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EXPRESSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool MEASURE_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVELS_LIST with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_NAME_SQL_COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_UNQUALIFIED_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASUREGROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_DISPLAY_FOLDER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DEFAULT_FORMAT_STRING with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_MEASURES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM MEASURE_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "MEASURE_VISIBILITY", "MDSCHEMA_MEASURES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.10    MDSCHEMA_PROPERTIES
type MDSCHEMA_PROPERTIES_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEMBER_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional short PROPERTY_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PROPERTY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PROPERTY_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort DATA_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_MAXIMUM_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_OCTET_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort NUMERIC_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short NUMERIC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short PROPERTY_CONTENT_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SQL_COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort LANGUAGE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort PROPERTY_ORIGIN with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PROPERTY_ATTRIBUTE_HIERARCHY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional CARDINALITY_ENUM PROPERTY_CARDINALITY where ValidationCheckEnumValue((value == nothing || InRange<CARDINALITY_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "PROPERTY_CARDINALITY", "MDSCHEMA_PROPERTIES", "ONE, MANY", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MIME_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool PROPERTY_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_PROPERTIES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM PROPERTY_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "PROPERTY_VISIBILITY", "MDSCHEMA_PROPERTIES", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

type MDSCHEMA_MEMBERS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LEVEL_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint LEVEL_NUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint MEMBER_ORDINAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEMBER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEMBER_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MEMBER_TYPE where ValidationCheckValueInRange((value == nothing || (value >= 0 && value <= 4)), null, false, ReferenceType.Type, "MSSSAS", "MEMBER_TYPE", "MDSCHEMA_MEMBERS", 0, 4, value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid MEMBER_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEMBER_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHILDREN_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint PARENT_LEVEL with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PARENT_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint PARENT_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EXPRESSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEMBER_KEY with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_PLACEHOLDERMEMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_DATAMEMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional SCOPE_ENUM SCOPE where ValidationCheckEnumValue((value == nothing || InRange<SCOPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SCOPE", "MDSCHEMA_MEMBERS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_MEMBERS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional TREE_OP_ENUM TREE_OP where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<TREE_OP_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "TREE_OP", "MDSCHEMA_MEMBERS", "MDSCHEMA_MEMBERS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.12    MDSCHEMA_ACTIONS
type MDSCHEMA_ACTIONS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ACTION_NAME with XmlEncoding{Namespace = XMLARSNamespace};

    optional ACTION_TYPE_ENUM ACTION_TYPE 
    where ValidationCheckValid(IsACTIONTYPEWithAPPLICATIONMatched() 
    && ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ACTION_TYPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "ACTION_TYPE", "MDSCHEMA_ACTIONS", "MDSCHEMA_ACTIONS", "MS-SSAS")
    , null, true, ReferenceType.Type, "MSSSAS", "ACTION_TYPE", "MDSCHEMA_ACTIONS", "If the action is PROPRIETARY (0x40), then a value MUST be provided in the APPLICATION column.") with XmlEncoding{Namespace = XMLARSNamespace};
    
    optional COORDINATE_ENUM COORDINATE
    where ValidationCheckValid(IsCOORDINATEWithCOORDINATETYPECombinationsMatched() 
    && ValidationCheckEnumValueTooManyItems((value == nothing || InRange<COORDINATE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "COORDINATE", "MDSCHEMA_ACTIONS", "MDSCHEMA_ACTIONS", "MS-SSAS")
    , null, true, ReferenceType.Type, "MSSSAS", "COORDINATE", "MDSCHEMA_ACTIONS", "The COORDINATE MUST resolve to the object specified in COORDINATE_TYPE.") with XmlEncoding{Namespace = XMLARSNamespace};
    
    optional COORDINATE_TYPE_ENUM COORDINATE_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<COORDINATE_TYPE_ENUM>(value as int)), null, true, ReferenceType.Type, "MSSSAS", "COORDINATE_TYPE", "MDSCHEMA_ACTIONS", "MDSCHEMA_ACTIONS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ACTION_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONTENT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string APPLICATION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int INVOCATION with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_ACTIONS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};

    bool IsACTIONTYPEWithAPPLICATIONMatched()
    {
        if (ACTION_TYPE == ACTION_TYPE_ENUM.Proprietary)
        {
            return APPLICATION != null && (APPLICATION as string).Count > 0;
        }

        return true;
    }

    bool IsCOORDINATEWithCOORDINATETYPECombinationsMatched()
    {
        switch (COORDINATE)
        {
            case COORDINATE_ENUM.Cube =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Cube;

            case COORDINATE_ENUM.Dimension =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Dimension || COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Level || COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Member || COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Set || COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Cell;

            case COORDINATE_ENUM.Hierarchy =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Dimension;

            case COORDINATE_ENUM.Level =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Level;

            case COORDINATE_ENUM.Member =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Member;

            case COORDINATE_ENUM.Set =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Set;

            case COORDINATE_ENUM.Cell =>
            return COORDINATE_TYPE == COORDINATE_TYPE_ENUM.Cell;

            default =>
            return false;
        }
    }
}

// 3.1.4.2.2.1.3.13    MDSCHEMA_SETS
type MDSCHEMA_SETS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SET_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional SCOPE_ENUM SCOPE where ValidationCheckEnumValue((value == nothing || InRange<SCOPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SCOPE", "MDSCHEMA_SETS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EXPRESSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSIONS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SET_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SET_DISPLAY_FOLDER with XmlEncoding{Namespace = XMLARSNamespace};
    optional SET_EVALUATION_CONTEXT_ENUM SET_EVALUATION_CONTEXT where ValidationCheckEnumValue((value == nothing || InRange<SET_EVALUATION_CONTEXT_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SET_EVALUATION_CONTEXT", "MDSCHEMA_SETS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_SETS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HIERARCHY_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.14    DISCOVER_INSTANCES
type DISCOVER_INSTANCES_RowType
{
    optional string INSTANCE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int INSTANCE_PORT_NUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional INSTANCE_STATE_ENUM INSTANCE_STATE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<INSTANCE_STATE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "INSTANCE_STATE", "DISCOVER_INSTANCES", "DISCOVER_INSTANCES", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.15    MDSCHEMA_KPIS
type MDSCHEMA_KPIS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASUREGROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_DISPLAY_FOLDER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_GOAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_STATUS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_TREND with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_STATUS_GRAPHIC with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_TREND_GRAPHIC with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_WEIGHT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_CURRENT_TIME_MEMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string KPI_PARENT_KPI_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ANNOTATIONS with XmlEncoding{Namespace = XMLARSNamespace};
    optional SCOPE_ENUM SCOPE where ValidationCheckEnumValue((value == nothing || InRange<SCOPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SCOPE", "MDSCHEMA_KPIS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CUBE_SOURCE_ENUM CUBE_SOURCE where ValidationCheckEnumValue((value == nothing || InRange<CUBE_SOURCE_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "CUBE_SOURCE", "MDSCHEMA_KPIS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.16    MDSCHEMA_MEASUREGROUPS
type MDSCHEMA_MEASUREGROUPS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASUREGROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IS_WRITE_ENABLED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASUREGROUP_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.17    MDSCHEMA_MEASUREGROUP_DIMENSIONS
type MDSCHEMA_MEASUREGROUP_DIMENSIONS_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASUREGROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional CARDINALITY_ENUM MEASUREGROUP_CARDINALITY where ValidationCheckEnumValue((value == nothing || InRange<CARDINALITY_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "MEASUREGROUP_CARDINALITY", "MDSCHEMA_MEASUREGROUP_DIMENSIONS", "ONE, MANY", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional CARDINALITY_ENUM DIMENSION_CARDINALITY where ValidationCheckEnumValue((value == nothing || InRange<CARDINALITY_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DIMENSION_CARDINALITY", "MDSCHEMA_MEASUREGROUP_DIMENSIONS", "ONE, MANY", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool DIMENSION_IS_VISIBLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool DIMENSION_IS_FACT_DIMENSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional array<DIMENSION_PATH_TYPE> DIMENSION_PATH with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_GRANULARITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional VISIBILITY_ENUM DIMENSION_VISIBILITY where ValidationCheckEnumValue((value == nothing || InRange<VISIBILITY_ENUM>(value as ushort)), null, false, ReferenceType.Type, "MSSSAS", "DIMENSION_VISIBILITY", "MDSCHEMA_MEASUREGROUP_DIMENSIONS", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

type DIMENSION_PATH_TYPE
{
    optional string MeasureGroupDimension with XmlEncoding{Namespace = XMLARSNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.2.2.1.3.18    MDSCHEMA_INPUT_DATASOURCES
type MDSCHEMA_INPUT_DATASOURCES_RowType
{
    optional string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SCHEMA_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DATASOURCE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DATASOURCE_TYPE_ENUM DATASOURCE_TYPE where ValidationCheckEnumValue((value == nothing || InRange<DATASOURCE_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DATASOURCE_TYPE", "MDSCHEMA_INPUT_DATASOURCES", "Relational, Olap", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CREATED_ON with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LAST_SCHEMA_UPDATE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint TIMEOUT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DBMS_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DBMS_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.19    DMSCHEMA_MINING_SERVICES
type DMSCHEMA_MINING_SERVICES_RowType
{
    string SERVICE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    uint SERVICE_TYPE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    string SERVICE_DISPLAY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid SERVICE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint PREDICTION_LIMIT with XmlEncoding{Namespace = XMLARSNamespace};
    string SUPPORTED_DISTRIBUTION_FLAGS with XmlEncoding{Namespace = XMLARSNamespace};
    string SUPPORTED_INPUT_CONTENT_TYPES with XmlEncoding{Namespace = XMLARSNamespace};
    string SUPPORTED_PREDICTION_CONTENT_TYPES with XmlEncoding{Namespace = XMLARSNamespace};
    string SUPPORTED_MODELING_FLAGS with XmlEncoding{Namespace = XMLARSNamespace};
    string SUPPORTED_SOURCE_QUERY with XmlEncoding{Namespace = XMLARSNamespace};
    TRAINING_COMPLEXITY_ENUM TRAINING_COMPLEXITY where ValidationCheckEnumValue(InRange<TRAINING_COMPLEXITY_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "TRAINING_COMPLEXITY", "DMSCHEMA_MINING_SERVICES", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    PREDICTION_COMPLEXITY_ENUM PREDICTION_COMPLEXITY where ValidationCheckEnumValue(InRange<PREDICTION_COMPLEXITY_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "PREDICTION_COMPLEXITY", "DMSCHEMA_MINING_SERVICES", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    EXPECTED_QUALITY_ENUM EXPECTED_QUALITY where ValidationCheckEnumValue(InRange<EXPECTED_QUALITY_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "EXPECTED_QUALITY", "DMSCHEMA_MINING_SERVICES", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    SCALING_ENUM SCALING where ValidationCheckEnumValue(InRange<SCALING_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "SCALING", "DMSCHEMA_MINING_SERVICES", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    bool ALLOW_INCREMENTAL_INSERT with XmlEncoding{Namespace = XMLARSNamespace};
    bool ALLOW_PMML_INITIALIZATION with XmlEncoding{Namespace = XMLARSNamespace};
    CONTROL_ENUM CONTROL where ValidationCheckEnumValue(InRange<CONTROL_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "CONTROL", "DMSCHEMA_MINING_SERVICES", "0, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    bool ALLOW_DUPLICATE_KEY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string VIEWER_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HELP_FILE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int HELP_CONTEXT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MSOLAP_SUPPORTS_ANALYSIS_SERVICES_DDL with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool MSOLAP_SUPPORTS_OLAP_MINING_MODELS where ValidationCheckValid((value == nothing || IsOLAPWithDDLMatched()), null, true, ReferenceType.Type, "MSSSAS", "MSOLAP_SUPPORTS_OLAP_MINING_MODELS", "DMSCHEMA_MINING_SERVICES", " When true, indicates that OLAP mining models can be created and MSOLAP_SUPPORTS_ANALYSIS_SERVICES_DDL MUST be non-zero;otherwise false.") with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool MSOLAP_SUPPORTS_DATA_MINING_DIMENSIONS with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool MSOLAP_SUPPORTS_DRILLTHROUGH with XmlEncoding{Namespace = XMLARSNamespace};
    
    bool IsOLAPWithDDLMatched()
    {
        if (MSOLAP_SUPPORTS_OLAP_MINING_MODELS == true)
            return MSOLAP_SUPPORTS_ANALYSIS_SERVICES_DDL != null && (MSOLAP_SUPPORTS_ANALYSIS_SERVICES_DDL as string).Count > 0;

        else
            return MSOLAP_SUPPORTS_ANALYSIS_SERVICES_DDL == null;
    }
}

// 3.1.4.2.2.1.3.20    DMSCHEMA_MINING_SERVICE_PARAMETERS
type DMSCHEMA_MINING_SERVICE_PARAMETERS_RowType
{
    string SERVICE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string PARAMETER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string PARAMETER_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_REQUIRED with XmlEncoding{Namespace = XMLARSNamespace};
    PARAMETER_FLAGS_ENUM PARAMETER_FLAGS where ValidationCheckEnumValue(InRange<PARAMETER_FLAGS_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "PARAMETER_FLAGS", "DMSCHEMA_MINING_SERVICE_PARAMETERS", "1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DEFAULT_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string VALUE_ENUMERATION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HELP_FILE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int HELP_CONTEXT with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.21    DMSCHEMA_MINING_FUNCTIONS
type DMSCHEMA_MINING_FUNCTIONS_RowType
{
    string SERVICE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string FUNCTION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string FUNCTION_SIGNATURE with XmlEncoding{Namespace = XMLARSNamespace};
    bool RETURNS_TABLE with XmlEncoding{Namespace = XMLARSNamespace};
    string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HELP_FILE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int HELP_CONTEXT with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.22    DMSCHEMA_MINING_MODEL_CONTENT
type DMSCHEMA_MINING_MODEL_CONTENT_RowType
{
    string MODEL_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string MODEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ATTRIBUTE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string NODE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string NODE_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    NODE_TYPE_ENUM NODE_TYPE where ValidationCheckEnumValueTooManyItems(InRange<NODE_TYPE_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "NODE_TYPE", "DMSCHEMA_MINING_MODEL_CONTENT", "DMSCHEMA_MINING_MODEL_CONTENT", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid NODE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string NODE_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHILDREN_CARDINALITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PARENT_UNIQUE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string NODE_DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string NODE_RULE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MARGINAL_RULE with XmlEncoding{Namespace = XMLARSNamespace};
    optional double NODE_PROBABILITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional double MARGINAL_PROBABILITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional array<NODE_DISTRIBUTION_TYPE> NODE_DISTRIBUTION with XmlEncoding{Name = "NODE_DISTRIBUTION"} with XmlEncoding{Namespace = XMLARSNamespace};
    optional double NODE_SUPPORT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MSOLAP_MODEL_COLUMN with XmlEncoding{Namespace = XMLARSNamespace};
    optional double MSOLAP_NODE_SCORE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MSOLAP_NODE_SHORT_CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional TREE_OPERATION_ENUM TREE_OPERATION where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<TREE_OPERATION_ENUM>(value as uint) && MODEL_NAME != null && NODE_UNIQUE_NAME != null), null, false, ReferenceType.Type, "MSSSAS", "TREE_OPERATION", "DMSCHEMA_MINING_MODEL_CONTENT", "DMSCHEMA_MINING_MODEL_CONTENT", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
}

type NODE_DISTRIBUTION_TYPE
{
    optional string ATTRIBUTE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ATTRIBUTE_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional double SUPPORT with XmlEncoding{Namespace = XMLARSNamespace};
    optional double PROBABILITY with XmlEncoding{Namespace = XMLARSNamespace};
    optional double VARIANCE with XmlEncoding{Namespace = XMLARSNamespace};
    optional VALUETYPE_ENUM VALUETYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<VALUETYPE_ENUM>(value as uint)), null, false, ReferenceType.Type, "MSSSAS", "VALUETYPE", "NODE_DISTRIBUTION", "NODE_DISTRIBUTION", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.23    DMSCHEMA_MINING_MODEL_XML
type DMSCHEMA_MINING_MODEL_XML_RowType
{
    optional string MODEL_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string MODEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid MODEL_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional xmlDocumentType MODEL_PMML with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.24    DMSCHEMA_MINING_MODEL_CONTENT_PMML
type DMSCHEMA_MINING_MODEL_CONTENT_PMML_RowType
{
    optional string MODEL_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string MODEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid MODEL_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional xmlDocumentType MODEL_PMML with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.25    DMSCHEMA_MINING_MODELS
type DMSCHEMA_MINING_MODELS_RowType
{
    optional string MODEL_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string MODEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid MODEL_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint MODEL_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_CREATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_MODIFIED with XmlEncoding{Namespace = XMLARSNamespace};
    SERVICE_TYPE_ID_ENUM SERVICE_TYPE_ID where ValidationCheckEnumValueTooManyItems(InRange<SERVICE_TYPE_ID_ENUM>(value as uint), null, false, ReferenceType.Type, "MSSSAS", "SERVICE_TYPE_ID", "DMSCHEMA_MINING_MODELS", "DMSCHEMA_MINING_MODELS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    string SERVICE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CREATION_STATEMENT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PREDICTION_ENTITY with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_POPULATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MINING_PARAMETERS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MINING_STRUCTURE with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LAST_PROCESSED with XmlEncoding{Namespace = XMLARSNamespace};
    bool MSOLAP_IS_DRILLTHROUGH_ENABLED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FILTER with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong TRAINING_SET_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.26    DMSCHEMA_MINING_COLUMNS
type DMSCHEMA_MINING_COLUMNS_RowType
{
    optional string MODEL_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODEL_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string MODEL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid COLUMN_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint COLUMN_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint ORDINAL_POSITION with XmlEncoding{Namespace = XMLARSNamespace};
    bool COLUMN_HAS_DEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_DEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    COLUMN_FLAGS_ENUM COLUMN_FLAGS where ValidationCheckEnumValueTooManyItems(InRange<COLUMN_FLAGS_ENUM>(value as uint), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_FLAGS", "DMSCHEMA_MINING_COLUMNS", "DMSCHEMA_MINING_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_NULLABLE with XmlEncoding{Namespace = XMLARSNamespace};
    LEVEL_DBTYPE_ENUM DATA_TYPE where ValidationCheckEnumValueTooManyItems(InRange<LEVEL_DBTYPE_ENUM>(value as int), null, false, ReferenceType.Type, "MSSSAS", "DATA_TYPE", "DMSCHEMA_MINING_COLUMNS", "DMSCHEMA_MINING_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TYPE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_MAXIMUM_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_OCTET_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional ushort NUMERIC_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short NUMERIC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint DATETIME_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional DISTRIBUTION_FLAG_ENUM DISTRIBUTION_FLAG where ValidationCheckEnumValue((value == nothing || InRange<DISTRIBUTION_FLAG_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DISTRIBUTION_FLAG", "DMSCHEMA_MINING_COLUMNS", "NORMAL, LOG_NORMAL, UNIFORM", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CONTENT_TYPE_ENUM CONTENT_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<CONTENT_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "CONTENT_TYPE", "DMSCHEMA_MINING_COLUMNS", "DMSCHEMA_MINING_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODELING_FLAG with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_RELATED_TO_KEY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RELATED_ATTRIBUTE with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_INPUT with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_PREDICTABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONTAINING_COLUMN with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PREDICTION_SCALAR_FUNCTIONS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PREDICTION_TABLE_FUNCTIONS with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_POPULATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional double PREDICTION_SCORE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SOURCE_COLUMN with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FILTER with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.27    DMSCHEMA_MINING_STRUCTURES
type DMSCHEMA_MINING_STRUCTURES_RowType
{
    optional string STRUCTURE_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string STRUCTURE_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string STRUCTURE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid STRUCTURE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint STRUCTURE_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_CREATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime DATE_MODIFIED with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CREATION_STATEMENT with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_POPULATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LAST_PROCESSED with XmlEncoding{Namespace = XMLARSNamespace};
    optional byte HOLDOUT_MAXPERCENT with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong HOLDOUT_MAXCASES with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong HOLDOUT_SEED with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong HOLDOUT_ACTUAL_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.28    DMSCHEMA_MINING_STRUCTURE_COLUMNS
type DMSCHEMA_MINING_STRUCTURE_COLUMNS_RowType
{
    optional string STRUCTURE_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string STRUCTURE_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    string STRUCTURE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid COLUMN_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint COLUMN_PROPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint ORDINAL_POSITION with XmlEncoding{Namespace = XMLARSNamespace};
    bool COLUMN_HASDEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_DEFAULT with XmlEncoding{Namespace = XMLARSNamespace};
    PART_COLUMN_FLAGS_ENUM COLUMN_FLAGS where ValidationCheckEnumValue(InRange<PART_COLUMN_FLAGS_ENUM>(value as ushort), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_FLAGS", "DMSCHEMA_MINING_STRUCTURE_COLUMNS", "0X10, 0X20, 0X30, 0X40", value) with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_NULLABLE with XmlEncoding{Namespace = XMLARSNamespace};
    ushort DATA_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TYPE_GUID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_MAXIMUM_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint CHARACTER_OCTET_LENGTH with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint NUMERIC_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional short NUMERIC_SCALE with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint DATETIME_PRECISION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CHARACTER_SET_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLLATION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_CATALOG with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_SCHEMA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DOMAIN_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional DISTRIBUTION_FLAG_ENUM DISTRIBUTION_FLAG where ValidationCheckEnumValue((value == nothing || InRange<DISTRIBUTION_FLAG_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DISTRIBUTION_FLAG", "DMSCHEMA_MINING_STRUCTURE_COLUMNS", "NORMAL, LOG_NORMAL, UNIFORM", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CONTENT_TYPE_ENUM CONTENT_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<CONTENT_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "CONTENT_TYPE", "DMSCHEMA_MINING_STRUCTURE_COLUMNS", "DMSCHEMA_MINING_STRUCTURE_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MODELING_FLAG with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_RELATED_TO_KEY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RELATED_ATTRIBUTE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONTAINING_COLUMN with XmlEncoding{Namespace = XMLARSNamespace};
    bool IS_POPULATED with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.29    DISCOVER_PROPERTIES
type DISCOVER_PROPERTIES_RowType
{
    string PropertyName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PropertyDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PropertyType with XmlEncoding{Namespace = XMLARSNamespace};
    string PropertyAccessType with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsRequired with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.30    DISCOVER_LITERALS
type DISCOVER_LITERALS_RowType
{
    string LiteralName with XmlEncoding{Namespace = XMLARSNamespace};
    string LiteralValue with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LiteralInvalidChars with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LiteralInvalidStartingChars with XmlEncoding{Namespace = XMLARSNamespace};
    optional int LiteralMaxLength with XmlEncoding{Namespace = XMLARSNamespace};
    optional LiteralNameValueEnum LiteralNameEnumValue where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<LiteralNameValueEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "LiteralNameEnumValue", "DISCOVER_LITERALS", "DISCOVER_LITERALS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.31    DISCOVER_SCHEMA_ROWSETS
type DISCOVER_SCHEMA_ROWSETS_RowType
{
    string SchemaName with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid SchemaGuid with XmlEncoding{Namespace = XMLARSNamespace};
    optional array<DISCOVER_SCHEMA_ROWSETS_RestrictionsType> Restrictions with XmlEncoding{Name = "Restrictions"} with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong RestrictionsMask with XmlEncoding{Namespace = XMLARSNamespace};
}

type DISCOVER_SCHEMA_ROWSETS_RestrictionsType
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Type with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.32    DISCOVER_KEYWORDS
type DISCOVER_KEYWORDS_RowType
{
    string Keyword with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.33    DISCOVER_DATASOURCES
type DISCOVER_DATASOURCES_RowType
{
    string DataSourceName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string URL with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceInfo with XmlEncoding{Namespace = XMLARSNamespace};
    string ProviderName with XmlEncoding{Namespace = XMLARSNamespace};
    optional array<string> ProviderType with XmlEncoding{Name = "ProviderType"} with XmlEncoding{Namespace = XMLARSNamespace};
    optional AuthenticationModeEnum AuthenticationMode where ValidationCheckEnumValue((value == nothing || InRange<AuthenticationModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "AuthenticationMode", "DISCOVER_DATASOURCES", "Unauthenticated, Authenticated, Integrated", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.34    DISCOVER_ENUMERATORS
type DISCOVER_ENUMERATORS_RowType
{
    string EnumName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EnumDescription with XmlEncoding{Namespace = XMLARSNamespace};
    string EnumType with XmlEncoding{Namespace = XMLARSNamespace};
    string ElementName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ElementDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ElementValue with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.35    DISCOVER_XML_METADATA
type DISCOVER_XML_METADATA_RowType
{
    xmlDocumentType METADATA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DatabaseID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DimensionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CubeID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MeasureGroupID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PartitionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PerspectiveID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DimensionPermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RoleID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DatabasePermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MiningModelID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MiningModelPermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MiningStructureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string AggregationDesignID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TraceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MiningStructurePermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CubePermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string AssemblyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MdxScriptID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceViewID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourcePermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional ObjectExpansionEnum ObjectExpansion where ValidationCheckEnumValue((value == nothing || InRange<ObjectExpansionEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ObjectExpansion", "DISCOVER_XML_METADATA", "ReferenceOnly, ObjectProperties, ExpandObject, ExpandFull", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.36    DISCOVER_TRACES
type DISCOVER_TRACES_RowType
{
    optional string TraceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ElementDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TraceName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LogFileName with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool LogFileRollover with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool AutoRestart with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CreationTime with XmlEncoding{Namespace = XMLARSNamespace};
    optional DISCOVER_TRACES_TypeEnum Type where ValidationCheckEnumValue((value == nothing || InRange<DISCOVER_TRACES_TypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Type", "DISCOVER_TRACES", "Trace, XEvent", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.37    DISCOVER_TRACE_DEFINITION_PROVIDERINFO
type DISCOVER_TRACE_DEFINITION_PROVIDERINFO_RowType
{
    optional string Data with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.38    DISCOVER_TRACE_COLUMNS
type DISCOVER_TRACE_COLUMNS_RowType
{
    optional string Data with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.39    DISCOVER_TRACE_EVENT_CATEGORIES
type DISCOVER_TRACE_EVENT_CATEGORIES_RowType
{
    optional string Data with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.40    DISCOVER_MEMORYUSAGE
type DISCOVER_MEMORYUSAGE_RowType
{
    optional ulong MemoryID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MemoryName with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CreationTime with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint BaseObjectType with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong MemoryUsed with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong MemoryAllocated with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong MemoryAllocBase with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong MemoryAllocFromAlloc with XmlEncoding{Namespace = XMLARSNamespace};
    optional uint ElementCount with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool Shrinkable with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectParentPath with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectId with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.41    DISCOVER_MEMORYGRANT
type DISCOVER_MEMORYGRANT_RowType
{
    optional long MemoryID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CreationTime with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LastRequestTime with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MemoryUsed with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MemoryGranted with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool Blocked with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.42 DISCOVER_LOCKS
type DISCOVER_LOCKS_RowType
{
    optional int SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid LOCK_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid LOCK_TRANSACTION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional xmlDocumentType LOCK_OBJECT_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional LOCK_STATUS_ENUM LOCK_STATUS where ValidationCheckEnumValue((value == nothing || InRange<LOCK_STATUS_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "LOCK_STATUS", "DISCOVER_TRACES", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional LOCK_TYPE_ENUM LOCK_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<LOCK_TYPE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "LOCK_TYPE", "DISCOVER_TRACES", "DISCOVER_TRACES", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LOCK_CREATION_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime LOCK_GRANT_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int LOCK_MIN_TOTAL_MS with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.43 DISCOVER_CONNECTIONS
type DISCOVER_CONNECTIONS_RowType
{
    optional int CONNECTION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_USER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_IMPERSONATED_USER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_HOST_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_HOST_APPLICATION with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CONNECTION_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CONNECTION_LAST_COMMAND_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CONNECTION_LAST_COMMAND_END_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_LAST_COMMAND_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_IDLE_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_BYTES_SENT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_BYTES_RECEIVED with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_DATA_BYTES_RECEIVED with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.44 DISCOVER_SESSIONS
type DISCOVER_SESSIONS_RowType
{
    optional string SESSION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_CONNECTION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SESSION_USER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SESSION_CURRENT_DATABASE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_USED_MEMORY with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SESSION_PROPERTIES with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime SESSION_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime SESSION_LAST_COMMAND_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime SESSION_LAST_COMMAND_END_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_LAST_COMMAND_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_IDLE_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SESSION_LAST_COMMAND with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_LAST_COMMAND_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional SESSION_STATUS_ENUM SESSION_STATUS where ValidationCheckEnumValue((value == nothing || InRange<SESSION_STATUS_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "SESSION_STATUS", "DISCOVER_SESSIONS", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_READS with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_WRITES with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_READ_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SESSION_WRITE_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_COMMAND_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RESTRICT_CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RESTRICT_CATALOG_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string THREAD_POOL_USED with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid REQUEST_ACTIVITY_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid CLIENT_ACTIVITY_ID with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.45 DISCOVER_JOBS
type DISCOVER_JOBS_RowType
{
    optional int SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int JOB_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string JOB_DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime JOB_CREATION_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long JOB_TOTAL_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime JOB_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long JOB_EXECUTION_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional int JOB_THREADPOOL_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long JOB_MIN_TOTAL_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.46 DISCOVER_TRANSACTIONS
type DISCOVER_TRANSACTIONS_RowType
{
    optional string TRANSACTION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TRANSACTION_SESSION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime TRANSACTION_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long TRANSACTION_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long TRANSACTION_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.47 DISCOVER_DB_CONNECTIONS
type DISCOVER_DB_CONNECTIONS_RowType
{
    optional int CONNECTION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CONNECTION_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CONNECTION_LAST_COMMAND_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime ONNECTION_LAST_COMMAND_END_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_IDLE_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long CONNECTION_USAGE_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool CONNECTION_IN_USE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_SERVER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CONNECTION_CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int CONNECTION_SPID with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.48 DISCOVER_MASTER_KEY
type DISCOVER_MASTER_KEY_RowType
{
    optional string KEY with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.49 DISCOVER_PERFORMANCE_COUNTERS
type DISCOVER_PERFORMANCE_COUNTERS_RowType
{
    optional string PERF_COUNTER_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional double PERF_COUNTER_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.50 DISCOVER_LOCATIONS
type DISCOVER_LOCATIONS_RowType
{
    string LOCATION_BACKUP_FILE_PATHNAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_OBJECTPATH with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_DATASOURCEID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_DATASOURCENAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_CONNECTION_STRING with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PARTITION_FOLDER with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LOCATION_PASSWORD where ValidationCheckValid(value != null && value != nothing && (value as string).Count > 0, null, true, ReferenceType.Type, "MSSSAS", "LOCATION_PASSWORD", "DISCOVER_LOCATIONS", "This restriction MUST be used.") with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.51 DISCOVER_PARTITION_DIMENSION_STAT
type DISCOVER_PARTITION_DIMENSION_STAT_RowType
{
    string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string MEASURE_GROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string PARTITION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ATTRIBUTE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ATTRIBUTE_INDEXED with XmlEncoding{Namespace = XMLARSNamespace};
    optional long ATTRIBUTE_COUNT_MIN with XmlEncoding{Namespace = XMLARSNamespace};
    optional long ATTRIBUTE_COUNT_MAX with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.52 DISCOVER_PARTITION_STAT
type DISCOVER_PARTITION_STAT_RowType
{
    string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string MEASURE_GROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string PARTITION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string AGGREGATION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long AGGREGATION_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.53 DISCOVER_DIMENSION_STAT
type DISCOVER_DIMENSION_STAT_RowType
{
    string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ATTRIBUTE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long ATTRIBUTE_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.54 DISCOVER_COMMANDS
type DISCOVER_COMMANDS_RowType
{
    optional int SESSION_SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_COMMAND_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime COMMAND_START_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_ELAPSED_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_READS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_READ_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_WRITES with XmlEncoding{Namespace = XMLARSNamespace};
    optional long COMMAND_WRITE_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COMMAND_TEXT with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime COMMAND_END_TIME with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.55 DISCOVER_COMMAND_OBJECTS
type DISCOVER_COMMAND_OBJECTS_RowType
{
    optional int SESSION_SPID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SESSION_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int SESSION_COMMAND_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT_PARENT_PATH with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_DATA_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_READS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_READ_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_WRITES with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_WRITE_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_ROWS_SCANNED with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_ROWS_RETURNED with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.56    DISCOVER_OBJECT_ACTIVITY
type DISCOVER_OBJECT_ACTIVITY_RowType
{
    optional string OBJECT_PARENT_PATH with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_CPU_TIME_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_READS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_READ_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_WRITES with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_WRITE_KB with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_AGGREGATION_HIT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_AGGREGATION_MISS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_HIT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_MISS with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_DATA_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_ROWS_SCANNED with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_ROWS_RETURNED with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.57    DISCOVER_OBJECT_MEMORY_USAGE
type DISCOVER_OBJECT_MEMORY_USAGE_RowType
{
    optional string OBJECT_PARENT_PATH with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_MEMORY_SHRINKABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_MEMORY_NONSHRINKABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_DATA_VERSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int OBJECT_TYPE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime OBJECT_TIME_CREATED with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_MEMORY_CHILD_SHRINKABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional long OBJECT_MEMORY_CHILD_NONSHRINKABLE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.58    DISCOVER_STORAGE_TABLES
type DISCOVER_STORAGE_TABLES_RowType
{
    optional string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_GROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PARTITION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long TABLE_PARTITIONS_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Hint_TABLE_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional long ROWS_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long RIVIOLATION_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.59    DISCOVER_STORAGE_TABLE_COLUMNS
type DISCOVER_STORAGE_TABLE_COLUMNS_RowType
{
    optional string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_GROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ATTRIBUTE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional COLUMN_TYPE_ENUM COLUMN_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<COLUMN_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_TYPE", "DISCOVER_STORAGE_TABLE_COLUMNS", "DISCOVER_STORAGE_TABLE_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional COLUMN_ENCODING_ENUM COLUMN_ENCODING where ValidationCheckEnumValue((value == nothing || InRange<COLUMN_ENCODING_ENUM>(value as long)), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_ENCODING", "DISCOVER_STORAGE_TABLE_COLUMNS", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional DATATYPEENUM DATATYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DATATYPEENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DATATYPE", "DISCOVER_STORAGE_TABLE_COLUMNS", "DISCOVER_STORAGE_TABLE_COLUMNS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ISKEY with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ISUNIQUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ISNULLABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ISROWNUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional long DICTIONARY_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.60    DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS
type DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS_RowType
{
    optional string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CUBE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MEASURE_GROUP_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DIMENSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long SEGMENT_NUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional long TABLE_PARTITION_NUMBER with XmlEncoding{Namespace = XMLARSNamespace};
    optional long RECORDS_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong ALLOCATED_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong USED_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COMPRESSION_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional long BITS_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long BOOKMARK_BITS_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional VERTIPAQ_STATE_ENUM VERTIPAQ_STATE where ValidationCheckEnumValue((value == nothing || InRange<VERTIPAQ_STATE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "VERTIPAQ_STATE", "DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS", "COMPLETED, TIMEBOXED, SKIPPED", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.61    DISCOVER_CSDL_METADATA
type DISCOVER_CSDL_METADATA_RowType
{
    xmlDocumentType METADATA with XmlEncoding{Namespace = XMLARSNamespace};
    string CATALOG_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PERSPECTIVE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string VERSION with XmlEncoding{Namespace = XMLARSNamespace};
}

type xmlDocumentType
{
    optional xml anyElement with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
}

// 3.1.4.2.2.1.3.62    DISCOVER_CALC_DEPENDENCY
type DISCOVER_CALC_DEPENDENCY_RowType
{
    optional string DATABASE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DEPENDENCY_OBJECT_TYPE_ENUM OBJECT_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<DEPENDENCY_OBJECT_TYPE_ENUM>(value as string)), null, true, ReferenceType.Type, "MSSSAS", "OBJECT_TYPE", "DISCOVER_CALC_DEPENDENCY", "DISCOVER_CALC_DEPENDENCY", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EXPRESSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string REFERENCED_OBJECT_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string REFERENCED_TABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string REFERENCED_OBJECT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string REFERENCED_EXPRESSION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string QUERY with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.63    MDSCHEMA_FUNCTIONS
type MDSCHEMA_FUNCTIONS_RowType
{
    optional string FUNCTION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PARAMETER_LIST with XmlEncoding{Namespace = XMLARSNamespace};
    optional int RETURN_TYPE with XmlEncoding{Namespace = XMLARSNamespace};
    optional ORIGIN_ENUM ORIGIN where ValidationCheckEnumValue((value == nothing || InRange<ORIGIN_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "ORIGIN", "MDSCHEMA_FUNCTIONS", "0x1, 0x2, 0x3, 0x4", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string INTERFACE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string LIBRARY_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DLL_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HELP_FILE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int HELP_CONTEXT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CAPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional array<PARAMETERINFO_TYPE> PARAMETERINFO with XmlEncoding{Name = "PARAMETERINFO"} with XmlEncoding{Namespace = XMLARSNamespace};
    optional DIRECTQUERY_PUSHABLE_ENUM DIRECTQUERY_PUSHABLE where ValidationCheckEnumValue((value == nothing || InRange<DIRECTQUERY_PUSHABLE_ENUM>(value as int)), null, false, ReferenceType.Type, "MSSSAS", "DIRECTQUERY_PUSHABLE", "MDSCHEMA_FUNCTIONS", "0x1, 0x2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

type PARAMETERINFO_TYPE
{
    optional string NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool OPTIONAL with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool REPEATABLE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int REPEATGROUP with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.64    DISCOVER_RING_BUFFERS
type DISCOVER_RING_BUFFERS_RowType
{
    optional string SESSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string EVENT_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime EVENT_CREATION_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string XESessionName with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.65    DISCOVER_XEVENT_TRACE_DEFINITION
type DISCOVER_XEVENT_TRACE_DEFINITION_RowType
{
    string Data with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.66    DISCOVER_XEVENT_PACKAGES
type DISCOVER_XEVENT_PACKAGES_RowType
{
    optional string NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional int CAPABILITIES with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CAPABILITIES_DESC with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.67    DISCOVER_XEVENT_OBJECTS
type DISCOVER_XEVENT_OBJECTS_RowType
{
    optional string NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional XEVENT_OBJECT_TYPE_ENUM OBJECT_TYPE where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<XEVENT_OBJECT_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "OBJECT_TYPE", "DISCOVER_XEVENT_OBJECTS", "DISCOVER_XEVENT_OBJECTS", "MS-SSAS") with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid PACKAGE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TYPE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TYPE_PACKAGE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional int TYPE_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int CAPABILITIES with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CAPABILITIES_DESC with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.68    DISCOVER_XEVENT_OBJECT_COLUMNS
type DISCOVER_XEVENT_OBJECT_COLUMNS_RowType
{
    optional string NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int COLUMN_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string OBJECT_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid OBJECT_PACKAGE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DESCRIPTION with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TYPE_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid TYPE_PACKAGE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string COLUMN_VALUE with XmlEncoding{Namespace = XMLARSNamespace};
    optional OBJECT_COLUMN_TYPE_ENUM COLUMN_TYPE where ValidationCheckEnumValue((value == nothing || InRange<OBJECT_COLUMN_TYPE_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "COLUMN_TYPE", "DISCOVER_XEVENT_OBJECT_COLUMNS", "Readonly, Data, Customizable", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int CAPABILITIES with XmlEncoding{Namespace = XMLARSNamespace};
    optional CAPABILITIES_DESC_ENUM CAPABILITIES_DESC where ValidationCheckEnumValue((value == nothing || InRange<CAPABILITIES_DESC_ENUM>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "CAPABILITIES_DESC", "DISCOVER_XEVENT_OBJECT_COLUMNS", "Mandatory, NULL", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.69    DISCOVER_XEVENT_SESSIONS
type DISCOVER_XEVENT_SESSIONS_RowType
{
    optional string SESSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int PENDING_BUFFERS with XmlEncoding{Namespace = XMLARSNamespace};
    optional int TOTAL_PENDING_BUFFERS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long REGULAR_BUFFER_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int TOTAL_LARGE_BUFFERS with XmlEncoding{Namespace = XMLARSNamespace};
    optional long LARGE_BUFFER_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional long TOTAL_BUFFER_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional int BUFFER_POLICY_FLAGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string BUFFER_POLICY_DESC with XmlEncoding{Namespace = XMLARSNamespace};
    optional int FLAGS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FLAGS_DESC with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DROPPED_EVENT_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DROPPED_BUFFER_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional int BLOCKED_EVENT_FIRE_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional DateTime CREATE_TIME with XmlEncoding{Namespace = XMLARSNamespace};
    optional int LARGEST_EVENT_DROPPED_SIZE with XmlEncoding{Namespace = XMLARSNamespace};
    optional string XESessionName with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.2.2.1.3.70    DISCOVER_XEVENT_SESSION_TARGETS
type DISCOVER_XEVENT_SESSION_TARGETS_RowType
{
    optional string SESSION_NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional string NAME with XmlEncoding{Namespace = XMLARSNamespace};
    optional uuid PACKAGE_ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional long EXECUTION_COUNT with XmlEncoding{Namespace = XMLARSNamespace};
    optional long EXECUTION_TimeSpan_MS with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TARGET_DATA with XmlEncoding{Namespace = XMLARSNamespace};
    optional string XESessionName with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Tabular Metadata Command: Discover - Start
// **********************************************************************

/**********************************************************************
** The row type of TMSCHEMA_MODEL.
** Defined in the section 3.1.5.1.1.1.
**********************************************************************/
type TMSCHEMA_MODEL_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string StorageLocation with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long DefaultMode with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long DefaultDataView with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Culture with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Collation with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Version with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_DATA_SOURCES.
** Defined in the section 3.1.5.1.1.2.
**********************************************************************/
type TMSCHEMA_DATA_SOURCES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Type with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ConnectionString with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long ImpersonationMode with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Account with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Password with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int MaxConnections with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Isolation with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int Timeout with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Provider with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ConnectionDetials with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Options with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ContextExpression with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_TABLES.
** Defined in the section 3.1.5.1.1.3.
**********************************************************************/
type TMSCHEMA_TABLES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string DataCategory with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsHidden with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong TableStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long SystemFlags with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool ShowAsVariationsOnly with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsPrivate with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong DefaultDetailRowsDefinitionID with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_COLUMNS.
** Defined in the section 3.1.5.1.1.4.
**********************************************************************/
type TMSCHEMA_COLUMNS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ExplicitName with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string InferredName with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long ExplicitDataType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long InferredDataType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string DataCategory with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsHidden with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsUnique with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsKey with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsNullable with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Alignment with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int TableDetailPosition with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsDefaultLabel with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsDefaultImage with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long SummarizeBy with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong ColumnStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Type with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string SourceColumn with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong ColumnOriginID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Expression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string FormatString with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsAvailableInMDX with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong SortByColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong AttributeHierarchyID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime RefreshedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long SystemFlags with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool KeepUniqueRows with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int DisplayOrdinal with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ErrorMessage with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string SourceProviderType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string DisplayFolder with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long EncodingHint with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_ATTRIBUTE_HIERARCHIES.
** Defined in the section 3.1.5.1.1.5.
**********************************************************************/
type TMSCHEMA_ATTRIBUTE_HIERARCHIES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong AttributeHierarchyStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime RefreshedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PARTITIONS.
** Defined in the section 3.1.5.1.1.6.
**********************************************************************/
type TMSCHEMA_PARTITIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong DataSourceID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string QueryDefinition with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Type with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong PartitionStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Mode with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long DataView with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime RefreshedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long SystemFlags with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ErrorMessage with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool RetainDataTillForceCalculate with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_RELATIONSHIPS.
** Defined in the section 3.1.5.1.1.7.
**********************************************************************/
type TMSCHEMA_RELATIONSHIPS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsActive with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Type with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long CrossFilteringBehavior with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long JoinOnDateBehavior with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool RelyOnReferentialIntegrity with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid FromTableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid FromColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long FromCardinality with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ToTableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ToColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long ToCardinality with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid RelationshipStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid RelationshipStorage2ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime RefreshedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long SecurityFilteringBehavior with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_MEASURES.
** Defined in the section 3.1.5.1.1.8.
**********************************************************************/
type TMSCHEMA_MEASURES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long DataType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Expression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string FormatString with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsHidden with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid KPIID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsSimpleMeasure with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ErrorMessage with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string DisplayFolder with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid DetailRowsDefinitionID with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_HIERARCHIES.
** Defined in the section 3.1.5.1.1.9.
**********************************************************************/
type TMSCHEMA_HIERARCHIES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsHidden with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid HierarchyStorageID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime RefreshedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string DisplayFolder with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long HideMembers with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_LEVELS.
** Defined in the section 3.1.5.1.1.10.
**********************************************************************/
type TMSCHEMA_LEVELS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid HierarchyID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int Ordinal with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_ANNOTATIONS.
** Defined in the section 3.1.5.1.1.11.
**********************************************************************/
type TMSCHEMA_ANNOTATIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ObjectID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int ObjectType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Value with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_KPIS.
** Defined in the section 3.1.5.1.1.12.
**********************************************************************/
type TMSCHEMA_KPIS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid MeasureID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TargetDescription with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TargetExpression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TargetFormatString with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string StatusGraphic with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string StatusDescription with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string StatusExpression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TrendGraphic with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TrendDescription with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string TrendExpression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_CULTURES.
** Defined in the section 3.1.5.1.1.13.
**********************************************************************/
type TMSCHEMA_CULTURES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid LinguisticMetadataID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime StructureModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_OBJECT_TRANSLATIONS.
** Defined in the section 3.1.5.1.1.14.
**********************************************************************/
type TMSCHEMA_OBJECT_TRANSLATIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid CultureID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ObjectID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int ObjectType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Property with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Value with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_LINGUISTIC_METADATA.
** Defined in the section 3.1.5.1.1.15.
**********************************************************************/
type TMSCHEMA_LINGUISTIC_METADATA_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid CultureID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional xml Content with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PERSPECTIVES.
** Defined in the section 3.1.5.1.1.16.
**********************************************************************/
type TMSCHEMA_PERSPECTIVES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PERSPECTIVE_TABLES.
** Defined in the section 3.1.5.1.1.17.
**********************************************************************/
type TMSCHEMA_PERSPECTIVE_TABLES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid PerspectiveID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IncludeAll with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PERSPECTIVE_COLUMNS.
** Defined in the section 3.1.5.1.1.18.
**********************************************************************/
type TMSCHEMA_PERSPECTIVE_COLUMNS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid PerspectiveTableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PERSPECTIVE_HIERARCHIES.
** Defined in the section 3.1.5.1.1.19.
**********************************************************************/
type TMSCHEMA_PERSPECTIVE_HIERARCHIES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid PerspectiveTableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid HierarchyID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_PERSPECTIVE_MEASURES.
** Defined in the section 3.1.5.1.1.20.
**********************************************************************/
type TMSCHEMA_PERSPECTIVE_MEASURES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid PerspectiveTableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid MeasureID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_ROLES.
** Defined in the section 3.1.5.1.1.21.
**********************************************************************/
type TMSCHEMA_ROLES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long ModelPermission with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_ROLE_MEMBERSHIPS.
** Defined in the section 3.1.5.1.1.22.
**********************************************************************/
type TMSCHEMA_ROLE_MEMBERSHIPS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid RoleID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string MemberName with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string MemberID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string IdentityProvider with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long MemberType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_TABLE_PERMISSIONS.
** Defined in the section 3.1.5.1.1.23.
**********************************************************************/
type TMSCHEMA_TABLE_PERMISSIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid RoleID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TableID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string FilterExpression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ErrorMessage with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long MetadataPermission with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_VARIATIONS.
** Defined in the section 3.1.5.1.1.24.
**********************************************************************/
type TMSCHEMA_VARIATIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid RelationshipID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid DefaultHierarchyID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid DefaultColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional bool IsDefault with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_EXTENDED_PROPERTIES.
** Defined in the section 3.1.5.1.1.25.
**********************************************************************/
type TMSCHEMA_EXTENDED_PROPERTIES_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ObjectID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int ObjectType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Type with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Value with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_EXPRESSIONS.
** Defined in the section 3.1.5.1.1.26.
**********************************************************************/
type TMSCHEMA_EXPRESSIONS_RowType
{
    optional ulong ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional ulong ModelID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Name with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Description with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long Kind with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Expression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_COLUMN_PERMISSIONS.
** Defined in the section 3.1.5.1.1.27.
**********************************************************************/
type TMSCHEMA_COLUMN_PERMISSIONS_RowType
{
    optional uuid ID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid TablePermissionID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional uuid ColumnID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long MetadataPermission with XmlEncoding{ Namespace = XMLARSNamespace };
}

/**********************************************************************
** The row type of TMSCHEMA_DETAIL_ROWS_DEFINITIONS.
** Defined in the section 3.1.5.1.1.28.
**********************************************************************/
type TMSCHEMA_DETAIL_ROWS_DEFINITIONS_RowType
{
    optional uuid ObjectID with XmlEncoding{ Namespace = XMLARSNamespace };
    optional int ObjectType with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string Expression with XmlEncoding{ Namespace = XMLARSNamespace };
    optional DateTime ModifiedTime with XmlEncoding{ Namespace = XMLARSNamespace };
    optional long State with XmlEncoding{ Namespace = XMLARSNamespace };
    optional string ErrorMessage with XmlEncoding{ Namespace = XMLARSNamespace };
}

// **********************************************************************
// Tabular Metadata Command: Discover - End
// **********************************************************************

// 3.1.4.2.2.2  DiscoverResponse
type DiscoverResponseType[RequestTypeEnum DiscoverCommand]
{
    optional DiscoverReturnType[DiscoverCommand] $"return";
}

// 3.1.4.2.2.2.1  return Element
type DiscoverReturnType[RequestTypeEnum DiscoverCommand]
{
    optional rowsetTypeForDiscover[DiscoverCommand] root with XmlEncoding{Namespace = XMLARSNamespace};
}

// 3.1.4.3.2.1 Execute
type ExecuteType
{
    CommandElementType Command;
    PropertiesType Properties;
    optional ParametersType Parameters;
}

// 3.1.4.3.2.1.1    Command Element
type CommandElementType
{
    // MS-SSAS-T
    optional (string | JsonCommandType) Statement with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CreateTabularType CreateTabular with XmlEncoding{Name = "Create", Namespace = XMLAEngTabNamespace};
    optional AlterTabularType AlterTabular with XmlEncoding{Name = "Alter", Namespace = XMLAEngTabNamespace};
    optional DeleteTabularType DeleteTabular with XmlEncoding{Name = "Delete", Namespace = XMLAEngTabNamespace};
    optional RenameTabularType RenameTabular with XmlEncoding{Name = "Rename", Namespace = XMLAEngTabNamespace};
    optional RefreshTabularType RefreshTabular with XmlEncoding{Name = "Refresh", Namespace = XMLAEngTabNamespace};
    optional MergePartitionsTabularType MergePartitionsTabular with XmlEncoding{Name = "MergePartitions", Namespace = XMLAEngTabNamespace};
    optional DBCCForTabularType DBCCForTabular with XmlEncoding{Name = "DBCC", Namespace = XMLAEngTabNamespace};
    optional SequencePointType SequencePoint with XmlEncoding{Name = "SequencePoint", Namespace = XMLAEngTabNamespace};
    optional UpgradeTabularType UpgradeTabular with XmlEncoding{Name = "Upgrade", Namespace = XMLAEngTabNamespace};

    // MS-SSAS
    optional CreateType Create with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AlterType Alter with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DeleteType Delete with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessType Process with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MergePartitionsType MergePartitions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DesignAggregationsType DesignAggregations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ClearCacheType ClearCache with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SubscribeType Subscribe with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CancelType Cancel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BeginTransactionType BeginTransaction with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CommitTransactionType CommitTransaction with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RollbackTransactionType RollbackTransaction with XmlEncoding{Namespace = XMLAEngNamespace};
    optional LockType Lock with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UnlockType Unlock with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BackupType Backup with XmlEncoding{Namespace = XMLAEngNamespace};
    optional RestoreType Restore with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SynchronizeType Synchronize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional AttachType Attach with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DetachType Detach with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InsertType Insert with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UpdateType Update with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DropType Drop with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UpdateCellsType UpdateCells with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NotifyTableChangeType NotifyTableChange with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BatchType Batch with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImageLoadType ImageLoad with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImageSaveType ImageSave with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CloneDatabaseType CloneDatabase with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SetAuthContextType SetAuthContext with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DBCCType DBCC with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.1    ObjectReference Type
type ObjectReferenceType
{
    optional string  ServerID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  RoleID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  TraceID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  AssemblyID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DimensionPermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DataSourcePermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DatabasePermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DataSourceViewID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  CubeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningStructureID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  PerspectiveID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  CubePermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MdxScriptID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  PartitionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  AggregationDesignID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningModelID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningModelPermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningStructurePermissionID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.2    Statement
type StatementType
{
    optional string Statement with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.3    Create
type CreateType
{
    optional ObjectReferenceType ParentObject with XmlEncoding{Namespace = XMLAEngNamespace};
    MajorObjectType ObjectDefinition where ValidationCheckValid(nothing == ObjectDefinition.Permission, null, true, ReferenceType.Type, "MSSSAS", "ObjectDefinition", "Create", "A Permission object MUST NOT be specified in the ObjectDefinition element.") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional StatementType Statement with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ScopeEnum Scope where ValidationCheckEnumValue(value == nothing || InRange<ScopeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Scope", "Create", "Session", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional bool AllowOverwrite with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.4    Alter
type AlterType
{
    optional ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional MajorObjectType ObjectDefinition with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ScopeEnum Scope with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional bool AllowCreate with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional Alter_ObjectExpansionEnum ObjectExpansion where ValidationCheckEnumValue(value == nothing || InRange<Alter_ObjectExpansionEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "ObjectExpansion", "Alter", "ObjectProperties, ExpandFull", value) with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.5    Delete
type DeleteType
{
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool IgnoreFailures with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.6    Process
type ProcessType
{
    ProcessTypeEnum Type where ValidationCheckEnumValueTooManyItems(InRange<ProcessTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "Process", "Type", "Process", "MS-SSAS") with XmlEncoding{Namespace = XMLAEngNamespace};
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OutOfLineBindingsType Bindings with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceType DataSource with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewType DataSourceView with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional WriteBackTableCreationEnum WriteBackTableCreation where ValidationCheckEnumValue((value == nothing || InRange<WriteBackTableCreationEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "WriteBackTableCreation", "Process", "Create, CreateAlways, UseExisting", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

type OutOfLineBindingsType
{
    optional array<OutOfLineBindingType> Binding with XmlEncoding{Name = "Binding", Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.6.1    OutOfLineBinding
type OutOfLineBindingType
{
    optional string  DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  DimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  CubeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MeasureGroupID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  PartitionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningModelID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MiningStructureID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  AttributeID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  CubeDimensionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  MeasureID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  ParentColumnID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string  ColumnID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
    optional NameColumnType NameColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SkippedLevelsColumnType SkippedLevelsColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CustomRollupColumnType CustomRollupColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional CustomRollupPropertiesColumnType CustomRollupPropertiesColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ValueColumnType ValueColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional UnaryOperatorColumnType UnaryOperatorColumn with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KColumnsType KeyColumns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FKColumnsType ForeignKeyColumns with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ProcessTranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type NameColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type SkippedLevelsColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CustomRollupColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CustomRollupPropertiesColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ValueColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type UnaryOperatorColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type KColumnsType
{
    optional array<KeyColumnType> KeyColumns with XmlEncoding{Name = "KeyColumns", Namespace = XMLAEngNamespace};
}

type KeyColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type FKColumnsType
{
    optional array<ForeignKeyColumnType> ForeignKeyColumns with XmlEncoding{Name = "ForeignKeyColumns", Namespace = XMLAEngNamespace};
}

type ForeignKeyColumnType
{
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ProcessTranslationsType
{
    optional array<ProcessTranslationType> Translations with XmlEncoding{Name = "Translations", Namespace = XMLAEngNamespace};
}

type ProcessTranslationType
{
    int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BindingType Source with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.7    MergePartitions
type MergePartitionsType
{
    SourcesType Sources with XmlEncoding{Namespace = XMLAEngNamespace};
    ObjectReferenceType Target where ValidationCheckValid(ValidateMergePartitionsTypeTarget(Sources, Target), null, true, ReferenceType.Type, "MSSSAS", "Target", "MergePartitions", "The Source and Target object references MUST point to distinct partitions in the same measure group. Otherwise, an error is raised") with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type SourcesType
{
    array<ObjectReferenceType> Source with XmlEncoding{Name = "Source", Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.8    DesignAggregations
type DesignAggregationsType
{
    ObjectReferenceType Object where ValidationCheckValid(ValidateObjectReferenceType(Object), null, true, ReferenceType.Type, "MSSSAS", "Object", "DesignAggregations", "The Object element MUST point to an existing aggregation design object") with XmlEncoding{Namespace = XMLAEngNamespace};
    optional TimeSpan Time with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long Steps with XmlEncoding{Namespace = XMLAEngNamespace};
    optional double Optimization with XmlEncoding{Namespace = XMLAEngNamespace};
    optional long Storage with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Materialize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional QueriesType Queries with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type QueriesType
{
    optional array<string> Query with XmlEncoding{Name = "Query", Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.9    ClearCache
type ClearCacheType
{
    ObjectReferenceType Object where ValidationCheckValid(ValidateObjectReferenceType(Object, DatabaseExpectedVals) || ValidateObjectReferenceType(Object, DimensionExpectedVals) || ValidateObjectReferenceType(Object, CubeExpectedVals) || ValidateObjectReferenceType(Object, MeasureGroupExpectedVals), null, true, ReferenceType.Type, "MSSSAS", "Object", "ClearCache", "The object MUST be one of the following: Database, Dimension, Cube, or MeasureGroup.") with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.10    Subscribe
type SubscribeType
{
    optional ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.11    Cancel
type CancelType
{
    optional int ConnectionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string SessionID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int SPID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool CancelAssociated with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.12    BeginTransaction
type BeginTransactionType
{
}

// 3.1.4.3.2.1.1.13    CommitTransaction
type CommitTransactionType
{
    optional DurabilityGuaranteeEnum DurabilityGuarantee where ValidationCheckEnumValue((value == nothing || InRange<DurabilityGuaranteeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DurabilityGuarantee", "CommitTransaction", "LocalDisk, Full", value) with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.14    RollbackTransaction
type RollbackTransactionType
{
}

// 3.1.4.3.2.1.1.15 Lock
type LockType
{
    uuid ID with XmlEncoding{Namespace = XMLAEngNamespace};
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    LockModeEnum Mode where ValidationCheckEnumValue((value == nothing || InRange<LockModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Mode", "Lock", "CommitShared, CommitExclusive", value) with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.16 Unlock
type UnlockType
{
    uuid ID with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.17 Backup
type BackupType
{
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    string File with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SecurityEnum Security where ValidationCheckEnumValue((value == nothing || InRange<SecurityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Security", "Backup", "SkipMembership, CopyAll, IgnoreSecurity", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool ApplyCompression with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AllowOverwrite with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool BackupRemotePartitions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional BackupLocationsType Locations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type BackupLocationsType
{
    optional array<LocationBackupType> Location with XmlEncoding{Name = "Location", Namespace = XMLAEngNamespace};
}

type LocationBackupType
{
    string File with XmlEncoding{Namespace = XMLAEngNamespace};
    string DataSourceID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.18 Restore
type RestoreType
{
    optional string DatabaseName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DatabaseID where ValidationCheckValid(this.ValidateDatabaseID(), null, true, ReferenceType.Type, "MSSSAS", "DatabaseID", "Restore", "If the DatabaseID element is present, the DatabaseName element MUST also be present.") with XmlEncoding{Namespace = XMLAEngNamespace};
    string File with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SecurityEnum Security where ValidationCheckEnumValue((value == nothing || InRange<SecurityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "Security", "Restore", "SkipMembership, CopyAll, IgnoreSecurity", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool AllowOverwrite with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DbStorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadWriteModeEnum ReadWriteMode where ValidationCheckEnumValue((value == nothing || InRange<ReadWriteModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ReadWriteMode", "Restore", "ReadWrite, ReadOnly, ReadOnlyExclusive", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional LocationsType Locations with XmlEncoding{Namespace = XMLAEngNamespace};

    bool ValidateDatabaseID()
    {
        if (nothing != this.DatabaseID)
        {
            return nothing != this.DatabaseName;
        }

        return true;
    }
}

type LocationsType
{
    optional array<LocationType> Location with XmlEncoding{Name = "Location", Namespace = XMLAEngNamespace};
}

type LocationType : LocationBackupType
{
    optional DataSourceTypeEnum DataSourceType where ValidationCheckEnumValue((value == nothing || InRange<DataSourceTypeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "DataSourceType", "Location", "Remote, Local", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string ConnectionString with XmlEncoding{Namespace = XMLAEngNamespace};
    optional FoldersType Folders with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type FoldersType
{
    optional array<FolderType> Folder with XmlEncoding{Name = "Folder", Namespace = XMLAEngNamespace};
}

type FolderType
{
    string Original with XmlEncoding{Namespace = XMLAEngNamespace};
    string New with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.19 Synchronize
type SynchronizeType
{
    SourceType Source with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SecurityEnum SynchronizeSecurity where ValidationCheckEnumValue((value == nothing || InRange<SecurityEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "SynchronizeSecurity", "Synchronize", "SkipMembership, CopyAll, IgnoreSecurity", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool ApplyCompression with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string DbStorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    optional SynchronizeLocationsType Locations with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type SynchronizeLocationsType
{
    optional array<LocationType> Location with XmlEncoding{Name = "Location", Namespace = XMLAEngNamespace};
}

type SourceType
{
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    string ConnectionString with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.20 Attach
type AttachType
{
    string Folder with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ReadWriteModeEnum ReadWriteMode where ValidationCheckEnumValue((value == nothing || InRange<ReadWriteModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ReadWriteMode", "Attach", "ReadWrite, ReadOnly, ReadOnlyExclusive", value) with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.21    Detach
type DetachType
{
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.22    Insert
type InsertType
{
    ObjectType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InsertUpdateAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Password with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.22.1    Object
type ObjectType
{ 
    optional string Database with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Cube with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Dimension with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.22.2    Attribute_InsertUpdate
type Attribute_InsertUpdate_Type
{
    string AttributeName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeysType Keys with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InsertUpdateTranslationsType Translations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Value with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string CUSTOM_ROLLUP with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string CUSTOM_ROLLUP_PROPERTIES with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string UNARY_OPERATOR with XmlEncoding{Namespace = XMLAEngNamespace};
    optional int SKIPPED_LEVELS with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type KeysType
{ 
    optional array<XsdPrimitiveTypes> Key with XmlEncoding{Name = "Key", Namespace = XMLAEngNamespace};
}

type InsertUpdateTranslationsType
{ 
    optional array<Translation_InsertUpdate_Type> Translation with XmlEncoding{Name = "Translation", Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.22.3    Translation_InsertUpdate
type Translation_InsertUpdate_Type
{ 
    int Language with XmlEncoding{Namespace = XMLAEngNamespace};
    optional string Name with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.23    Update
type UpdateType
{
    ObjectType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional InsertUpdateAttributesType Attributes with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool MoveWithDescendants with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool MoveToRoot with XmlEncoding{Namespace = XMLAEngNamespace};
    WhereType Where with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type InsertUpdateAttributesType
{
    optional array<Attribute_InsertUpdate_Type> Attribute with XmlEncoding{Name = "Attribute", Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.23.1    Where
type WhereType
{
    Where_AttributeType Attribute with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.23.2    Where_Attribute
type Where_AttributeType
{
    string AttributeName with XmlEncoding{Namespace = XMLAEngNamespace};
    optional KeysType Keys with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.24    Drop
type DropType
{
    ObjectType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool DeleteWithDescendants with XmlEncoding{Namespace = XMLAEngNamespace};
    WhereType Where with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.25    UpdateCells
type UpdateCellsType
{
    optional array<CellType> Cell with XmlEncoding{Name = "Cell", Namespace = XMLAEngNamespace};
}

type KeepResultType {} // The KeepResult element MUST be empty.

type ResultType
{
    string ResultId with XmlEncoding{Namespace = XMLAEngNamespace};
}

type ClearResultType
{
    string ResultId with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.25.1    Cell
type CellType
{
    XsdPrimitiveTypes Value with XmlEncoding{Namespace = XMLAEngNamespace};
    long CellOrdinal with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

// 3.1.4.3.2.1.1.26    NotifyTableChange
type NotifyTableChangeType
{
    ObjectReferenceType Object where ValidationCheckValid(ValidateObjectReferenceType(Object, DataSourceExpectedVals), null, true, ReferenceType.Type, "MSSSAS", "Object", "NotifyTableChange", "The object that is referenced MUST be a DataSource object.") with XmlEncoding{Namespace = XMLAEngNamespace};
    TableNotificationsType TableNotifications with XmlEncoding{Namespace = XMLAEngNamespace};
}

// 3.1.4.3.2.1.1.27    Batch
type BatchType
{
    optional array<string> Statement with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<ParallelType> Parallel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional OutOfLineBindingType Bindings with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceType DataSource with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DataSourceViewType DataSourceView with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ErrorConfigurationType ErrorConfiguration with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<CreateType> Create with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<AlterType> Alter with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<DeleteType> Delete with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<ProcessType> Process with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<MergePartitionsType> MergePartitions with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<DesignAggregationsType> DesignAggregations with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<NotifyTableChangeType> NotifyTableChange with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<InsertType> Insert with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<UpdateType> Update with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<DropType> Drop with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<UpdateCellsType> UpdateCells with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<BackupType> Backup with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<RestoreType> Restore with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<SynchronizeType> Synchronize with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<CancelType> Cancel with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<ClearCacheType> ClearCache with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<DetachType> Detach with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<AttachType> Attach with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<LockType> Lock with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<UnlockType> Unlock with XmlEncoding{Namespace = XMLAEngNamespace};
    optional DBCCType DBCC with XmlEncoding{Namespace = XMLAEngNamespace};
    optional array<DiscoverType> Discover with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Transaction with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional bool ProcessAffectedObjects with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
}

type ParallelType
{
    optional array<ProcessType> Process with XmlEncoding{Namespace = XMLAEngNamespace};
    int MaxParallel with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.28    ImageLoad
type ImageLoadType
{
    optional string ImagePath with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional string ImageUrl with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional string ImageUniqueID with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional string ImageVersion with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional ReadWriteModeEnum ReadWriteMode where ValidationCheckEnumValue((value == nothing || InRange<ReadWriteModeEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "ReadWriteMode", "ImageLoad", "ReadWrite, ReadOnly, ReadOnlyExclusive", value) with XmlEncoding{Namespace = XMLAEng200200Namespace};
    optional string DbStorageLocation with XmlEncoding{Namespace = XMLAEng200200Namespace};
    string DatabaseName with XmlEncoding{Namespace = XMLAEngNamespace};
    string DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
    optional ImageLoadDataType Data with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type ImageLoadDataType
{
    optional array<string> DataBlock with XmlEncoding{Name = "DataBlock", Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.29    ImageSave  TODO: miss when Data = true
type ImageSaveType
{
    ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    optional bool Data with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.30    CloneDatabase
type CloneDatabaseType
{
    CloneDatabaseObjectType Object with XmlEncoding{Namespace = XMLAEngNamespace};
    TargetType Target with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type CloneDatabaseObjectType
{
    ObjectReferenceType DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

type TargetType
{
    optional string DbStorageLocation with XmlEncoding{Namespace = XMLAEngNamespace};
    string DatabaseName with XmlEncoding{Namespace = XMLAEngNamespace};
    string DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.31    SetAuthContext
type SetAuthContextType
{
    string Token with XmlEncoding{Namespace = XMLAEngNamespace};
    string DatabaseID with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.1.32    DBCC
type DBCCType
{
    optional ObjectReferenceType Object with XmlEncoding{Namespace = XMLAEngNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.1.2    Properties Element
type PropertiesType
{
    optional PropertyListType PropertyList where ValidationCheckValid(value != nothing, null, true, ReferenceType.Type, "MSSSAS", "PropertyList", "PropertiesType", "The Properties element MUST contain one and only one PropertyList element, of type PropertyList. ");
}

// 3.1.4.3.2.1.3    Parameters
type ParametersType
{
    optional array<ExecuteParameterType> Parameters with XmlEncoding{Name = "Parameters"};
}

// 3.1.4.3.2.1.3.1    ExecuteParameter
type ExecuteParameterType
{
    string Name;
    xml Value with XmlEncoding{Kind = XmlKind.Element, IsAny = true, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// 3.1.4.3.2.2    ExecuteResponse
type ExecuteResponseType
{
    ExecuteResponseReturnType $"return";
}

// 3.1.4.3.2.2.1    return Element
type ExecuteResponseReturnType
{
    optional mddatasetType mddatasetRoot with XmlEncoding{Name = "root", Namespace = XMLADSNamespace};
    optional rowsetType rowsetRoot with XmlEncoding{Name = "root", Namespace = XMLARSNamespace};
    optional emptyresultType emptyresultRoot with XmlEncoding{Name = "root", Namespace = XMLAEmptyNamespace};
    optional resultsType results with XmlEncoding{Namespace = XMLAMNamespace};
    optional AffectedObjectsType AffectedObjects with XmlEncoding{Namespace = XMLAMNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All};

/*--------------- Add all patterns here. ---------------*/
pattern BindingTypeOfDimensionTypePattern = DataSourceViewBindingType | DimensionBindingType | CubeDimensionBindingType | TimeBindingType;

pattern BindingTypeOfDimensionAttributeTypePattern = AttributeBindingType | UserDefinedGroupBindingType | MeasureBindingType
    | CalculatedMeasureBindingType | CubeAttributeBindingType | TimeAttributeBindingType;

pattern BindingTypeOfMiningStructureTypePattern = DataSourceViewBindingType | DimensionBindingType | CubeDimensionBindingType;

pattern BindingTypeOfScalarMiningStructureColumnTypePattern = AttributeBindingType | CubeAttributeBindingType | MeasureBindingType;

pattern BindingTypeOfDataItemTypePattern = ColumnBindingType | RowBindingType | MeasureBindingType | CubeDimensionBindingType
    | AttributeBindingType | CalculatedMeasureBindingType | CubeAttributeBindingType | TimeAttributeBindingType 
    | InheritedBindingType | eng200_200_RowNumberBindingType | eng200_200_ExpressionBindingType;

pattern ProactiveCachingBindingTypePattern = ProactiveCachingInheritedBindingType | ProactiveCachingTablesBindingType 
    | ProactiveCachingQueryBindingType | ProactiveCachingIncrementalProcessingBindingType;

pattern AssemblyTypeArrayPattern = array<AssemblyType> | array<ClrAssemblyType> | array<ComAssemblyType>;

pattern BindingTypeArrayPattern = array<MeasureBindingType> | array<CubeAttributeBindingType>;

pattern MeasureGroupDimensionTypeArrayPattern = array<MeasureGroupDimensionType> | array<ManyToManyMeasureGroupDimensionType> | array<RegularMeasureGroupDimensionType>
    | array<ReferenceMeasureGroupDimensionType> | array<DegenerateMeasureGroupDimensionType> | array<DataMiningMeasureGroupDimensionType>;

pattern ActionTypeArrayPattern = array<ActionType> | array<StandardActionType> | array<ReportActionType> | array<DrillThroughActionType>;

pattern uuid = string with XmlEncoding{AnonymousType = true}, XmlPrimitiveValueEncoding{Pattern = @"[0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}"};

pattern FirstDayOfWeek = int where value >= 1 && value <= 7;

pattern FiscalFirstMonth = int where value >= 1 && value <= 12;

pattern FiscalFirstDayOfMonth = int where value >= 1 && value <= 31;

pattern ReportingFirstMonth = int where value >= 1 && value <= 12;

pattern ManufacturingFirstMonth = int where value >= 1 && value <= 12;

pattern ManufacturingFirstWeekOfMonth = int where value >= 1 && value <= 4;

pattern ManufacturingExtraMonthQuarter = int where value >= 1 && value <= 4;

pattern ScopeEnum = enum string
{
    Session = "Session",
    ...
};

pattern Alter_ObjectExpansionEnum = enum string
{
    ObjectProperties = "ObjectProperties",
    ExpandFull = "ExpandFull",
    ...
};

pattern ProcessTypeEnum = enum string
{
    ProcessFull = "ProcessFull",
    ProcessAdd = "ProcessAdd",
    ProcessUpdate = "ProcessUpdate",
    ProcessIndexes = "ProcessIndexes",
    ProcessScriptCache = "ProcessScriptCache",
    ProcessData = "ProcessData",
    ProcessDefault = "ProcessDefault",
    ProcessClear = "ProcessClear",
    ProcessStructure = "ProcessStructure",
    ProcessClearStructureOnly = "ProcessClearStructureOnly",
    ProcessClearIndexes = "ProcessClearIndexes",
    ProcessDefrag = "ProcessDefrag",
    ...
};

pattern ObjectExpansionEnum = enum string
{
    ReferenceOnly = "ReferenceOnly",
    ObjectProperties = "ObjectProperties",
    ExpandObject = "ExpandObject",
    ExpandFull = "ExpandFull",
    ...
};

pattern DISCOVER_TRACES_TypeEnum = enum string
{
    Trace = "Trace",
    XEvent = "XEvent",
    ...
};

pattern COLUMN_TYPE_ENUM = enum string
{
    BASIC_DATA = "BASIC_DATA",
    CALCULATED_DATA = "CALCULATED_DATA",
    RELATIONSHIP = "RELATIONSHIP",
    HIERARCHY_POSITION_TO_DATAID = "HIERARCHY_POSITION_TO_DATAID",
    HIERARCHY_DATAID_TO_POSITION = "HIERARCHY_DATAID_TO_POSITION",
    UNKNOWN = "UNKNOWN",
    ...
};

pattern DATATYPEENUM = enum string
{
    NA = "N/A",
    DBTYPE_EMPTY = "DBTYPE_EMPTY",
    DBTYPE_I2 = "DBTYPE_I2",
    DBTYPE_I4 = "DBTYPE_I4",
    DBTYPE_R4 = "DBTYPE_R4",
    DBTYPE_R8 = "DBTYPE_R8",
    DBTYPE_CY = "DBTYPE_CY",
    DBTYPE_DATE = "DBTYPE_DATE",
    DBTYPE_BSTR = "DBTYPE_BSTR",
    DBTYPE_ERROR = "DBTYPE_ERROR",
    DBTYPE_BOOL = "DBTYPE_BOOL",
    DBTYPE_DECIMAL = "DBTYPE_DECIMAL",
    DBTYPE_I1 = "DBTYPE_I1",
    DBTYPE_UI1 = "DBTYPE_UI1",
    DBTYPE_UI2 = "DBTYPE_UI2",
    DBTYPE_UI4 = "DBTYPE_UI4",
    DBTYPE_I8 = "DBTYPE_I8",
    DBTYPE_UI8 = "DBTYPE_UI8",
    DBTYPE_GUID = "DBTYPE_GUID",
    DBTYPE_BYTES = "DBTYPE_BYTES",
    DBTYPE_STR = "DBTYPE_STR",
    DBTYPE_WSTR = "DBTYPE_WSTR",
    DBTYPE_NUMERIC = "DBTYPE_NUMERIC",
    DBTYPE_DBDATE = "DBTYPE_DBDATE",
    DBTYPE_DBTIME = "DBTYPE_DBTIME",
    DBTYPE_DBTIMESTAMP = "DBTYPE_DBTIMESTAMP",
    ...
};

pattern VERTIPAQ_STATE_ENUM = enum string
{
    COMPLETED = "COMPLETED",
    TIMEBOXED = "TIMEBOXED",
    SKIPPED = "SKIPPED",
    ...
};

pattern DEPENDENCY_OBJECT_TYPE_ENUM = enum string
{
    QUERY = "QUERY",
    COLUMN = "COLUMN",
    CALC_COLUMN = "CALC_COLUMN",
    HIERARCHY = "HIERARCHY",
    MEASURE = "MEASURE",
    ACTIVE_RELATIONSHIP = "ACTIVE_RELATIONSHIP",
    RELATIONSHIP = "RELATIONSHIP",
    ROWS_ALLOWED = "ROWS_ALLOWED",
    ...
};

pattern XEVENT_OBJECT_TYPE_ENUM = enum string
{
    Event = "Event",
    Action = "Action",
    Target = "Target",
    pred_source = "pred_source",
    pred_compare = "pred_compare",
    Type = "Type",
    ...
};

pattern OBJECT_COLUMN_TYPE_ENUM = enum string
{
    Readonly = "Readonly",
    Data = "Data",
    Customizable = "Customizable",
    ...
};

pattern CAPABILITIES_DESC_ENUM = enum string
{
    Mandatory = "Mandatory",
    NULL = "NULL",
    ...
};

pattern VisibilityEnum = enum string
{
    SchemaRowset  =  "SchemaRowset",
    None  =  "None",
    ...
};

pattern OnlineModeEnum = enum string
{
    Immediate = "Immediate",
    OnCacheComplete = "OnCacheComplete",
    ...
};

pattern AggregationStorageEnum = enum string
{
    Regular = "Regular",
    MolapOnly = "MolapOnly",
    ...
};

pattern WriteBackTableCreationEnum = enum string
{
    Create = "Create",
    CreateAlways = "CreateAlways",
    UseExisting = "UseExisting",
    ...
};

pattern DataTypeEnum = enum string
{
    WChar = "WChar",
    Integer = "Integer",
    BigInt  =  "BigInt",
    Single = "Single",
    Double = "Double",
    Date = "Date",
    Currency = "Currency",
    UnsignedTinyInt = "UnsignedTinyInt",
    UnsignedSmallInt = "UnsignedSmallInt",
    UnsignedInt = "UnsignedInt",
    UnsignedBigInt = "UnsignedBigInt",
    Bool = "Bool",
    Smallint = "Smallint",
    Tinyint = "Tinyint",
    Binary = "Binary",
    ...
};

pattern NullProcessingEnum = enum string
{
    Preserve = "Preserve",
    Error = "Error",
    UnknownMember = "UnknownMember",
    ZeroOrBlank = "ZeroOrBlank",
    Automatic = "Automatic",
    ...
};

pattern TrimmingEnum = enum string
{
    Left = "Left",
    Right = "Right",
    LeftRight = "LeftRight",
    None = "None",
    ...
};

pattern InvalidXmlCharactersEnum = enum string 
{
    Preserve = "Preserve",
    Remove = "Remove",
    Replace = "Replace",
    ...
};

pattern DataItemFormatEnum = enum string
{
    TrimRight = "TrimRight",
    TrimLeft = "TrimLeft",
    TrimAll = "TrimAll",
    TrimNone = "TrimNone",
    ...
};

pattern AttributeBindingEnum = enum string 
{
    All = "All",
    Key = "Key",
    Name = "Name",
    Value = "Value",
    Translation = "Translation",
    UnaryOperator = "UnaryOperator",
    SkippedLevels = "SkippedLevels",
    CustomRollup = "CustomRollup",
    CustomRollupProperties = "CustomRollupProperties",
    ...
};

pattern PersistenceEnum = enum string
{
    NotPersisted = "NotPersisted",
    Metadata = "Metadata",
    All = "All",
    ...
};

pattern RefreshPolicyEnum = enum string
{
    ByQuery = "ByQuery",
    ByInterval = "ByInterval",
    ...
};

pattern FiscalYearNameEnum = enum string
{
    CalendarYearName = "CalendarYearName",
    NextCalendarYearName = "NextCalendarYearName",
    ...
};

pattern ReportingFirstWeekOfMonthEnum = enum string 
{
    FirstWeekOfMonth1 = "1",
    FirstWeekOfMonth2 = "2",
    FirstWeekOfMonth3 = "3",
    FirstWeekOfMonth4 = "4",
    ...
};

pattern ReportingWeekToMonthPatternEnum = enum string
{
    Weeks445 = "Weeks445",
    Weeks454 = "Weeks454",
    Weeks544 = "Weeks544",
    ...
};

pattern eng300_DataEmbeddingStyleEnum = enum string
{
    Embedded = "Embedded",
    NotEmbedded = "NotEmbedded",
    ...
};

pattern NotificationTechniqueEnum = enum string 
{
    Client = "Client",
    Server = "Server",
    ...
};

pattern ReadDefinitionEnum = enum string 
{
    None = "None",
    Basic = "Basic",
    Allowed = "Allowed",
    ...
};

pattern ReadEnum = enum string 
{    
    None = "None",
    Allowed = "Allowed",
    ...
};

pattern WriteEnum = enum string 
{    
    None = "None",
    Allowed = "Allowed",
    ...
};

pattern AccessEnum = enum string 
{
    Read = "Read",
    ReadContingent = "ReadContingent",
    ReadWrite = "ReadWrite",
    ...
};

pattern ReadSourceDataEnum = enum string 
{    
    None = "None",
    Allowed = "Allowed",
    ...
};

pattern RequestTypeEnum = enum string
{
    //**********************************************************************
    // Defined in the protocol MS-SSAS-T
    //**********************************************************************
    TMSCHEMA_MODEL = "TMSCHEMA_MODEL",
    TMSCHEMA_DATA_SOURCES = "TMSCHEMA_DATA_SOURCES",
    TMSCHEMA_TABLES = "TMSCHEMA_TABLES",
    TMSCHEMA_COLUMNS = "TMSCHEMA_COLUMNS",
    TMSCHEMA_ATTRIBUTE_HIERARCHIES = "TMSCHEMA_ATTRIBUTE_HIERARCHIES",
    TMSCHEMA_PARTITIONS = "TMSCHEMA_PARTITIONS",
    TMSCHEMA_RELATIONSHIPS = "TMSCHEMA_RELATIONSHIPS",
    TMSCHEMA_MEASURES = "TMSCHEMA_MEASURES",
    TMSCHEMA_HIERARCHIES = "TMSCHEMA_HIERARCHIES",
    TMSCHEMA_LEVELS = "TMSCHEMA_LEVELS",
    TMSCHEMA_ANNOTATIONS = "TMSCHEMA_ANNOTATIONS",
    TMSCHEMA_KPIS = "TMSCHEMA_KPIS",
    TMSCHEMA_CULTURES = "TMSCHEMA_CULTURES",
    TMSCHEMA_OBJECT_TRANSLATIONS = "TMSCHEMA_OBJECT_TRANSLATIONS",
    TMSCHEMA_LINGUISTIC_METADATA = "TMSCHEMA_LINGUISTIC_METADATA",
    TMSCHEMA_PERSPECTIVES = "TMSCHEMA_PERSPECTIVES",
    TMSCHEMA_PERSPECTIVE_TABLES = "TMSCHEMA_PERSPECTIVE_TABLES",
    TMSCHEMA_PERSPECTIVE_COLUMNS = "TMSCHEMA_PERSPECTIVE_COLUMNS",
    TMSCHEMA_PERSPECTIVE_HIERARCHIES = "TMSCHEMA_PERSPECTIVE_HIERARCHIES",
    TMSCHEMA_PERSPECTIVE_MEASURES = "TMSCHEMA_PERSPECTIVE_MEASURES",
    TMSCHEMA_ROLES = "TMSCHEMA_ROLES",
    TMSCHEMA_ROLE_MEMBERSHIPS = "TMSCHEMA_ROLE_MEMBERSHIPS",
    TMSCHEMA_TABLE_PERMISSIONS = "TMSCHEMA_TABLE_PERMISSIONS",
    TMSCHEMA_VARIATIONS = "TMSCHEMA_VARIATIONS",
    TMSCHEMA_EXTENDED_PROPERTIES = "TMSCHEMA_EXTENDED_PROPERTIES",
    TMSCHEMA_EXPRESSIONS = "TMSCHEMA_EXPRESSIONS",
    TMSCHEMA_COLUMN_PERMISSIONS = "TMSCHEMA_COLUMN_PERMISSIONS",
    TMSCHEMA_DETAIL_ROWS_DEFINITIONS = "TMSCHEMA_DETAIL_ROWS_DEFINITIONS",

    //**********************************************************************
    // Defined in the protocol MS-SSAS
    //**********************************************************************
    DBSCHEMA_CATALOGS = "DBSCHEMA_CATALOGS",
    MDSCHEMA_CUBES = "MDSCHEMA_CUBES",
    MDSCHEMA_DIMENSIONS = "MDSCHEMA_DIMENSIONS",
    MDSCHEMA_HIERARCHIES = "MDSCHEMA_HIERARCHIES",
    MDSCHEMA_LEVELS = "MDSCHEMA_LEVELS",
    MDSCHEMA_MEASURES = "MDSCHEMA_MEASURES",
    MDSCHEMA_PROPERTIES = "MDSCHEMA_PROPERTIES",
    MDSCHEMA_MEMBERS = "MDSCHEMA_MEMBERS",
    MDSCHEMA_ACTIONS = "MDSCHEMA_ACTIONS",
    MDSCHEMA_SETS = "MDSCHEMA_SETS",
    DISCOVER_INSTANCES = "DISCOVER_INSTANCES",
    MDSCHEMA_KPIS = "MDSCHEMA_KPIS",
    MDSCHEMA_MEASUREGROUPS = "MDSCHEMA_MEASUREGROUPS",
    MDSCHEMA_MEASUREGROUP_DIMENSIONS = "MDSCHEMA_MEASUREGROUP_DIMENSIONS",
    DISCOVER_PROPERTIES = "DISCOVER_PROPERTIES",
    DISCOVER_LITERALS = "DISCOVER_LITERALS",
    DISCOVER_SCHEMA_ROWSETS = "DISCOVER_SCHEMA_ROWSETS",
    DISCOVER_KEYWORDS = "DISCOVER_KEYWORDS",
    DBSCHEMA_TABLES = "DBSCHEMA_TABLES",
    DBSCHEMA_COLUMNS = "DBSCHEMA_COLUMNS",
    DBSCHEMA_PROVIDER_TYPES = "DBSCHEMA_PROVIDER_TYPES",
    MDSCHEMA_INPUT_DATASOURCES = "MDSCHEMA_INPUT_DATASOURCES",
    DMSCHEMA_MINING_SERVICES = "DMSCHEMA_MINING_SERVICES",
    DMSCHEMA_MINING_SERVICE_PARAMETERS = "DMSCHEMA_MINING_SERVICE_PARAMETERS",
    DMSCHEMA_MINING_FUNCTIONS = "DMSCHEMA_MINING_FUNCTIONS",
    DMSCHEMA_MINING_MODEL_CONTENT = "DMSCHEMA_MINING_MODEL_CONTENT",
    DMSCHEMA_MINING_MODEL_XML = "DMSCHEMA_MINING_MODEL_XML",
    DMSCHEMA_MINING_MODEL_CONTENT_PMML = "DMSCHEMA_MINING_MODEL_CONTENT_PMML",
    DMSCHEMA_MINING_MODELS = "DMSCHEMA_MINING_MODELS",
    DMSCHEMA_MINING_COLUMNS = "DMSCHEMA_MINING_COLUMNS",
    DMSCHEMA_MINING_STRUCTURES = "DMSCHEMA_MINING_STRUCTURES",
    DMSCHEMA_MINING_STRUCTURE_COLUMNS = "DMSCHEMA_MINING_STRUCTURE_COLUMNS",
    DISCOVER_DATASOURCES = "DISCOVER_DATASOURCES",
    DISCOVER_ENUMERATORS = "DISCOVER_ENUMERATORS",
    DISCOVER_XML_METADATA = "DISCOVER_XML_METADATA",
    DISCOVER_TRACES = "DISCOVER_TRACES",
    DISCOVER_TRACE_DEFINITION_PROVIDERINFO = "DISCOVER_TRACE_DEFINITION_PROVIDERINFO",
    DISCOVER_TRACE_COLUMNS = "DISCOVER_TRACE_COLUMNS",
    DISCOVER_TRACE_EVENT_CATEGORIES = "DISCOVER_TRACE_EVENT_CATEGORIES",
    DISCOVER_MEMORYUSAGE = "DISCOVER_MEMORYUSAGE",
    DISCOVER_MEMORYGRANT = "DISCOVER_MEMORYGRANT",
    DISCOVER_LOCKS = "DISCOVER_LOCKS",
    DISCOVER_CONNECTIONS = "DISCOVER_CONNECTIONS",
    DISCOVER_SESSIONS = "DISCOVER_SESSIONS",
    DISCOVER_JOBS = "DISCOVER_JOBS",
    DISCOVER_TRANSACTIONS = "DISCOVER_TRANSACTIONS",
    DISCOVER_DB_CONNECTIONS = "DISCOVER_DB_CONNECTIONS",
    DISCOVER_MASTER_KEY = "DISCOVER_MASTER_KEY",
    DISCOVER_PERFORMANCE_COUNTERS = "DISCOVER_PERFORMANCE_COUNTERS",
    DISCOVER_LOCATIONS = "DISCOVER_LOCATIONS",
    DISCOVER_PARTITION_DIMENSION_STAT = "DISCOVER_PARTITION_DIMENSION_STAT",
    DISCOVER_PARTITION_STAT = "DISCOVER_PARTITION_STAT",
    DISCOVER_DIMENSION_STAT = "DISCOVER_DIMENSION_STAT",
    DISCOVER_COMMANDS = "DISCOVER_COMMANDS",
    DISCOVER_COMMAND_OBJECTS = "DISCOVER_COMMAND_OBJECTS",
    DISCOVER_OBJECT_ACTIVITY = "DISCOVER_OBJECT_ACTIVITY",
    DISCOVER_OBJECT_MEMORY_USAGE = "DISCOVER_OBJECT_MEMORY_USAGE",
    DISCOVER_STORAGE_TABLES = "DISCOVER_STORAGE_TABLES",
    DISCOVER_STORAGE_TABLE_COLUMNS = "DISCOVER_STORAGE_TABLE_COLUMNS",
    DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS = "DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS",
    DISCOVER_CSDL_METADATA = "DISCOVER_CSDL_METADATA",
    DISCOVER_CALC_DEPENDENCY = "DISCOVER_CALC_DEPENDENCY",
    MDSCHEMA_FUNCTIONS = "MDSCHEMA_FUNCTIONS",
    DISCOVER_RING_BUFFERS = "DISCOVER_RING_BUFFERS",
    DISCOVER_XEVENT_TRACE_DEFINITION = "DISCOVER_XEVENT_TRACE_DEFINITION",
    DISCOVER_XEVENT_PACKAGES = "DISCOVER_XEVENT_PACKAGES",
    DISCOVER_XEVENT_OBJECTS = "DISCOVER_XEVENT_OBJECTS",
    DISCOVER_XEVENT_OBJECT_COLUMNS = "DISCOVER_XEVENT_OBJECT_COLUMNS",
    DISCOVER_XEVENT_SESSIONS = "DISCOVER_XEVENT_SESSIONS",
    DISCOVER_XEVENT_SESSION_TARGETS = "DISCOVER_XEVENT_SESSION_TARGETS",
    ...
};

pattern StateSupportEnum = enum string
{
    None = "None",
    Sessions = "Sessions",
    ...
};

pattern ContentEnum = enum string
{
    None = "None",
    Schema = "Schema",
    Data = "Data",
    SchemaData = "SchemaData",
    Metadata = "Metadata",
    ... 
};

pattern PropertyListFormatEnum = enum string
{
    Tabular = "Tabular",
    Multidimensional = "Multidimensional",
    Native = "Native",
    ...
};

pattern AxisFormatEnum = enum string
{
    ClusterFormat = "ClusterFormat",
    CustomFormat = "CustomFormat",
    TupleFormat = "TupleFormat",
    ...
};

pattern MDXSupportEnum = enum string
{
    Core = "Core",
    ...
};

pattern DialectEnum = enum string
{
    MDX = "MDX",
    DMX = "DMX",
    SQL = "SQL",
    ...
};

pattern SQLQueryModeEnum = enum string
{
    Data = "Data",
    Calculated = "Calculated",
    IncludeEmpty = "IncludeEmpty",
    DataKeys = "DataKeys",
    ...
};

pattern MdxMissingMemberModeEnum = enum string
{
    Default = "Default",
    Error = "Error",
    Ignore = "Ignore",
    ...
};

pattern ResponseEncodingEnum = enum string
{
    Default = "Default",
    $"UTF-8" = "UTF-8",
    $"UTF-16" = "UTF-16",
    ...
};

pattern STRUCTURE_TYPE_ENUM = enum string
{
    Natural = "Natural",
    Unnatural = "Unnatural",
    Unknown = "Unknown",
    ...
};

pattern CARDINALITY_ENUM = enum string
{
    ONE = "ONE",
    MANY = "MANY",
    ...
};

pattern DATASOURCE_TYPE_ENUM = enum string
{
    Relational = "Relational",
    Olap = "Olap",
    ...
};

pattern DISTRIBUTION_FLAG_ENUM = enum string
{
    NORMAL = "NORMAL",
    LOG_NORMAL = "LOG_NORMAL",
    UNIFORM = "UNIFORM",
    ...
};

pattern CONTENT_TYPE_ENUM = enum string
{
    KEY = "KEY",
    DISCRETE = "DISCRETE",
    CONTINUOUS = "CONTINUOUS",
    DISCRETIZED = "DISCRETIZED",
    ORDERED = "ORDERED",
    KEY_TIME = "KEY TIME",
    CYCLICAL = "CYCLICAL",
    PROBABILITY = "PROBABILITY",
    VARIANCE = "VARIANCE",
    STDEV = "STDEV",
    SUPPORT = "SUPPORT",
    PROBABILITY_VARIANCE = "PROBABILITY_VARIANCE",
    PROBABILITY_STDEV = "PROBABILITY_STDEV",
    KEY_SEQUENCE = "KEY SEQUENCE",
    ...
};

pattern COORDINATE_ENUM = enum string
{
    Cube = "Cube",
    Dimension = "Dimension",
    Hierarchy = "Hierarchy",
    Level = "Level",
    Member = "Member",
    Set = "Set",
    Cell = "Cell",
    ...
};

pattern CardinalityEnum = enum string
{
    One = "One",
    Many = "Many",
    ...
};

pattern AuthenticationModeEnum = enum string
{
    Unauthenticated = "Unauthenticated",
    Authenticated = "Authenticated",
    Integrated = "Integrated",
    ...
};

pattern StorageEngineUsedEnum = enum string
{
    Traditional = "Traditional",
    InMemory = "InMemory",
    Mixed = "Mixed",
    TabularMetadata = "TabularMetadata",
    ...
};

pattern StateEnum = enum string
{
    Processed = "Processed",
    PartiallyProcessed = "PartiallyProcessed",
    Unprocessed = "Unprocessed",
    ...
};

pattern ReadWriteModeEnum = enum string
{
    ReadWrite = "ReadWrite",
    ReadOnly = "ReadOnly",
    ReadOnlyExclusive = "ReadOnlyExclusive",
    ...
};

pattern DirectQueryModeEnum =enum string
{
    InMemory = "InMemory",
    DirectQueryWithInMemory = "DirectQueryWithInMemory",
    InMemoryWithDirectQuery = "InMemoryWithDirectQuery",
    DirectQuery = "DirectQuery",
    ...
};

pattern AggregationFunctionEnum = enum string
{
    Sum = "Sum",
    Count = "Count",
    Min = "Min",
    max = "Max",
    DistinctCount = "DistinctCount",
    None = "None",
    AverageOfChildren = "AverageOfChildren",
    FirstChild = "FirstChild",
    LastChild = "LastChild",
    FirstNonEmpty = "FirstNonEmpty",
    LastNonEmpty = "LastNonEmpty",
    ...
};

pattern ImpersonationModeEnum = enum string
{
    Default = "Default",
    ImpersonateServiceAccount = "ImpersonateServiceAccount",
    ImpersonateAnonymous = "ImpersonateAnonymous",
    ImpersonateCurrentUser = "ImpersonateCurrentUser",
    ImpersonateAccount = "ImpersonateAccount",
    ...
};

pattern ImpersonationInfoSecurityEnum = enum string
{
    PasswordRemoved = "PasswordRemoved",
    Unchanged = "Unchanged",
    ...
};

pattern DurabilityGuaranteeEnum = enum string
{
    LocalDisk = "LocalDisk",
    Full = "Full",
    ...
};

pattern ClrAssemblyFileTypeEnum = enum string
{
    Main = "Main",
    Dependent = "Dependent",
    Debug = "Debug",
    ...
};

pattern PermissionSetEnum = enum string 
{
    Safe = "Safe",
    ExternalAccess = "ExternalAccess",
    Unrestricted = "Unrestricted",
    ...
};

pattern EditionEnum = enum string
{
    Standard = "Standard",
    Standard64 = "Standard64",
    Enterprise = "Enterprise",
    Enterprise64 = "Enterprise64",
    Developer = "Developer",
    Developer64 = "Developer64",
    Evaluation = "Evaluation",
    Evaluation64 = "Evaluation64",
    Local = "Local",
    Local64 = "Local64",
    BusinessIntelligence = "BusinessIntelligence",
    BusinessIntelligence64 = "BusinessIntelligence64",
    ...
};

pattern ServerModeEnum = enum string
{
    Multidimensional = "Multidimensional",
    Tabular = "Tabular",
    SharePoint = "SharePoint",
    ...
};

pattern retentionModesEnum = enum string
{
    allowSingleEventLoss  =  "allowSingleEventLoss",
    allowMultipleEventLoss  =  "allowMultipleEventLoss",
    noEventLoss  =  "noEventLoss",
    ...
};

pattern partitionModesEnum = enum string
{
    none = "none",
    perNode = "perNode",
    perCpu = "perCpu",
    ...
};

pattern ConnectionStringSecurityEnum = enum string
{
    PasswordRemoved = "PasswordRemoved",
    Unchanged = "Unchanged",
    ...
};

pattern IsolationEnum = enum string
{
    ReadCommitted = "ReadCommitted",
    Snapshot = "Snapshot",
    ...
};

pattern ParameterEnum = enum string
{
    InputRowset = "InputRowset",
    EndOfInputRowset = "EndOfInputRowset",
    ...
};

pattern ProcessingRecommendationEnum = enum string
{
    None = "None",
    Stale = "Stale",
    ...
};

pattern ProcessingModeEnum = enum string
{
    Regular = "Regular",
    LazyAggregations = "LazyAggregations",
    ...
};

pattern ProcessingGroupEnum = enum string
{
    ByAttribute = "ByAttribute",
    ByTable = "ByTable",
    ...
};

pattern StorageModeEnum = enum string
{
    Molap = "Molap",
    Rolap = "Rolap",
    InMemory = "InMemory",
    ...
};

pattern DimensionTypeEnum = enum string
{
    Regular = "Regular",
    Time = "Time",
    Geography = "Geography",
    Organization = "Organization",
    BillOfMaterials = "BillOfMaterials",
    Accounts = "Accounts",
    Customers = "Customers",
    Products = "Products",
    Scenario = "Scenario",
    Quantitative = "Quantitative",
    Utility = "Utility",
    Currency = "Currency",
    Rates = "Rates",
    Channel = "Channel",
    Promotion = "Promotion",
    ...
};

pattern DimensionCurrentStorageModeEnum = enum string
{
    Molap = "Molap",
    InMemory = "InMemory",
    Rolap = "Rolap",
    ...
};

pattern UnknownMemberEnum = enum string
{
    Visible = "Visible",
    Hidden = "Hidden",
    None = "None",
    AutomaticNull = "AutomaticNull",
    ...
};

pattern KeyErrorActionEnum = enum string
{
    ConvertToUnknown = "ConvertToUnknown",
    DiscardRecord = "DiscardRecord",
    ...
};

pattern KeyErrorLimitActionEnum = enum string
{
    StopProcessing = "StopProcessing",
    StopLogging = "StopLogging",
    ...
};

pattern KeyNotFoundEnum = enum string
{
    IgnoreError = "IgnoreError",
    ReportAndContinue = "ReportAndContinue",
    ReportAndStop = "ReportAndStop",
    ...
};

pattern KeyDuplicateEnum = enum string
{
    IgnoreError = "IgnoreError",
    ReportAndContinue = "ReportAndContinue",
    ReportAndStop = "ReportAndStop",
    ...
};

pattern NullKeyConvertedToUnknownEnum = enum string
{
    IgnoreError = "IgnoreError",
    ReportAndContinue = "ReportAndContinue",
    ReportAndStop = "ReportAndStop",
    ...
};

pattern NullKeyNotAllowedEnum = enum string
{
    IgnoreError = "IgnoreError",
    ReportAndContinue = "ReportAndContinue",
    ReportAndStop = "ReportAndStop",
    ...
};

pattern CalculationErrorEnum = enum string
{
    IgnoreError = "IgnoreError",
    ReportAndStop = "ReportAndStop",
    ...
};

pattern AttributeHierarchyOptimizedStateEnum = enum string
{
    FullyOptimized = "FullyOptimized",
    NotOptimized = "NotOptimized",
    ...
};

pattern GroupingBehaviorEnum = enum string
{
    EncourageGrouping = "EncourageGrouping",
    DiscourageGrouping = "DiscourageGrouping",
    ...
};

pattern InstanceSelectionEnum = enum string
{
    None = "None",
    DropDown = "DropDown",
    List = "List",
    FilteredList = "FilteredList",
    MandatoryFilter = "MandatoryFilter",
    ...
};

pattern ProcessingStateEnum = enum string
{
    Processed = "Processed",
    Unprocessed = "Unprocessed",
    InvalidExpression = "InvalidExpression",
    CalculationError = "CalculationError",
    DependencyError = "DependencyError",
    ...
};

pattern AttributeHierarchyProcessingStateEnum = enum string
{
    Processed = "Processed",
    Unprocessed = "Unprocessed",
    DependencyError = "DependencyError",
    ...
};

pattern MembersWithDataEnum = enum string
{
    NonLeafDataHidden = "NonLeafDataHidden",
    NonLeafDataVisible = "NonLeafDataVisible",
    ...
};

pattern DimensionAttributeTypeEnum = enum string
{
    Account = "Account",
    AccountName = "AccountName",
    AccountNumber = "AccountNumber",
    AccountType = "AccountType",
    Address = "Address",
    AddressBuilding = "AddressBuilding",
    AddressCity = "AddressCity",
    AddressCountry = "AddressCountry",
    AddressFax = "AddressFax",
    AddressFloor = "AddressFloor",
    AddressHouse = "AddressHouse",
    AddressPhone = "AddressPhone",
    AddressQuarter = "AddressQuarter",
    AddressRoom = "AddressRoom",
    AddressStateOrProvince = "AddressStateOrProvince",
    AddressStreet = "AddressStreet",
    AddressZip = "AddressZip",
    BomResource = "BomResource",
    Caption = "Caption",
    CaptionAbbreviation = "CaptionAbbreviation",
    CaptionDescription = "CaptionDescription",
    Channel = "Channel",
    City = "City",
    Company = "Company",
    Continent = "Continent",
    Country = "Country",
    County = "County",
    CurrencyDestination = "CurrencyDestination",
    CurrencyIsoCode = "CurrencyIsoCode",
    CurrencyName = "CurrencyName",
    CurrencySource = "CurrencySource",
    CustomerGroup = "CustomerGroup",
    CustomerHousehold = "CustomerHousehold",
    Customers = "Customers",
    Date = "Date",
    DateCanceled = "DateCanceled",
    DateDuration = "DateDuration",
    DateEnded = "DateEnded",
    DateModified = "DateModified",
    DateStart = "DateStart",
    DayOfHalfYear = "DayOfHalfYear",
    DayOfMonth = "DayOfMonth",
    DayOfQuarter = "DayOfQuarter",
    DayOfTenDays = "DayOfTenDays",
    DayOfTrimester = "DayOfTrimester",
    DayOfWeek = "DayOfWeek",
    DayOfYear = "DayOfYear",
    Days = "Days",
    DeletedFlag = "DeletedFlag",
    ExtendedType = "ExtendedType",
    FiscalDate = "FiscalDate",
    FiscalDayOfHalfYear = "FiscalDayOfHalfYear",
    FiscalDayOfMonth = "FiscalDayOfMonth",
    FiscalDayOfQuarter = "FiscalDayOfQuarter",
    FiscalDayOfTrimester = "FiscalDayOfTrimester",
    FiscalDayOfWeek = "FiscalDayOfWeek",
    FiscalDayOfYear = "FiscalDayOfYear",
    FiscalHalfYears = "FiscalHalfYears",
    FiscalHalfYearOfYear = "FiscalHalfYearOfYear",
    FiscalMonths = "FiscalMonths",
    FiscalMonthOfHalfYear = "FiscalMonthOfHalfYear",
    FiscalMonthOfQuarter = "FiscalMonthOfQuarter",
    FiscalMonthOfTrimester = "FiscalMonthOfTrimester",
    FiscalMonthOfYear = "FiscalMonthOfYear",
    FiscalQuarters = "FiscalQuarters",
    FiscalQuarterOfHalfYear = "FiscalQuarterOfHalfYear",
    FiscalQuarterOfYear = "FiscalQuarterOfYear",
    FiscalTrimesters = "FiscalTrimesters",
    FiscalTrimesterOfYear = "FiscalTrimesterOfYear",
    FiscalWeeks = "FiscalWeeks",
    FiscalWeekOfHalfYear = "FiscalWeekOfHalfYear",
    FiscalWeekOfMonth = "FiscalWeekOfMonth",
    FiscalWeekOfQuarter = "FiscalWeekOfQuarter",
    FiscalWeekOfTrimester = "FiscalWeekOfTrimester",
    FiscalWeekOfYear = "FiscalWeekOfYear",
    FiscalYears = "FiscalYears",
    FormattingColor = "FormattingColor",
    FormattingFont = "FormattingFont",
    FormattingFontEffects = "FormattingFontEffects",
    FormattingFontSize = "FormattingFontSize",
    FormattingOrder = "FormattingOrder",
    FormattingSubtotal = "FormattingSubtotal",
    GeoBoundaryBottom = "GeoBoundaryBottom",
    GeoBoundaryFront = "GeoBoundaryFront",
    GeoBoundaryLeft = "GeoBoundaryLeft",
    GeoBoundaryPolygon = "GeoBoundaryPolygon",
    GeoBoundaryRear = "GeoBoundaryRear",
    GeoBoundaryRight = "GeoBoundaryRight",
    GeoBoundaryTop = "GeoBoundaryTop",
    GeoCentroidX = "GeoCentroidX",
    GeoCentroidY = "GeoCentroidY",
    GeoCentroidZ = "GeoCentroidZ",
    HalfYears = "HalfYears",
    HalfYearOfYear = "HalfYearOfYear",
    Hours = "Hours",
    ID = "ID",
    Image = "Image",
    ImageBmp = "ImageBmp",
    ImageGif = "ImageGif",
    ImageJpg = "ImageJpg",
    ImagePng = "ImagePng",
    ImageTiff = "ImageTiff",
    ImageUrl = "ImageUrl",
    IsHoliday = "IsHoliday",
    Iso8601Date = "Iso8601Date",
    Iso8601DayOfWeek = "Iso8601DayOfWeek",
    Iso8601DayOfYear = "Iso8601DayOfYear",
    Iso8601Weeks = "Iso8601Weeks",
    Iso8601WeekOfYear = "Iso8601WeekOfYear",
    Iso8601Years = "Iso8601Years",
    IsPeakDay = "IsPeakDay",
    IsWeekDay = "IsWeekDay",
    IsWorkingDay = "IsWorkingDay",
    ManufacturingDate = "ManufacturingDate",
    ManufacturingDayOfHalfYear = "ManufacturingDayOfHalfYear",
    ManufacturingDayOfMonth = "ManufacturingDayOfMonth",
    ManufacturingDayOfQuarter = "ManufacturingDayOfQuarter",
    ManufacturingDayOfWeek = "ManufacturingDayOfWeek",
    ManufacturingDayOfYear = "ManufacturingDayOfYear",
    ManufacturingHalfYears = "ManufacturingHalfYears",
    ManufacturingHalfYearOfYear = "ManufacturingHalfYearOfYear",
    ManufacturingMonths = "ManufacturingMonths",
    ManufacturingMonthOfHalfYear = "ManufacturingMonthOfHalfYear",
    ManufacturingMonthOfQuarter = "ManufacturingMonthOfQuarter",
    ManufacturingMonthOfYear = "ManufacturingMonthOfYear",
    ManufacturingQuarters = "ManufacturingQuarters",
    ManufacturingQuarterOfHalfYear = "ManufacturingQuarterOfHalfYear",
    ManufacturingQuarterOfYear = "ManufacturingQuarterOfYear",
    ManufacturingWeeks = "ManufacturingWeeks",
    ManufacturingWeekOfHalfYear = "ManufacturingWeekOfHalfYear",
    ManufacturingWeekOfMonth = "ManufacturingWeekOfMonth",
    ManufacturingWeekOfQuarter = "ManufacturingWeekOfQuarter",
    ManufacturingWeekOfYear = "ManufacturingWeekOfYear",
    ManufacturingYears = "ManufacturingYears",
    Minutes = "Minutes",
    Months = "Months",
    MonthOfHalfYear = "MonthOfHalfYear",
    MonthOfQuarter = "MonthOfQuarter",
    MonthOfTrimester = "MonthOfTrimester",
    MonthOfYear = "MonthOfYear",
    OrganizationalUnit = "OrganizationalUnit",
    OrgTitle = "OrgTitle",
    PercentOwnership = "PercentOwnership",
    PercentVoteRight = "PercentVoteRight",
    Person = "Person",
    PersonContact = "PersonContact",
    PersonDemographic = "PersonDemographic",
    PersonFirstName = "PersonFirstName",
    PersonFullName = "PersonFullName",
    PersonLastName = "PersonLastName",
    PersonMiddleName = "PersonMiddleName",
    PhysicalColor = "PhysicalColor",
    PhysicalDensity = "PhysicalDensity",
    PhysicalDepth = "PhysicalDepth",
    PhysicalHeight = "PhysicalHeight",
    PhysicalSize = "PhysicalSize",
    PhysicalVolume = "PhysicalVolume",
    PhysicalWeight = "PhysicalWeight",
    PhysicalWidth = "PhysicalWidth",
    Point = "Point",
    PostalCode = "PostalCode",
    Product = "Product",
    ProductBrand = "ProductBrand",
    ProductCategory = "ProductCategory",
    ProductGroup = "ProductGroup",
    ProductSKU = "ProductSKU",
    Project = "Project",
    ProjectCode = "ProjectCode",
    ProjectCompletion = "ProjectCompletion",
    ProjectEndDate = "ProjectEndDate",
    ProjectName = "ProjectName",
    ProjectStartDate = "ProjectStartDate",
    Promotion = "Promotion",
    QtyRangeHigh = "QtyRangeHigh",
    QtyRangeLow = "QtyRangeLow",
    Quantitative = "Quantitative",
    Quarters = "Quarters",
    QuarterOfHalfYear = "QuarterOfHalfYear",
    QuarterOfYear = "QuarterOfYear",
    Rate = "Rate",
    RateType = "RateType",
    Region = "Region",
    Regular = "Regular",
    RelationToParent = "RelationToParent",
    ReportingDate = "ReportingDate",
    ReportingDayOfHalfYear = "ReportingDayOfHalfYear",
    ReportingDayOfMonth = "ReportingDayOfMonth",
    ReportingDayOfQuarter = "ReportingDayOfQuarter",
    ReportingDayOfTrimester = "ReportingDayOfTrimester",
    ReportingDayOfWeek = "ReportingDayOfWeek",
    ReportingDayOfYear = "ReportingDayOfYear",
    ReportingHalfYears = "ReportingHalfYears",
    ReportingHalfYearOfYear = "ReportingHalfYearOfYear",
    ReportingMonths = "ReportingMonths",
    ReportingMonthOfHalfYear = "ReportingMonthOfHalfYear",
    ReportingMonthOfQuarter = "ReportingMonthOfQuarter",
    ReportingMonthOfTrimester = "ReportingMonthOfTrimester",
    ReportingMonthOfYear = "ReportingMonthOfYear",
    ReportingQuarters = "ReportingQuarters",
    ReportingQuarterOfHalfYear = "ReportingQuarterOfHalfYear",
    ReportingQuarterOfYear = "ReportingQuarterOfYear",
    ReportingTrimesters = "ReportingTrimesters",
    ReportingTrimesterOfYear = "ReportingTrimesterOfYear",
    ReportingWeeks = "ReportingWeeks",
    ReportingWeekOfHalfYear = "ReportingWeekOfHalfYear",
    ReportingWeekOfMonth = "ReportingWeekOfMonth",
    ReportingWeekOfQuarter = "ReportingWeekOfQuarter",
    ReportingWeekOfTrimester = "ReportingWeekOfTrimester",
    ReportingWeekOfYear = "ReportingWeekOfYear",
    ReportingYears = "ReportingYears",
    Representative = "Representative",
    RowNumber = "RowNumber",
    ScdEndDate = "ScdEndDate",
    ScdOriginalID = "ScdOriginalID",
    ScdStartDate = "ScdStartDate",
    ScdStatus = "ScdStatus",
    Scenario = "Scenario",
    Seconds = "Seconds",
    Sequence = "Sequence",
    ShortCaption = "ShortCaption",
    StateOrProvince = "StateOrProvince",
    TenDay = "TenDay",
    TenDayOfHalfYear = "TenDayOfHalfYear",
    TenDayOfMonth = "TenDayOfMonth",
    TenDayOfQuarter = "TenDayOfQuarter",
    TenDayOfTrimester = "TenDayOfTrimester",
    TenDayOfYear = "TenDayOfYear",
    Trimesters = "Trimesters",
    TrimesterOfYear = "TrimesterOfYear",
    UndefinedTime = "UndefinedTime",
    Utility = "Utility",
    Version = "Version",
    WebHtml = "WebHtml",
    WebMailAlias = "WebMailAlias",
    WebUrl = "WebUrl",
    WebXmlOrXsl = "WebXmlOrXsl",
    WeekOfYear = "WeekOfYear",
    Weeks = "Weeks",
    WinterSummerSeason = "WinterSummerSeason",
    Years = "Years", 
    ...
};

pattern RelationshipTypeEnum = enum string
{
    Rigid = "Rigid",
    Flexible = "Flexible",
    ...
};

pattern OptionalityEnum = enum string
{
    Mandatory = "Mandatory", 
    Optional = "Optional", 
    ...
};

pattern OverrideBehaviorEnum = enum string
{
    None = "None", 
    Strong = "Strong", 
    ...
};

pattern DiscretizationMethodEnum = enum string
{
    None = "None",
    Automatic = "Automatic",
    EqualAreas = "EqualAreas",
    Clusters = "Clusters",
    Thresholds = "Thresholds",
    UserDefined = "UserDefined",
    ...
};

pattern RootMemberIfEnum = enum string
{
    ParentIsBlankSelfOrMissing = "ParentIsBlankSelfOrMissing",
    ParentIsBlank = "ParentIsBlank",
    ParentIsSelf = "ParentIsSelf",
    ParentIsMissing = "ParentIsMissing",
    ...
};

pattern OrderByEnum = enum string
{
    Key = "Key",
    Name = "Name",
    AttributeKey = "AttributeKey",
    AttributeName = "AttributeName",
    ...
};

pattern AlignmentEnum = enum string
{
    Default = "Default",
    Left = "Left",
    Right = "Right",
    Center = "Center",
    ...
};

pattern SortDirectionEnum = enum string
{
   Default = "Default",
   Ascending = "Ascending",
   Descending = "Descending",
   ...
};

pattern DefaultAggregateFunctionEnum = enum string
{
    Default = "Default",
    None = "None",
    Sum = "Sum",
    Min = "Min",
    Max = "Max",
    Count = "Count",
    Average = "Average",
    ...
};

pattern UsageEnum = enum string
{
    Regular = "Regular",
    Key = "Key",
    Parent = "Parent",
    ...
};

pattern Eng300ProcessingStateEnum = enum string
{
    Processed = "Processed",
    Unprocessed = "Unprocessed",
    InvalidExpression = "InvalidExpression",
    DependencyError = "DependencyError",
    CalculationError  = "CalculationError ",
    ...
};

pattern StructureTypeEnum = enum string
{
    Natural = "Natural",
    Unnatural = "Unnatural",
    Unknown = "Unknown",
    ...
};

pattern MemberKeysUniqueEnum = enum string
{
    NotUnique = "NotUnique",
    Unique = "Unique",
    ...
};

pattern ContextualNameRuleEnum = enum string
{
    None = "None",
    Context = "Context",
    Merge = "Merge",
    ...
};

pattern HideMemberIfEnum = enum string
{
    Never = "Never",
    OnlyChildWithNoName = "OnlyChildWithNoName",
    OnlyChildWithParentName = "OnlyChildWithParentName",
    NoName = "NoName",
    ParentName = "ParentName",
    ...
};

pattern MultiplicityEnum = enum string
{
    One = "One",
    Many = "Many",
    ...
};

pattern Eng300ContextualNameRuleEnum = enum string
{
    None = "None",
    Context = "Context",
    Merge = "Merge",
    ...
};

pattern AggregationUsageEnum = enum string
{
    Full = "Full",
    None = "None",
    Unrestricted = "Unrestricted",
    Default = "Default",
    ...
};

pattern HierarchyUniqueNameStyleEnum = enum string
{
    IncludeDimensionName  = "IncludeDimensionName ",
    ExcludeDimensionName = "ExcludeDimensionName",
    ...
};

pattern MemberUniqueNameStyleEnum = enum string
{
    Native = "Native",
    NamePath = "NamePath",
    ...
};

pattern ScriptCacheProcessingModeEnum = enum string
{
    Regular = "Regular",
    Lazy = "Lazy",
    ...
};

pattern ScriptErrorHandlingModeEnum = enum string
{
    IgnoreNone = "IgnoreNone",
    IgnoreAll = "IgnoreAll",
    ...
};

pattern CubeStorageModeEnum = enum string
{
    Molap = "Molap",
    Rolap = "Rolap",
    Holap = "Holap",
    InMemory = "InMemory",
    ...
};

pattern TargetTypeEnum = enum string
{
    Cube = "Cube",
    Cells = "Cells",
    Set = "Set",
    Hierarchy = "Hierarchy",
    Level = "Level",
    DimensionMembers = "DimensionMembers",
    HierarchyMembers = "HierarchyMembers",
    LevelMembers = "LevelMembers",
    AttributeMembers = "AttributeMembers",
    ...
};

pattern ActionTypeEnum = enum string
{
    Url = "Url",
    Html = "Html",
    Statement = "Statement",
    DrillThrough = "DrillThrough",
    Dataset = "Dataset",
    Rowset = "Rowset",
    CommandLine = "CommandLine",
    Proprietary = "Proprietary",
    Report = "Report",
    ...
};

 pattern InvocationEnum = enum string
{
    Interactive = "Interactive",
    OnOpen = "OnOpen",
    Batch = "Batch",
    ...
};

pattern CalculationTypeEnum = enum string
{
    Member = "Member",
    Set = "Set",
    Cells = "Cells",
    ...
};

pattern MeasureGroupTypeEnum = enum string
{
    Regular = "Regular",
    ExchangeRate = "ExchangeRate",
    Sales = "Sales",
    Budget = "Budget",
    FinancialReporting = "FinancialReporting",
    Marketing = "Marketing",
    Inventory = "Inventory",
    ...
};

pattern DataAggregationEnum = enum string
{
    None = "None",
    DataAggregatable = "DataAggregatable",
    CacheAggregatable = "CacheAggregatable",
    DataAndCacheAggregatable = "DataAndCacheAggregatable",
    ...
};

pattern MeasureGroupStorageModeEnum = enum string
{
    Molap = "Molap",
    Rolap = "Rolap",
    Holap = "Holap",
    InMemory = "InMemory",
    ...
};

pattern MaterializationEnum = enum string
{
    Regular = "Regular",
    Indirect = "Indirect",
    ...
};

pattern ShareDimensionStorageEnum = enum string
{
    Distinct  = "Distinct",
    Shared = "Shared",
    ...
};

pattern MeasureTypeEnum = enum string
{
    Regular  = "Regular ",
    Granularity = "Granularity",
    ...
};

pattern AggregateFunctionEnum = enum string
{
    Sum = "Sum",
    Count = "Count",
    Min = "Min",
    Max = "Max",
    DistinctCount = "DistinctCount",
    None = "None",
    ByAccount = "ByAccount",
    AverageOfChildren = "AverageOfChildren",
    FirstChild = "FirstChild",
    LastChild = "LastChild",
    FirstNonEmpty = "FirstNonEmpty",
    LastNonEmpty = "LastNonEmpty",
    ...
};

pattern Eng200200ValuensEnum = enum string
{
    eng200_200 = "http://schemas.microsoft.com/analysisservices/2010/engine/200/200",
    ...
};

pattern DirectQueryUsageEnum = enum string 
{ 
    InMemoryWithDirectQuery = "InMemoryWithDirectQuery", 
    DirectQueryOnly = "DirectQueryOnly", 
    InMemoryOnly = "InMemoryOnly", 
    ... 
};

pattern CacheModeEnum = enum string 
{
    KeepTrainingCases = "KeepTrainingCases",
    ClearAfterProcessing = "ClearAfterProcessing",
    ...
};

pattern AlgorithmEnum = enum string
{
    Microsoft_Naive_Bayes = "Microsoft_Naive_Bayes",
    Microsoft_Decision_Trees = "Microsoft_Decision_Trees",
    Microsoft_Clustering = "Microsoft_Clustering",
    Microsoft_Neural_Network = "Microsoft_Neural_Network",
    Microsoft_Logistic_Regression = "Microsoft_Logistic_Regression",
    Microsoft_Linear_Regression = "Microsoft_Linear_Regression",
    Microsoft_Association_Rules = "Microsoft_Association_Rules",
    Microsoft_Time_Series = "Microsoft_Time_Series",
    Microsoft_Sequence_Clustering = "Microsoft_Sequence_Clustering",
    ...
};

pattern SecurityEnum = enum string 
{
    SkipMembership = "SkipMembership",
    CopyAll = "CopyAll",
    IgnoreSecurity = "IgnoreSecurity",
    ...
};

pattern DataSourceTypeEnum = enum string 
{
    Remote = "Remote",
    Local = "Local",
    ...
};

pattern AggregationTypeEnum = enum string 
{ 
    IndexedView = "IndexedView", 
    Table = "Table", 
    UserDefined = "UserDefined", 
    ... 
};

pattern ExPartitionStorageModeEnum = enum string 
{ 
    Molap = "Molap", 
    Rolap = "Rolap", 
    Holap = "Holap", 
    InMemory = "InMemory", 
    ...
};

bool ValidateInMemoryForPartition(ExPartitionStorageModeEnum valueOfStorageMode, Eng200200ValuensEnum valuens)
{
    if (valueOfStorageMode == null) return true;

    if (valueOfStorageMode == ExPartitionStorageModeEnum.InMemory)
    {
        return ValidationCheck(valuens != null, null, "MSSSAS: When the value of StorageMode is 'InMemory', the valuens attribute MUST be used, but it does not exist.");
    }

    return true;
}

pattern PerspectiveCalculationEnum = enum string 
{ 
    Member = "Member", 
    Set = "Set", 
    ... 
};

pattern MiningStructureColumnTypeEnum = enum string 
{ 
    Long = "Long", 
    Boolean = "Boolean", 
    Text = "Text", 
    Double = "Double", 
    Date = "Date", 
    Table = "Table", 
    ... 
};

pattern ScalarMiningStructureColumnContentEnum = enum string
{
    Discrete = "Discrete",
    Continuous = "Continuous",
    Discretized = "Discretized",
    Ordered = "Ordered",
    Cyclical = "Cyclical",
    Probability = "Probability",
    Variance = "Variance",
    StdDev = "StdDev",
    ProbabilityVariance = "ProbabilityVariance",
    ProbabilityStdDev = "ProbabilityStdDev",
    Support = "Support",
    Key = "Key",
    ...
};

pattern MiningModelColumnUsageEnum = enum string 
{ 
    Key = "Key", 
    Input = "Input", 
    Predict = "Predict", 
    PredictOnly = "PredictOnly",
    ...
};

pattern LockModeEnum = enum string 
{ 
    CommitShared = "CommitShared", 
    CommitExclusive = "CommitExclusive", 
    ... 
};

pattern ProviderTypeEnum = enum int
{
    DBPROPVAL_DST_TDP = 1,
    DBPROPVAL_DST_MDP = 2,
    DBPROPVAL_DST_TDPANDMDP = 3,
    DBPROPVAL_DST_DOCSOURCE = 4,
    ...
};

pattern VisualModeEnum = enum int
{
    MDPROPVAL_VISUAL_MODE_DEFAULT = 0,
    MDPROPVAL_VISUAL_MODE_VISUAL = 1,
    MDPROPVAL_VISUAL_MODE_VISUALOFF = 2,
    ...
};

pattern CatalogLocationEnum = enum int
{
    DBPROPVAL_CL_START = 1,
    DBPROPVAL_CL_END = 2,
    ...
};

pattern DbpropConcatNullBehaviorEnum = enum int
{
    DBPROPVAL_CB_NULL = 1,
    DBPROPVAL_CB_NON_NULL = 2,
    ...
};

pattern DbpropIdentifierCaseEnum = enum int
{
    DBPROPVAL_IC_UPPER = 1,
    DBPROPVAL_IC_LOWER = 2,
    DBPROPVAL_IC_SENSITIVE = 4,
    DBPROPVAL_IC_MIXED = 8,
    ...
};

pattern DbpropNullCollationEnum = enum int
{
    DBPROPVAL_NC_END = 1,
    DBPROPVAL_NC_HIGH = 2,
    DBPROPVAL_NC_LOW = 4,
    DBPROPVAL_NC_START = 8,
    ...
};

pattern DbpropOutputParameterAvailableEnum = enum int
{
    DBPROPVAL_OA_NOTSUPPORTED = 1,
    DBPROPVAL_OA_ATEXECUTE = 2,
    DBPROPVAL_OA_ATROWRELEASE = 4,
    ...
};

pattern DbpropPersistentIdTypeEnum = enum int
{
    DBPROPVAL_PT_GUID_NAME = 1,
    DBPROPVAL_PT_GUID_PROPID = 2,
    DBPROPVAL_PT_NAME = 4,
    DBPROPVAL_PT_GUID = 8,
    DBPROPVAL_PT_PROPID = 16,
    DBPROPVAL_PT_PGUID_NAME = 32,
    DBPROPVAL_PT_PGUID_PROPID = 64,
    ...
};

pattern DbpropPrepareAbortBehaviorEnum = enum int
{
    DBPROPVAL_CB_DELETE = 1,
    DBPROPAL_CB_PRESERVE = 2,
    ...
};

pattern DbpropPrepareCommitBehaviorEnum = enum int
{
    DBPROPAL_CB_PRESERVE = 1,
    DBPROPVAL_CB_DELETE = 2,
    ...
};

pattern DbpropQuotedIdentifierCaseEnum = enum int
{
    DBPROPVAL_IC_UPPER = 1,
    DBPROPVAL_IC_LOWER = 2,
    DBPROPVAL_IC_SENSITIVE = 4,
    DBPROPVAL_IC_MIXED = 8,
    ...
};

pattern MdpropAggregateCellUpdateEnum = enum int
{
    MDPROPVAL_AU_UNSUPPORTED = 0,
    MDPROPVAL_AU_UNCHANGED = 1,
    MDPROPVAL_AU_UNKNOWN = 2,
    MDPROPVAL_AU_SUPPORTED = 4,
    ...
};

pattern MdpropFlatteningSupportEnum = enum int
{
    MDPROPVAL_FS_FULL_SUPPORT = 1,
    MDPROPVAL_FS_GENERATED_COLUMN = 2,
    MDPROPVAL_FS_GENERATED_DIMENSION = 3,
    MDPROPVAL_FS_NO_SUPPORT = 4,
    ...
};

pattern MdpropMdxNonMeasureExpressionsEnum = enum int
{
    MDPROPVAL_NME_ALLDIMENSIONS = 0,
    MDPROPVAL_NME_MEASURESONLY = 1,
    ...
};

pattern MdpropMdxRangeRowsetEnum = enum int
{
    MDPROPVAL_RR_NORANGEROWSET = 1,
    MDPROPVAL_RR_READONLY = 2,
    MDPROPVAL_RR_UPDATE = 4,
    ...
};

pattern MdpropMdxSlicerEnum = enum int
{
    MDPROPVAL_MS_MULTIPLETUPLES = 1,
    MDPROPVAL_MS_SINGLETUPLE = 2,
    ...
};

pattern DbpropMsmdCompareCaseSensitiveStringFlagsEnum = enum int
{
    NORM_IGNORECASE = 1,
    NORM_BINARY = 2,
    NORM_IGNORENONSPACE = 16,
    NORM_IGNORESYMBOLS = 256,
    NORM_IGNOREKANATYPE = 4096,
    NORM_IGNOREWIDTH = 65536,
    SORT_STRINGSORT = 1048576,
    ...
};

pattern SafetyOptionsEnum = enum int
{
    DBPROPVAL_MSMD_SAFETY_OPTIONS_DEFAULT = 0,
    DBPROPVAL_MSMD_SAFETY_OPTIONS_ALLOW_ALL = 1,
    DBPROPVAL_MSMD_SAFETY_OPTIONS_ALLOW_SAFE = 2,
    DBPROPVAL_MSMD_SAFETY_OPTIONS_ALLOW_NONE = 3,
    ...
};

pattern UpdateIsolationLevelEnum = enum int
{
    Isolated = 1,
    NotIsolated = 2,
    ...
};

pattern MemoryLockingModeEnum  = enum int
{
    NonLocking = 0,
    Locking = 1,
    ...
};

pattern COLUMN_FLAGS_ENUM = enum uint
{
    DBCOLUMNFLAGS_ISBOOKMARK = 1,
    DBCOLUMNFLAGS_MAYDEFER = 2,
    DBCOLUMNFLAGS_WRITE = 4,
    DBCOLUMNFLAGS_WRITEUNKNOWN = 8,
    DBCOLUMNFLAGS_ISFIXEDLENGTH = 16,
    DBCOLUMNFLAGS_ISNULLABLE = 32,
    DBCOLUMNFLAGS_MAYBENULL = 64,
    DBCOLUMNFLAGS_ISLONG = 128,
    DBCOLUMNFLAGS_ISROWID = 256,
    DBCOLUMNFLAGS_ISROWVER = 512,
    DBCOLUMNFLAGS_CACHEDEFERRED = 1028,
    ...
};

pattern SEARCHABLE_ENUM = enum uint
{
    DB_UNSEARCHABLE = 1,
    DB_LIKE_ONLY = 2,
    DB_ALL_EXCEPT_LIKE = 3,
    DB_SEARCHABLE = 4,
    ...
};

pattern CATALOGS_TYPE_ENUM = enum int
{
    Multidimensional = 0,
    TabularMetadata = 1,
    TabularModel = 2,
    ...
};

pattern CUBE_SOURCE_ENUM = enum ushort
{
    Cube = 1,
    Dimension = 2,
    ...
};

pattern DIMENSION_TYPE_ENUM = enum short
{
    UNKNOWN = 0,
    TIME = 1,
    MEASURE = 2,
    OTHER = 3,
    QUANTITATIVE = 5,
    ACCOUNTS = 6,
    CUSTOMERS = 7,
    PRODUCTS = 8,
    SCENARIO = 9,
    UTILITY = 10,
    CURRENCY = 11,
    RATES = 12,
    CHANNEL = 13,
    PROMOTION = 14,
    ORGANIZATION = 15,
    BILL_OF_MATERIALS = 16,
    GEOGRAPHY = 17,
    ...
};

pattern INSTANCE_SELECTION_ENUM = enum ushort
{
    NONE = 0,
    DROPDOWN = 1,
    LIST = 2,
    FILTERED_LIST = 3,
    MANDATORY_FILTER = 4,
    ...
};

pattern LEVEL_TYPE_ENUM = enum int
{
    Account = 0x1014,
    All = 0x0001,
    BillofMaterialResource = 0x1012,
    Calculated = 0x0002,
    Channel = 0x1061,
    Company = 0x1042,
    CurrencyDestination = 0x1052,
    CurrencySource = 0x1051,
    Customer = 0x1021,
    CustomerGroup = 0x1022,
    CustomerHousehold = 0x1023,
    GeographyCity = 0x2006,
    GeographyContinent = 0x2001,
    Geographycountry = 0x2003,
    GeographyCounty = 0x2005,
    GeographyPoint = 0x2008,
    PostalCode = 0x2007,
    GeographyRegion = 0x2002,
    GeographyStateOrProvince = 0x2004,
    OrganizationUnit = 0x1011,
    Person = 0x1041,
    Product = 0x1031,
    ProductGroup = 0x1032,
    Promotion = 0x1071,
    Quantitative = 0x1013,
    Regular = 0x0000,
    Representative = 0x1062,
    Reserved1 = 0x0008,
    Scenario = 0x1015,
    Time = 0x0004,
    TimeDays = 0x0204,
    TimeHalfYears = 0x0024,
    TimeQuarters = 0x0044,
    TimeSeconds = 0x0804,
    TimeUndefined = 0x1004,
    TimeWeeks = 0x0104,
    TimeYears = 0x0014,
    Utility = 0x1016,
    ...
};

pattern LEVEL_DBTYPE_ENUM = enum int
{
    DBTYPE_EMPTY = 0,
    DBTYPE_I2 = 2,
    DBTYPE_I4 = 3,
    DBTYPE_R4 = 4,
    DBTYPE_R8 = 5,
    DBTYPE_CY = 6,
    DBTYPE_DATE = 7,
    DBTYPE_BSTR = 8,
    DBTYPE_IDISPATCH = 9,
    DBTYPE_ERROR = 10,
    DBTYPE_BOOL = 11,
    DBTYPE_VARIANT = 12,
    DBTYPE_IUNKNOWN = 13,
    DBTYPE_DECIMAL = 14,
    DBTYPE_I1 = 16,
    DBTYPE_UI1 = 17,
    DBTYPE_UI2 = 18,
    DBTYPE_UI4 = 19,
    DBTYPE_I8 = 20,
    DBTYPE_UI8 = 21,
    DBTYPE_GUID = 72,
    DBTYPE_BYTES = 128,
    DBTYPE_STR = 129,
    DBTYPE_WSTR = 130,
    DBTYPE_NUMERIC = 131,
    DBTYPE_UDT = 132,
    DBTYPE_DBDATE = 133,
    DBTYPE_DBTIME = 134,
    DBTYPE_DBTIMESTAMP = 135,
    DBTYPE_HCHAPTER = 136,
    ...
};

pattern MEASURE_AGGREGATOR_ENUM = enum int
{
    MDMEASURE_AGGR_UNKNOWN = 0,
    MDMEASURE_AGGR_SUM = 1,
    MDMEASURE_AGGR_COUNT = 2,
    MDMEASURE_AGGR_MIN = 3,
    MDMEASURE_AGGR_MAX = 4,
    MDMEASURE_AGGR_AVG = 5,
    MDMEASURE_AGGR_VAR = 6,
    MDMEASURE_AGGR_STD = 7,
    MDMEASURE_AGGR_DST = 8,
    MDMEASURE_AGGR_NONE = 9,
    MDMEASURE_AGGR_AVGCHILDREN = 10,
    MDMEASURE_AGGR_FIRSTCHILD = 11,
    MDMEASURE_AGGR_LASTCHILD = 12,
    MDMEASURE_AGGR_FIRSTNONEMPTY = 13,
    MDMEASURE_AGGR_LASTNONEMPTY = 14,
    MDMEASURE_AGGR_BYACCOUNT = 15,
    MDMEASURE_AGGR_CALCULATED = 127,
    ...
};

pattern SCOPE_ENUM = enum int
{
    Global = 1,
    Session = 2,
    ...
};

pattern TREE_OP_ENUM = enum int
{
    ImmediateChildren = 1,
    SameLevelmembers = 2,
    ImmediateParent = 4,
    Itself = 8,
    AllDescendants = 16,
    AllAncestors = 32,
    ...
};

pattern ACTION_TYPE_ENUM = enum int
{
    URL = 1,
    HTML = 2,
    Statement = 4,
    Dataset = 8,
    Rowset = 16,
    Commandline = 32,
    Proprietary = 64,
    Report = 128,
    DrillThrough = 256,
    ...
};

pattern COORDINATE_TYPE_ENUM = enum int
{
    Cube = 1,
    Dimension = 2,
    Level = 3,
    Member = 4,
    Set = 5,
    Cell = 6,
    ...
};

pattern SET_EVALUATION_CONTEXT_ENUM = enum int
{
    STATIC = 1,
    DYNAMIC = 2,
    ...
};

pattern VISIBILITY_ENUM = enum ushort
{
    Visible = 1,
    NotVisible = 2,
    ...
};

pattern INSTANCE_STATE_ENUM = enum int
{
    Running = 4,
    Stopped = 1,
    StartPending = 2,
    StopPending = 3,
    Paused = 7,
    PausePending = 6,
    ContinuePending = 5,
    ...
};

pattern TRAINING_COMPLEXITY_ENUM = enum int
{
    DM_TRAINING_COMPLEXITY_LOW = 0,
    DM_TRAINING_COMPLEXITY_MEDIUM = 1,
    DM_TRAINING_COMPLEXITY_HIGH = 2,
    ...
};

pattern PREDICTION_COMPLEXITY_ENUM = enum int
{
    DM_PREDICTION_COMPLEXITY_LOW = 0,
    DM_PREDICTION_COMPLEXITY_MEDIUM = 1,
    DM_PREDICTION_COMPLEXITY_HIGH = 2,
    ...
};

pattern EXPECTED_QUALITY_ENUM = enum int
{
    DM_EXPECTED_QUALITY_LOW = 0,
    DM_EXPECTED_QUALITY_MEDIUM = 1,
    DM_EXPECTED_QUALITY_HIGH = 2,
    ...
};

pattern SCALING_ENUM = enum int
{
    DM_SCALING_LOW = 0,
    DM_SCALING_MEDIUM = 1,
    DM_SCALING_HIGH = 2,
    ...
};

pattern CONTROL_ENUM = enum int
{
    DM_CONTROL_NONE = 0,
    DM_CONTROL_CANCEL = 1,
    DM_CONTROL_SUSPENDRESUME = 2,
    DM_CONTROL_SUSPENDWITHRESULT = 3,
    ...
};

pattern PARAMETER_FLAGS_ENUM = enum int
{
    DM_PARAMETER_TRAINING = 1,
    DM_PARAMETER_PREDICTION = 2,
    DM_PARAMETER_CONTENT = 3,
    ...
};

pattern VALUETYPE_ENUM = enum uint
{
    Missing = 1,
    Existing = 2,
    Continuous = 3,
    Discrete = 4,
    Discretized = 5,
    ExistingD = 6,
    Coefficient = 7,
    ScoreGain = 8,
    Statistics = 9,
    NodeUniqueName = 10,
    Intercept = 11,
    Periodicity = 12,
    AutoregressiveOrder = 13,
    MovingAverageOrder = 14,
    DifferenceOrder = 15,
    Boolean = 16,
    Other = 17,
    PrerenderedString = 18,
    ...
};

pattern NODE_TYPE_ENUM = enum int
{
    DM_NODE_TYPE_MODEL = 1,
    DM_NODE_TYPE_CLASSIFICATION_TREE_ROOT = 2,
    DM_NODE_TYPE_TREE_INTERIOR = 3,
    DM_NODE_TYPE_TREE_DISTRIBUTION = 4,
    DM_NODE_TYPE_CLUSTER = 5,
    DM_NODE_TYPE_UNKNOWN = 6,
    DM_NODE_TYPE_ITEMSET = 7,
    DM_NODE_TYPE_ASSOCIATION_RULE = 8,
    DM_NODE_TYPE_NB_PREDICTABLE_ATTRIBUTE = 9,
    DM_NODE_TYPE_NB_INPUT_ATTRIBUTE = 10,
    DM_NODE_TYPE_NB_INPUT_ATTRIBUTE_STATE = 11,
    DM_NODE_TYPE_SEQUENCE = 13,
    DM_NODE_TYPE_TRANSITION = 14,
    DM_NODE_TYPE_TIME_SERIES = 15,
    DM_NODE_TYPE_TS_TREE = 16,
    DM_NODE_TYPE_NN_SUBNETWORK = 17,
    DM_NODE_TYPE_NN_INPUT_LAYER = 18,
    DM_NODE_TYPE_NN_HIDDEN_LAYER = 19,
    DM_NODE_TYPE_NN_OUTPUT_LAYER = 20,
    DM_NODE_TYPE_NN_INPUT_NODE = 21,
    DM_NODE_TYPE_NN_HIDDEN_NODE = 22,
    DM_NODE_TYPE_NN_OUTPUT_NODE = 23,
    DM_NODE_TYPE_NN_MARGINAL_STAT_NODE = 24,
    DM_NODE_TYPE_REGRESSION_TREE_ROOT = 25,
    DM_NODE_TYPE_NB_MARGINAL_STAT_NODE = 26,
    DM_NODE_TYPE_ARIMA_ROOT = 27,
    DM_NODE_TYPE_ARIMA_PERIODICSTRUCTURE = 28,
    DM_NODE_TYPE_ARIMA_AUTOREGRESSIVE = 29,
    DM_NODE_TYPE_ARIMA_MOVINGAVERAGE = 30,
    ...
};

pattern TREE_OPERATION_ENUM = enum uint
{
    DMTREEOP_CHILDREN = 1,
    DMTREEOP_SIBLINGS = 2,
    DMTREEOP_PARENT = 4,
    DMTREEOP_SELF = 8,
    DMTREEOP_DESCENDANTS = 16,
    DMTREEOP_ANCESTORS = 32,
    ...
};

pattern SERVICE_TYPE_ID_ENUM = enum uint
{
    DM_SERVICETYPE_CLASSIFICATION = 1,
    DM_SERVICETYPE_CLUSTERING = 2,
    DM_SERVICETYPE_ASSOCIATION = 4,
    DM_SERVICETYPE_DENSITY_ESTIMATE = 8,
    DM_SERVICETYPE_SEQUENCE = 16,
    ...
};

pattern PART_COLUMN_FLAGS_ENUM = enum ushort
{
    DBCOLUMNFLAGS_ISFIXEDLENGTH = 0x10,
    DBCOLUMNFLAGS_ISNULLABLE = 0x20,
    DBCOLUMNFLAGS_MAYBENULL = 0x40,
    DBCOLUMNFLAGS_ISLONG = 0x80,
    ...
};

pattern LiteralNameValueEnum = enum int
{
    DBLITERAL_INVALID = 0,
    DBLITERAL_BINARY_LITERAL = 1,
    DBLITERAL_CATALOG_NAME = 2,
    DBLITERAL_CATALOG_SEPARATOR = 3,
    DBLITERAL_CHAR_LITERAL = 4,
    DBLITERAL_COLUMN_ALIAS = 5,
    DBLITERAL_COLUMN_NAME = 6,
    DBLITERAL_CORRELATION_NAME = 7,
    DBLITERAL_CURSOR_NAME = 8,
    DBLITERAL_ESCAPE_PERCENT = 9,
    DBLITERAL_ESCAPE_UNDERSCORE = 10,
    DBLITERAL_INDEX_NAME = 11,
    DBLITERAL_LIKE_PERCENT = 12,
    DBLITERAL_LIKE_UNDERSCORE = 13,
    DBLITERAL_PROCEDURE_NAME = 14,
    DBLITERAL_QUOTE_PREFIX = 15,
    DBLITERAL_SCHEMA_NAME = 16,
    DBLITERAL_TABLE_NAME = 17,
    DBLITERAL_TEXT_COMMAND = 18,
    DBLITERAL_USER_NAME = 19,
    DBLITERAL_VIEW_NAME = 20,
    DBLITERAL_CUBE_NAME = 21,
    DBLITERAL_DIMENSION_NAME = 22,
    DBLITERAL_HIERARCHY_NAME = 23,
    DBLITERAL_LEVEL_NAME = 24,
    DBLITERAL_MEMBER_NAME = 25,
    DBLITERAL_PROPERTY_NAME = 26,
    DBLITERAL_SCHEMA_SEPARATOR = 27,
    DBLITERAL_QUOTE_SUFFIX = 28,
    DBLITERAL_ESCAPE_PERCENT_SUFFIX = 29,
    DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 30,
    ...
};

pattern COLUMN_ENCODING_ENUM = enum long
{
    SystemAutoSelectedEncoding = 0,
    HashEncoding = 1,
    ValueEncoding = 2,
    ...
};

pattern ORIGIN_ENUM = enum int
{
    MSOLAP = 0x01,
    UDF = 0x02,
    RELATIONAL = 0x03,
    SCALAR = 0x04,
    ...
};

pattern DIRECTQUERY_PUSHABLE_ENUM = enum int
{
    MEASURE = 0x01,
    CALCCOL = 0x02,
    ...
};

pattern LOCK_TYPE_ENUM = enum int
{
    LOCK_NONE = 0x0000000,
    LOCK_SESSION_LOCK = 0x0000001,
    LOCK_READ = 0x0000002,
    LOCK_WRITE = 0x0000004,
    LOCK_COMMIT_READ = 0x0000008,
    LOCK_COMMIT_WRITE = 0x0000010,
    LOCK_COMMIT_ABORTABLE = 0x0000020,
    LOCK_COMMIT_INPROGRESS = 0x0000040,
    LOCK_INVALID = 0x0000080,
    ...
};

pattern LOCK_STATUS_ENUM = enum int
{
    Granted = 0,
    Waiting = 1,
    ...
};

pattern SESSION_STATUS_ENUM = enum int 
{
    Idle = 0,
    Active = 1,
    Blocked = 2,
    ...
};

pattern StringStoresCompatibilityLevelEnum = enum int
{
    StandardStringHandling = 1050,
    EnhancedStringHandling = 1100,
    ...
};

pattern CurrentStringStoresCompatibilityLevelEnum = enum int
{
    StandardStringHandling = 1050,
    EnhancedStringHandling = 1100,
    ...
};

pattern FontFlagsEnum = enum byte
{
    BOLD = 1,
    ITALIC = 2,
    UNDERLINE = 4,
    STRIKEOUT = 8,
    ...
};

pattern LCIDEnum = enum long
{
    Neutral = 0,
    Arabic = 1025,
    Bulgarian = 1026,
    Catalan = 1027,
    $"Chinese - Traditional" = 1028,
    German = 1031,
    $"English-US" = 1033,
    French = 1036,
    Hebrew = 1037,
    Icelandic = 1039,
    Italian = 1040,
    Japanese = 1041,
    Korean = 1042,
    Dutch = 1043,
    $"Norwegian (Bokmål)" = 1044,
    Brazilian = 1046,
    Romanian = 1048,
    Russian = 1049,
    Croatian = 1050,
    Slovak = 1051,
    Swedish = 1053,
    Thai = 1054,
    Urdu = 1056,
    Indonesian = 1057,
    Ukrainian = 1058,
    Slovenian = 1060,
    Latvian = 1062,
    Lithuanian = 1063,
    Vietnamese = 1066,
    Hindi = 1081,
    $"Malay - Malaysia" = 1086,
    Bengali = 1093,
    Punjabi = 1094,
    Gujarati = 1095,
    Tamil = 1097,
    Telugu = 1098,
    Kannada = 1099,
    Malayalam = 1100,
    Marathi = 1102,
    $"Chinese - Simplified" = 2052,
    $"British English" = 2057,
    Portuguese = 2070,
    $"Serbian (Latin)" = 2074,
    $"Chinese (Hong Kong SAR, PRC)" = 3076,
    Spanish = 3082,
    $"Serbian (Cyrillic)" = 3098,
    $"Chinese (Singapore)" = 4100,
    $"Chinese (Macau SAR)" = 5124,
    ...
};

pattern PartitionTypeEnum = enum string
{
    Data = "Data",
    Writeback = "Writeback",
    ...
};

/*--------------- Add all methods here. ---------------*/
bool ValidationCheck_DimensionType_ProactiveCaching(ProactiveCachingType proactiveCaching)
{
    if (proactiveCaching != nothing && proactiveCaching.AggregationStorage != AggregationStorageEnum.Regular)
        return false;

    return true;
}

bool ValidationCheck_MeasureType_Source(DataItemType source)
{
    if (source.NullProcessing == nothing || (source.NullProcessing != nothing && source.NullProcessing != null && (source.NullProcessing != NullProcessingEnum.UnknownMember && source.NullProcessing != NullProcessingEnum.Error)))
        return true;

    return false;
}

bool ValidationCheck_ScalarMiningStructureColumnType_KeyColumns(KeyColumnsType keyColumns)
{
    if (keyColumns != nothing && keyColumns.KeyColumn != nothing)
    {
        array<DataItemType> columns = keyColumns.KeyColumn as array<DataItemType>;
        if (columns.Count > 0)
        {
            foreach (DataItemType column in columns)
            {
                if (column.Source != nothing && !(column.Source is ColumnBindingType))
                    return false;
            }
        }
    }

    return true;
}

bool ValidationCheck_ScalarMiningStructureColumnType_NameColumn(DataItemType nameColumn)
{
    if (nameColumn != nothing && nameColumn.Source != nothing && !(nameColumn.Source is ColumnBindingType))
        return false;

    return true;
}

bool ValidationCheck_TableMiningStructureColumnType_ForeignKeyColumns(ForeignKeyColumnsType foreignKeyColumns)
{
    if (foreignKeyColumns != nothing && foreignKeyColumns.ForeignKeyColumn != nothing)
    {
        array<DataItemType> columns = foreignKeyColumns.ForeignKeyColumn as array<DataItemType>;
        if (columns.Count > 0)
        {
            foreach (DataItemType column in columns)
            {
                if (column.Source != nothing && !(column.Source is ColumnBindingType))
                    return false;
            }
        }
    }

    return true;
}

bool ValidateObjectReferenceType(ObjectReferenceType object)
{
    if (ValidateObjectReferenceType(object, ServerExpectedVals) ||
       ValidateObjectReferenceType(object, ServerAssemblyExpectedVals) ||
       ValidateObjectReferenceType(object, DatabaseAssemblyExpectedVals) ||
       ValidateObjectReferenceType(object, TraceExpectedVals) ||
       ValidateObjectReferenceType(object, DatabaseExpectedVals) ||
       ValidateObjectReferenceType(object, DatabasePermissionExpectedVals) ||
       ValidateObjectReferenceType(object, RoleOnServerExpectedVals) ||
       ValidateObjectReferenceType(object, RoleOnDatabaseExpectedVals) ||
       ValidateObjectReferenceType(object, DataSourceExpectedVals) ||
       ValidateObjectReferenceType(object, DataSourcePermissionExpectedVals) ||
       ValidateObjectReferenceType(object, DataSourceViewExpectedVals) ||
       ValidateObjectReferenceType(object, DimensionExpectedVals) ||
       ValidateObjectReferenceType(object, DimensionPermissionExpectedVals) ||
       ValidateObjectReferenceType(object, MiningStructureExpectedVals) ||
       ValidateObjectReferenceType(object, MiningStructurePermissionExpectedVals) ||
       ValidateObjectReferenceType(object, MiningModelExpectedVals) ||
       ValidateObjectReferenceType(object, MiningModelPermissionExpectedVals) ||
       ValidateObjectReferenceType(object, CubeExpectedVals) ||
       ValidateObjectReferenceType(object, CubePermissionExpectedVals) ||
       ValidateObjectReferenceType(object, MeasureGroupExpectedVals) ||
       ValidateObjectReferenceType(object, AggregationDesignExpectedVals) ||
       ValidateObjectReferenceType(object, PartitionExpectedVals) ||
       ValidateObjectReferenceType(object, PerspectiveExpectedVals) ||
       ValidateObjectReferenceType(object, MdxScriptExpectedVals))
    {
        return true;
    }

    return false;
}

bool ValidateObjectReferenceType(ObjectReferenceType object, array<string> expectedVals)
{
    array<string> fields = CheckObjectReferenceType(object);
    if (fields.Count != expectedVals.Count)
    {
        return false;
    }

    foreach (string expected in expectedVals)
    {
        if (!(expected in fields))
        {
            return false;
        }
    }

    return true;
}

array<string> CheckObjectReferenceType(ObjectReferenceType object)
{
    array<string> fields = [];
    if (nothing != object.ServerID)
    {
        fields += ["ServerID"];
    }
    else if (nothing != object.DatabaseID)
    {
        fields += ["DatabaseID"];
    }
    else if (nothing != object.RoleID)
    {
        fields += ["RoleID"];
    }
    else if (nothing != object.TraceID)
    {
        fields += ["TraceID"];
    }
    else if (nothing != object.AssemblyID)
    {
        fields += ["AssemblyID"];
    }
    else if (nothing != object.DimensionID)
    {
        fields += ["DimensionID"];
    }
    else if (nothing != object.DimensionPermissionID)
    {
        fields += ["DimensionPermissionID"];
    }
    else if (nothing != object.DataSourceID)
    {
        fields += ["DataSourceID"];
    }
    else if (nothing != object.DataSourcePermissionID)
    {
        fields += ["DataSourcePermissionID"];
    }
    else if (nothing != object.DatabasePermissionID)
    {
        fields += ["DatabasePermissionID"];
    }
    else if (nothing != object.DataSourceViewID)
    {
        fields += ["DataSourceViewID"];
    }
    else if (nothing != object.CubeID)
    {
        fields += ["CubeID"];
    }
    else if (nothing != object.MiningStructureID)
    {
        fields += ["MiningStructureID"];
    }
    else if (nothing != object.MeasureGroupID)
    {
        fields += ["MeasureGroupID"];
    }
    else if (nothing != object.PerspectiveID)
    {
        fields += ["PerspectiveID"];
    }
    else if (nothing != object.CubePermissionID)
    {
        fields += ["CubePermissionID"];
    }
    else if (nothing != object.MdxScriptID)
    {
        fields += ["MdxScriptID"];
    }
    else if (nothing != object.PartitionID)
    {
        fields += ["PartitionID"];
    }
    else if (nothing != object.AggregationDesignID)
    {
        fields += ["AggregationDesignID"];
    }
    else if (nothing != object.MiningModelID)
    {
        fields += ["MiningModelID"];
    }
    else if (nothing != object.MiningModelPermissionID)
    {
        fields += ["MiningModelPermissionID"];
    }
    else if (nothing != object.MiningStructurePermissionID)
    {
        fields += ["MiningStructurePermissionID"];
    }

    return fields;
}

array<string> ServerExpectedVals = ["ServerID"];
array<string> ServerAssemblyExpectedVals = ["ServerID", "AssemblyID"];
array<string> DatabaseAssemblyExpectedVals = ["ServerID", "DatabaseID", "AssemblyID"];
array<string> TraceExpectedVals = ["ServerID", "TraceID"];
array<string> DatabaseExpectedVals = ["ServerID", "DatabaseID"];
array<string> DatabasePermissionExpectedVals = ["ServerID", "DatabaseID", "DatabasePermissionID"];
array<string> RoleOnServerExpectedVals = ["ServerID", "RoleID"];
array<string> RoleOnDatabaseExpectedVals = ["ServerID", "RoleID", "DatabaseID"];
array<string> DataSourceExpectedVals = ["ServerID", "RoleID", "DatabaseID", "DataSourceID"];
array<string> DataSourcePermissionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "DataSourceID", "DataSourcePermissionID"];
array<string> DataSourceViewExpectedVals = ["ServerID", "RoleID", "DatabaseID", "DataSourceViewID"];
array<string> DimensionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "DimensionID"];
array<string> DimensionPermissionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "DimensionID", "DimensionPermissionID"];
array<string> MiningStructureExpectedVals = ["ServerID", "RoleID", "DatabaseID", "MiningStructureID"];
array<string> MiningStructurePermissionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "MiningStructureID", "MiningStructurePermissionID"];
array<string> MiningModelExpectedVals = ["ServerID", "RoleID", "DatabaseID", "MiningStructureID", "MiningModelID"];
array<string> MiningModelPermissionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "MiningStructureID", "MiningModelID", "MiningModelPermissionID"];
array<string> CubeExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID"];
array<string> CubePermissionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "CubePermissionID"];
array<string> MeasureGroupExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "MeasureGroupID"];
array<string> AggregationDesignExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "MeasureGroupID", "AggregationDesignID"];
array<string> PartitionExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "MeasureGroupID", "PartitionID"];
array<string> PerspectiveExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "PerspectiveID"];
array<string> MdxScriptExpectedVals = ["ServerID", "RoleID", "DatabaseID", "CubeID", "MdxScriptID"];

bool AtleastOneFileIsMainType(array<ClrAssemblyFileType> files)
{
    if (files == nothing || files == null || files.Count < 1) return true;

    foreach (var file in files)
    {
        if (file.Type == ClrAssemblyFileTypeEnum.Main)
        {
            return true;
        }
    }

    return false;
}

bool ValidateInMemory(DimensionCurrentStorageModeEnum valueOfCurrentStorageMode, Eng200200ValuensEnum valuens)
{
    if (valueOfCurrentStorageMode == nothing || valueOfCurrentStorageMode == null) return true;

    if (valueOfCurrentStorageMode == DimensionCurrentStorageModeEnum.InMemory)
    {
        return (valuens != nothing && valuens != null);
    }

    return true;
}

bool ValidateAutomaticNull(UnknownMemberEnum valueOfUnknownMember, Eng200200ValuensEnum valuens)
{
    if (valueOfUnknownMember == nothing || valueOfUnknownMember == null) return true;

    if (valueOfUnknownMember == UnknownMemberEnum.AutomaticNull)
    {
        return (valuens != nothing && valuens != null);
    }

    return true;
}

bool ValidateAggregationFunction(PartitionsType partitions, MeasuresType measures)
{
    if ((partitions != nothing && partitions != null && partitions.Partition != null) && (measures != nothing && measures != null && measures.Measure != null))
    {
        bool measureAggregationFunctionIsSum = false;
        bool isWriteBack = false;

        foreach (var partition in partitions.Partition  as array<PartitionType>)
        {
            if (partition.Type == PartitionTypeEnum.Writeback)
            {
                isWriteBack = true;

                foreach (var measure in measures.Measure as array<MeasureType>)
                {
                    if (measure.AggregateFunction == AggregateFunctionEnum.Sum)
                    {
                        measureAggregationFunctionIsSum = true;
                    }
                    else
                    {
                        measureAggregationFunctionIsSum = false;
                        break;
                    }
                }

                break;
            }
        }

        if (isWriteBack)
        {
            return ValidationCheck(measureAggregationFunctionIsSum, null, "MSSSAS: In MeasureGroup structure, if partition's Type is set to 'Writeback', all Measure objects for the cube MUST use 'Sum' as the value of the AggregateFunction element, but not all measure object uses Sum aggregation.");
        }
    }

    return true;
}

bool ValidateDimensionAttributeExtendedType(DimensionAttributeTypeEnum typeOfDimensionAttribute, string extendedType)
{
    if (typeOfDimensionAttribute == nothing || typeOfDimensionAttribute == null) return true;

    if (typeOfDimensionAttribute == DimensionAttributeTypeEnum.ExtendedType)
    {
        return ValidationCheck(extendedType != nothing && extendedType != null && extendedType != "", null, 
            "MSSSAS: In structure DimensionAttribute, when its Type is 'ExtendedType', the ExtendedType field MUST contain value, but it does not." );
    }

    return true;
}

bool ValidateKeyColumnSource(array<DataItemType> keyColumns)
{
    if (keyColumns == nothing || keyColumns == null) return true;
    if (keyColumns.Count == 0) return true;

    bool isBindingOK = false;

    foreach (var kc in keyColumns)
    {
        if(kc.Source == nothing ||
            kc.Source is AttributeBindingType ||
            kc.Source is MeasureBindingType ||
            kc.Source is CalculatedMeasureBindingType ||
            kc.Source is CubeAttributeBindingType ||
            kc.Source is TimeAttributeBindingType ||
            kc.Source is eng200_200_RowNumberBindingType ||
            kc.Source is CubeDimensionBindingType ||
            kc.Source is ColumnBindingType ||
            kc.Source is RowBindingType ||
            kc.Source is InheritedBindingType ||
            kc.Source is eng200_200_ExpressionBindingType)
        {
            isBindingOK = true;
        }
        else
        {
            isBindingOK = false;
            break;
        }
    }

    return ValidationCheck(isBindingOK, null, 
            "MSSSAS: The Source element within each DataItem member of KeyColumns in Type DimensionAttribute MUST be one of the following types: AttributeBinding, MeasureBinding, CalculatedMeasureBinding, CubeAttributeBinding, TimeAttributeBinding, RowNumberBinding, CubeDimensionBinding, ColumnBinding, RowBinding, InheritedBinding, ExpressionBinding, but it is not");
}

bool ValidateNameColumnSource(DataItemType nameColumn)
{
    if (nameColumn == null || nameColumn == nothing || nameColumn.Source == nothing) return true;

    return ValidationCheck(nameColumn.Source is AttributeBindingType ||
        nameColumn.Source is MeasureBindingType ||
        nameColumn.Source is CalculatedMeasureBindingType ||
        nameColumn.Source is CubeAttributeBindingType ||
        nameColumn.Source is TimeAttributeBindingType ||
        nameColumn.Source is eng200_200_RowNumberBindingType ||
        nameColumn.Source is CubeDimensionBindingType ||
        nameColumn.Source is ColumnBindingType ||
        nameColumn.Source is RowBindingType ||
        nameColumn.Source is InheritedBindingType, null,
        "MSSSAS: The Source element within NameColumn in Type DimensionAttribute MUST be one of the following types: AttributeBinding, MeasureBinding, CalculatedMeasureBinding, CubeAttributeBinding, TimeAttributeBinding, RowNumberBinding, CubeDimensionBinding, ColumnBinding, RowBinding, and InheritedBinding, but it is not");

    return true;
}

bool ValidateValueColumnSource(DataItemType valueColumn)
{
    if (valueColumn == nothing || valueColumn == null || valueColumn.Source == nothing) return true;

    return ValidationCheck(valueColumn.Source is AttributeBindingType ||
            valueColumn.Source is MeasureBindingType ||
            valueColumn.Source is CalculatedMeasureBindingType ||
            valueColumn.Source is CubeAttributeBindingType ||
            valueColumn.Source is TimeAttributeBindingType ||
            valueColumn.Source is eng200_200_RowNumberBindingType ||
            valueColumn.Source is CubeDimensionBindingType ||
            valueColumn.Source is ColumnBindingType ||
            valueColumn.Source is RowBindingType ||
            valueColumn.Source is InheritedBindingType, null,
            "MSSSAS: The Source element within ValueColumn in Type DimensionAttribute MUST be one of the following types: AttributeBinding, MeasureBinding, CalculatedMeasureBinding, CubeAttributeBinding, TimeAttributeBinding, RowNumberBinding, CubeDimensionBinding, ColumnBinding, RowBinding, and InheritedBinding, but it is not");
   
    return true;
}

bool ValidateCustomRollupColumnSource(DataItemType customRollupColumn)
{
    if (customRollupColumn == nothing || customRollupColumn == null || customRollupColumn.Source == nothing) return true;

    return ValidationCheck(customRollupColumn.Source is AttributeBindingType ||
            customRollupColumn.Source is ColumnBindingType, null,
            "MSSSAS: The Source element within CustomRollupColumn in Type DimensionAttribute MUST be one of AttributeBinding or ColumnBinding, but it is not");
   
    return true;
}

bool ValidateCustomRollupPropertiesColumnSource(DataItemType customRollupProperties)
{
    if (customRollupProperties == nothing || customRollupProperties == null || customRollupProperties.Source == nothing) return true;

    return ValidationCheck(customRollupProperties.Source is AttributeBindingType ||
            customRollupProperties.Source is ColumnBindingType, null,
            "MSSSAS: The Source element within CustomRollupProperties in Type DimensionAttribute MUST be one of AttributeBinding or ColumnBinding, but it is not");
   
    return true;
}

bool ValidationKeyColumnSource(AttributeKeyColumnsType keyColumns)
{
    if (keyColumns == nothing || keyColumns == null || (keyColumns != null && keyColumns.KeyColumn == null))
        return true;
    
    bool sourceBindingOK = false;

    foreach (var keyColumn in keyColumns.KeyColumn as array<DataItemType>)
    {
        if (keyColumn.Source == nothing ||
            keyColumn.Source is ColumnBindingType || 
            keyColumn.Source is AttributeBindingType ||
            keyColumn.Source is InheritedBindingType)
            {
                sourceBindingOK = true;
            }
            else
            {
                sourceBindingOK = false;
                break;
            }
    }
    
    return ValidationCheck(sourceBindingOK, null, "MSSSAS: In the MeasureGroupAttribute, the Source element within each key column MUST be one of the following types: ColumnBinding, AttributeBinding, or InheritedBinding, but not.");
}

bool ValidateAggregationInstanceAttributeKeyColumnSource(KeyColumnsType keyColumns)
{
    if (keyColumns == nothing || keyColumns == null) return true;
    else if (keyColumns.KeyColumn == null) return true;

    bool isColumnBindingType = false;

    foreach (var kc in keyColumns.KeyColumn as array<DataItemType>)
    {
        if (kc.Source == nothing || kc.Source is ColumnBindingType)
        {
            isColumnBindingType = true;
        }
        else
        {
            isColumnBindingType = false;
            break;
        }
    }

    return ValidationCheck(isColumnBindingType, null, 
            "MSSSAS: The Source element within each DataItem member of KeyColumns in AggregationInstanceAttribute MUST be of the ColumnBinding type, but at least one of the Source elements is not");
}

bool ValidateColumns(ColumnsType columns)
{
    if (columns == nothing || columns == null) return true;

    bool columnTypeOK = false;

    foreach (var column in columns.Column as array<BindingType>)
    {
        if (column == nothing || column is MeasureBindingType || column is CubeAttributeBindingType) 
            columnTypeOK = true;
    }

    return ValidationCheck(columnTypeOK, null, "MSSSAS: In DrillThroughAction, each column in Columns MUST use MeasureBinding or CubeAttributeBinding derived Binding type, but not");
}

bool ValidateUnaryOperatorColumnSource(UsageEnum usage, DataItemType unaryOperatorColumn)
{
    if (usage == nothing || usage == null) return true;

    if (usage == UsageEnum.Parent)
    {
        return (unaryOperatorColumn != nothing && unaryOperatorColumn != null 
        && (unaryOperatorColumn.Source is AttributeBindingType || unaryOperatorColumn.Source is ColumnBindingType));
    }

    return true;
}

bool ValidateRowNumber(DimensionAttributeTypeEnum valueOfDimensionAttributeType, Eng200200ValuensEnum valuens)
{
    if (valueOfDimensionAttributeType == nothing || valueOfDimensionAttributeType == null) return true;

    if (valueOfDimensionAttributeType == DimensionAttributeTypeEnum.RowNumber)
    {
        return (valuens != nothing && valuens != null);
    }

    return true;
}

bool ValidateNameUniqueInDimensionAndMeasureGroup(CubeDimensionsType dimensions, MeasureGroupsType measureGroups)
{
    if (dimensions == nothing || measureGroups == nothing || dimensions == null || measureGroups == null) 
        return true;

    array<CubeDimensionType> dims = dimensions.Dimension;
    array<MeasureGroupType> megs = measureGroups.MeasureGroup as array<MeasureGroupType>;
    if (dims == nothing || megs == nothing || dims == null || megs == null) 
        return true;

    bool unique = true;
    string sameName = "";

    foreach (CubeDimensionType dim in dims)
    {
        if (unique == false) 
            break;

        foreach (MeasureGroupType meg in megs)
        {
            sameName = "";
            if (dim.Name as string == meg.Name as string)
            {
                unique = false;
                sameName = dim.Name as string;
                break;
            }
        }
    }

    return ValidationCheck(unique, null, ("MSSSAS: A Dimension MUST NOT have same name as a MeasureGroup, but a dimension and a measure group has the same name '" + sameName + "'."));
}

bool ValidationCheckCubeStorageMode(CubeStorageModeEnum valueOfCubeStorageMode, Eng200200ValuensEnum valuens)
{
    if (valueOfCubeStorageMode == nothing || valueOfCubeStorageMode == null) return true;

    if (valueOfCubeStorageMode == CubeStorageModeEnum.InMemory)
    {
        return ValidationCheck(valuens != nothing && valuens != null, null, "MSSSAS: In structure Cube, when the value of feild StorageMode is 'InMemory', its valuens attribute MUST be used, but valuens does not exist.");
    }

    return true;
}

bool ValidationCheckInMemory(MeasureGroupStorageModeEnum valueOfStorageMode, Eng200200ValuensEnum valuens)
{
    if (valueOfStorageMode == nothing || valueOfStorageMode == null) return true;

    if (valueOfStorageMode == MeasureGroupStorageModeEnum.InMemory)
    {
         return (valuens != nothing && valuens != null);
    }

    return true;
}

bool ValidateGranularityAttribute(MeasureGroupAttributesType attributes)
{
    if (attributes == nothing || attributes == null || attributes != null && attributes.Attribute == null) return true;

    int granularityAttributeCount = 0;

    foreach (var att in attributes.Attribute as array<MeasureGroupAttributeType>)
    {
        if (att.Type != null && att.Type == MeasureTypeEnum.Granularity)
        {
            granularityAttributeCount++;
        }
    }

    return ValidationCheck(granularityAttributeCount == 1, null, 
        ("MSSSAS: Exactly one granularity attribute MUST be defined for a Regular Measure Group, but the count of Granularity attribute is " + granularityAttributeCount.ToString()));
}

bool ValidateWriteBackSource(PartitionTypeEnum partitionType, TabularBindingType source)
{
    if (partitionType == nothing || partitionType == null) return true;

    if (partitionType == PartitionTypeEnum.Writeback)
    {
        return (source != nothing && source != null);
    }

    return true;
}

bool ValidateMergePartitionsTypeTarget(SourcesType sources, ObjectReferenceType target)
{
    if (sources == nothing || sources.Source == nothing)
        return true;

    array<ObjectReferenceType> srcs = sources.Source;
    foreach (ObjectReferenceType src in srcs)
    {
        if (src.PartitionID == target.PartitionID || src.MeasureGroupID != target.MeasureGroupID)
        {
            return false;
        }
    }

    return true;
}

RequestTypeEnum GetDiscoverCommandFromSoapBody(xml body)
{
    if (body != null && body.ChildCount > 0)
    {
        array<xml> requestType = body select xpath{./Discover/RequestType};
        if (requestType != null)
        {
            return(requestType[0].Value as RequestTypeEnum);
        }
    }

    return "";
}

// **********************************************************************
// XMLA-Based Tabular Metadata Commands - Start
// **********************************************************************

// **********************************************************************
// Create Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Create Command type - 3.1.5.2.1.1
// **********************************************************************
type CreateTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateDataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateTablesType Tables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateColumnsType Columns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateRelationshipsType Relationships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateMeasuresType Measures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateLevelsType Levels with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateAnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateKpisType Kpis with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateCulturesType Cultures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateObjectTranslationsType ObjectTranslations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateLinguisticMetadataType LinguisticMetadata with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePerspectivesType Perspectives with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePerspectiveTablesType PerspectiveTables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePerspectiveColumnsType PerspectiveColumns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePerspectiveHierarchiesType PerspectiveHierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreatePerspectiveMeasuresType PerspectiveMeasures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateRolesType Roles with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateRoleMembershipsType RoleMemberships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateTablePermissionsType TablePermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateVariationsType Variations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateExtendedPropertiesType ExtendedProperties with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateExpressionsType Expressions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateColumnPermissionsType ColumnPermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional CreateDetailRowsDefinitionType DetailRowsDefinition with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Create DataSources type - 3.1.5.2.1.1.1.1
// **********************************************************************
type CreateDataSourcesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateDataSourcesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateDataSourcesRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional DatasourceTypeEnum Type where ValidationCheckEnumValue(value == nothing || InRange<DatasourceTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "CreateDataSourcesType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ConnectionString with XmlEncoding{Namespace = XMLARSNamespace};
    optional ImpersonationModeEnumTabular ImpersonationMode where ValidationCheckEnumValue(value == nothing || InRange<ImpersonationModeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ImpersonationMode", "CreateDataSourcesType", "2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Account with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Password with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MaxConnections with XmlEncoding{Namespace = XMLARSNamespace};
    optional IsolationTypeEnum Isolation where ValidationCheckEnumValue(value == nothing || InRange<IsolationTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Isolation", "CreateDataSourcesType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int Timeout with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Provider with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ConnectionDetails with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Options with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Credential with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ContextExpression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Tables type - 3.1.5.2.1.1.1.2
// **********************************************************************
type CreateTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateTablesRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional TableObjectDataCategoryEnum DataCategory where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<TableObjectDataCategoryEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAST", "DataCategory", "CreateTablesType", "CreateTable", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ShowAsVariationsOnly with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsPrivate with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Columns type - 3.1.5.2.1.1.1.3
// **********************************************************************
type CreateColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateColumnsRow
{
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string ExplicitName with XmlEncoding{Namespace = XMLARSNamespace};
    optional ExplicitDataTypeEnum ExplicitDataType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ExplicitDataTypeEnum>(value as long)), null, false, ReferenceType.Type, "MSSSAST", "ExplicitDataType", "CreateColumnsType", "CreateColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ColumnObjectDataCategoryEnum DataCategory where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ColumnObjectDataCategoryEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAST", "DataCategory", "CreateColumnsType", "CreateColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsUnique with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsKey with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsNullable with XmlEncoding{Namespace = XMLARSNamespace};
    optional AlignmentEnumTabular Alignment where ValidationCheckEnumValue(value == nothing || InRange<AlignmentEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Alignment", "CreateColumnsType", "1, 2, 3, 4", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int TableDetailPosition with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsDefaultLabel with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsDefaultImage with XmlEncoding{Namespace = XMLARSNamespace};
    optional SummarizeByEnum SummarizeBy where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<SummarizeByEnum>(value as long)), null, false, ReferenceType.Type, "MSSSAST", "SummarizeBy", "CreateColumnsType", "CreateColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ColumnTypeEnum Type where ValidationCheckEnumValue(value == nothing || InRange<ColumnTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "CreateColumnsType", "1, 2, 3, 4", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SourceColumn with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsAvailableInMDX with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SortByColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SortByColumnID_Table with XmlEncoding{Name = "SortByColumnID.Table", Namespace = XMLARSNamespace};
    optional string SortByColumnID_Column with XmlEncoding{Name = "SortByColumnID.Column", Namespace = XMLARSNamespace};
    optional bool KeepUniqueRows with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DisplayOrdinal with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLARSNamespace};
    optional EncodingHintEnum EncodingHint where ValidationCheckEnumValue(value == nothing || InRange<EncodingHintEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "EncodingHint", "CreateColumnsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Partitions type - 3.1.5.2.1.1.1.4
// **********************************************************************
type CreatePartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePartitionsRow
{
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong DataSourceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceID_DataSource with XmlEncoding{Name = "DataSourceID.DataSource", Namespace = XMLARSNamespace};
    optional string QueryDefinition with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionTypeEnumTabular Type where ValidationCheckEnumValue(value == nothing || InRange<PartitionTypeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "CreatePartitionsType", "1, 2, 3, 4, 5", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionModeEnum Mode where ValidationCheckEnumValue(value == nothing || InRange<PartitionModeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Mode", "CreatePartitionsType", "0, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionDataViewEnum DataView where ValidationCheckEnumValue(value == nothing || InRange<PartitionDataViewEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "DataView", "CreatePartitionsType", "0, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool RetainDataTillForceCalculate with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Relationships type - 3.1.5.2.1.1.1.5
// **********************************************************************
type CreateRelationshipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateRelationshipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateRelationshipsRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsActive with XmlEncoding{Namespace = XMLARSNamespace};
    optional RelationshipTypeEnumTabular Type where ValidationCheckEnumValue(value == nothing || InRange<RelationshipTypeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "CreateRelationshipsType", "1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CrossFilteringBehaviorEnum CrossFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<CrossFilteringBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "CrossFilteringBehavior", "CreateRelationshipsType", "1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional JoinOnDateBehaviorEnum JoinOnDateBehavior where ValidationCheckEnumValue(value == nothing || InRange<JoinOnDateBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "JoinOnDateBehavior", "CreateRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool RelyOnReferentialIntegrity with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong FromTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FromTableID_Table with XmlEncoding{Name = "FromTableID.Table", Namespace = XMLARSNamespace};
    optional ulong FromColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FromColumnID_Table with XmlEncoding{Name = "FromColumnID.Table", Namespace = XMLARSNamespace};
    optional string FromColumnID_Column with XmlEncoding{Name = "FromColumnID.Column", Namespace = XMLARSNamespace};
    optional FromCardinalityEnum FromCardinality where ValidationCheckEnumValue(value == nothing || InRange<FromCardinalityEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "FromCardinality", "CreateRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong ToTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ToTableID_Table with XmlEncoding{Name = "ToTableID.Table", Namespace = XMLARSNamespace};
    optional ulong ToColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ToColumnID_Table with XmlEncoding{Name = "ToColumnID.Table", Namespace = XMLARSNamespace};
    optional string ToColumnID_Column with XmlEncoding{Name = "ToColumnID.Column", Namespace = XMLARSNamespace};
    optional ToCardinalityEnum ToCardinality where ValidationCheckEnumValue(value == nothing || InRange<ToCardinalityEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ToCardinality", "CreateRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional SecurityFilteringBehaviorEnum SecurityFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<SecurityFilteringBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "SecurityFilteringBehavior", "CreateRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Measures type - 3.1.5.2.1.1.1.6
// **********************************************************************
type CreateMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateMeasuresRow
{
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsSimpleMeasure with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Hierarchies type - 3.1.5.2.1.1.1.7
// **********************************************************************
type CreateHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateHierarchiesRow
{
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLARSNamespace};
    optional HideMembersEnum HideMembers where ValidationCheckEnumValue(value == nothing || InRange<HideMembersEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "HideMembers", "CreateHierarchiesType", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Levels type - 3.1.5.2.1.1.1.8
// **********************************************************************
type CreateLevelsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateLevelsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateLevelsRow
{
    optional ulong HierarchyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HierarchyID_Table with XmlEncoding{Name = "HierarchyID.Table", Namespace = XMLARSNamespace};
    optional string HierarchyID_Hierarchy with XmlEncoding{Name = "HierarchyID.Hierarchy", Namespace = XMLARSNamespace};
    optional int Ordinal with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Annotations type - 3.1.5.2.1.1.1.9
// **********************************************************************
type CreateAnnotationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateAnnotationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateAnnotationsRow
{
    optional ulong ObjectID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectID_DataSource with XmlEncoding{Name = "ObjectID.DataSource", Namespace = XMLARSNamespace};
    optional string ObjectID_Table with XmlEncoding{Name = "ObjectID.Table", Namespace = XMLARSNamespace};
    optional string ObjectID_Column with XmlEncoding{Name = "ObjectID.Column", Namespace = XMLARSNamespace};
    optional string ObjectID_Partition with XmlEncoding{Name = "ObjectID.Partition", Namespace = XMLARSNamespace};
    optional string ObjectID_Relationship with XmlEncoding{Name = "ObjectID.Relationship", Namespace = XMLARSNamespace};
    optional string ObjectID_Measure with XmlEncoding{Name = "ObjectID.Measure", Namespace = XMLARSNamespace};
    optional string ObjectID_Hierarchy with XmlEncoding{Name = "ObjectID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ObjectID_Level with XmlEncoding{Name = "ObjectID.Level", Namespace = XMLARSNamespace};
    optional string ObjectID_Culture with XmlEncoding{Name = "ObjectID.Culture", Namespace = XMLARSNamespace};
    optional string ObjectID_Perspective with XmlEncoding{Name = "ObjectID.Perspective", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveTable with XmlEncoding{Name = "ObjectID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveColumn with XmlEncoding{Name = "ObjectID.PerspectiveColumn", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveHierarchy with XmlEncoding{Name = "ObjectID.PerspectiveHierarchy", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveMeasure with XmlEncoding{Name = "ObjectID.PerspectiveMeasure", Namespace = XMLARSNamespace};
    optional string ObjectID_Role with XmlEncoding{Name = "ObjectID.Role", Namespace = XMLARSNamespace};
    optional string ObjectID_RoleMembership with XmlEncoding{Name = "ObjectID.RoleMembership", Namespace = XMLARSNamespace};
    optional string ObjectID_TablePermission with XmlEncoding{Name = "ObjectID.TablePermission", Namespace = XMLARSNamespace};
    optional string ObjectID_Expression with XmlEncoding{Name = "ObjectID.Expression", Namespace = XMLARSNamespace};
    optional string ObjectID_ColumnPermission with XmlEncoding{Name = "ObjectID.ColumnPermission", Namespace = XMLARSNamespace};
    optional AnnotationObjectTypeEnum ObjectType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<AnnotationObjectTypeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAST", "ObjectType", "CreateAnnotationsType", "CreateAnnotation", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Kpis type - 3.1.5.2.1.1.1.10
// **********************************************************************
type CreateKpisType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateKpisRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateKpisRow
{
    optional ulong MeasureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MeasureID_Table with XmlEncoding{Name = "MeasureID.Table", Namespace = XMLARSNamespace};
    optional string MeasureID_Measure with XmlEncoding{Name = "MeasureID.Measure", Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetFormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusGraphic with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendGraphic with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendExpression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Cultures type - 3.1.5.2.1.1.1.11
// **********************************************************************
type CreateCulturesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateCulturesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateCulturesRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create ObjectTranslations type - 3.1.5.2.1.1.1.12
// **********************************************************************
type CreateObjectTranslationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateObjectTranslationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateObjectTranslationsRow
{
    optional ulong CultureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CultureID_Culture with XmlEncoding{Name = "CultureID.Culture", Namespace = XMLARSNamespace};
    optional ulong ObjectID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectID_Table with XmlEncoding{Name = "ObjectID.Table", Namespace = XMLARSNamespace};
    optional string ObjectID_Column with XmlEncoding{Name = "ObjectID.Column", Namespace = XMLARSNamespace};
    optional string ObjectID_Measure with XmlEncoding{Name = "ObjectID.Measure", Namespace = XMLARSNamespace};
    optional string ObjectID_Hierarchy with XmlEncoding{Name = "ObjectID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ObjectID_Level with XmlEncoding{Name = "ObjectID.Level", Namespace = XMLARSNamespace};
    optional string ObjectID_Perspective with XmlEncoding{Name = "ObjectID.Perspective", Namespace = XMLARSNamespace};
    optional string ObjectID_Role with XmlEncoding{Name = "ObjectID.Role", Namespace = XMLARSNamespace};
    optional string ObjectID_Variation with XmlEncoding{Name = "ObjectID.Variation", Namespace = XMLARSNamespace};
    optional string ObjectID_Expression with XmlEncoding{Name = "ObjectID.Expression", Namespace = XMLARSNamespace};
    optional ObjectTranslationObjectTypeEnum ObjectType  where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ObjectTranslationObjectTypeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAST", "ObjectType", "CreateObjectTranslationsType", "CreateObjectTranslation", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ObjectTranslationPropertyEnum Property where ValidationCheckEnumValue(value == nothing || InRange<ObjectTranslationPropertyEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Property", "CreateObjectTranslationsType", "-1, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create LinguisticMetadata type - 3.1.5.2.1.1.1.13
// **********************************************************************
type CreateLinguisticMetadataType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateLinguisticMetadataRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateLinguisticMetadataRow
{
    optional ulong CultureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string CultureID_Culture with XmlEncoding{Name = "CultureID.Culture", Namespace = XMLARSNamespace};
    optional string Content with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Perspectives type - 3.1.5.2.1.1.1.14
// **********************************************************************
type CreatePerspectivesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePerspectivesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePerspectivesRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create PerspectiveTables type - 3.1.5.2.1.1.1.15
// **********************************************************************
type CreatePerspectiveTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePerspectiveTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePerspectiveTablesRow
{
    optional ulong PerspectiveID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PerspectiveID_Perspective with XmlEncoding{Name = "PerspectiveID.Perspective", Namespace = XMLARSNamespace};
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional bool IncludeAll with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create PerspectiveColumns type - 3.1.5.2.1.1.1.16
// **********************************************************************
type CreatePerspectiveColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePerspectiveColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePerspectiveColumnsRow
{
    optional ulong PerspectiveTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_Perspective with XmlEncoding{Name = "PerspectiveTableID.Perspective", Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_PerspectiveTable with XmlEncoding{Name = "PerspectiveTableID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create PerspectiveHierarchies type - 3.1.5.2.1.1.1.17
// **********************************************************************
type CreatePerspectiveHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePerspectiveHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePerspectiveHierarchiesRow
{
    optional ulong PerspectiveTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_Perspective with XmlEncoding{Name = "PerspectiveTableID.Perspective", Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_PerspectiveTable with XmlEncoding{Name = "PerspectiveTableID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional ulong HierarchyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HierarchyID_Table with XmlEncoding{Name = "HierarchyID.Table", Namespace = XMLARSNamespace};
    optional string HierarchyID_Hierarchy with XmlEncoding{Name = "HierarchyID.Hierarchy", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create PerspectiveMeasures type - 3.1.5.2.1.1.1.18
// **********************************************************************
type CreatePerspectiveMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreatePerspectiveMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreatePerspectiveMeasuresRow
{
    optional ulong PerspectiveTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_Perspective with XmlEncoding{Name = "PerspectiveTableID.Perspective", Namespace = XMLARSNamespace};
    optional string PerspectiveTableID_PerspectiveTable with XmlEncoding{Name = "PerspectiveTableID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional ulong MeasureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MeasureID_Table with XmlEncoding{Name = "MeasureID.Table", Namespace = XMLARSNamespace};
    optional string MeasureID_Measure with XmlEncoding{Name = "MeasureID.Measure", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Roles type - 3.1.5.2.1.1.1.19
// **********************************************************************
type CreateRolesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateRolesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateRolesRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ModelPermissionEnum ModelPermission where ValidationCheckEnumValue(value == nothing || InRange<ModelPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ModelPermission", "CreateRolesType", "1, 2, 3, 4, 5", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create RoleMemberships type - 3.1.5.2.1.1.1.20
// **********************************************************************
type CreateRoleMembershipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateRoleMembershipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateRoleMembershipsRow
{
    optional ulong RoleID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RoleID_Role with XmlEncoding{Name = "RoleID.Role", Namespace = XMLARSNamespace};
    optional string MemberName with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MemberID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string IdentityProvider with XmlEncoding{Namespace = XMLARSNamespace};
    optional MemberTypeEnum MemberType where ValidationCheckEnumValue(value == nothing || InRange<MemberTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "MemberType", "CreateRoleMembershipsType", "1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create TablePermissions type - 3.1.5.2.1.1.1.21
// **********************************************************************
type CreateTablePermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateTablePermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateTablePermissionsRow
{
    optional ulong RoleID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RoleID_Role with XmlEncoding{Name = "RoleID.Role", Namespace = XMLARSNamespace};
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string FilterExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional MetadataPermissionEnum MetadataPermission where ValidationCheckEnumValue(value == nothing || InRange<MetadataPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "MetadataPermission", "CreateTablePermissionsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Variations type - 3.1.5.2.1.1.1.22
// **********************************************************************
type CreateVariationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateVariationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateVariationsRow
{
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong RelationshipID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RelationshipID_Relationship with XmlEncoding{Name = "RelationshipID.Relationship", Namespace = XMLARSNamespace};
    optional ulong DefaultHierarchyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DefaultHierarchyID_Table with XmlEncoding{Name = "DefaultHierarchyID.Table", Namespace = XMLARSNamespace};
    optional string DefaultHierarchyID_Hierarchy with XmlEncoding{Name = "DefaultHierarchyID.Hierarchy", Namespace = XMLARSNamespace};
    optional ulong DefaultColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DefaultColumnID_Table with XmlEncoding{Name = "DefaultColumnID.Table", Namespace = XMLARSNamespace};
    optional string DefaultColumnID_Column with XmlEncoding{Name = "DefaultColumnID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create ExtendedProperties type - 3.1.5.2.1.1.1.23
// **********************************************************************
type CreateExtendedPropertiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateExtendedPropertiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateExtendedPropertiesRow
{
    optional ulong ObjectID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectID_DataSource with XmlEncoding{Name = "ObjectID.DataSource", Namespace = XMLARSNamespace};
    optional string ObjectID_Table with XmlEncoding{Name = "ObjectID.Table", Namespace = XMLARSNamespace};
    optional string ObjectID_Column with XmlEncoding{Name = "ObjectID.Column", Namespace = XMLARSNamespace};
    optional string ObjectID_Partition with XmlEncoding{Name = "ObjectID.Partition", Namespace = XMLARSNamespace};
    optional string ObjectID_Relationship with XmlEncoding{Name = "ObjectID.Relationship", Namespace = XMLARSNamespace};
    optional string ObjectID_Measure with XmlEncoding{Name = "ObjectID.Measure", Namespace = XMLARSNamespace};
    optional string ObjectID_Hierarchy with XmlEncoding{Name = "ObjectID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ObjectID_Level with XmlEncoding{Name = "ObjectID.Level", Namespace = XMLARSNamespace};
    optional string ObjectID_Culture with XmlEncoding{Name = "ObjectID.Culture", Namespace = XMLARSNamespace};
    optional string ObjectID_Perspective with XmlEncoding{Name = "ObjectID.Perspective", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveTable with XmlEncoding{Name = "ObjectID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveColumn with XmlEncoding{Name = "ObjectID.PerspectiveColumn", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveHierarchy with XmlEncoding{Name = "ObjectID.PerspectiveHierarchy", Namespace = XMLARSNamespace};
    optional string ObjectID_PerspectiveMeasure with XmlEncoding{Name = "ObjectID.PerspectiveMeasure", Namespace = XMLARSNamespace};
    optional string ObjectID_Role with XmlEncoding{Name = "ObjectID.Role", Namespace = XMLARSNamespace};
    optional string ObjectID_RoleMembership with XmlEncoding{Name = "ObjectID.RoleMembership", Namespace = XMLARSNamespace};
    optional string ObjectID_TablePermission with XmlEncoding{Name = "ObjectID.TablePermission", Namespace = XMLARSNamespace};
    optional string ObjectID_Variation with XmlEncoding{Name = "ObjectID.Variation", Namespace = XMLARSNamespace};
    optional string ObjectID_Expression with XmlEncoding{Name = "ObjectID.Expression", Namespace = XMLARSNamespace};
    optional string ObjectID_ColumnPermission with XmlEncoding{Name = "ObjectID.ColumnPermission", Namespace = XMLARSNamespace};
    optional ExtendedPropertyObjectTypeEnum ObjectType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ExtendedPropertyObjectTypeEnum>(value as int)), null, false, ReferenceType.Type, "MSSSAST", "ObjectType", "CreateExtendedPropertiesType", "CreateExtendedProperty", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional ExtendedPropertyTypeEnum Type where ValidationCheckEnumValue(value == nothing || InRange<ExtendedPropertyTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "CreateExtendedPropertiesType", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Expressions type - 3.1.5.2.1.1.1.24
// **********************************************************************
type CreateExpressionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateExpressionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateExpressionsRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ExpressionKindEnum Kind where ValidationCheckEnumValue(value == nothing || InRange<ExpressionKindEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Kind", "CreateExpressionsType", "0", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create ColumnPermissions type - 3.1.5.2.1.1.1.25
// **********************************************************************
type CreateColumnPermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateColumnPermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateColumnPermissionsRow
{
    optional ulong TablePermissionID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TablePermissionID_Role with XmlEncoding{Name = "TablePermissionID.Role", Namespace = XMLARSNamespace};
    optional string TablePermissionID_TablePermission with XmlEncoding{Name = "TablePermissionID.TablePermission", Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
    optional MetadataPermissionEnum MetadataPermission where ValidationCheckEnumValue(value == nothing || InRange<MetadataPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "MetadataPermission", "CreateColumnPermissionsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create DetailRowsDefinition type - 3.1.5.2.1.1.1.26
// **********************************************************************
type CreateDetailRowsDefinitionType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<CreateDetailRowsDefinitionRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type CreateDetailRowsDefinitionRow
{
    optional ulong ObjectID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ObjectID_Table with XmlEncoding{Name = "ObjectID.Table", Namespace = XMLARSNamespace};
    optional string ObjectID_Measure with XmlEncoding{Name = "ObjectID.Measure", Namespace = XMLARSNamespace};
    optional DetailRowsDefinitionObjectTypeEnum ObjectType where ValidationCheckEnumValue(value == nothing || InRange<DetailRowsDefinitionObjectTypeEnum>(value as int), null, false, ReferenceType.Type, "MSSSAST", "ObjectType", "CreateDetailRowsDefinitionType", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Create Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// Alter Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Alter Command type - 3.1.5.2.1.2
// **********************************************************************
type AlterTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterModelType Model with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterDataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterTablesType Tables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterColumnsType Columns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterRelationshipsType Relationships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterMeasuresType Measures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterLevelsType Levels with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterAnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterKpisType Kpis with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterCulturesType Cultures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterObjectTranslationsType ObjectTranslations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterLinguisticMetadataType LinguisticMetadata with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPerspectivesType Perspectives with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPerspectiveTablesType PerspectiveTables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPerspectiveColumnsType PerspectiveColumns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPerspectiveHierarchiesType PerspectiveHierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterPerspectiveMeasuresType PerspectiveMeasures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterRolesType Roles with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterRoleMembershipsType RoleMemberships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterTablePermissionsType TablePermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterVariationsType Variations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterExtendedPropertiesType ExtendedProperties with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterExpressionsType Expressions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterColumnPermissionsType ColumnPermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional AlterDetailRowsDefinitionType DetailRowsDefinition with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Alter Model type - 3.1.5.2.1.2.1.1
// **********************************************************************
type AlterModelType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterModelRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterModelRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StorageLocation with XmlEncoding{Namespace = XMLARSNamespace};
    optional ModelModeEnum DefaultMode where ValidationCheckEnumValue(value == nothing || InRange<ModelModeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "DefaultMode", "AlterModelType", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Culture with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Collation with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataAccessOptions with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong DefaultMeasureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DefaultMeasureID_Table with XmlEncoding{Name = "DefaultMeasureID.Table", Namespace = XMLARSNamespace};
    optional string DefaultMeasureID_Measure with XmlEncoding{Name = "DefaultMeasureID.Measure", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter DataSources type - 3.1.5.2.1.2.1.2
// **********************************************************************
type AlterDataSourcesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterDataSourcesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterDataSourcesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_DataSource with XmlEncoding{Name = "ID.DataSource", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ConnectionString with XmlEncoding{Namespace = XMLARSNamespace};
    optional ImpersonationModeEnumTabular ImpersonationMode where ValidationCheckEnumValue(value == nothing || InRange<ImpersonationModeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ImpersonationMode", "AlterDataSourcesType", "2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Account with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Password with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MaxConnections with XmlEncoding{Namespace = XMLARSNamespace};
    optional IsolationTypeEnum Isolation where ValidationCheckEnumValue(value == nothing || InRange<IsolationTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Isolation", "AlterDataSourcesType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int Timeout with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Provider with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ConnectionDetails with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Options with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Credential with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ContextExpression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Tables type - 3.1.5.2.1.2.1.3
// **********************************************************************
type AlterTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional TableObjectDataCategoryEnum DataCategory where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<TableObjectDataCategoryEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAST", "DataCategory", "AlterTablesType", "AlterTable", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool ShowAsVariationsOnly with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsPrivate with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Columns type - 3.1.5.2.1.2.1.4
// **********************************************************************
type AlterColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string ExplicitName with XmlEncoding{Namespace = XMLARSNamespace};
    optional ExplicitDataTypeEnum ExplicitDataType where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ExplicitDataTypeEnum>(value as long)), null, false, ReferenceType.Type, "MSSSAST", "ExplicitDataType", "AlterColumnsType", "AlterColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional ColumnObjectDataCategoryEnum DataCategory where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<ColumnObjectDataCategoryEnum>(value as string)), null, false, ReferenceType.Type, "MSSSAST", "DataCategory", "AlterColumnsType", "AlterColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsUnique with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsKey with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsNullable with XmlEncoding{Namespace = XMLARSNamespace};
    optional AlignmentEnumTabular Alignment where ValidationCheckEnumValue(value == nothing || InRange<AlignmentEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Alignment", "AlterColumnsType", "1, 2, 3, 4", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int TableDetailPosition with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsDefaultLabel with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsDefaultImage with XmlEncoding{Namespace = XMLARSNamespace};
    optional SummarizeByEnum SummarizeBy where ValidationCheckEnumValueTooManyItems((value == nothing || InRange<SummarizeByEnum>(value as long)), null, false, ReferenceType.Type, "MSSSAST", "SummarizeBy", "AlterColumnsType", "CreateColumn", "MS-SSAS-T") with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SourceColumn with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsAvailableInMDX with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong SortByColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string SortByColumnID_Table with XmlEncoding{Name = "SortByColumnID.Table", Namespace = XMLARSNamespace};
    optional string SortByColumnID_Column with XmlEncoding{Name = "SortByColumnID.Column", Namespace = XMLARSNamespace};
    optional bool KeepUniqueRows with XmlEncoding{Namespace = XMLARSNamespace};
    optional int DisplayOrdinal with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Name = "SortByColumnID.Table", Namespace = XMLARSNamespace};
    optional EncodingHintEnum EncodingHint where ValidationCheckEnumValue(value == nothing || InRange<EncodingHintEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "EncodingHint", "AlterColumnsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Partitions type - 3.1.5.2.1.2.1.5
// **********************************************************************
type AlterPartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong DataSourceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceID_DataSource with XmlEncoding{Name = "DataSourceID.DataSource", Namespace = XMLARSNamespace};
    optional string QueryDefinition with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionTypeEnumTabular Type where ValidationCheckEnumValue(value == nothing || InRange<PartitionTypeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "AlterPartitionsType", "1, 2, 3, 4, 5", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionModeEnum Mode where ValidationCheckEnumValue(value == nothing || InRange<PartitionModeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Mode", "AlterPartitionsType", "0, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionDataViewEnum DataView where ValidationCheckEnumValue(value == nothing || InRange<PartitionDataViewEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "DataView", "AlterPartitionsType", "0, 1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Relationships type - 3.1.5.2.1.2.1.6
// **********************************************************************
type AlterRelationshipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterRelationshipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterRelationshipsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Relationship with XmlEncoding{Name = "ID.Relationship", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsActive with XmlEncoding{Namespace = XMLARSNamespace};
    optional RelationshipTypeEnumTabular Type where ValidationCheckEnumValue(value == nothing || InRange<RelationshipTypeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "AlterRelationshipsType", "1", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional CrossFilteringBehaviorEnum CrossFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<CrossFilteringBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "CrossFilteringBehavior", "AlterRelationshipsType", "1, 2, 3", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional JoinOnDateBehaviorEnum JoinOnDateBehavior where ValidationCheckEnumValue(value == nothing || InRange<JoinOnDateBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "JoinOnDateBehavior", "AlterRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool RelyOnReferentialIntegrity with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong FromTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FromTableID_Table with XmlEncoding{Name = "FromTableID.Table", Namespace = XMLARSNamespace};
    optional ulong FromColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FromColumnID_Table with XmlEncoding{Name = "FromColumnID.Table", Namespace = XMLARSNamespace};
    optional string FromColumnID_Column with XmlEncoding{Name = "FromColumnID.Column", Namespace = XMLARSNamespace};
    optional FromCardinalityEnum FromCardinality where ValidationCheckEnumValue(value == nothing || InRange<FromCardinalityEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "FromCardinality", "AlterRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong ToTableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ToTableID_Table with XmlEncoding{Name = "ToTableID.Table", Namespace = XMLARSNamespace};
    optional ulong ToColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ToColumnID_Table with XmlEncoding{Name = "ToColumnID.Table", Namespace = XMLARSNamespace};
    optional string ToColumnID_Column with XmlEncoding{Name = "ToColumnID.Column", Namespace = XMLARSNamespace};
    optional ToCardinalityEnum ToCardinality where ValidationCheckEnumValue(value == nothing || InRange<ToCardinalityEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ToCardinality", "AlterRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional SecurityFilteringBehaviorEnum SecurityFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<SecurityFilteringBehaviorEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "SecurityFilteringBehavior", "AlterRelationshipsType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Measures type - 3.1.5.2.1.2.1.7
// **********************************************************************
type AlterMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterMeasuresRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Measure with XmlEncoding{Name = "ID.Measure", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string FormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsSimpleMeasure with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Hierarchies type - 3.1.5.2.1.2.1.8
// **********************************************************************
type AlterHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterHierarchiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional bool IsHidden with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DisplayFolder with XmlEncoding{Namespace = XMLARSNamespace};
    optional HideMembersEnum HideMembers where ValidationCheckEnumValue(value == nothing || InRange<HideMembersEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "HideMembers", "AlterHierarchiesType", "0, 1", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Levels type - 3.1.5.2.1.2.1.9
// **********************************************************************
type AlterLevelsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterLevelsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterLevelsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ID_Level with XmlEncoding{Name = "ID.Level", Namespace = XMLARSNamespace};
    optional int Ordinal with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Annotations type - 3.1.5.2.1.2.1.10
// **********************************************************************
type AlterAnnotationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterAnnotationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterAnnotationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Kpis type - 3.1.5.2.1.2.1.11
// **********************************************************************
type AlterKpisType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterKpisRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterKpisRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Measure with XmlEncoding{Name = "ID.Measure", Namespace = XMLARSNamespace};
    optional string ID_KPI with XmlEncoding{Name = "ID.KPI", Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TargetFormatString with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusGraphic with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string StatusExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendGraphic with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendDescription with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TrendExpression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Cultures type - 3.1.5.2.1.2.1.12
// **********************************************************************
type AlterCulturesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterCulturesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterCulturesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Culture with XmlEncoding{Name = "ID.Culture", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter ObjectTranslations type - 3.1.5.2.1.2.1.13
// **********************************************************************
type AlterObjectTranslationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterObjectTranslationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterObjectTranslationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter LinguisticMetadata type - 3.1.5.2.1.2.1.14
// **********************************************************************
type AlterLinguisticMetadataType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterLinguisticMetadataRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterLinguisticMetadataRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Culture with XmlEncoding{Name = "ID.Culture", Namespace = XMLARSNamespace};
    optional string ID_LinguisticMetadata with XmlEncoding{Name = "ID.LinguisticMetadata", Namespace = XMLARSNamespace};
    optional string Content with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Perspectives type - 3.1.5.2.1.2.1.15
// **********************************************************************
type AlterPerspectivesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPerspectivesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPerspectivesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter PerspectiveTables type - 3.1.5.2.1.2.1.16
// **********************************************************************
type AlterPerspectiveTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPerspectiveTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPerspectiveTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional bool IncludeAll with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter PerspectiveColumns type - 3.1.5.2.1.2.1.17
// **********************************************************************
type AlterPerspectiveColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPerspectiveColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPerspectiveColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveColumn with XmlEncoding{Name = "ID.PerspectiveColumn", Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter PerspectiveHierarchies type - 3.1.5.2.1.2.1.18
// **********************************************************************
type AlterPerspectiveHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPerspectiveHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPerspectiveHierarchiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveHierarchy with XmlEncoding{Name = "ID.PerspectiveHierarchy", Namespace = XMLARSNamespace};
    optional ulong HierarchyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string HierarchyID_Table with XmlEncoding{Name = "HierarchyID.Table", Namespace = XMLARSNamespace};
    optional string HierarchyID_Hierarchy with XmlEncoding{Name = "HierarchyID.Hierarchy", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter PerspectiveMeasures type - 3.1.5.2.1.2.1.19
// **********************************************************************
type AlterPerspectiveMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterPerspectiveMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterPerspectiveMeasuresRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveMeasure with XmlEncoding{Name = "ID.PerspectiveMeasure", Namespace = XMLARSNamespace};
    optional ulong MeasureID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string MeasureID_Table with XmlEncoding{Name = "MeasureID.Table", Namespace = XMLARSNamespace};
    optional string MeasureID_Measure with XmlEncoding{Name = "MeasureID.Measure", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Roles type - 3.1.5.2.1.2.1.20
// **********************************************************************
type AlterRolesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterRolesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterRolesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ModelPermissionEnum ModelPermission where ValidationCheckEnumValue(value == nothing || InRange<ModelPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ModelPermission", "AlterRolesType", "1, 2, 3, 4, 5", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter RoleMemberships type - 3.1.5.2.1.2.1.21
// **********************************************************************
type AlterRoleMembershipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterRoleMembershipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterRoleMembershipsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_RoleMembership with XmlEncoding{Name = "ID.RoleMembership", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter TablePermissions type - 3.1.5.2.1.2.1.22
// **********************************************************************
type AlterTablePermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterTablePermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterTablePermissionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_TablePermission with XmlEncoding{Name = "ID.TablePermission", Namespace = XMLARSNamespace};
    optional ulong TableID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string TableID_Table with XmlEncoding{Name = "TableID.Table", Namespace = XMLARSNamespace};
    optional string FilterExpression with XmlEncoding{Namespace = XMLARSNamespace};
    optional MetadataPermissionEnum MetadataPermission where ValidationCheckEnumValue(value == nothing || InRange<MetadataPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "MetadataPermission", "AlterTablePermissionsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Variations type - 3.1.5.2.1.2.1.23
// **********************************************************************
type AlterVariationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterVariationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterVariationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string ID_Variation with XmlEncoding{Name = "ID.Variation", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ulong RelationshipID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string RelationshipID_Relationship with XmlEncoding{Name = "RelationshipID.Relationship", Namespace = XMLARSNamespace};
    optional ulong DefaultHierarchyID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DefaultHierarchyID_Table with XmlEncoding{Name = "DefaultHierarchyID.Table", Namespace = XMLARSNamespace};
    optional string DefaultHierarchyID_Hierarchy with XmlEncoding{Name = "DefaultHierarchyID.Hierarchy", Namespace = XMLARSNamespace};
    optional ulong DefaultColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DefaultColumnID_Table with XmlEncoding{Name = "DefaultColumnID.Table", Namespace = XMLARSNamespace};
    optional string DefaultColumnID_Column with XmlEncoding{Name = "DefaultColumnID.Column", Namespace = XMLARSNamespace};
    optional bool IsDefault with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter ExtendedProperties type - 3.1.5.2.1.2.1.24
// **********************************************************************
type AlterExtendedPropertiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterExtendedPropertiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterExtendedPropertiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Value with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Expressions type - 3.1.5.2.1.2.1.25
// **********************************************************************
type AlterExpressionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterExpressionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterExpressionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Expression with XmlEncoding{Name = "ID.Expression", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Description with XmlEncoding{Namespace = XMLARSNamespace};
    optional ExpressionKindEnum Kind where ValidationCheckEnumValue(value == nothing || InRange<ExpressionKindEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Kind", "AlterExpressionsType", "0", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter ColumnPermissions type - 3.1.5.2.1.2.1.26
// **********************************************************************
type AlterColumnPermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterColumnPermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterColumnPermissionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_TablePermission with XmlEncoding{Name = "ID.TablePermission", Namespace = XMLARSNamespace};
    optional string ID_ColumnPermission with XmlEncoding{Name = "ID.ColumnPermission", Namespace = XMLARSNamespace};
    optional ulong ColumnID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ColumnID_Table with XmlEncoding{Name = "ColumnID.Table", Namespace = XMLARSNamespace};
    optional string ColumnID_Column with XmlEncoding{Name = "ColumnID.Column", Namespace = XMLARSNamespace};
    optional MetadataPermissionEnum MetadataPermission where ValidationCheckEnumValue(value == nothing || InRange<MetadataPermissionEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "MetadataPermission", "AlterColumnPermissionsType", "0, 1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter DetailRowsDefinition type - 3.1.5.2.1.2.1.27
// **********************************************************************
type AlterDetailRowsDefinitionType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<AlterDetailRowsDefinitionRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type AlterDetailRowsDefinitionRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Alter Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// Delete Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Delete Command type - 3.1.5.2.1.3
// **********************************************************************
type DeleteTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteDataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteTablesType Tables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteColumnsType Columns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteRelationshipsType Relationships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteMeasuresType Measures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteLevelsType Levels with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteAnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteKpisType Kpis with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteCulturesType Cultures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteObjectTranslationsType ObjectTranslations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteLinguisticMetadataType LinguisticMetadata with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePerspectivesType Perspectives with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePerspectiveTablesType PerspectiveTables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePerspectiveColumnsType PerspectiveColumns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePerspectiveHierarchiesType PerspectiveHierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeletePerspectiveMeasuresType PerspectiveMeasures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteRolesType Roles with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteRoleMembershipsType RoleMemberships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteTablePermissionsType TablePermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteVariationsType Variations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteExtendedPropertiesType ExtendedProperties with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteExpressionsType Expressions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteColumnPermissionsType ColumnPermissions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional DeleteDetailRowsDefinitionType DetailRowsDefinition with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Delete DataSources type - 3.1.5.2.1.3.1.1
// **********************************************************************
type DeleteDataSourcesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteDataSourcesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteDataSourcesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_DataSource with XmlEncoding{Name = "ID.DataSource", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Tables type - 3.1.5.2.1.3.1.2
// **********************************************************************
type DeleteTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Columns type - 3.1.5.2.1.3.1.3
// **********************************************************************
type DeleteColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Partitions type - 3.1.5.2.1.3.1.4
// **********************************************************************
type DeletePartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Relationships type - 3.1.5.2.1.3.1.5
// **********************************************************************
type DeleteRelationshipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteRelationshipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteRelationshipsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Relationship with XmlEncoding{Name = "ID.Relationship", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Measures type - 3.1.5.2.1.3.1.6
// **********************************************************************
type DeleteMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteMeasuresRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Measure with XmlEncoding{Name = "ID.Measure", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Hierarchies type - 3.1.5.2.1.3.1.7
// **********************************************************************
type DeleteHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteHierarchiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Levels type - 3.1.5.2.1.3.1.8
// **********************************************************************
type DeleteLevelsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteLevelsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteLevelsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ID_Level with XmlEncoding{Name = "ID.Level", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Annotations type - 3.1.5.2.1.3.1.9
// **********************************************************************
type DeleteAnnotationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteAnnotationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteAnnotationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Kpis type - 3.1.5.2.1.3.1.10
// **********************************************************************
type DeleteKpisType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteKpisRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteKpisRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Measure with XmlEncoding{Name = "ID.Measure", Namespace = XMLARSNamespace};
    optional string ID_KPI with XmlEncoding{Name = "ID.KPI", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Cultures type - 3.1.5.2.1.3.1.11
// **********************************************************************
type DeleteCulturesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteCulturesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteCulturesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Culture with XmlEncoding{Name = "ID.Culture", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete ObjectTranslations type - 3.1.5.2.1.3.1.12
// **********************************************************************
type DeleteObjectTranslationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteObjectTranslationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteObjectTranslationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete LinguisticMetadata type - 3.1.5.2.1.3.1.13
// **********************************************************************
type DeleteLinguisticMetadataType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteLinguisticMetadataRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteLinguisticMetadataRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Culture with XmlEncoding{Name = "ID.Culture", Namespace = XMLARSNamespace};
    optional string ID_LinguisticMetadata with XmlEncoding{Name = "ID.LinguisticMetadata", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Perspectives type - 3.1.5.2.1.3.1.14
// **********************************************************************
type DeletePerspectivesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePerspectivesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePerspectivesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete PerspectiveTables type - 3.1.5.2.1.3.1.15
// **********************************************************************
type DeletePerspectiveTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePerspectiveTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePerspectiveTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete PerspectiveColumns type - 3.1.5.2.1.3.1.16
// **********************************************************************
type DeletePerspectiveColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePerspectiveColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePerspectiveColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveColumn with XmlEncoding{Name = "ID.PerspectiveColumn", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete PerspectiveHierarchies type - 3.1.5.2.1.3.1.17
// **********************************************************************
type DeletePerspectiveHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePerspectiveHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePerspectiveHierarchiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveHierarchy with XmlEncoding{Name = "ID.PerspectiveHierarchy", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete PerspectiveMeasures type - 3.1.5.2.1.3.1.18
// **********************************************************************
type DeletePerspectiveMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeletePerspectiveMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeletePerspectiveMeasuresRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveTable with XmlEncoding{Name = "ID.PerspectiveTable", Namespace = XMLARSNamespace};
    optional string ID_PerspectiveMeasure with XmlEncoding{Name = "ID.PerspectiveMeasure", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Roles type - 3.1.5.2.1.3.1.19
// **********************************************************************
type DeleteRolesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteRolesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteRolesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete RoleMemberships type - 3.1.5.2.1.3.1.20
// **********************************************************************
type DeleteRoleMembershipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteRoleMembershipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteRoleMembershipsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_RoleMembership with XmlEncoding{Name = "ID.RoleMembership", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete TablePermissions type - 3.1.5.2.1.3.1.21
// **********************************************************************
type DeleteTablePermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteTablePermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteTablePermissionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_TablePermission with XmlEncoding{Name = "ID.TablePermission", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Variations type - 3.1.5.2.1.3.1.22
// **********************************************************************
type DeleteVariationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteVariationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteVariationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string ID_Variation with XmlEncoding{Name = "ID.Variation", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete ExtendedProperties type - 3.1.5.2.1.3.1.23
// **********************************************************************
type DeleteExtendedPropertiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteExtendedPropertiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteExtendedPropertiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Expressions type - 3.1.5.2.1.3.1.24
// **********************************************************************
type DeleteExpressionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteExpressionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteExpressionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Expression with XmlEncoding{Name = "ID.Expression", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete ColumnPermissions type - 3.1.5.2.1.3.1.25
// **********************************************************************
type DeleteColumnPermissionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteColumnPermissionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteColumnPermissionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string ID_TablePermission with XmlEncoding{Name = "ID.TablePermission", Namespace = XMLARSNamespace};
    optional string ID_ColumnPermission with XmlEncoding{Name = "ID.ColumnPermission", Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete DetailRowsDefinition type - 3.1.5.2.1.3.1.26
// **********************************************************************
type DeleteDetailRowsDefinitionType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<DeleteDetailRowsDefinitionRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type DeleteDetailRowsDefinitionRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Delete Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// Rename Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Rename Command type - 3.1.5.2.1.4
// **********************************************************************
type RenameTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameModelType Model with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameDataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameTablesType Tables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameColumnsType Columns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenamePartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameRelationshipsType Relationships with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameMeasuresType Measures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameHierarchiesType Hierarchies with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameLevelsType Levels with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameAnnotationsType Annotations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameCulturesType Cultures with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenamePerspectivesType Perspectives with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameRolesType Roles with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameVariationsType Variations with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameExtendedPropertiesType ExtendedProperties with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RenameExpressionsType Expressions with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Rename Model type - 3.1.5.2.1.4.1.1
// **********************************************************************
type RenameModelType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameModelRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameModelRow
{
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename DataSources type - 3.1.5.2.1.4.1.2
// **********************************************************************
type RenameDataSourcesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameDataSourcesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameDataSourcesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_DataSource with XmlEncoding{Name = "ID.DataSource", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Tables type - 3.1.5.2.1.4.1.3
// **********************************************************************
type RenameTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Columns type - 3.1.5.2.1.4.1.4
// **********************************************************************
type RenameColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Partitions type - 3.1.5.2.1.4.1.5
// **********************************************************************
type RenamePartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenamePartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenamePartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Relationships type - 3.1.5.2.1.4.1.6
// **********************************************************************
type RenameRelationshipsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameRelationshipsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameRelationshipsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Relationship with XmlEncoding{Name = "ID.Relationship", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Measures type - 3.1.5.2.1.4.1.7
// **********************************************************************
type RenameMeasuresType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameMeasuresRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameMeasuresRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Measure with XmlEncoding{Name = "ID.Measure", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Hierarchies type - 3.1.5.2.1.4.1.8
// **********************************************************************
type RenameHierarchiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameHierarchiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameHierarchiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Levels type - 3.1.5.2.1.4.1.9
// **********************************************************************
type RenameLevelsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameLevelsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameLevelsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Hierarchy with XmlEncoding{Name = "ID.Hierarchy", Namespace = XMLARSNamespace};
    optional string ID_Level with XmlEncoding{Name = "ID.Level", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Annotations type - 3.1.5.2.1.4.1.10
// **********************************************************************
type RenameAnnotationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameAnnotationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameAnnotationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Cultures type - 3.1.5.2.1.4.1.11
// **********************************************************************
type RenameCulturesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameCulturesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameCulturesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Culture with XmlEncoding{Name = "ID.Culture", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Perspectives type - 3.1.5.2.1.4.1.12
// **********************************************************************
type RenamePerspectivesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenamePerspectivesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenamePerspectivesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Perspective with XmlEncoding{Name = "ID.Perspective", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Roles type - 3.1.5.2.1.4.1.13
// **********************************************************************
type RenameRolesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameRolesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameRolesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Role with XmlEncoding{Name = "ID.Role", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Variations type - 3.1.5.2.1.4.1.14
// **********************************************************************
type RenameVariationsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameVariationsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameVariationsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string ID_Variation with XmlEncoding{Name = "ID.Variation", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename ExtendedProperties type - 3.1.5.2.1.4.1.15
// **********************************************************************
type RenameExtendedPropertiesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameExtendedPropertiesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameExtendedPropertiesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Expressions type - 3.1.5.2.1.4.1.16
// **********************************************************************
type RenameExpressionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RenameExpressionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RenameExpressionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Expression with XmlEncoding{Name = "ID.Expression", Namespace = XMLARSNamespace};
    optional string Name with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Rename Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// Refresh Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Refresh Command type - 3.1.5.2.1.5
// **********************************************************************
type RefreshTabularType
{
    optional int MaxParallelism with XmlEncoding{Namespace = XMLAEngTabNamespace};
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string PushedData with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string EndOfData with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RefreshModelType Model with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RefreshTablesType Tables with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional RefreshPartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional OutOfLineBindingsTypeTabular Bindings with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Refresh Model type - 3.1.5.2.1.5.1.1
// **********************************************************************
type RefreshModelType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RefreshModelRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RefreshModelRow
{
    optional RefreshTypeEnum RefreshType where ValidationCheckEnumValue(value == nothing || InRange<RefreshTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "RefreshType", "RefreshModelType", "1, 2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Refresh Tables type - 3.1.5.2.1.5.1.2
// **********************************************************************
type RefreshTablesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RefreshTablesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RefreshTablesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional RefreshTypeEnum RefreshType where ValidationCheckEnumValue(value == nothing || InRange<RefreshTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "RefreshType", "RefreshModelType", "1, 2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Refresh Partitions type - 3.1.5.2.1.5.1.3
// **********************************************************************
type RefreshPartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<RefreshPartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type RefreshPartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
    optional RefreshTypeEnum RefreshType where ValidationCheckEnumValue(value == nothing || InRange<RefreshTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "RefreshType", "RefreshModelType", "1, 2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Out-of-Line Bindings type - 3.1.5.2.1.5.1.4
// **********************************************************************
type OutOfLineBindingsTypeTabular
{
    optional array<OutOfLineBindingTypeTabular> Binding with XmlEncoding{Name = "Binding", Namespace = XMLAEngTabNamespace};
}

type OutOfLineBindingTypeTabular
{
    optional ulong ObjectID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string TableName with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string PartitionName with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional BindingDataSourcesType DataSources with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional BindingColumnsType Columns with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional BindingPartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional BindingExpressionsType Expressions with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Binding DataSources type - 3.1.5.2.1.5.1.4
// **********************************************************************
type BindingDataSourcesType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<BindingDataSourcesRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type BindingDataSourcesRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_DataSource with XmlEncoding{Name = "ID.DataSource", Namespace = XMLARSNamespace};
    optional string ConnectionString with XmlEncoding{Namespace = XMLARSNamespace};
    optional ImpersonationModeEnumTabular ImpersonationMode where ValidationCheckEnumValue(value == nothing || InRange<ImpersonationModeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "ImpersonationMode", "BindingDataSourcesType", "2, 3, 4, 5, 6", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Account with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Password with XmlEncoding{Namespace = XMLARSNamespace};
    optional int MaxConnections with XmlEncoding{Namespace = XMLARSNamespace};
    optional IsolationTypeEnum Isolation where ValidationCheckEnumValue(value == nothing || InRange<IsolationTypeEnum>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Isolation", "BindingDataSourcesType", "1, 2", value) with XmlEncoding{Namespace = XMLARSNamespace};
    optional int Timeout with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Provider with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ConnectionDetails with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Options with XmlEncoding{Namespace = XMLARSNamespace};
    optional string Credential with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ContextExpression with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Binding Partitions type - 3.1.5.2.1.5.1.4
// **********************************************************************
type BindingPartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<BindingPartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type BindingPartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
    optional ulong DataSourceID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string DataSourceID_DataSource with XmlEncoding{Name = "DataSourceID.DataSource", Namespace = XMLARSNamespace};
    optional string QueryDefinition with XmlEncoding{Namespace = XMLARSNamespace};
    optional PartitionTypeEnumTabular Type where ValidationCheckEnumValue(value == nothing || InRange<PartitionTypeEnumTabular>(value as long), null, false, ReferenceType.Type, "MSSSAST", "Type", "BindingPartitionsType", "1, 2, 3, 4, 5", value) with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Binding Columns type - 3.1.5.2.1.5.1.4
// **********************************************************************
type BindingColumnsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<BindingColumnsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type BindingColumnsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Column with XmlEncoding{Name = "ID.Column", Namespace = XMLARSNamespace};
    optional string SourceColumn with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Binding Expressions type - 3.1.5.2.1.5.1.4
// **********************************************************************
type BindingExpressionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<BindingExpressionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type BindingExpressionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Expression with XmlEncoding{Name = "ID.Expression", Namespace = XMLARSNamespace};
    optional string Expression with XmlEncoding{Namespace = XMLARSNamespace};
}
// **********************************************************************
// Refresh Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// MergePartitions Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// MergePartitions Request type - 3.1.5.2.1.6.1
// **********************************************************************
type MergePartitionsTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string PartitionID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string TableName with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string PartitionName with XmlEncoding{Namespace = XMLAEngTabNamespace};
    MergePartitionsPartitionsType Partitions with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// MergePartitions Partitions Request type - 3.1.5.2.1.6.1
// **********************************************************************
type MergePartitionsPartitionsType
{
    optional xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional array<MergePartitionsPartitionsRow> row with XmlEncoding{Namespace = XMLARSNamespace};
}

type MergePartitionsPartitionsRow
{
    optional ulong ID with XmlEncoding{Namespace = XMLARSNamespace};
    optional string ID_Table with XmlEncoding{Name = "ID.Table", Namespace = XMLARSNamespace};
    optional string ID_Partition with XmlEncoding{Name = "ID.Partition", Namespace = XMLARSNamespace};
}

// **********************************************************************
// MergePartitions Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// DBCC for Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// DBCC For Tabular Request type - 3.1.5.2.1.7.1
// **********************************************************************
type DBCCForTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string TableName with XmlEncoding{Namespace = XMLAEngTabNamespace};
    optional string PartitionName with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// DBCC for Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// SequencePoint - Start
// **********************************************************************

// **********************************************************************
// SequencePoint Request type - 3.1.5.2.1.8.1
// **********************************************************************
type SequencePointType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// SequencePoint - End
// **********************************************************************

// **********************************************************************
// Upgrade Tabular Metadata - Start
// **********************************************************************

// **********************************************************************
// Upgrade Request type - 3.1.5.2.1.9.1
// **********************************************************************
type UpgradeTabularType
{
    string DatabaseID with XmlEncoding{Namespace = XMLAEngTabNamespace};
}

// **********************************************************************
// Upgrade Tabular Metadata - End
// **********************************************************************

// **********************************************************************
// Response Objects - Start
// **********************************************************************

// **********************************************************************
// AffectedObjects type - 2.2.3.1
// **********************************************************************

type AffectedObjectsType
{
    optional array<xml> Attribute with XmlEncoding{ IsAny = true, Kind = XmlKind.Attribute, Namespace = XMLARSNamespace};
    optional array<AffectedObjectsRootType> root with XmlEncoding{Name = "root", Namespace = XMLARSNamespace};
}

type AffectedObjectsRootType
{
    array<xml> Attribute with XmlEncoding{ IsAny = true, Kind = XmlKind.Attribute, Namespace = XMLARSNamespace};
    xml schema with XmlEncoding{Namespace = XSDNamespace};
    optional (
        [|Attribute[0].Value.ToString() == "Model"|] TMSCHEMA_MODEL_RowType |
        [|Attribute[0].Value.ToString() == "DataSource"|] array<TMSCHEMA_DATA_SOURCES_RowType> |
        [|Attribute[0].Value.ToString() == "Table"|] array<TMSCHEMA_TABLES_RowType> |
        [|Attribute[0].Value.ToString() == "Column"|] array<TMSCHEMA_COLUMNS_RowType> |
        [|Attribute[0].Value.ToString() == "AttributeHierarchy"|] array<TMSCHEMA_ATTRIBUTE_HIERARCHIES_RowType> |
        [|Attribute[0].Value.ToString() == "Partition"|] array<TMSCHEMA_PARTITIONS_RowType> |
        [|Attribute[0].Value.ToString() == "Relationship"|] array<TMSCHEMA_RELATIONSHIPS_RowType> |
        [|Attribute[0].Value.ToString() == "Measure"|] array<TMSCHEMA_MEASURES_RowType> |
        [|Attribute[0].Value.ToString() == "Hierarchy"|] array<TMSCHEMA_HIERARCHIES_RowType> |
        [|Attribute[0].Value.ToString() == "Level"|] array<TMSCHEMA_LEVELS_RowType> |
        [|Attribute[0].Value.ToString() == "Annotation"|] array<TMSCHEMA_ANNOTATIONS_RowType> |
        [|Attribute[0].Value.ToString() == "Kpi"|] array<TMSCHEMA_KPIS_RowType> |
        [|Attribute[0].Value.ToString() == "Culture"|] array<TMSCHEMA_CULTURES_RowType> |
        [|Attribute[0].Value.ToString() == "ObjectTranslation"|] array<TMSCHEMA_OBJECT_TRANSLATIONS_RowType> |
        [|Attribute[0].Value.ToString() == "LinguisticMetadata"|] array<TMSCHEMA_LINGUISTIC_METADATA_RowType> |
        [|Attribute[0].Value.ToString() == "Perspective"|] array<TMSCHEMA_PERSPECTIVES_RowType> |
        [|Attribute[0].Value.ToString() == "PerspectiveTable"|] array<TMSCHEMA_PERSPECTIVE_TABLES_RowType> |
        [|Attribute[0].Value.ToString() == "PerspectiveColumn"|] array<TMSCHEMA_PERSPECTIVE_COLUMNS_RowType> |
        [|Attribute[0].Value.ToString() == "PerspectiveHierarchy"|] array<TMSCHEMA_PERSPECTIVE_HIERARCHIES_RowType> |
        [|Attribute[0].Value.ToString() == "PerspectiveMeasure"|] array<TMSCHEMA_PERSPECTIVE_MEASURES_RowType> |
        [|Attribute[0].Value.ToString() == "Role"|] array<TMSCHEMA_ROLES_RowType> |
        [|Attribute[0].Value.ToString() == "RoleMembership"|] array<TMSCHEMA_ROLE_MEMBERSHIPS_RowType> |
        [|Attribute[0].Value.ToString() == "TablePermission"|] array<TMSCHEMA_TABLE_PERMISSIONS_RowType> |
        [|Attribute[0].Value.ToString() == "Variation"|] array<TMSCHEMA_VARIATIONS_RowType> |
        [|Attribute[0].Value.ToString() == "ExtendedProperty"|] array<TMSCHEMA_EXTENDED_PROPERTIES_RowType> |
        [|Attribute[0].Value.ToString() == "Expression"|] array<TMSCHEMA_EXPRESSIONS_RowType> |
        [|Attribute[0].Value.ToString() == "ColumnPermission"|] array<TMSCHEMA_COLUMN_PERMISSIONS_RowType> |
        [|Attribute[0].Value.ToString() == "DetailRowsDefinition"|] array<TMSCHEMA_DETAIL_ROWS_DEFINITIONS_RowType>
    ) row with XmlEncoding{Namespace = XMLARSNamespace};
}

// **********************************************************************
// Response Objects - End
// **********************************************************************

// **********************************************************************
// Enums - Start
// ********************************************************************** 

pattern DatasourceTypeEnum = enum long
{
    Provider = 1,
    Structured = 2,
    ...
};

pattern ImpersonationModeEnumTabular = enum long
{
    ImpersonateAccount = 2,
    ImpersonateAnonymous = 3,
    ImpersonateCurrentUser = 4,
    ImpersonateServiceAccount = 5,
    ImpersonateUnattendedAccount = 6,
    ...
};

pattern IsolationTypeEnum = enum long
{
    ReadCommitted = 1,
    Snapshot = 2,
    ...
};

pattern TableObjectDataCategoryEnum = enum string
{
    Unknown = "0",
    Regular = "1",
    Time = "2",
    Geography = "3",
    Organization = "4",
    BillOfMaterials = "5",
    Accounts = "6",
    Customers = "7",
    Products = "8",
    Scenario = "9",
    Quantitative = "10",
    Utility = "11",
    Currency = "12",
    Rates = "13",
    Channel = "14",
    Promotion = "15",
    ...
};

pattern ExplicitDataTypeEnum = enum long
{
    Automatic = 1,
    String = 2,
    Int64 = 6,
    Double = 8,
    DateTime = 9,
    Decimal = 10,
    Boolean = 11,
    Binary = 17,
    Unknown = 19,
    ...
};

pattern ColumnObjectDataCategoryEnum = enum string
{
    Invalid = "-1",
    All = "1",
    Regular = "2",
    Image = "3",
    ImageBMP = "4",
    ImageGIF = "5",
    ImageJPG = "6",
    ImagePNG = "7",
    ImageTIFF = "8",
    ImageURL = "9",
    Id = "10",
    RelationToParent = "11",
    Sequence = "12",
    OrgTitle = "13",
    Caption = "14",
    ShortCaption = "15",
    CaptionDescription = "16",
    CaptionAbbreviation = "17",
    WebURL = "18",
    WebHTML = "19",
    WebXMLOrXSL = "20",
    WebmailAlias = "21",
    Address = "22",
    AddressStreet = "23",
    AddressHouse = "24",
    AddressCity = "25",
    AddressStateOrProvince = "26",
    AddressZIP = "27",
    AddressQuarter = "28",
    AddressCountry = "29",
    AddressBuilding = "30",
    AddressRoom = "31",
    AddressFloor = "32",
    AddressFax = "33",
    AddressPhone = "34",
    GeoCentroidX = "35",
    GeoCentroidY = "36",
    GeoCentroidZ = "37",
    GeoBoundaryTop = "38",
    GeoBoundaryLeft = "39",
    GeoBoundaryBottom = "40",
    GeoBoundaryRight = "41",
    GeoBoundaryFront = "42",
    GeoBoundaryRear = "43",
    GeoBoundaryPolygon = "44",
    PhysicalSize = "45",
    PhysicalColor = "46",
    PhysicalWeight = "47",
    PhysicalHeight = "48",
    PhysicalWidth = "49",
    PhysicalDepth = "50",
    PhysicalVolume = "51",
    PhysicalDensity = "52",
    PersonFullName = "53",
    PersonFirstName = "54",
    PersonLastName = "55",
    PersonMiddleName = "56",
    PersonDemographic = "57",
    PersonContact = "58",
    QtyRangeLow = "59",
    QtyRangeHigh = "60",
    FormattingColor = "61",
    FormattingOrder = "62",
    FormattingFont = "63",
    FormattingFontEffects = "64",
    FormattingFontSize = "65",
    FormattingSubtotal = "66",
    Date = "67",
    DateStart = "68",
    DateEnded = "69",
    DateCanceled = "70",
    DateModified = "71",
    DateDuration = "72",
    Version = "73",
    Years = "74",
    Quarters = "75",
    Months = "76",
    Weeks = "77",
    Days = "78",
    Hours = "79",
    Minutes = "80",
    Seconds = "81",
    UndefinedTime = "82",
    OrganizationalUnit = "83",
    BomResource = "84",
    Quantitative = "85",
    Account = "86",
    Customers = "87",
    CustomerGroup = "88",
    CustomerHousehold = "89",
    Product = "90",
    ProductGroup = "91",
    Scenario = "92",
    Utility = "93",
    Person = "94",
    Company = "95",
    CurrencySource = "96",
    CurrencyDestination = "97",
    Channel = "98",
    Representative = "99",
    Promotion = "100",
    Continent = "101",
    Region = "102",
    Country = "103",
    StateOrProvince = "104",
    County = "105",
    City = "106",
    PostalCode = "107",
    Point = "108",
    AccountType = "109",
    AccountName = "110",
    AccountNumber = "111",
    ProjectName = "112",
    ProjectCode = "113",
    ProjectStartDate = "114",
    ProjectEndDate = "115",
    ProjectCompletion = "116",
    CurrencyName = "117",
    CurrencyIsOCode = "118",
    PercentOwnership = "119",
    PercentVoteright = "120",
    Project = "121",
    RateType = "122",
    Rate = "123",
    ProductSKU = "124",
    ProductCategory = "125",
    ProductBrand = "126",
    DeletedFlag = "127",
    ScdStatus = "128",
    ScdEndDate = "129",
    ScdOriginalID = "130",
    ScdStartDate = "131",
    DayOfMonthOrPeriod = "132",
    WeekOfQuarter = "133",
    WeekOfMonthOrPeriod = "134",
    MonthOrPeriodOfQuarter = "135",
    MonthOrPeriodOfYear = "136",
    Trimesters = "137",
    Halfyears = "138",
    Tendays = "139",
    DayOfWeek = "140",
    DayOfTendays = "141",
    DayOfMonth = "142",
    DayOfQuarter = "143",
    DayOfTrimester = "144",
    DayOfHalfyear = "145",
    DayOfYear = "146",
    WeekOfYear = "147",
    TendayOfMonth = "148",
    TendayOfQuarter = "149",
    TendayOfTrimester = "150",
    TendayOfHalfyear = "151",
    TendayOfYear = "152",
    MonthOfTrimester = "153",
    MonthOfQuarter = "154",
    MonthOfHalfyear = "155",
    MonthOfYear = "156",
    TrimesterOfYear = "157",
    QuarterOfHalfyear = "158",
    QuarterOfYear = "159",
    HalfyearOfYear = "160",
    FiscalDate = "161",
    FiscalDayOfWeek = "162",
    FiscalDayOfMonth = "163",
    FiscalDayOfQuarter = "164",
    FiscalDayOfTrimester = "165",
    FiscalDayOfHalfyear = "166",
    FiscalDayOfYear = "167",
    FiscalWeeks = "168",
    FiscalWeekOfYear = "169",
    FiscalWeekOfHalfyear = "170",
    FiscalWeekOfQuarter = "171",
    FiscalWeekOfTrimester = "172",
    FiscalWeekOfMonth = "173",
    FiscalMonths = "174",
    FiscalMonthOfTrimester = "175",
    FiscalMonthOfQuarter = "176",
    FiscalMonthOfHalfyear = "177",
    FiscalMonthOfYear = "178",
    FiscalTrimesters = "179",
    FiscalTrimesterOfYear = "180",
    FiscalQuarters = "181",
    FiscalQuarterOfYear = "182",
    FiscalQuarterOfHalfyear = "183",
    FiscalHalfyears = "184",
    FiscalHalfyearOfYear = "185",
    FiscalYears = "186",
    ReportingDate = "187",
    ReportingDayOfWeek = "188",
    ReportingDayOfMonth = "189",
    ReportingDayOfQuarter = "190",
    ReportingDayOfTrimester = "191",
    ReportingDayOfHalfyear = "192",
    ReportingDayOfYear = "193",
    ReportingWeeks = "194",
    ReportingWeekOfYear = "195",
    ReportingWeekOfHalfyear = "196",
    ReportingWeekOfQuarter = "197",
    ReportingWeekOfTrimester = "198",
    ReportingWeekOfMonth = "199",
    ReportingMonths = "200",
    ReportingMonthOfTrimester = "201",
    ReportingMonthOfQuarter = "202",
    ReportingMonthOfHalfyear = "203",
    ReportingMonthOfYear = "204",
    ReportingTrimesters = "205",
    ReportingTrimesterOfYear = "206",
    ReportingQuarters = "207",
    ReportingQuarterOfYear = "208",
    ReportingQuarterOfHalfyear = "209",
    ReportingHalfyears = "210",
    ReportingHalfyearOfYear = "211",
    ReportingYears = "212",
    ManufacturingDate = "213",
    ManufacturingDayOfWeek = "214",
    ManufacturingDayOfMonth = "215",
    ManufacturingDayOfQuarter = "216",
    ManufacturingDayOfHalfyear = "217",
    ManufacturingDayOfYear = "218",
    ManufacturingWeeks = "219",
    ManufacturingWeekOfYear = "220",
    ManufacturingWeekOfHalfyear = "221",
    ManufacturingWeekOfQuarter = "222",
    ManufacturingWeekOfMonth = "223",
    ManufacturingMonths = "224",
    ManufacturingMonthOfQuarter = "225",
    ManufacturingMonthOfHalfyear = "226",
    ManufacturingMonthOfYear = "227",
    ManufacturingTrimesters = "228",
    ManufacturingTrimesterOfYear = "229",
    ManufacturingQuarters = "230",
    ManufacturingQuarterOfYear = "231",
    ManufacturingQuarterOfHalfyear = "232",
    ManufacturingHalfyears = "233",
    ManufacturingHalfyearOfYear = "234",
    ManufacturingYears = "235",
    WinterSummerSeason = "236",
    IsHoliday = "237",
    IsWeekday = "238",
    IsWorkingDay = "239",
    IsPeakDay = "240",
    ISO8601Date = "241",
    ISO8601DayOfWeek = "242",
    ISO8601DayOfYear = "243",
    ISO8601Weeks = "244",
    ISO8601WeekOfYear = "245",
    ISO8601Years = "246",
    RowNumber = "247",
    ExtendedType = "248",
    ...
};

pattern AlignmentEnumTabular = enum long
{
    Default = 1,
    Left = 2,
    Right = 3,
    Center = 4,
    ...
};

pattern SummarizeByEnum = enum long
{
    Default = 1,
    None = 2,
    Sum = 3,
    Min = 4,
    Max = 5,
    Count = 6,
    Average = 7,
    DistinctCount = 8,
    ...
};

pattern ColumnTypeEnum = enum long
{
    Data = 1,
    Calculated = 2,
    RowNumber = 3,
    CalculatedTableColumn = 4,
    ...
};

pattern EncodingHintEnum = enum long
{
    Default = 0,
    Hash = 1,
    Value = 2,
    ...
};

pattern PartitionTypeEnumTabular = enum long
{
    Query = 1,
    Calculated = 2,
    None = 3,
    M = 4,
    Entity = 5,
    ...
};

pattern PartitionModeEnum = enum long
{
    Import = 0,
    DirectQuery = 1,
    Default = 2,
    Push = 3,
    ...
};

pattern PartitionDataViewEnum = enum long
{
    Full = 0,
    Sample = 1,
    SampleAndFull = 2,
    Default = 3,
    ...
};

pattern RelationshipTypeEnumTabular = enum long
{
    SingleColumn = 1,
    ...
};

pattern CrossFilteringBehaviorEnum = enum long
{
    OneDirection = 1,
    BothDirections = 2,
    Automatic = 3,
    ...
};

pattern JoinOnDateBehaviorEnum = enum long
{
    DateAndTime = 1,
    DatePartOnly = 2,
    ...
};

pattern FromCardinalityEnum = enum long
{
    One = 1,
    Many = 2,
    ...
};

pattern ToCardinalityEnum = enum long
{
    One = 1,
    Many = 2,
    ...
};

pattern SecurityFilteringBehaviorEnum = enum long
{
    OneDirection = 1,
    BothDirections = 2,
    ...
};

pattern HideMembersEnum = enum long
{
    Default = 0,
    HideBlankMembers = 1,
    ...
};

pattern AnnotationObjectTypeEnum = enum
{
    TM_TYPEID_Model = 1,
    TM_TYPEID_DataSource = 2,
    TM_TYPEID_Table = 3,
    TM_TYPEID_Column = 4,
    TM_TYPEID_AttributeHierarchy = 5,
    TM_TYPEID_Partition = 6,
    TM_TYPEID_Relationship = 7,
    TM_TYPEID_Measure = 8,
    TM_TYPEID_Hierarchy = 9,
    TM_TYPEID_Level = 10,
    TM_TYPEID_KPI = 12,
    TM_TYPEID_Culture = 13,
    TM_TYPEID_LinguisticMetadata = 15,
    TM_TYPEID_Perspective = 29,
    TM_TYPEID_PerspectiveTable = 30,
    TM_TYPEID_PerspectiveColumn = 31,
    TM_TYPEID_PerspectiveHierarchy = 32,
    TM_TYPEID_PerspectiveMeasure = 33,
    TM_TYPEID_Role = 34,
    TM_TYPEID_RoleMembership = 35,
    TM_TYPEID_TablePermission = 36,
    TM_TYPEID_Variation = 37,
    TM_TYPEID_Expression = 41,
    TM_TYPEID_ColumnPermission = 42,
    ...
};

pattern ObjectTranslationObjectTypeEnum = enum
{
    TM_TYPEID_Model = 1,
    TM_TYPEID_Table = 3,
    TM_TYPEID_Column = 4,
    TM_TYPEID_Measure = 8,
    TM_TYPEID_Hierarchy = 9,
    TM_TYPEID_Level = 10,
    TM_TYPEID_KPI = 12,
    TM_TYPEID_Perspective = 29,
    TM_TYPEID_Role = 34,
    TM_TYPEID_Variation = 37,
    TM_TYPEID_Expression = 41,
    ...
};

pattern ObjectTranslationPropertyEnum = enum long
{
    Invalid = -1,
    Caption = 1,
    Description = 2,
    DisplayFolder = 3,
    ...
};

pattern ModelPermissionEnum = enum long
{
    None = 1,
    Read = 2,
    Description = 3,
    Refresh = 4,
    Administrator = 5,
    ...
};

pattern MemberTypeEnum = enum long
{
    Auto = 1,
    User = 2,
    Group = 3,
    ...
};

pattern MetadataPermissionEnum = enum long
{
    Default = 0,
    None = 1,
    Read = 2,
    ...
};

pattern ExtendedPropertyObjectTypeEnum = enum
{
    TM_TYPEID_Model = 1,
    TM_TYPEID_DataSource = 2,
    TM_TYPEID_Table = 3,
    TM_TYPEID_Column = 4,
    TM_TYPEID_AttributeHierarchy = 5,
    TM_TYPEID_Partition = 6,
    TM_TYPEID_Relationship = 7,
    TM_TYPEID_Measure = 8,
    TM_TYPEID_Hierarchy = 9,
    TM_TYPEID_Level = 10,
    TM_TYPEID_KPI = 12,
    TM_TYPEID_Culture = 13,
    TM_TYPEID_LinguisticMetadata = 15,
    TM_TYPEID_Perspective = 29,
    TM_TYPEID_PerspectiveTable = 30,
    TM_TYPEID_PerspectiveColumn = 31,
    TM_TYPEID_PerspectiveHierarchy = 32,
    TM_TYPEID_PerspectiveMeasure = 33,
    TM_TYPEID_Role = 34,
    TM_TYPEID_RoleMembership = 35,
    TM_TYPEID_TablePermission = 36,
    TM_TYPEID_Variation = 37,
    TM_TYPEID_Expression = 41,
    TM_TYPEID_ColumnPermission = 42,
    ...
};

pattern ExtendedPropertyTypeEnum = enum long
{
    String = 0,
    Json = 1,
    ...
};

pattern ExpressionKindEnum = enum long
{
    M = 0,
    ...
};

pattern DetailRowsDefinitionObjectTypeEnum = enum
{
    Measure = 0,
    Table = 1,
    ...
};

pattern ModelModeEnum = enum long
{
    Import = 0,
    DirectQuery = 1,
    ...
};

pattern RefreshTypeEnum = enum long
{
    Full = 1,
    ClearValues = 2,
    Calculate = 3,
    DataOnly = 4,
    Automatic = 5,
    Add = 6,
    ...
};

// **********************************************************************
// Enums - End
// ********************************************************************** 

// **********************************************************************
// XMLA-Based Tabular Metadata Commands - End
// **********************************************************************

// **********************************************************************
// JSON-Based Tabular Metadata Commands - Start
// **********************************************************************

// **********************************************************************
// JSON commands type for element statement
// **********************************************************************
type JsonCommandType
{
    optional NameBasedPathToParentObject create;
    optional NameBasedPathToObject createOrReplace;
    optional NameBasedPathToObject alter;
    optional objectPath @delete;
    optional refreshCommandContent refresh;
    optional SequenceCommandContent sequence;
    optional backupCommandContent backup;
    optional restoreCommandContent restore;
    optional attachCommandContent attach;
    optional detachCommandContent detach;
    optional synchronizeCommandContent synchronize;
    optional mergePartitionsCommandContent mergePartitions;
}

    /// <summary>
    /// The base class of the SSAST JSON objects. 
    /// </summary>
    type SSASTJSONObject
    {
        // The name of the object.
        optional string name;

        // Annotations of table object.
        optional array<@annotation> annotations;

        // The extended properties of the object.
        optional array<stringExtendedProperty | jsonExtendedProperty> extendedProperties;
    }

    // The name based path, starting from the root database object and then other objects.
    // Each object is a feild in this class, value is of string type to contain its name.
    type nameBasedPath
    {
        // The name of the database
        optional string database;

        // The name of the model
        optional string model;

        // The name of the table
        optional string table;

        // The name of the data source
        optional string dataSource;

        // The name of the column
        optional string column;

        // The name of the partition
        optional string partition;

        // The name of the measure
        optional string measure;

        // The name of the hierarchy
        optional string hierarchy;

        // The name of the level
        optional string level;

        optional string @annotation;

        optional string relationship;

        optional string kpi;

        optional string culture;

        optional string translations;

        optional string linguisticMetadata;

        optional string perspective;

        optional string perspectiveTable;

        optional string perspectiveColumn;

        optional string perspectiveHierarchy;

        optional string perspectiveMeasure;

        optional string @role;

        optional string roleMembership;

        optional string tablePermission;

        optional string variation;

        optional string extendedProperty;

        optional string expression;

        optional string columnPermission;

        optional string detailRowsDefinition;
    }

    /// <summary>
    /// The base datasource JSON object. 
    /// </summary>
    type dataSource : SSASTJSONObject
    {
        // The description of the object.
        optional array<string> description;

        // The type of the datasource.
        optional dataSourceType @type where ValidationCheckEnumValue(value == nothing || InRange<dataSourceType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "dataSource", "type", "provider, structured", value);
    }

    /// <summary>
    /// Provider Data Source 
    /// </summary>
    type providerDataSource : dataSource
    {
        // A string that is used to open the connection to a provider data source.
        optional string connectionString;

        // What type of the credentials to use for impersonation when connecting to a provider data source.
        optional impersonationMode impersonationMode where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<impersonationMode>(value as string), null, false, ReferenceType.Type, "MSSSAS", "providerDataSource", "impersonationMode", "impersonationMode", "MS-SSAS");
  
        // The user account that is used for impersonation when connecting to a provider data source.
        optional string account;

        // The password that is used to impersonate the specified user account when connecting to a 
        // provider data source.
        optional string password;

        // The maximum number of connections to be opened concurrently to the data source.
        optional int maxConnections;

        // The kind of isolation that is used when executing commands against the provider data source. 
        optional isolation isolation where ValidationCheckEnumValue(value == nothing || InRange<isolation>(value as string), null, false, ReferenceType.Type, "MSSSAS", "providerDataSource", "isolation", "readCommitted, snapshot", value);

        // The timeout in seconds for commands executed against a provider data source.
        optional int timeout;

        // An optional string that identifies the name of the managed data provider for 
        // the provider data source.
        optional string provider;
    }

    /// <summary>
    /// Structured Data Source
    /// </summary>
    type structuredDataSource : dataSource
    {
        // The maximum number of connections to be opened concurrently to the data source.
        optional int maxConnections;

        // The information that identifies the location of the structured data source. 
        // This is a property bag formatted as a JSON string that allows details about the 
        // connection to the data source to be passed. Compatibility level 1400 or higher is required.
        // <10> Section 2.2.5.2: SQL Server 2016 Analysis Services does not support the ConnectionDetails property.
        optional string connectionDetails;

        // The information that defines possible additional settings for the structured data source. 
        // This is a property bag formatted as a JSON string. Compatibility level 1400 or higher is required.
        // <11> Section 2.2.5.2: SQL Server 2016 Analysis Services does not support the Options property.
        optional string Options;

        // The credential information that authenticates against the structured data source. 
        // This is a property bag formatted as a JSON string. Compatibility level 1400 or higher is required.
        // <12> Section 2.2.5.2: SQL Server 2016 Analysis Services does not support the Credential property.
        optional string Credential;

        // A string that can contain additional information, such as content type, content shape, and format, 
        // about the structure and/or metadata of the structured data source. 
        // The data source is then represented by the ConnectionDetails property.
        // Compatibility level 1400 or higher is required.
        // <13> Section 2.2.5.2: SQL Server 2016 Analysis Services does not support the ContextExpression property.
        optional array<string> ContextExpression;
    }

    /// <summary>
    /// Database object of the Tabular Object Model for JSON
    /// </summary>
    type DatabaseJson : SSASTJSONObject
    {
        // A reference to the database object.
        optional string id;

        // The description of the database object.
        optional array<string> description;

        // The compatibility level of the database object.
        optional int compatibilityLevel;

        // The readWriteMode of the database object.
        optional string readWriteMode;

        // The child model object of the database object.
        optional ModelJson model;
    }

    /// <summary>
    /// Model object of the Tabular Object Model for JSON
    /// </summary>
    type ModelJson : SSASTJSONObject
    {
        // The description of the model object.
        optional array<string> description;

        // The location on disk to place the model.
        // <2> Section 2.2.5.1: Microsoft implementations do not support the StorageLocation property.
        optional string storageLocation;

        // The default method for making data available in the partition.
        optional defaultMode defaultMode where ValidationCheckEnumValue(value == nothing || InRange<defaultMode>(value as string), null, false, ReferenceType.Type, "MSSSAS", "model", "defaultMode", "import, directQuery, default", value);

        // Determines which partitions are to be selected to run queries against the model. 
        optional string defaultDataView;

        // The culture name to use for formatting.
        optional string culture;

        // The collation sequence.
        optional string collation;

        // The data access options of the model object.
        // Refer to TD - 2.2.5.1, <4> : SQL Server 2016 Analysis Services does not support
        // the DataAccessOptions property.
        optional dataAccessOptionsEnum dataAccessOptions where ValidationCheckEnumValue(value == nothing || InRange<dataAccessOptionsEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "model", "dataAccessOptions", "fastCombine, legacyRedirects, returnErrorValuesAsNull", value);

        // The default measure of the Model object. 
        // TD - 2.2.5.1, <5> : SQL Server 2016 does not support the DefaultMeasureID property.
        optional defaultMeasure defaultMeasure;

        // tables
        optional array<TableJson> tables;

        // relationships

        optional array<providerDataSource | structuredDataSource> dataSources;

        // perspectives
        optional array<perspective> perspectives;

        // cultures
        optional array<culture> cultures;

        // roles
        optional array<@role> roles;

        // expressions
        optional array<expresssion> expressions;
    }

    /// <summary>
    /// An name-based reference to the default measure of the Model object.
    /// Compatibility level 1400 or higher is required.
    /// </summary>
    type defaultMeasure
    {
        // The table name of the default measure
        optional string table;

        // The measure name of the default measure
        optional string measure;
    }

    /// <summary>
    /// The JSON class definition for the table object.
    /// </summary>
    type TableJson : SSASTJSONObject
    {
        // The type of data in the table.
        optional dataCategory dataCategory where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<dataCategory>(value as string), null, false, ReferenceType.Type, "MSSSAS", "table", "dataCategory", "dataCategory", "MS-SSAS");

        // The description of the table object.
        optional array<string> description;

        // The value that indicates whether the object body is visible to client applications.
        optional bool isHidden;

        // <14> Section 2.2.5.3: SQL Server 2016 does not support the ShowAsVariationsOnly property.
        // The value that indicates whether the object body only shows as variations.
        optional bool showAsVariationsOnly;

        // A Boolean that indicates whether the table is to be hidden for all clients.
        // <15> Section 2.2.5.3: SQL Server 2016 does not support the IsPrivate property.
        optional bool isPrivate;

        // <16> Section 2.2.5.3: SQL Server 2016 does not support the DefaultDetailRowsDefinitionID property.
        // An Name-based reference to a DetailRowsDefinition object. This property defines the default DAX expression to apply when drilling through to the detail rows for measures in this table.
        //Compatibility level 1400 or higher is required.
        optional detailRowsDefinition defaultDetailRowsDefinition;

        // Partitions of the table
        optional array<PartitionJson> partitions;

        // Columns of the table
        optional array<ColumnJsonPattern> columns;

        // Measures of the table
        optional array<measure> measures;

        // hierarchies
        optional array<hierarchy> hierarchies;
    }

    pattern ColumnJsonPattern = DataColumnJson | CalculatedTableColumnJson | CalculatedColumnJson;

    /// <summary>
    /// The DetailRowsDefinition object represents an unnamed table expression in DAX. 
    /// It is a child of a Measure or a Table object and requires compatibility level 1400 or higher.
    /// </summary>
    type detailRowsDefinition
    {
        // The DAX detail rows expression for a table type.
        optional array<string> expression;
    }

    /// <summary>
    /// The JSON column base class
    /// </summary>
    type ColumnJson : SSASTJSONObject
    {
        // The user-specified data type to be enforced on the contents of the column.
        optional dataTypeOfDataColumn dataType where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<dataTypeOfDataColumn>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "dataType", "dataType", "MS-SSAS");

        // The data category of the column
        optional dataCategoryOfColumn dataCategory where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<dataCategoryOfColumn>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "dataCategory", "dataCategory", "MS-SSAS");

        // The description of data column
        optional string description;

        // Whether the column is Hidden
        optional bool isHidden;

        // A Boolean that indicates whether the column can contain duplicate values. 
        optional bool isUnique;

        // A Boolean that indicates whether the column is a key of the table.
        optional bool isKey;

        // A Boolean that indicates whether null values are allowed in the column.
        optional bool isNullable;

        // Specifies the text alignment of the column in report visualizations. 
        optional alignmentColumn alignment where ValidationCheckEnumValue(value == nothing || InRange<alignmentColumn>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "alignment", "default, left, right, center", value);

        // A positive value indicates participation in the ordered set of Columns in the DefaultDetails collection of the Table.
        optional int tableDetailPosition;

        // A Boolean that indicates whether this column is included in the DisplayKey element in CSDL.
        optional bool isDefaultLabel;

        // A Boolean that indicates whether this column is returned as the DefaultImage property in CSDL.
        optional bool isDefaultImage;

        // A value that indicates the default function, if any, used to aggregate this field.
        optional summarizeByColumn summarizeBy where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<summarizeByColumn>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "summarizeBy", "summarizeBy", "MS-SSAS");

        // The type of Column.
        optional typeColumn @type where ValidationCheckEnumValue(value == nothing || InRange<typeColumn>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "type", "data, calculated, rowNumber, calculatedTableColumn", value);

        // A string that specifies the format of the column contents.
        optional string formatString;

        // A Boolean that indicates whether the column can be excluded from usage in Multidimensional Expressions (MDX) query tools.
        optional bool isAvailableInMdx;

        // A Boolean that indicates the grouping of rows.
        optional bool keepUniqueRows;

        // Indicates the visual position of the column, defined as a relative ordering rather than a strict ordering (example: 10, 20, 40, 50). 
        optional int displayOrdinal;

        // The original data type of the column as defined in the language of the data source.
        optional string sourceProviderType;

        // Defines the display folder in which the column is displayed by the client applications.
        optional string displayFolder;

        //// The encoding mechanism that is used for the column.
        //// <18> Section 2.2.5.4: SQL Server 2016 does not support the EncodingHint property.
        optional encodingMechanism encodingHint where ValidationCheckEnumValue(value == nothing || InRange<encodingMechanism>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "encodingHint", "default, hash, value", value);
    }

    /// <summary>
    /// Data column
    /// </summary>
    type DataColumnJson : ColumnJson
    {
        // The name of the column from which data is retrieved.
        optional string sourceColumn;

        // This feild is a TDI for SQL Server 2016. 
        //// Indicates that the column defining this property is to be sorted by the values of the column referenced by this property
        optional string sortByColumn;

        // variations
        optional array<variation> variations;
    }

    type CalculatedTableColumnJson : ColumnJson
    {
        // A Boolean that indicates whether the name of the column is inferred or explicit.
        optional bool isNameInferred;

        // A Boolean that indicates whether the data type is inferred or explicit.
        optional bool isDataTypeInferred;

        // The name of the column in the calculated table expression that this column represents.
        optional string sourceColumn;

        // This feild is a TDI for SQL Server 2016. 
        // Indicates that the column defining this property is to be sorted by the values of the column referenced by this property
        optional string sortByColumn;

        // If the calculated table expression returns a column whose lineage can be determined, this property indicates the table from which the values are computed.
        optional string columnOriginTable;

        // If the calculated table expression returns a column whose lineage can be determined, this property indicates the column from which the values are computed.
        optional string columnOriginColumn;
    }

    /// <summary>
    /// CalculatedColumn JSON object of Tabular Object Model (TOM)
    /// </summary>
    type CalculatedColumnJson : ColumnJson
    {
        // A Boolean that indicates whether the data type is inferred or explicit.
        optional bool isDataTypeInferred;

        // The Data Analysis Expressions (DAX) expression that is evaluated for the calculated column.
        optional array<string> expression;

        // This feild is a TDI for SQL Server 2016. 
        // Indicates that the column defining this property is to be sorted by the values of the column referenced by this property
        optional string sortByColumn;

        // variations
        optional array<variation> variations;
    }

    /// <summary>
    /// The PartitionJson object represents a partition in a table. 
    /// It is a child of a Table object. The partitions in a table define the data from 
    /// external data sources that become available when the table is queried.
    /// </summary>
    type PartitionJson : SSASTJSONObject
    {
        // The description of the partition
        optional array<string> description;

        // Defines the method for making data available in the partition.
        optional defaultMode mode where ValidationCheckEnumValue(value == nothing || InRange<defaultMode>(value as string), null, false, ReferenceType.Type, "MSSSAS", "partition", "defaultMode", "import, directQuery, default", value);

        // The value that determines which partitions are selected for use 
        // in queries that are run against the Model object.
        optional defaultDataView dataView where ValidationCheckEnumValue(value == nothing || InRange<defaultDataView>(value as string), null, false, ReferenceType.Type, "MSSSAS", "partition", "dataView", "full, sample, sampleAndFull, default", value);

        // A Boolean that indicates whether a calculated partition is allowed to contain 
        // data that is not affected by a RefreshCalculate command when only data changes have been made.
        // Compatibility level 1400 or higher is required.
        // <21> Section 2.2.5.6: SQL Server 2016 Analysis Services does not support the RetainDataTillForceCalculate field.
        optional bool RetainDataTillForceCalculate;

        // The source of the partition.
        optional PartitionSourceJsonPattern source;
    }

    pattern PartitionSourceJsonPattern = QueryPartitionSource | CalculatedOrMPartitionSource | EntityPartitionSource;

    /// <summary>
    /// The base class of JSON partition source
    /// </summary>
    type PartitionSourceJson
    {
        // The type of partition.
        optional partitionType @type where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<partitionType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "source", "type", "type", "MS-SSAS");
    }

    /// <summary>
    /// A source object of type query has a dataSource reference and a query property.
    /// </summary>
    type QueryPartitionSource : PartitionSourceJson
    {
        // The text of the query to be executed when populating data into the partition.
        optional array<string> query;

        // An namd-based reference to the data source object.
        optional string dataSource;
    }

    /// <summary>
    /// A source object of type query has a dataSource reference and a query property.
    /// </summary>
    type QueryPartitionSourceRefresh : PartitionSourceJson
    {
        // The text of the query to be executed when populating data into the partition.
        optional string query;

        // An namd-based reference to the data source object.
        optional string dataSource;
    }

    /// <summary>
    /// A source object of type calculated or M has an expression property.
    /// </summary>
    type CalculatedOrMPartitionSource : PartitionSourceJson
    {
        // The text of the expression to be executed when populating data into the partition.
        optional array<string> expression;
    }

    /// <summary>
    /// The source object of type entity has a dataSource reference
    /// </summary>
    type EntityPartitionSource : PartitionSourceJson
    {
        // The text of the entity Name to reference the data source.
        optional array<string> entityName;
    }

    /// <summary>
    /// The Measure object represents a value that is calculated based on an expression. 
    /// It is a child of a Table object.
    /// </summary>
    type measure : SSASTJSONObject
    {
        // The description of the measure
        optional array<string> description;

        // The DAX expression that is evaluated for the calculated measure.
        optional array<string> expression;

        // A string that specifies the format of the measure contents.
        optional string formatString;

        // A Boolean that indicates whether the measure is treated as hidden by client visualization tools.
        optional bool isHidden;

        // A Boolean that indicates whether the measure is an implicit measure that is automatically 
        // created by client tools to aggregate a field.
        optional bool isSimpleMeasure;

        // A string that defines the display folder in which the measure is displayed by the client applications.
        optional string displayFolder;

        // kpi
        optional kpi kpi;

        // <16> Section 2.2.5.3: SQL Server 2016 does not support the DefaultDetailRowsDefinitionID property.
        // An Name-based reference to a DetailRowsDefinition object. This property defines the DAX expression to apply 
        // when drilling through to the detail rows for measures in this table.
        //Compatibility level 1400 or higher is required.
        optional detailRowsDefinition defaultDetailRowsDefinition;
    }

    /// <summary>
    /// The Hierarchy object represents a collection of levels that provide a logical hierarchical drilldown path for client applications.
    /// </summary>
    type hierarchy : SSASTJSONObject
    {
        // The description of the hierarchy object
        optional array<string> description;

        // A Boolean that indicates whether the measure is treated as hidden by client visualization tools.
        optional bool isHidden;

        // A string that defines the display folder in which the hierarchy is displayed by the client applications.
        optional string displayFolder;

        // A value that allows the members of a ragged/unbalanced hierarchy to be hidden. 
        // Compatibility level 1400 or higher is required.
        optional hideMembersWay hideMembers where ValidationCheckEnumValue(value == nothing || InRange<hideMembersWay>(value as string), null, false, ReferenceType.Type, "MSSSAS", "hierarchy", "hideMembers", "default, hideBlankMembers", value);

        // The levels that belong to the hierarchy.
        optional array<level> levels;
    }

    /// <summary>
    /// The Level object represents a level in a hierarchy that provides 
    /// a logical hierarchical drilldown path for client applications.
    /// </summary>
    type level : SSASTJSONObject
    {
        // The position of the level within the hierarchy. 
        optional int ordinal;

        // The description of the level object
        optional array<string> description;

        // A name referene to a Column object.
        optional string column;
    }

    /// <summary>
    /// Annotation object of Tabular Object Model (TOM) for the JSON interface
    /// </summary>
    type @annotation
    {
        // The name of the object.
        optional string name;

        // The Annotation object represents application-specific name/value pairs for the parent object.
        optional array<string> @value;
    }

    /// <summary>
    /// The KPI object represents a key performance indicator (KPI) object. It is a child of a Measure object.
    /// </summary>
    type kpi : SSASTJSONObject
    {
        // The description of the kpi object.
        optional array<string> description;

        // The description of the target value of the KPI.
        optional array<string> targetDescription;

        // An expression that evaluates to a number and indicates the goal for the KPI.
        optional array<string> targetExpression;

        // The format string to be used when presenting the target value for the KPI.
        optional string targetFormatString;

        // The recommended graphic to represent the status of this KPI.
        optional string statusGraphic;

        // A description of the Status value for the KPI.
        optional array<string> statusDescription;

        // An expression that is used to calculate the status of the KPI.
        optional array<string> statusExpression;

        // A string that identifies the graphic to show for the trend of the KPI.
        optional string trendGraphic;

        // A description of the trend value of the KPI.
        optional array<string> trendDescription;

        // An expression representing the trend of the KPI.
        optional array<string> trendExpression;
    }

    /// <summary>
    /// The Culture object represents a user culture. It is a child of a Model object. 
    /// The Culture object is used for translating strings and formatting values.
    /// </summary>
    type culture : SSASTJSONObject
    {
        // An Name-based reference to a LinguisticMetadata object.
        optional linguisticMetadata linguisticMetadata;

        // The translations of the objects.
        optional translations translations;
    }

    /// <summary>
    /// The LinguisticMetadata object is used to hold synonym information for the Tabular model. 
    /// It is a child of a Culture object.
    /// </summary>
    type linguisticMetadata : SSASTJSONObject
    {
        // A string that contains the natural language synonyms.
        optional array<string> content;
    }

    /// <summary>
    /// The ObjectTranslation object represents the translations of metadata properties for the Culture 
    /// parent object. 
    /// </summary>
    type translations
    {
        // The translation for the model object.
        optional modelTranslation model;
    }

    /// <summary>
    /// The translation object base
    /// </summary>
    type translation
    {
        // The name of the model
        optional string name;

        // The translation for the name of the model.
        optional string translatedCaption;

        // The translation for the description of the model.
        optional array<string> translatedDescription;
    }

    /// <summary>
    /// The translation object of model
    /// </summary>
    type modelTranslation : translation
    {
        // The translation for the tables.
        optional array<tableTranslation> tables;

        // The translation for the perspectives.
        optional array<perspectiveTranslation> perspectives;

        // The translation for roles.
        optional array<roleTranslation> roles;

        // The translation for expression.
        optional array<expressionTranslation> expressions;
    }

    /// <summary>
    /// The translation object of table
    /// </summary>
    type tableTranslation : translation
    {
        // The translation for the columns.
        optional array<columnTranslation> columns;

        // The translation for the columns.
        optional array<measureTranslation> measures;

        // The translation of hierarchies
        optional array<hierarchyTranslation> hierarchies;
    }

    /// <summary>
    /// The column object of column
    /// </summary>
    type columnTranslation : translation
    {   
        // The translation for the display folder name.
        optional string translatedDisplayFolder;

        // The translation of variation objects
        optional array<variationTranslation> variations;
    }

    /// <summary>
    /// The translation object of variation
    /// </summary>
    type variationTranslation : translation
    {}

    /// <summary>
    /// The translation object of measure
    /// </summary>
    type measureTranslation : translation
    {
        // The translation for the display folder name.
        optional string translatedDisplayFolder;

        // The translation of kpi
        optional kpiTranslation kpi;
    }

    /// <summary>
    /// The translation of KPI
    /// </summary>
    type kpiTranslation
    {
        // The translation for the description.
        optional array<string> translatedDescription;
    }

    /// <summary>
    /// The translation of hierarchy
    /// </summary>
    type hierarchyTranslation : translation
    {
        // The translation for the display folder name.
        optional string translatedDisplayFolder;

        // The translation for the levels.
        optional array<levelTranslation> levels;
    }

    /// <summary>
    /// The translation of level
    /// </summary>
    type levelTranslation : translation
    {}

    /// <summary>
    /// The translation of perspective
    /// </summary>
    type perspectiveTranslation : translation
    {}

    /// <summary>
    /// The translation of role
    /// </summary>
    type roleTranslation : translation
    {}

    /// <summary>
    /// The translation of expression
    /// </summary>
    type expressionTranslation : translation
    {}

    /// <summary>
    /// The Perspective object defines a logical view over the model and is a child of a Model object.
    /// </summary>
    type perspective : SSASTJSONObject
    {
        // The description of the perspective object.
        optional array<string> description;

        // The tables in the perspective
        optional array<perspectiveTable> tables;
    }

    /// <summary>
    /// The PerspectiveTable object includes a Table object into the Perspective object. 
    /// It is a child of a Perspective object. 
    /// </summary>
    type perspectiveTable : SSASTJSONObject
    {
        // A Boolean that indicates whether all Column, Hierarchy, 
        // and Measure objects in the Table object are automatically added to the perspective.
        optional bool includeAll;

        // columns
        optional array<perspectiveColumn> columns;

        // measures
        optional array<perspectiveMeasure> measures;

        // hierarchies
        optional array<perspectiveHierarchy> hierarchies;
    }

    /// <summary>
    /// The PerspectiveColumn object includes a Column object of a Table object 
    /// into the Perspective object. It is a child of a PerspectiveTable object.
    /// </summary>
    type perspectiveColumn : SSASTJSONObject
    {}

    /// <summary>
    /// The PerspectiveHierarchy object includes a Hierarchy object of a Table object 
    /// into the Perspective object. It is a child of a PerspectiveTable object.
    /// </summary>
    type perspectiveHierarchy : SSASTJSONObject
    {}

    /// <summary>
    /// The PerspectiveMeasure object includes a Measure object of a Table object into 
    /// the Perspective object. It is a child of a PerspectiveTable object.
    /// </summary>
    type perspectiveMeasure : SSASTJSONObject
    {}

    /// <summary>
    /// The Role object defines a set of user principals for whom security rules are applied. 
    /// It is a child of a Model object.
    /// </summary>
    type @role : SSASTJSONObject
    {
        // The description of the kpi object.
        optional array<string> description;

        // The level of access for this role. 
        optional modelPermissionLevel modelPermission where ValidationCheckEnumValueTooManyItems(value == nothing || InRange<modelPermissionLevel>(value as string), null, false, ReferenceType.Type, "MSSSAS", "role", "modelPermission", "modelPermission", "MS-SSAS");

        // Members of the role
        optional array<windowsModelRoleMember | externalModelRoleMember> members;

        // tablePermissions
        optional array<tablePermission> tablePermissions;
    }

    /// <summary>
    /// The RoleMembership object defines a user principal that belongs to the Role object. 
    /// It is a child of a Role object.
    /// Specifically for Windows role member.
    /// </summary>
    type roleMembership : SSASTJSONObject
    {
        // The security name that identifies the user or group of the member.
        optional string memberName;

        // A string that uniquely identifies the member.
        optional string memberId;
    }

    /// <summary>
    /// The RoleMembership of Windows model role member.
    /// </summary>
    type windowsModelRoleMember : roleMembership
    {}

    /// <summary>
    /// The RoleMembership of external model role member.
    /// </summary>
    type externalModelRoleMember : roleMembership
    {
        // A string that defines the identity provider that MUST be used for authentication of a user.
        optional string identityProvider;

        // Indicates whether the particular member of a security role is an individual user or a group of users, 
        // or whether the member is automatically detected.
        optional memberTypeEnum memberType where ValidationCheckEnumValue(value == nothing || InRange<memberTypeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "column", "memberType", "auto, user, group", value);
    }

    /// <summary>
    /// The TablePermission object defines the security rules of the Role object on the Table object. 
    /// It is a child of a Role object.
    /// </summary>
    type tablePermission : SSASTJSONObject
    {
        // The DAX expression that filters the rows in the table when this security role is in effect.
        optional array<string> filterExpression;

        // A value that establishes the permission level that is granted to a user in a particular role 
        // in accessing a table's metadata and the data it defines.
        // <32> SQL Server 2016 Analysis Services does not support the MetadataPermission property.
        optional metadataPermissionType metadataPermission;

        // The security rules of the Role object on the Column object
        optional columnPermission columnPermissions;
    }

    /// <summary>
    /// The ColumnPermission object defines the security rules of the Role object on the Column object. It is a child 
    /// of a TablePermission object and requires compatibility level 1400 or higher.
    /// </summary>
    type columnPermission : SSASTJSONObject
    {
        // A value that establishes the permission level that is granted to a user
        // in a particular role in accessing a column's metadata and the data it defines.
        optional metadataPermissionType metadataPermission where ValidationCheckEnumValue(value == nothing || InRange<metadataPermissionType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "tablePermissions", "metadataPermission", "default, node, read", value);
    }

    /// <summary>
    /// The variation object defines the references that are used in the variations of a column. 
    /// variation is a child of a Column object and requires compatibility level 1400 or higher.
    /// </summary>
    type variation : SSASTJSONObject
    {
        // The description of the kpi object.
        optional array<string> description;

        // A Boolean that indicates whether this Variation object is the column's default variation.
        optional bool isDefault;

        // An Name-based reference to a Relationship object.
        optional string relationship;

        // The Name-based reference to the default hierarchy object.
        optional defaultHierarchy defaultHierarchy;

        // The Name-based reference to a column object.
        optional defaultColumn defaultColumn;
    }

    /// <summary>
    /// The ExtendedProperty object is a child object of a logical metadata object in the Tabular model. 
    /// ExtendedProperty objects represent one or more application-specific name/value pairs for 
    /// the parent object. The Analysis Services server does not interpret the ExtendedProperty objects.
    /// An ExtendedProperty object requires compatibility level 1400 or higher.
    /// </summary>
    type extendedProperty 
    {
        // The name of the extended property
        optional string name;

        // This value provides information about the format of the value.
        optional extendedPropertyType @type where ValidationCheckEnumValue(value == nothing || InRange<extendedPropertyType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "extendedProperties", "type", "string, json", value);
    }

    /// <summary>
    /// String extended property.
    /// </summary>
    type stringExtendedProperty : extendedProperty
    {
        // The value of ExtendedProperty.
        optional array<string> @value;
    }

    /// <summary>
    /// JSON extended property.
    /// </summary>
    type jsonExtendedProperty : extendedProperty
    {
        // The value of ExtendedProperty.
        optional @value @value;
    }

    /// <summary>
    /// The JSON object of the value of the property.
    /// </summary>
    type @value
    {}

    /// <summary>
    /// The Name-based reference to a hierarchy object.
    /// </summary>
    type defaultHierarchy
    {
        // The Name-based reference to a table containing the hierarchy.
        optional string table;

        // The name reference to a hierarchy.
        optional string hierarchy;
    }

    /// <summary>
    /// The Name-based reference to a column object.
    /// </summary>
    type defaultColumn
    {
        // The Name-based reference to a table containing the column.
        optional string table;

        // The name reference to a column.
        optional string column;
    }

    /// <summary>
    /// The Expression object represents a named expression that can be used by one or more partitions. 
    /// It is a child of a Model object and requires compatibility level 1400 or higher.
    /// </summary>
    type expresssion : SSASTJSONObject
    {
        // The description of the 
        optional array<string> description;

        // The kind of the expression. 
        optional expressionKind kind where ValidationCheckEnumValue(value == nothing || InRange<expressionKind>(value as string), null, false, ReferenceType.Type, "MSSSAS", "expresssion", "kind", "m", value);
    }

    /// <summary>
    /// The Relationship object represents a logical relationship between two Table objects.
    /// </summary>
    type relationship : SSASTJSONObject
    {
        // The description of the relationship
        optional array<string> description;

        // The kind of the expression. 
        optional bool isActive;

        // The type of Relationship.
        optional relationshipType @type where ValidationCheckEnumValue(value == nothing || InRange<relationshipType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "relationship", "type", "singleColumn", value);

        // Indicates how relationships influence filtering of data.
        optional crossFilteringBehaviorEnum crossFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<crossFilteringBehaviorEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "relationship", "crossFilteringBehavior", "oneDirection, bothDirections, automatic", value);

        // When joining two date time columns, indicates whether to join on date and time parts or on date part only
        optional joinOnDateBehaviorEnum joinOnDateBehavior where ValidationCheckEnumValue(value == nothing || InRange<joinOnDateBehaviorEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "relationship", "joinOnDateBehavior", "dateAndTime, datePartOnly", value);

        // Unused;reserved for future use.
        optional bool relyOnReferentialIntegrity;

        optional string fromTable;

        optional string fromColumn;

        optional cardinality fromCardinality where ValidationCheckEnumValue((value == nothing || InRange<cardinality>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "relationship", "fromCardinality", "one, many", value);

        optional string toTable;

        optional string toColumn;

        optional cardinality toCardinality where ValidationCheckEnumValue((value == nothing || InRange<cardinality>(value as string)), null, false, ReferenceType.Type, "MSSSAS", "relationship", "toCardinality", "one, many", value);

        // Indicates how relationships influence filtering of data when evaluating row-level security expressions.
        optional securityFilteringBehaviorEnum securityFilteringBehavior where ValidationCheckEnumValue(value == nothing || InRange<securityFilteringBehaviorEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "relationship", "securityFilteringBehavior", "oneDirection, bothDirections", value);
    }

    /// <summary>
    /// The Restore request JSON schema C# class
    /// </summary>
    type RestoreJson
    {
        // The name of the database object to be restored.
        optional string database;

        // The backup file name/path.
        optional string file;

        // The password to use to decrypt the backup file.
        optional string password;

        // Storage location for the restored database. 
        optional string dbStorageLocation;

        // A Boolean that, when true, indicates that a backup file that already exists will be overwritten;otherwise false.
        optional bool allowOverwrite;

        // Access modes allowed to the database.
        optional readWriteModeEnum readWriteMode where ValidationCheckEnumValue(value == nothing || InRange<readWriteModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "restore", "readWriteMode", "readWrite, readOnly, readOnlyExclusive", value);

        // The action to apply to Role objects during a database restore operation: copyAll (default value), skipMembership, ignoreSecurity.
        optional securityType security where ValidationCheckEnumValue(value == nothing || InRange<securityType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "restore", "security", "copyAll, skipMembership, ignoreSecurity", value);
    }

    // A JSON property bag that contains three Boolean properties.
    // Compatibility level 1400 or higher is required.
    type dataAccessOptions
    {
        // A Boolean that indicates the ability to override privacy levels to share data across data sources and queries.
        //       If set to "true", data from data sources is allowed to be sent in queries to other data sources, regardless of the other data sources' privacy levels.
        //       If set to "false", possible data sharing is controlled by the data source's privacy levels.
        optional bool fastCombine;

        // A Boolean that indicates whether unsafe redirects to a different site and from HTTPS to HTTP are enabled.
        //       If set to "true", unsafe redirects are enabled.
        //       If set to "false", unsafe redirects are disabled.
        optional bool legacyRedirects;

        // A Boolean that indicates whether individual cell errors are returned as null values or the query fails.
        //       If set to "true", individual cell errors are returned as null values.
        //       If set to "false", the query fails.
        optional bool returnErrorValuesAsNull;
    }

    type SequenceCommand
    {
        // The create command.
        optional SequenceCommandContent sequence;
    }

    // The Sequence Command
    type SequenceCommandContent
    {
        optional int maxParallelism;

        optional array<SequenceCommandOperation> operations;
    }

    type SequenceCommandOperation
    {
        optional NameBasedPathToParentObject create;
        optional NameBasedPathToObject createOrReplace;
        optional NameBasedPathToObject alter;
        optional objectPath @delete;
        optional refreshCommandContent refresh;
        optional backupCommandContent backup;
        optional restoreCommandContent restore;
        optional attachCommandContent attach;
        optional detachCommandContent detach;
    }

    type CreateCommand
    {
        // The create command.
        optional NameBasedPathToParentObject create;
    }

    /// <summary>
    /// The name-based path to the object's parent, and object content.
    /// </summary>
    type NameBasedPathToParentObject
    {
        // The path of the object's parent.
        optional nameBasedPath parentObject;

        optional DatabaseJson database;

        optional (providerDataSource | structuredDataSource) dataSource;

        optional TableJson table where ValidationCheck(value == nothing || value == null || ((value != null) && ((table as TableJson).partitions != null) && (((table as TableJson).partitions as array<PartitionJson>).Count > 0) && ((table as TableJson).columns != null) && (((table as TableJson).columns as array<ColumnJsonPattern>).Count > 0)), null,
         "MSSSAS: A table MUST contain at least one column and a partition.");

        optional PartitionJson partition;

        optional @role @role;

        optional perspective perspective;
    }

    /// <summary>
    /// The name-based path to the object itself.
    /// </summary>
    type NameBasedPathToObject
    {
        // The path of the object's parent.
        optional nameBasedPath @object;

        optional DatabaseJson database;

        optional (providerDataSource | structuredDataSource) dataSource;

        optional TableJson table where ValidationCheck(value == nothing || value == null || ((value != null) && ((table as TableJson).partitions != null) && (((table as TableJson).partitions as array<PartitionJson>).Count > 0) && ((table as TableJson).columns != null) && (((table as TableJson).columns as array<ColumnJsonPattern>).Count > 0)), null,
         "MSSSAS: A table MUST contain at least one column and a partition.");

        optional PartitionJson partition;

        optional @role @role;

        optional perspective perspective;
    }

    type CreateOrReplaceCommand
    {
        optional NameBasedPathToObject createOrReplace;
    }

    /// <summary>
    /// Alter command in JSON.
    /// </summary>
    type alterCommand
    {
        optional NameBasedPathToObject alter;
    }

    /// <summary>
    /// The object path refers to the object itself.
    /// </summary>
    type objectPath
    {
        // The path of the object's parent.
        optional nameBasedPath @object;
    }

    type deleteCommand
    {
        optional objectPath @delete;
    }

    /// <summary>
    /// Refresh command class. 
    /// </summary>
    type refreshCommand
    {
        // The type of refresh operation.
        optional refreshCommandContent refresh;
    }

    /// <summary>
    /// Refresh command content
    /// </summary>
    type refreshCommandContent
    {
        // The type of refresh operation.
        optional refreshType @type;

        // The refresh scope: what database, table or partition to refresh.
        optional array<nameBasedPath> objects;

        // The object whose field is to be overriden.
        optional array<refreshOverride> overrides;
    }

    /// <summary>
    /// refresh override structures
    /// </summary>
    type refreshOverride
    {
        optional nameBasedPath scope;

        optional array<providerDataSourceOverride> dataSources;

        optional array<columnOverride> columns;

        optional array<partitionOverride> partitions;

        optional array<expressionOverride> expressions;
    }

    /// <summary>
    /// The override object of provider datasource to refresh.
    /// </summary>
    type providerDataSourceOverride : providerDataSource
    {
        // originalObject name-based path.
        optional nameBasedPath originalObject;
    }

    /// <summary>
    /// The column to override in refresh command
    /// </summary>
    type columnOverride
    {
        // The name-based path to the original column object
        optional nameBasedPath originalObject;

        // The name of the column from which data is retrieved.
        optional string sourceColumn;
    }

    /// <summary>
    /// The partition to override in refresh command
    /// </summary>
    type partitionOverride
    {
        optional nameBasedPath originalObject;

        optional (QueryPartitionSourceRefresh | CalculatedOrMPartitionSource) source;
    }

    /// <summary>
    /// The expression to override in refresh command
    /// </summary>
    type expressionOverride
    {
        optional nameBasedPath originalObject;

        optional array<string> expression;
    }

    /// <summary>
    /// The backup execute command in JSON
    /// </summary>
    type backupCommand
    {
        optional backupCommandContent backup;
    }

    /// <summary>
    /// The backup execute command content in JSON
    /// </summary>
    type backupCommandContent
    {
        optional string database;

        optional string file;

        optional string password;

        optional bool allowOverwrite;

        optional bool applyCompression;
    }

    /// <summary>
    /// The restore execute command in JSON
    /// </summary>
    type restoreCommand
    {
        optional restoreCommandContent restore;
    }

    /// <summary>
    /// The restore command content
    /// </summary>
    type restoreCommandContent
    {
        optional string database;

        optional string file;

        optional string password;

        optional string dbStorageLocation;

        optional bool allowOverwrite;

        optional readWriteModeEnum readWriteMode where ValidationCheckEnumValue(value == nothing || InRange<readWriteModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "restore", "readWriteModeField", "readWrite, readOnly, readOnlyExclusive", value);

        optional securityType security where ValidationCheckEnumValue(value == nothing || InRange<securityType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "restore", "security", "copyAll, skipMembership, ignoreSecurity", value);
    }

    /// <summary>
    /// The Attach Command
    /// </summary>
    type attachCommand
    {
        optional attachCommandContent attach;
    }

    /// <summary>
    /// The attach command content
    /// </summary>
    type attachCommandContent
    {
        optional string database;

        optional string folder;
        
        optional string password;

        optional readWriteModeEnum readWriteMode where ValidationCheckEnumValue(value == nothing || InRange<readWriteModeEnum>(value as string), null, false, ReferenceType.Type, "MSSSAS", "attach", "readWriteMode", "readWrite, readOnly, readOnlyExclusive", value);
    }

    /// <summary>
    /// Detach command
    /// </summary>
    type detachCommand
    {
        optional detachCommandContent detach;
    }

    /// <summary>
    /// Detach command content
    /// </summary>
    type detachCommandContent
    {        
        optional string database;
        
        optional string password;
    }

    /// <summary>
    /// Synchronize Command
    /// </summary>
    type synchronizeCommand
    {
        optional synchronizeCommandContent synchronize;
    }

    /// <summary>
    /// Synchronize Command Content
    /// </summary>
    type synchronizeCommandContent
    {
        optional string database;

        optional string source;

        optional securityType synchronizeSecurity where ValidationCheckEnumValue(value == nothing || InRange<securityType>(value as string), null, false, ReferenceType.Type, "MSSSAS", "synchronize", "synchronizeSecurity", "copyAll, skipMembership, ignoreSecurity", value);

        optional bool applyCompression;
    }

    /// <summary>
    /// Merge Partitions Command
    /// </summary>
    type mergePartitionsCommand
    {
        optional mergePartitionsCommandContent mergePartitions;
    }

    /// <summary>
    /// Merge Partitions Command Content
    /// </summary>
    type mergePartitionsCommandContent
    {
        optional mergeTarget target;

        optional array<string> sources;
    }

    /// <summary>
    /// The target partition for partitions to merge
    /// </summary>
    type mergeTarget
    {
        optional string database;

        optional string table;

        optional string partition;
    }

    //*********************************************************
    //* enums
    //*********************************************************

    /// <summary>
    /// Indicates how relationships influence filtering of data when evaluating row-level security expressions.
    /// </summary>
    pattern securityFilteringBehaviorEnum = enum string
    {
        // The rows selected in the "To" end of the relationship automatically filter scans of the table 
        // in the "From" end of the relationship.
        oneDirection = "oneDirection",
        // Filters on either end of the relationship automatically filter the other table.
        bothDirections = "bothDirections",
        ...
    };

    /// <summary>
    /// Relationship cardinality
    /// </summary>
    pattern cardinality = enum string
    {
        one = "one",
        many = "many",
        ...
    };

    /// <summary>
    /// When joining two date time columns, indicates whether to join on date and time parts or on date part only
    /// </summary>
    pattern joinOnDateBehaviorEnum = enum string
    {
        // When joining two date time columns, join on date and time parts
        dateAndTime = "dateAndTime",
        // When joining two date time columns, join on date part only.
        datePartOnly = "datePartOnly",
        ...
    };

    /// <summary>
    /// Indicates how relationships influence filtering of data.
    /// </summary>
    pattern crossFilteringBehaviorEnum = enum string
    {
        // The rows selected in the "To" end of the relationship automatically filter 
        // scans of the table in the "From" end of the relationship.
        oneDirection = "oneDirection",
        // Filters on either end of the relationship;automatically filters the other table.
        bothDirections = "bothDirections",
        // The engine analyzes the relationships and chooses one of the behaviors by using heuristics.
        automatic = "automatic",
        ...
    };

    pattern relationshipType = enum string
    {
        // Normal column-column relationship.
        singleColumn = "singleColumn",
        ...
    };

    /// <summary>
    /// The kind of the expression.
    /// </summary>
    pattern expressionKind = enum string
    {
        // An expression that is based on M (Power Query Formula Language )
        m = "m",
        ...
    };

    /// <summary>
    /// This value provides information about the format of the extended property value.
    /// </summary>
    pattern extendedPropertyType = enum string
    {
        // The value is a raw string without specific formatting.
        @string = "string",
        // The value is a JSON object.
        @json = "json",
        ...
    };

    /// <summary>
    /// A value that establishes the permission level that is granted to a user in a particular role in
    /// accessing a table's metadata and the data it defines.
    /// </summary>
    pattern metadataPermissionType = enum string
    {
        // The access that is granted is derived from the Model object's permission of the role.
        @default = "default",
        // No access is granted.
        none = "node",
        // Read access is granted.
        read = "read",
        ...
    };

    /// <summary>
    /// Indicates whether the particular member of a security role is an individual user or a group of users, 
    /// or whether the member is automatically detected.
    /// </summary>
    pattern memberTypeEnum = enum string
    {
        // Member of security role is automatically detected.
        auto = "auto",
        // Member of security role is an individual user.
        user = "user",
        // Member of security role is a group of users.
        group = "group",
        ...
    };

    /// <summary>
    /// The level of access for this role.
    /// </summary>
    pattern modelPermissionLevel = enum string
    {
        // The role has no access to the Model.
        none = "none",
        // The role can read metadata and data of the Model.
        read = "read",
        // The role has read and refresh permission.
        readRefresh = "readRefresh",
        // The role can refresh the data and calculations in the Model.
        refresh = "refresh",
        // The role can administer the Model.
        Administrator = "Administrator",
        ...
    };

    /// <summary>
    /// A value that allows the members of a ragged/unbalanced hierarchy to be hidden.
    /// </summary>
    pattern hideMembersWay = enum string
    {
        // The members are not to be hidden.
        @default = "default",
        // The members that have blank values are to be hidden.
        hideBlankMembers = "hideBlankMembers",
        ...
    };

    /// <summary>
    /// An enumeration value that indicates the action to apply to role objects in a database restore operation.
    /// </summary>
    pattern securityType = enum string
    {
        // The role objects are copied from the backup to the restored database.
        copyAll = "copyAll",
        // The server retains the membership information.
        skipMembership = "skipMembership",
        // The role objects from the backup are not copied to the restored database.
        ignoreSecurity = "ignoreSecurity",
        ...
    };

    // An enumeration value that indicates the access modes allowed to the database. 
    pattern readWriteModeEnum = enum string
    {
        // readWrite - Read-write access is allowed.
        readWrite = "readWrite",
        // readOnly - Read-only access is allowed.
        readOnly = "readOnly",
        // readOnlyExclusive - Read-only exclusive access is allowed.
        readOnlyExclusive = "readOnlyExclusive",
        ...
    };

    // An enumeration value that indicates the method for making data available in the partition.
    pattern defaultMode = enum string
    {
        // Data will be imported from a data source.
        import = "import",
        // Data will be queried dynamically from a data source.
        directQuery = "directQuery",
        // Only partitions can use this value. When set, the partition will inherit the DefaultMode of the Model.
        @default = "default",
        ...
    };

    // An enumeration value that indicates which partitions are to be selected to run queries against the model.
    pattern defaultDataView = enum string
    {
        // Partitions with DataView set to Default or Full are selected.
        full = "full",
        // Partitions with DataView set to Default or Sample are selected.
        sample = "sample",
        // All partitions are selected.
        sampleAndFull = "sampleAndFull",
        // Only Partitions can use this value. When set, the partition will inherit the DataView from the Model.
        @default = "default",
        ...
    };

    /// <summary>
    /// Category of table data
    /// </summary>
    pattern dataCategory = enum string
    {
        // All unknown strings are returned in the Contents attribute of the EntityType element of 
        // Conceptual Schema Definition Language with Business Intelligence annotations (CSDLBI).
        unknown = "unknown",
        // standard data
        regular = "regular",
        // data of time
        time = "time",
        // data of geography
        geography = "geography",
        // organization data
        organization = "organization",
        // bill of materials
        billOfMaterials = "billOfMaterials",
        // data of accounts
        accounts = "accounts",
        // data of customers
        customers = "customers",
        // data of products
        products = "customers",
        // data of scenario
        @scenario = "scenario",
        // quantitative data
        quantitative = "quantitative",
        // data of utility
        utility = "utility",
        // currency data
        currency = "currency",
        // data of rates
        rates = "rates",
        // channel data
        channel = "channel",
        // data of promotion
        promotion = "promotion",
        ...
    };

    /// <summary>
    /// The type of DataSource. 
    /// </summary>
    pattern dataSourceType = enum string
    {
        // A data source that has a data provider and connection string.
        provider = "provider",
        // A data source that uses a JSON-based extensible protocol to define the location and mechanism by which the data is retrieved.
        // SQL Server 2016 Analysis Services does not support the "Structured" enumeration value. 
        structured = "structured",
        ...
    };

    /// <summary>
    /// The credentials type to use for impersonation when connecting to a provider data source.
    /// </summary>
    pattern impersonationMode = enum string
    {
        // The default credential.
        @default = "default",
        // The server uses the specified user account.
        impersonateAccount = "impersonateAccount",
        // The server uses the anonymous user account.
        impersonateAnonymous = "impersonateAnonymous",
        // The server uses the user account that the client is connecting as.
        impersonateCurrentUser = "impersonateCurrentUser",
        // The server uses the user account that the server is running as.
        impersonateServiceAccount = "impersonateServiceAccount",
        // The server uses an unattended user account.
        impersonateUnattendedAccount = "impersonateUnattendedAccount",
        ...
    };

    /// <summary>
    /// The kind of isolation that is used when executing commands against the provider data source.
    /// </summary>
    pattern isolation = enum string
    {
        // This value specifies that statements cannot read data that has been modified, 
        // but not committed, by other transactions.
        readCommitted = "readCommitted",

        // This value ensures that the data read by any statement in a transaction 
        // is transactionally consistent, as if the statements in a transaction receive a 
        // snapshot of the committed data as it existed at the start of the transaction.
        snapshot = "snapshot",

        ...
    };

    /// <summary>
    /// Data type of data column
    /// </summary>
    pattern dataTypeOfDataColumn = enum string
    {
        automatic = "automatic", // When calculated columns or calculated table columns set the value to Automatic, 
                                // the type is automatically inferred.
        @string = "string",
        int64 = "int64",
        @double = "double",
        dateTime = "dateTime",
        @decimal = "decimal",
        boolean = "boolean",
        @binary = "binary",
        unknown = "unknown",
        variant = "variant",
        ...
    };

// Data category of column that maps to LEVEL_TYPE in [MS-SSAS] section 3.1.4.2.2.1.3.8.1.
pattern dataCategoryOfColumn = enum string
{
    invalid="invalid",                
    all="all",                
    regular="regular",                
    image="image",                
    imageBMP="imageBMP",                
    imageGIF="imageGIF",                
    imageJPG="imageJPG",                
    imagePNG="imagePNG",                
    imageTIFF="imageTIFF",                
    imageURL="imageURL",                
    id="id",                
    RelationToParent="RelationToParent",                
    Sequence="Sequence",                
    OrgTitle="OrgTitle",                
    Caption="Caption",                
    ShortCaption="ShortCaption",                
    CaptionDescription="CaptionDescription",                
    CaptionAbbreviation="CaptionAbbreviation",                
    WebURL="WebURL",                
    WebHTML="WebHTML",                
    WebXMLOrXSL="WebXMLOrXSL",                
    WebmailAlias="WebmailAlias",                
    Address="Address",                
    AddressStreet="AddressStreet",                
    AddressHouse="AddressHouse",                
    AddressCity="AddressCity",                
    AddressStateOrProvince="AddressStateOrProvince",                
    AddressZIP="AddressZIP",                
    AddressQuarter="AddressQuarter",                
    AddressCountry="AddressCountry",                
    AddressBuilding="AddressBuilding",                
    AddressRoom="AddressRoom",                
    AddressFloor="AddressFloor",                
    AddressFax="AddressFax",                
    AddressPhone="AddressPhone",                
    GeoCentroidX="GeoCentroidX",                
    GeoCentroidY="GeoCentroidY",                
    GeoCentroidZ="GeoCentroidZ",                
    GeoBoundaryTop="GeoBoundaryTop",                
    GeoBoundaryLeft="GeoBoundaryLeft",                
    GeoBoundaryBottom="GeoBoundaryBottom",                
    GeoBoundaryRight="GeoBoundaryRight",                
    GeoBoundaryFront="GeoBoundaryFront",                
    GeoBoundaryRear="GeoBoundaryRear",                
    GeoBoundaryPolygon="GeoBoundaryPolygon",                
    PhysicalSize="PhysicalSize",                
    PhysicalColor="PhysicalColor",                
    PhysicalWeight="PhysicalWeight",                
    PhysicalHeight="PhysicalHeight",                
    PhysicalWidth="PhysicalWidth",                
    PhysicalDepth="PhysicalDepth",                
    PhysicalVolume="PhysicalVolume",                
    PhysicalDensity="PhysicalDensity",                
    PersonFullName="PersonFullName",                
    PersonFirstName="PersonFirstName",                
    PersonLastName="PersonLastName",                
    PersonMiddleName="PersonMiddleName",                
    PersonDemographic="PersonDemographic",                
    PersonContact="PersonContact",                
    QtyRangeLow="QtyRangeLow",                
    QtyRangeHigh="QtyRangeHigh",                
    FormattingColor="FormattingColor",                
    FormattingOrder="FormattingOrder",                
    FormattingFont="FormattingFont",                
    FormattingFontEffects="FormattingFontEffects",                
    FormattingFontSize="FormattingFontSize",                
    FormattingSubtotal="FormattingSubtotal",                
    Date="Date",                
    DateStart="DateStart",                
    DateEnded="DateEnded",                
    DateCanceled="DateCanceled",                
    DateModified="DateModified",                
    DateDuration="DateDuration",                
    Version="Version",                
    Years="Years",                
    Quarters="Quarters",                
    Months="Months",                
    Weeks="Weeks",                
    Days="Days",                
    Hours="Hours",                
    Minutes="Minutes",                
    Seconds="Seconds",                
    UndefinedTime="UndefinedTime",                
    OrganizationalUnit="OrganizationalUnit",                
    BomResource="BomResource",                
    Quantitative="Quantitative",                
    Account="Account",                
    Customers="Customers",                
    CustomerGroup="CustomerGroup",                
    CustomerHousehold="CustomerHousehold",                
    Product="Product",                
    ProductGroup="ProductGroup",                
    Scenario="Scenario",                
    Utility="Utility",                
    Person="Person",                
    Company="Company",                
    CurrencySource="CurrencySource",                
    CurrencyDestination="CurrencyDestination",                
    Channel="Channel",                
    Representative="Representative",                
    Promotion="Promotion",                
    Continent="Continent",                
    Region="Region",                
    Country="Country",                
    StateOrProvince="StateOrProvince",                
    County="County",                
    City="City",                
    PostalCode="PostalCode",                
    Point="Point",                
    AccountType="AccountType",                
    accountName="accountName",                
    AccountNumber="AccountNumber",                
    ProjectName="ProjectName",                
    ProjectCode="ProjectCode",                
    ProjectStartDate="ProjectStartDate",                
    ProjectEndDate="ProjectEndDate",                
    ProjectCompletion="ProjectCompletion",                
    CurrencyName="CurrencyName",                
    CurrencyIsOCode="CurrencyIsOCode",                
    PercentOwnership="PercentOwnership",                
    PercentVoteright="PercentVoteright",                
    Project="Project",                
    RateType="RateType",                
    Rate="Rate",                
    ProductSKU="ProductSKU",                
    ProductCategory="ProductCategory",                
    ProductBrand="ProductBrand",                
    DeletedFlag="DeletedFlag",                
    ScdStatus="ScdStatus",                
    ScdEndDate="ScdEndDate",                
    ScdOriginalID="ScdOriginalID",                
    ScdStartDate="ScdStartDate",                
    DayOfMonthOrPeriod="DayOfMonthOrPeriod",                
    WeekOfQuarter="WeekOfQuarter",                
    WeekOfMonthOrPeriod="WeekOfMonthOrPeriod",                
    MonthOrPeriodOfQuarter="MonthOrPeriodOfQuarter",                
    MonthOrPeriodOfYear="MonthOrPeriodOfYear",                
    Trimesters="Trimesters",                
    Halfyears="Halfyears",                
    Tendays="Tendays",                
    DayOfWeek="DayOfWeek",                
    DayOfTendays="DayOfTendays",                
    DayOfMonth="DayOfMonth",                
    DayOfQuarter="DayOfQuarter",                
    DayOfTrimester="DayOfTrimester",                
    DayOfHalfyear="DayOfHalfyear",                
    DayOfYear="DayOfYear",                
    WeekOfYear="WeekOfYear",                
    TendayOfMonth="TendayOfMonth",                
    TendayOfQuarter="TendayOfQuarter",                
    TendayOfTrimester="TendayOfTrimester",                
    TendayOfHalfyear="TendayOfHalfyear",                
    TendayOfYear="TendayOfYear",                
    MonthOfTrimester="MonthOfTrimester",                
    MonthOfQuarter="MonthOfQuarter",                
    MonthOfHalfyear="MonthOfHalfyear",                
    MonthOfYear="MonthOfYear",                
    TrimesterOfYear="TrimesterOfYear",                
    QuarterOfHalfyear="QuarterOfHalfyear",                
    QuarterOfYear="QuarterOfYear",                
    HalfyearOfYear="HalfyearOfYear",                
    FiscalDate="FiscalDate",                
    FiscalDayOfWeek="FiscalDayOfWeek",                
    FiscalDayOfMonth="FiscalDayOfMonth",                
    FiscalDayOfQuarter="FiscalDayOfQuarter",                
    FiscalDayOfTrimester="FiscalDayOfTrimester",                
    FiscalDayOfHalfyear="FiscalDayOfHalfyear",                
    FiscalDayOfYear="FiscalDayOfYear",                
    FiscalWeeks="FiscalWeeks",                
    FiscalWeekOfYear="FiscalWeekOfYear",                
    FiscalWeekOfHalfyear="FiscalWeekOfHalfyear",                
    FiscalWeekOfQuarter="FiscalWeekOfQuarter",                
    FiscalWeekOfTrimester="FiscalWeekOfTrimester",                
    FiscalWeekOfMonth="FiscalWeekOfMonth",                
    FiscalMonths="FiscalMonths",                
    FiscalMonthOfTrimester="FiscalMonthOfTrimester",                
    FiscalMonthOfQuarter="FiscalMonthOfQuarter",                
    FiscalMonthOfHalfyear="FiscalMonthOfHalfyear",                
    FiscalMonthOfYear="FiscalMonthOfYear",                
    FiscalTrimesters="FiscalTrimesters",                
    FiscalTrimesterOfYear="FiscalTrimesterOfYear",                
    FiscalQuarters="FiscalQuarters",                
    FiscalQuarterOfYear="FiscalQuarterOfYear",                
    FiscalQuarterOfHalfyear="FiscalQuarterOfHalfyear",                
    FiscalHalfyears="FiscalHalfyears",                
    FiscalHalfyearOfYear="FiscalHalfyearOfYear",                
    FiscalYears="FiscalYears",                
    ReportingDate="ReportingDate",                
    ReportingDayOfWeek="ReportingDayOfWeek",                
    ReportingDayOfMonth="ReportingDayOfMonth",                
    ReportingDayOfQuarter="ReportingDayOfQuarter",                
    ReportingDayOfTrimester="ReportingDayOfTrimester",                
    ReportingDayOfHalfyear="ReportingDayOfHalfyear",                
    ReportingDayOfYear="ReportingDayOfYear",                
    ReportingWeeks="ReportingWeeks",                
    ReportingWeekOfYear="ReportingWeekOfYear",                
    ReportingWeekOfHalfyear="ReportingWeekOfHalfyear",                
    ReportingWeekOfQuarter="ReportingWeekOfQuarter",                
    ReportingWeekOfTrimester="ReportingWeekOfTrimester",                
    ReportingWeekOfMonth="ReportingWeekOfMonth",                
    ReportingMonths="ReportingMonths",                
    ReportingMonthOfTrimester="ReportingMonthOfTrimester",                
    ReportingMonthOfQuarter="ReportingMonthOfQuarter",                
    ReportingMonthOfHalfyear="ReportingMonthOfHalfyear",                
    ReportingMonthOfYear="ReportingMonthOfYear",                
    ReportingTrimesters="ReportingTrimesters",                
    ReportingTrimesterOfYear="ReportingTrimesterOfYear",                
    ReportingQuarters="ReportingQuarters",                
    ReportingQuarterOfYear="ReportingQuarterOfYear",                
    ReportingQuarterOfHalfyear="ReportingQuarterOfHalfyear",                
    ReportingHalfyears="ReportingHalfyears",                
    ReportingHalfyearOfYear="ReportingHalfyearOfYear",                
    ReportingYears="ReportingYears",                
    ManufacturingDate="ManufacturingDate",                
    ManufacturingDayOfWeek="ManufacturingDayOfWeek",                
    ManufacturingDayOfMonth="ManufacturingDayOfMonth",                
    ManufacturingDayOfQuarter="ManufacturingDayOfQuarter",                
    ManufacturingDayOfHalfyear="ManufacturingDayOfHalfyear",                
    ManufacturingDayOfYear="ManufacturingDayOfYear",                
    ManufacturingWeeks="ManufacturingWeeks",                
    ManufacturingWeekOfYear="ManufacturingWeekOfYear",                
    ManufacturingWeekOfHalfyear="ManufacturingWeekOfHalfyear",                
    ManufacturingWeekOfQuarter="ManufacturingWeekOfQuarter",                
    ManufacturingWeekOfMonth="ManufacturingWeekOfMonth",                
    ManufacturingMonths="ManufacturingMonths",                
    ManufacturingMonthOfQuarter="ManufacturingMonthOfQuarter",                
    ManufacturingMonthOfHalfyear="ManufacturingMonthOfHalfyear",                
    ManufacturingMonthOfYear="ManufacturingMonthOfYear",                
    ManufacturingTrimesters="ManufacturingTrimesters",                
    ManufacturingTrimesterOfYear="ManufacturingTrimesterOfYear",                
    ManufacturingQuarters="ManufacturingQuarters",                
    ManufacturingQuarterOfYear="ManufacturingQuarterOfYear",                
    ManufacturingQuarterOfHalfyear="ManufacturingQuarterOfHalfyear",                
    ManufacturingHalfyears="ManufacturingHalfyears",                
    ManufacturingHalfyearOfYear="ManufacturingHalfyearOfYear",                
    ManufacturingYears="ManufacturingYears",                
    WinterSummerSeason="WinterSummerSeason",                
    IsHoliday="IsHoliday",                
    IsWeekday="IsWeekday",                
    IsWorkingDay="IsWorkingDay",                
    IsPeakDay="IsPeakDay",                
    ISO8601Date="ISO8601Date",                
    ISO8601DayOfWeek="ISO8601DayOfWeek",                
    ISO8601DayOfYear="ISO8601DayOfYear",                
    ISO8601Weeks="ISO8601Weeks",                
    ISO8601WeekOfYear="ISO8601WeekOfYear",                
    ISO8601Years="ISO8601Years",                
    RowNumber="RowNumber",                
    ExtendedType="ExtendedType",                
    ...
};

    /// <summary>
    /// Specifies the text alignment of the column in report visualizations. 
    /// </summary>
    
    pattern alignmentColumn = enum string
    {
        @default = "default",
        left = "left",
        right = "right",
        center = "center",
        ...
    };

    /// <summary>
    /// A value that indicates the default function, if any, used to aggregate this field.
    /// </summary>
    pattern summarizeByColumn = enum string
    {
        @default = "default", // If summarizeBy value is omitted, "Default" is assumed for numeric fields
        none = "none", // If summarizeBy value is omitted, "None" is assumed for all other fields.
        sum = "sum",
        min = "min",
        max = "max",
        count = "count",
        average = "average",
        distinctCount = "distinctCount",
        ...
    };

    /// <summary>
    /// The type of Column.
    /// </summary>
    pattern typeColumn = enum string
    {
        data = "data", // The contents of this column come from a data source.
        calculated = "calculated", // The contents of this column are computed by using an expression after the Data columns have been populated.
        rowNumber = "rowNumber", // The column is an internal column that represents the row number.
        calculatedTableColumn = "calculatedTableColumn", // The tables are built based on a calculated expression that is automatically inferred and generates the columns in the table.
        ...
    };

    /// <summary>
    /// The type of partition
    /// </summary>
    pattern partitionType = enum string
    {
        // The data in this partition is retrieved by executing a query against a DataSource.
        query = "query",
        // The data in this partition is populated by executing a calculated expression.
        calculated = "calculated",
        // The data in this partition is populated by pushing a rowset of data to the server 
        // as part of the Refresh operation.
        none = "none",
        // The data in this partition is retrieved by using an M (Power Query Formula Language) expression.
        m = "m",
        // The data in this partition is retrieved by executing a query 
        // against the named entity of the underlying data source.
        entity = "entity",
        ...
    };

    /// <summary>
    /// The type of DataAccessOptions
    /// </summary>
    pattern dataAccessOptionsEnum = enum string
    {
        // A Boolean that indicates the ability to override privacy levels to share 
        // data across data sources and queries.
        fastCombine = "fastCombine",
        // A Boolean that indicates whether unsafe redirects to a different site and 
        // from HTTPS to HTTP are enabled.
        legacyRedirects = "legacyRedirects",
        // A Boolean that indicates whether individual cell errors are returned as 
        // null values or the query fails.
        returnErrorValuesAsNull = "returnErrorValuesAsNull",
        ...
    };

    /// <summary>
    /// The encoding mechanism that is used for the column.
    /// </summary>
    pattern encodingMechanism = enum string
    {
        // The server automatically determines which encoding mechanism to use.
        @default = "default",
        // Hash encoding is used.
        hash = "hash",
        // Value encoding is used.
        @value = "value",
        ...
    };

    /// <summary>
    /// The different types of refresh operations
    /// </summary>
    pattern refreshType = enum string
    {
        // For all partitions in the specified partition, table, or database, 
        // refresh data and recalculate all dependents. For a calculation partition, 
        // recalculate the partition and all its dependents. 
        full = "full",

        // Clear values in this object and all its dependents.
        clearValues = "clearValues",

        // Recalculate this object and all its dependents, but only if needed. 
        // This value does not force recalculation, except for volatile formulas.
        calculate = "calculate",

        // Refresh data in this object and clear all dependents.
        dataOnly = "dataOnly",

        // If the object needs to be refreshed and recalculated, 
        // refresh and recalculate the object and all its dependents.
        automatic = "automatic",

        // Append data to this partition and recalculate all dependents. 
        // This command is valid only for regular partitions and not for calculation partitions.
        add = "add",

        // Defragment the data in the specified table.
        defragment = "defragment",
        ...
    };

// **********************************************************************
// JSON-Based Tabular Metadata Commands - End
// **********************************************************************

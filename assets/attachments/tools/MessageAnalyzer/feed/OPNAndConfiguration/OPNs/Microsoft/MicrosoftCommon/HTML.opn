module HTML with
StreamEncodingDefaults{Encoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "Hypertext Markup Language",
    ShortName = "HTML",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 1866"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/10/2011"}
        ]
};

pattern HtmlCharacters = regex{[^<]*};
syntax HtmlSyntax = s:("<" a:HtmlCharacters => a)* => s;

const map<string, string> HtmlCharacter =
{
    "&amp;" -> "&",
    "&lt;" -> "<",
    "&gt;" -> ">",
    "&quot;" -> "\"",
    "&quos;" -> "'",
};

// section 8.1
type Form
{
    string Method with XmlEncoding{Name = "method", Kind = XmlKind.Attribute};
    string Action with XmlEncoding{Name = "action", Kind = XmlKind.Attribute};
    array<Input> Input with XmlEncoding{Name = "input", Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// section 8.1.2
type Input
{
    string Name with XmlEncoding{Name = "name", Kind = XmlKind.Attribute};
    optional string Value with XmlEncoding{Name = "value", Kind = XmlKind.Attribute};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.All};

optional Form GetHtmlFormStream(stream htmlStream)
{
    var v = HtmlSyntax(htmlStream);
    if(v == nothing)
    {
        return nothing;
    }

    var f = GetHtmlFormFromElements(v as array<string>);
    if(f == nothing)
    {
        return nothing;
    }

    return f as Form;
}

optional Form GetHtmlFormFromElements(array<string> elements)
{
    string formXmlStr = "";
    foreach(string elem in elements)
    {
        if(formXmlStr.Count == 0 && elem.Count >= 4 
            && GetHtmlToken(elem).ToLower() == "form")
        {
            formXmlStr += "<" + elem;
            continue;
        }
        if(formXmlStr.Count > 0 && elem.Count >= 5
            && GetHtmlToken(elem).ToLower() == "/form")
        {
            // get the xml str
            formXmlStr += "<" + elem;
            return XmlDecoder<Form>(formXmlStr);
        }

        if(formXmlStr.Count > 0)
        {
            formXmlStr += "<" + elem;
        }
    }

    return nothing;
}

string GetHtmlToken(string htmlAttributeStr)
{
    int index = 0;
    string tokenName = "";

    for(index = 0; index < htmlAttributeStr.Count 
        && htmlAttributeStr[index] != ' ' && htmlAttributeStr[index] != '>'; index++)
    {
        tokenName += htmlAttributeStr[index] as string;
    }

    return tokenName;
}

string HtmlCharacterDecode(string htmlEncodedString)
{
    string ret = "";
    for(int index = 0; index < htmlEncodedString.Count; index++)
    {
        if(htmlEncodedString[index] == '&')
        {
            // decode
            string subStr = "";
            for(; index < htmlEncodedString.Count && htmlEncodedString[index] != ';'; index++)
            {
                subStr += htmlEncodedString[index] as string;
            }
            subStr += ";";

            if(!HtmlCharacter.Keys[subStr])
            {
                return htmlEncodedString;
            }

            ret += HtmlCharacter[subStr];
        }
        else
        {
            ret += htmlEncodedString[index] as string;
        }
    }

    return ret;
}

protocol PCCRR with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Peer Content Caching and Retrieval: Retrieval Protocol Specification ",
    ShortName = "PCCRR",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-PCCRR", Version = "7.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"},
        ]
};

using Standard;
using Utility;
using HTTP;

endpoint Server 
    over HTTP.Server 
    accepts Request issues Response;
    
client endpoint Client connected to Server;

autostart actor PCCRRServerOverHTTP(HTTP.Server server)
{
    process server accepts req:HttpContract.Request where req.Payload.Count > 0 && IsPCCRR(req.Uri)
    {
        switch(req.Payload)
        {
            case rq:Request from BinaryDecoder<Request> =>
            var pccrr = endpoint Server over server;
            dispatch pccrr accepts rq;
            default => 
            ThrowDecodingException("PCCRR Request");
        }
    }
    
    process server issues res:HttpContract.Response where res.Payload.Count > 0 && IsPCCRR(res#Uri)
    {
        switch(res.Payload)
        {
            case rs:Response from BinaryDecoder<Response> =>
            var pccrr = endpoint Server over server;
            dispatch pccrr issues rs;
            default => 
            ThrowDecodingException("PCCRR Response");
        }
    }
    
    bool IsPCCRR(optional UriType uriType)
    {
        return (uriType is uri:UriType) && uri.AbsPath is absPath:string && absPath.Contains("116B50EB-ECE2-41ac-8429-9F9E963361B7");
    }
}

// 2.2.5   Response Message
message Response
{
    TRANSPORT_RESPONSE_HEADER TRANSPORT_RESPONSE_HEADER;
    MESSAGE_HEADER MESSAGE_HEADER where ValidationCheck((value.MsgSize >= 16 && value.MsgSize <= 393216), null, DiagnosisLevel.Error, "PCCRR Response: The valid range of the total message size must be from 16 bytes to 393,216 bytes (or 384 KB).");
    ([|MESSAGE_HEADER.MsgType == MsgType.MSG_NEGO_RESP|] MSG_NEGO_RESP
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_BLKLIST|] MSG_BLKLIST
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_BLK|] MSG_BLK
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_SEGLIST|] MSG_SEGLIST) MESSAGE_BODY;
    
    override string ToString()
    {
        return "Response, MsgType: " + EnumToString(MESSAGE_HEADER.MsgType, "PCCRR.MsgType");
    }
}

// 2.2.4   Request Message
message Request
{
    MESSAGE_HEADER MESSAGE_HEADER where ValidationCheck((value.MsgSize >= 16 && value.MsgSize <= 98304), null, DiagnosisLevel.Error, "PCCRR Request: The valid range of the total message size must be from 16 bytes to 98,304 bytes (or 96 KB).");
    ([|MESSAGE_HEADER.MsgType == MsgType.MSG_NEGO_REQ|] MSG_NEGO_REQ
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_GETBLKLIST|] MSG_GETBLKLIST
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_GETBLKS|] MSG_GETBLKS
    | [|MESSAGE_HEADER.MsgType == MsgType.MSG_GETSEGLIST|] MSG_GETSEGLIST) MESSAGE_BODY;

    override string ToString()
    {
        return "Request, MsgType: " + EnumToString(MESSAGE_HEADER.MsgType, "PCCRR.MsgType");
    }
}

// 2.2.1.1   BLOCK_RANGE
type BLOCK_RANGE
{
    uint Index;
    uint Count where ValidationCheck((value >= 1 && value <= 512), null, DiagnosisLevel.Error, "PCCRR: Count in type BlockRange must be greater than zero and not greater than 512, not " + (value as string) + ".");
}

// 2.2.1.2   SEGMENT_RANGE
type SEGMENT_RANGE
{
    uint Index;
    uint Count where ValidationCheck((value > 0), null, DiagnosisLevel.Error, "PCCRR: Count in type SegmentRange must be greater than zero, not " + (value as string) + ".");
}

// 2.2.1.3   BLOCK_RANGE_ARRAY
type BLOCK_RANGE_ARRAY[uint Bound]
{
    array<BLOCK_RANGE> Values with BinaryEncoding{Length = Bound};
}

// 2.2.1.5   ENCODED_SEGMENT_AGE
type ENCODED_SEGMENT_AGE
{
    byte SegmentIndex;
    byte SegmentAgeLowPart;
    byte SegmentAgeMidPart;
    byte SegmentAgeHighPart;
}

// 2.2.2   TRANSPORT_RESPONSE_HEADER
type TRANSPORT_RESPONSE_HEADER
{
    uint Size where ValidationCheck((value >= 16 && value <= 98304), null, DiagnosisLevel.Error, "PCCRR: The valid range of the total message size must be from 16 bytes to 98,304 bytes (or 96 KB).");
    
    override string ToString()
    {
        return "Total message Size is " + (Size as string);
    }
}

// 2.2.3   MESSAGE_HEADER
type MESSAGE_HEADER
{
    ProtVer ProtVer;
    MsgType MsgType;
    uint MsgSize;
    uint CryptoAlgoId where ValidationCheck(value in {0, 1, 2, 3}, null, DiagnosisLevel.Error, "PCCRR: CryptographicAlgorithmID in type MessageHeader must be zero, 1, 2, or 3, not " + (value as string) + ".");
    
    override string ToString()
    {
        return "Message size is " + (MsgSize as string) + ", Body message is " + (PccrrMessageType(MsgType) as string);
    }
}

type ProtVer
{
    ushort MinorVersion where ValidationCheck(value == 0, null, DiagnosisLevel.Error, "PCCRR: The protocol version number must be set to minor=zero (0x0000), not " + (value as string) + ".");
    ushort MajorVersion where ValidationCheck(value == 1, null, DiagnosisLevel.Error, "PCCRR: The protocol version number must be set to major=1 (0x0001), not " + (value as string) + ".");

    override string ToString()
    {
        return "Version is " + (MajorVersion as string) + "." + (MinorVersion as string);
    }
}

pattern MsgType = enum uint
{
    MSG_NEGO_REQ  = 0x00000000,
    MSG_NEGO_RESP = 0x00000001,
    MSG_GETBLKLIST        = 0x00000002,
    MSG_GETBLKS           = 0x00000003,
    MSG_BLKLIST           = 0x00000004,
    MSG_BLK               = 0x00000005,
    MSG_GETSEGLIST      = 0x00000006,
    MSG_SEGLIST         = 0x00000007,
};

// 2.2.4.1   MSG_NEGO_REQ
type MSG_NEGO_REQ
{
    ProtVer MinSupportedProtocolVersion;
    ProtVer MaxSupportedProtocolVersion;
    
    override string ToString()
    {
        return "Body message is NEGO_REQ";
    }
}

// 2.2.4.2   MSG_GETBLKLIST
type MSG_GETBLKLIST
{
    uint SizeOfSegmentID;
    binary SegmentID with BinaryEncoding{Length = SizeOfSegmentID}; // MS-PCCRC v20120427, 2.2   Segment Identifiers (HoHoDk) and Keys
    optional [|(SizeOfSegmentID % 4) != 0|] array<byte> ZeroPad with BinaryEncoding{Length = (4 - (SizeOfSegmentID % 4))};
    uint NeededBlocksRangeCount where ValidationCheck((value >= 1 && value <= 256), null, DiagnosisLevel.Error, "PCCRR: NeededBlocksRangeCount in type MessageGetBlockList must be between 1 and 256.");
    optional [|NeededBlocksRangeCount > 0|] BLOCK_RANGE_ARRAY[NeededBlocksRangeCount] NeededBlockRanges;
    
    override string ToString()
    {
        return "Body message is GETBLKLIST";
    }
}

// 2.2.4.3   MSG_GETBLKS
type MSG_GETBLKS
{
    uint SizeOfSegmentID;
    binary SegmentID with BinaryEncoding{Length = SizeOfSegmentID}; // MS-PCCRC v20120427, 2.2   Segment Identifiers (HoHoDk) and Keys
    optional [|(SizeOfSegmentID % 4) != 0|] array<byte> ZeroPad with BinaryEncoding{Length = (4 - (SizeOfSegmentID % 4))};
    uint ReqBlockRangeCount where ValidationCheck((value >= 1 && value <= 256), null, DiagnosisLevel.Error, "PCCRR: ReqBlockRangeCount in type MessageGetBlocks must be between 1 and 256 inclusive.");
    array<BLOCK_RANGE> ReqBlockRanges with BinaryEncoding{Length = ReqBlockRangeCount};
    uint SizeOfDataForVrfBlock where ValidationCheck(value == 0, null, DiagnosisLevel.Warning, "PCCRR: SizeOfDataForVrfBlock in type MessageGetBlocks should be zero.");
    optional [|SizeOfDataForVrfBlock > 0|] BLOCK_RANGE_ARRAY[SizeOfDataForVrfBlock] DataForVrfBlock;
    
    override string ToString()
    {
        return "Body message is GETBLKS";
    }
}

// 2.2.4.4   MSG_GETSEGLIST
type MSG_GETSEGLIST
{
    guid RequestID;
    uint CountOfSegmentIDs;
    array<SegmentID> SegmentIDs with BinaryEncoding{Length = CountOfSegmentIDs};
    optional uint SizeOfExtensibleBlob;
    optional [|SizeOfExtensibleBlob != nothing && (SizeOfExtensibleBlob as uint) > 0|] ExtensibleBlobVersion1 ExtensibleBlob;
    
    override string ToString()
    {
        return "Body message is GETSEGLIST";
    }
}

//The following three fields(SizeOfSegmentID, SegmentID and ZeroPad) are repeated N times where N is equal to CountOfSegmentIDs.
type SegmentID
{
    uint SizeOfSegmentID;
    binary SegmentID with BinaryEncoding{Length = SizeOfSegmentID}; // MS-PCCRC v20120427, 2.2   Segment Identifiers (HoHoDk) and Keys
    optional [|(SizeOfSegmentID % 4) != 0|] array<byte> ZeroPad with BinaryEncoding{Length = ((4 -SegmentID.Count % 4) % 4)};
}

// 2.2.5.1   MSG_NEGO_RESP
type MSG_NEGO_RESP
{
    ProtVer MinSupportedProtocolVersion;
    ProtVer MaxSupportedProtocolVersion;
    
    override string ToString()
    {
        return "Body message is NEGO_RESP";
    }
}

// 2.2.5.2   MSG_BLKLIST
type MSG_BLKLIST
{
    uint SizeOfSegmentId;
    binary SegmentID with BinaryEncoding{Length = SizeOfSegmentId}; // MS-PCCRC v20120427, 2.2   Segment Identifiers (HoHoDk) and Keys
    optional [|(SizeOfSegmentId % 4) != 0|] array<byte> ZeroPad with BinaryEncoding{Length = (4 - (SizeOfSegmentId % 4))};
    uint BlockRangeCount;
    optional [|BlockRangeCount > 0|] BLOCK_RANGE_ARRAY[BlockRangeCount] BlockRanges;
    uint NextBlockIndex;
    
    override string ToString()
    {
        return "Body message is BLKLIST";
    }
}

// 2.2.5.3   MSG_BLK
type MSG_BLK
{
    uint SizeOfSegmentId;
    binary SegmentID with BinaryEncoding{Length = SizeOfSegmentId}; // MS-PCCRC v20120427, 2.2   Segment Identifiers (HoHoDk) and Keys
    optional (array<byte> where (SizeOfSegmentId % 4) != 0) ZeroPad with BinaryEncoding{Length = (4 - (SizeOfSegmentId % 4))};
    uint BlockIndex;
    uint NextBlockIndex;
    uint SizeOfBlock;
    binary Block with BinaryEncoding{Length = SizeOfBlock};
    optional [|(SizeOfSegmentId % 4) != 0|] array<byte> ZeroPad2 with BinaryEncoding{Length = (4 - (SizeOfSegmentId % 4))};
    uint SizeOfVrfBlock;
    binary VrfBlock with BinaryEncoding{Length = SizeOfVrfBlock};
    optional [|(SizeOfSegmentId % 4) != 0|] array<byte> ZeroPad3 with BinaryEncoding{Length = (4 - (SizeOfSegmentId % 4))};
    uint SizeOfIVBlock;
    binary IVBlock with BinaryEncoding{Length = SizeOfIVBlock};
    
    override string ToString()
    {
        return "Body message is BLK";
    }
}

// 2.2.5.4   MSG_SEGLIST
type MSG_SEGLIST
{
    guid RequestID;
    uint SegmentRangeCount;
    optional [|SegmentRangeCount > 0|] array<SEGMENT_RANGE> SegmentRanges with BinaryEncoding{Length = SegmentRangeCount};
    optional uint SizeOfExtensibleBlob;
    optional [|SizeOfExtensibleBlob != nothing && (SizeOfExtensibleBlob as uint) > 0|] ExtensibleBlobVersion1 ExtensibleBlob;
    
    override string ToString()
    {
        return "Body message is SEGLIST";
    }
}

// 2.2.6.1   Extensible Blob Version 1
type ExtensibleBlobVersion1
{
    ushort ExtensibleBlobVersion where ValidationCheck(value == 1, null, DiagnosisLevel.Error, "PCCRR: ExtensibleBlobVersion in type ExtensibleBlobVersion1 must be equal to 1.");
    byte SegmentAgeUnits where ValidationCheck((value >= 1 && value <= 4), null, DiagnosisLevel.Error, "PCCRR: The blob must have a SegmentAgeUnits value in the range of 1 to 4.");
    byte SegmentAgeCount;
    array<ENCODED_SEGMENT_AGE> SegmentAges with BinaryEncoding{Length = SegmentAgeCount};
}

pattern Uint = enum byte
{
    Seconds             = 1,
    TenthsOfASecond     = 2,
    HundredthsOfASecond = 3,
    Milliseconds        = 4
};

string PccrrMessageType(uint MsgType)
{
    switch (MsgType)
    {
        case 0 =>  return "NEGO_REQ";
        case 1 =>  return "NEGO_RESP";
        case 2 =>  return "GETBLKLIST";
        case 3 =>  return "GETBLKS";
        case 4 =>  return "BLKLIST";
        case 5 =>  return "BLK";
        case 6 =>  return "GETSEGLIST";
        case 7 =>  return "SEGLIST";
        default => return "Unknow Message Type";
    }
}

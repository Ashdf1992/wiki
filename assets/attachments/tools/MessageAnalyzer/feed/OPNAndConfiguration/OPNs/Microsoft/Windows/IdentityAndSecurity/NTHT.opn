protocol NTHT with 
Documentation
{
    ProtocolName = "NTLM Over HTTP Protocol",
    ShortName = "NTHT",
    DocumentName = "MS-NTHT",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-NTHT", Version = "7.0", Date = "02/13/2014", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = "11/14/2014"}
    ]
};
using Utility;
using HTTP;
using NLMP;
using GSSAPI;

// To set HTTP.HttpContract.Operation's Authentication, we observe HTTP.SetOriginsServer
autostart actor NTHTExtendsHTTPAuthentication(HTTP.Server node) 
{
    observe node issues res:HTTP.HttpContract.Response where res.Headers.Keys["WWW-Authenticate"] || res.Headers.Keys["Proxy-Authenticate"]
    {
        if (res.Headers.Keys["WWW-Authenticate"])
        {
            var authenticate = res.Headers["WWW-Authenticate"];
            if (authenticate is challengeArrayArray:array<array<HTTP.Challenge>>)
            {
                array<array<HTTP.Challenge>> challengeArrayArrayResult = [];
                foreach (array<HTTP.Challenge> challengesArray in challengeArrayArray)
                {
                    challengeArrayArrayResult += [DecodeNTLMChallenge(challengesArray, res)];
                }
                res.Headers["WWW-Authenticate"] = challengeArrayArrayResult;
            }
            else if (authenticate is challengeArray:array<HTTP.Challenge>)
            {
                res.Headers["WWW-Authenticate"] = DecodeNTLMChallenge(challengeArray, res);
            }
        }
        if (res.Headers.Keys["Proxy-Authenticate"])
        {
            var authenticate = res.Headers["Proxy-Authenticate"];
            if (authenticate is challengeArrayArray:array<array<HTTP.Challenge>>)
            {
                array<array<HTTP.Challenge>> challengeArrayArrayResult = [];
                foreach (array<HTTP.Challenge> challengesArray in challengeArrayArray)
                {
                    challengeArrayArrayResult += [DecodeNTLMChallenge(challengesArray, res)];
                }
                res.Headers["Proxy-Authenticate"] = challengeArrayArrayResult;
            }
            else if (authenticate is challengeArray:array<HTTP.Challenge>)
            {
                res.Headers["Proxy-Authenticate"] = DecodeNTLMChallenge(challengeArray, res);
            }
        }
    }
    
    observe node accepts req:HTTP.HttpContract.Request where req.Headers.Keys["Authorization"] || req.Headers.Keys["Proxy-Authorization"]
    {
        if (req.Headers.Keys["Authorization"])
        {
            var authorization = req.Headers["Authorization"];
            if (authorization is credentialsArray:array<HTTP.Credentials>)
            {
                array<HTTP.Credentials> credentialsArrayResult = [];
                foreach (HTTP.Credentials credential in credentialsArray)
                    credentialsArrayResult += [DecodeNTLMCredentials(credential, req)];
                req.Headers["Authorization"] = credentialsArrayResult;
            }
            else if (authorization is credentials:HTTP.Credentials)
            {
                req.Headers["Authorization"] = DecodeNTLMCredentials(credentials, req);
            }
        }
        if (req.Headers.Keys["Proxy-Authorization"])
        {
            var authorization = req.Headers["Proxy-Authorization"];
            if (authorization is credentialsArray:array<HTTP.Credentials>)
            {
                array<HTTP.Credentials> credentialsArrayResult = [];
                foreach (HTTP.Credentials credential in credentialsArray)
                    credentialsArrayResult += [DecodeNTLMCredentials(credential, req)];
                req.Headers["Proxy-Authorization"] = credentialsArrayResult;
            }
            else if (authorization is credentials:HTTP.Credentials)
            {
                req.Headers["Proxy-Authorization"] = DecodeNTLMCredentials(credentials, req);
            }
        }
    }
}

HTTP.Credentials DecodeNTLMCredentials(HTTP.Credentials credentials, HTTP.HttpContract.Request req)
{
    if (credentials.AuthSchema == "NTLM" && credentials.AuthParam is base64String:string && (base64String != "") && Base64NTLMMessageArray(base64String) is base64NTLMMessageArray:array<string>)
    {
        var ntlmCredentials = new NTLMCredentials{AuthSchema = credentials.AuthSchema, AuthParam = []};
        foreach (var base64NTLMMessage in base64NTLMMessageArray)
        {
            if(base64NTLMMessage != "")
            {
                if (Base64StringToBinary(base64NTLMMessage) is b:binary)
                {
                    var nlmpMessage = NlmpDecoder(b);
                    if (nlmpMessage != nothing && nlmpMessage is neg:NLMP.NegotiateMessage)
                    {
                        ntlmCredentials.AuthParam += [neg];
                        req#Embedded = {"NLMP" -> ""};
                        string summary = GetAuthInfoFromSummary(GetSummaryInfo(neg));
                        if (summary.Count > 0)
                        {
                            req#AuthInformation = summary;
                        }
                    }
                    else if (nlmpMessage != nothing && nlmpMessage is auth:NLMP.AuthenticateMessage)
                    {
                        ntlmCredentials.AuthParam += [auth];
                        req#Embedded = {"NLMP" -> ""};
                        string summary = GetAuthInfoFromSummary(GetSummaryInfo(auth));
                        if (summary.Count > 0)
                        {
                            req#AuthInformation = summary;
                        }
                    }
                    else
                    {
                        ntlmCredentials.AuthParam += [base64NTLMMessage];
                        ValidationCheckDecodingMessageFailedWithReason(req, "NTHT", "Credentials.AuthParam", "NLMP message decoding fail");
                    }
                }
                else
                {
                    ntlmCredentials.AuthParam += [base64NTLMMessage];
                    ValidationCheckDecodingMessageFailedWithReason(req, "NTHT", "Credentials.AuthParam", "base64 decoding fail");
                }
            }
        }
        return ntlmCredentials;
    }
    else
    {
        return credentials;
    }
}
    
array<HTTP.Challenge> DecodeNTLMChallenge(array<HTTP.Challenge> challengeArray, HTTP.HttpContract.Response res)
{
    array<HTTP.Challenge> challengeArrayAfterDecoding = [];
    foreach (var challenge in challengeArray)
    {
        if (challenge.AuthSchema == "NTLM" && challenge.AuthParam is base64String:string && (base64String != "") && Base64NTLMMessageArray(base64String) is base64NTLMMessageArray:array<string>)
        {
            var nlmpChallenge = new NTLMChallenge{AuthSchema = challenge.AuthSchema, AuthParam = []};
            foreach (var base64NTLMMessage in base64NTLMMessageArray)
            {
                if(base64NTLMMessage != "")
                {
                    if (Base64StringToBinary(base64NTLMMessage) is b:binary)
                    {
                        var nlmpMessage = NlmpDecoder(b);
                        if (nlmpMessage != nothing && nlmpMessage is cha:NLMP.ChallengeMessage)
                        {
                            nlmpChallenge.AuthParam += [cha];
                            res#Embedded = {"NLMP" -> ""};
                            string summary = GetAuthInfoFromSummary(GetSummaryInfo(cha));
                            if (summary.Count > 0)
                            {
                                res#AuthInformation = summary;
                            }
                        }
                        else
                        {
                            nlmpChallenge.AuthParam += [base64NTLMMessage];
                            ValidationCheckDecodingMessageFailedWithReason(res, "NTHT", "Challenge.AuthParam", "NLMP message decoding fail");
                        }
                    }
                    else
                    {
                        nlmpChallenge.AuthParam += [base64NTLMMessage];
                        ValidationCheckDecodingMessageFailedWithReason(res, "NTHT", "Challenge.AuthParam", "base64 decoding fail");
                    }
                }
            }
            challengeArrayAfterDecoding += [nlmpChallenge];
        }
        else
        {
            challengeArrayAfterDecoding += [challenge];
        }
    }
    return challengeArrayAfterDecoding;
}

syntax Base64String = regex{[^,]*};
syntax Base64NTLMMessageArray = LWS* s1:Base64String s2:(LWS* "," LWS* s20:Base64String => s20)* => ([s1] + s2);

type NTLMChallenge : HTTP.Challenge
{
    new array<NLMP.ChallengeMessage | string> AuthParam;
}

type NTLMCredentials : HTTP.Credentials
{
    new array<NLMP.AuthenticateMessage | NLMP.NegotiateMessage | string> AuthParam;
}

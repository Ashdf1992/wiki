protocol WSTransfer with 
XmlEncodingDefaults{Namespace = WSTransferNamespace},
Documentation
{
    ProtocolName = "Web Services Transfer",
    ShortName = "WSTransfer",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSTransfer", Link = "http://www.w3.org/Submission/WS-Transfer/"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="370732", Date="11/07/2014"}
        ]
};

using Standard;
using Utility;
using SOAP;
using WSA2004;
using WSA2005;
using Technologies.SOAP;
    
endpoint ResourceIntermidiateEndpoint 
    over SOAP.Server
    provides mutable ResourceMessageContract
    provides mutable ResourceFactoryMessageContract
    consumes mutable ResourceContract
    consumes mutable ResourceFactoryContract;

autostart actor ResourceMessageActor(SOAP.Server node)
{
    // get request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTransferGetAction
    {
        ResourceMessageContract.GetResourceRequest req = new ResourceMessageContract.GetResourceRequest();
        if (soap.Body.ChildCount >= 1)
        {
            req.AnyOptionalElement = new XmlWrapper{Value = soap.Body.Children[0]};
            if (soap.Body.ChildCount > 1)
            {
                ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The GetResourceRequest should be the initial child element of the SOAP:Body element of the response message.");
            }
        }
        else
        {
            req.AnyOptionalElement = nothing;
        }
        req.Origins += [soap];
        req.SourceData = soap.SourceData;
        dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts req;
    }
    // get response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTransferGetResponseAction
    {
        // WORKAROUND: reference allows multiple elements for GetResourceResponse but not set maxOccurs value, so cannot use XmlDecoder here
        ResourceMessageContract.GetResourceResponse res = new ResourceMessageContract.GetResourceResponse();
        if (soap.Body.ChildCount >= 1)
        {
            res.AnyElement = new XmlWrapper{Value = soap.Body.Children[0]};
            if (soap.Body.ChildCount > 1)
            {
                ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The GetResourceResponse should be the initial child element of the SOAP:Body element of the response message.");
            }
            res.Origins += [soap];
            res.SourceData = soap.SourceData;
            dispatch (endpoint ResourceIntermidiateEndpoint over node) issues res;
        }
        else
        {
            ThrowDecodingException ("WSTransfer", "GetResourceResponse");
        }
    }

    // put request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTransferPutAction
    {
        // WORKAROUND: reference allows multiple elements for PutResourceRequest but not set maxOccurs value, so cannot use XmlDecoder here
        ResourceMessageContract.PutResourceRequest req = new ResourceMessageContract.PutResourceRequest();
        if (soap.Body.ChildCount >= 1)
        {
            req.AnyElement = new XmlWrapper{Value = soap.Body.Children[0]};
            if (soap.Body.ChildCount > 1)
            {
                ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The PutResourceRequest should be the initial child element of the SOAP:Body element of the request message.");
            }
            req.Origins += [soap];
            req.SourceData = soap.SourceData;
            dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts req;
        }
        else
        {
            ThrowDecodingException ("WSTransfer", "PutResourceRequest");
        }
    }

    // put response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTransferPutResponseAction
    {
        ResourceMessageContract.PutResourceResponse res = new ResourceMessageContract.PutResourceResponse();
        if (soap.Body.ChildCount >= 1)
        {
            res.AnyOptionalElement = new XmlWrapper{Value = soap.Body.Children[0]};
            if (soap.Body.ChildCount > 1)
            {
                ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The PutResourceResponse should be the initial child element of the SOAP:Body element of the response message.");
            }
        }
        else
        {
            res.AnyOptionalElement = nothing;
        }
        res.Origins += [soap];
        res.SourceData = soap.SourceData;
        dispatch (endpoint ResourceIntermidiateEndpoint over node) issues res;
    }

    // delete request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTransferDeleteAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.DeleteResourceRequest from XmlDecoder<ResourceMessageContract.DeleteResourceRequest> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts m;
            default =>
                ThrowDecodingException("WSTransfer, DeleteResourceRequest");
        }
    }
    // delete response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTransferDeleteResponseAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.DeleteResourceResponse from XmlDecoder<ResourceMessageContract.DeleteResourceResponse> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) issues m;
            default =>
                ThrowDecodingException("WSTransfer", "DeleteResourceResponse");
        }
    }
    // create request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSTransferCreateAction
    {
        // WORKAROUND: reference allows multiple elements for CreateRequest but not set maxOccurs value, so cannot use XmlDecoder here
        ResourceFactoryMessageContract.CreateRequest req = new ResourceFactoryMessageContract.CreateRequest();
        if (soap.Body.ChildCount >= 1)
        {
            req.AnyElement = new XmlWrapper{Value = soap.Body.Children[0]};
            if (soap.Body.ChildCount > 1)
            {
                ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The CreateRequest is the initial child element of the SOAP:Body element of the request message.");
            }
            req.Origins += [soap];
            req.SourceData = soap.SourceData;
            dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts req;
        }
        else
        {
            ThrowDecodingException ("WSTransfer", "CreateRequest");
        }
    }
    // create response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSTransferCreateResponseAction
    {
        switch (soap.Body)
        {
            case m:ResourceFactoryMessageContract.CreateResponse from XmlDecoder<ResourceFactoryMessageContract.CreateResponse> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) issues m;
            default =>
                ThrowDecodingException("WSTransfer" , "CreateResponse");
        }
    }
}

// operation contract
contract ResourceContract
{
    accepts virtual operation Get
        with SoapMessageInfo {
                Action = WSTransferGetAction,
                ReplyAction = WSTransferGetResponseAction}
    {
        in ResourceMessageContract.GetResourceRequest Request = req;
        out ResourceMessageContract.GetResourceResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "GetOp";
        }
    }
    =
    accepts ResourceMessageContract.GetResourceRequest{value is var req}
    issues ResourceMessageContract.GetResourceResponse{value is var res};

    accepts virtual operation Put
        with SoapMessageInfo {
                Action = WSTransferPutAction,
                ReplyAction = WSTransferPutResponseAction}
    {
        in ResourceMessageContract.PutResourceRequest Request = req;
        out ResourceMessageContract.PutResourceResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "PutOp";
        }
    }
    =
    accepts ResourceMessageContract.PutResourceRequest{value is var req}
    issues ResourceMessageContract.PutResourceResponse{value is var res};
    
    accepts virtual operation Delete
        with SoapMessageInfo {
                Action = WSTransferDeleteAction,
                ReplyAction = WSTransferDeleteResponseAction}
    {
        in ResourceMessageContract.DeleteResourceRequest Request = req;
        out ResourceMessageContract.DeleteResourceResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "DeleteOp";
        }
    }
    =
    accepts ResourceMessageContract.DeleteResourceRequest{value is var req}
    issues ResourceMessageContract.DeleteResourceResponse{value is var res};
}

contract ResourceFactoryContract
{
    accepts virtual operation Create
        with SoapMessageInfo {
                Action = WSTransferCreateAction,
                ReplyAction = WSTransferCreateResponseAction}
    {
        in ResourceFactoryMessageContract.CreateRequest Request = req;
        out ResourceFactoryMessageContract.CreateResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "CreateOp";
        }
    } 
    =
    accepts ResourceFactoryMessageContract.CreateRequest{value is var req}
    issues ResourceFactoryMessageContract.CreateResponse{value is var res};
}

pattern ResourceCreated = (WSA2004.EndpointReferenceType | WSA2005.EndpointReferenceType) with XmlEncoding{Name = "ResourceCreated", Namespace = WSTransferNamespace};

// message contract
contract ResourceMessageContract
{
    accepts message GetResourceRequest
    {
        optional XmlWrapper AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetRequest";
        }
    }
    issues message GetResourceResponse
    {
        XmlWrapper AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetResponse";
        }
    }
    
    accepts message PutResourceRequest
    {
        XmlWrapper AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "PutRequest";
        }
    }
    issues message PutResourceResponse
    {
        optional XmlWrapper AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "PutResponse";
        }
    }
    
    accepts message DeleteResourceRequest
    {
        // Empty message
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "DeleteRequest";
        }
    }
    issues message DeleteResourceResponse
    {
        optional XmlWrapper AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "DeleteResponse";
        }
    }
}

contract ResourceFactoryMessageContract
{
    accepts message CreateRequest
    {
        XmlWrapper AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "CreateRequest";
        }
    }
    issues message CreateResponse
    {
        ResourceCreated ResourceCreated;
        optional XmlWrapper AnyOptionalElement with XmlEncoding{IsWrapped = false, IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "CreateResponse";
        }
    }
}

type XmlWrapper
{
    xml Value with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{IsWrapped = false};

const string WSTransferNamespace = "http://schemas.xmlsoap.org/ws/2004/09/transfer";
const string WSTransferGetAction = WSTransferNamespace + "/Get";
const string WSTransferGetResponseAction = WSTransferGetAction + "Response";
const string WSTransferPutAction = WSTransferNamespace + "/Put";
const string WSTransferPutResponseAction = WSTransferPutAction + "Response";
const string WSTransferDeleteAction = WSTransferNamespace + "/Delete";
const string WSTransferDeleteResponseAction = WSTransferDeleteAction + "Response";
const string WSTransferCreateAction = WSTransferNamespace + "/Create";
const string WSTransferCreateResponseAction = WSTransferCreateAction + "Response";

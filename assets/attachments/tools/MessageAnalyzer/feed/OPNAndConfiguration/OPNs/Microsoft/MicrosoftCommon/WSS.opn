// partial implemented
module WSS with
XmlEncodingDefaults{Namespace = WsseNamespace},
Documentation
{
    ProtocolName = "Web Services Security",
    ShortName = "WSS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSS", Link = "https://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "359590", Date = "02/19/2014"}
        ]
};

using XSD;
using SOAP;

const string WsseNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
const string WsuNamespace = "http://www.docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";

//----------------------------------------- Types ---------------------------------------------//
// Section 6 Security Header 
type SecurityType
{
    optional string $"actor" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string $"role" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string mustUnderstand with XmlEncoding{Kind = XmlKind.Attribute, Namespace = Soap12Namespace};
    optional BinarySecurityTokenType BinarySecurityToken;
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
}

// section 6.3 Binary Security Token
type BinarySecurityTokenType
{
    optional XSDId Id with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional XSAnyURI ValueType with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    XSAnyURI EncodingType with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    string Value with XmlEncoding{Kind = XmlKind.Text};
}

type SecurityTokenReferenceType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional string Id with XmlEncoding{Kind = XmlKind.Attribute, Namespace = WsuNamespace};
    optional XSAnyURI Usage with XmlEncoding{Kind = XmlKind.Attribute, Namespace = WsseNamespace};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}


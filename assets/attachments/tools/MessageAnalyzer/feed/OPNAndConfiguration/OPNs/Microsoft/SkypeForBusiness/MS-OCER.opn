protocol MSOCER with
Documentation
{
    ProtocolName = "Client Error Reporting Protocol",
    ShortName = "MS-OCER",
    DocumentName = "MS-OCER",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-OCER", Version = "4.5"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node) follows _
{	
	process node accepts sipMsg:SIP.Request where IsOcerReqMsg(sipMsg)
    {   
		RequestMessage msg = new RequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Request where IsOcerReqMsg(sipMsg)
	{   
		RequestMessage msg = new RequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;
    }

	process node issues sipMsg:SIP.Response where IsOcerRspMsgType(sipMsg)
    {  
		ResponseMessage msg = new ResponseMessage(sipMsg);
		dispatch (endpoint Server over node) issues msg;
    }
}

bool IsOcerReqMsg(SIP.Request sipMsg)
{	
	if ((sipMsg.Method == "SERVICE") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/msrtc-reporterror+xml"))	
	{
		return true;
	}
	else if ((sipMsg.Method == "CANCEL") && ((ContainsHeaders(["Ms-Diagnostics"], sipMsg.Headers)) || (ContainsHeaders(["Ms-Diagnostics-Public"], sipMsg.Headers))))
	{
		return true;
	}
	else if ((sipMsg.Method == "BYE") && ((ContainsHeaders(["Ms-Diagnostics"], sipMsg.Headers)) || (ContainsHeaders(["Ms-Diagnostics-Public"], sipMsg.Headers))))
	{
		return true;
	}
	else
	{	
		return false;
	}
}

bool IsOcerRspMsgType(SIP.Response sipMsg)
{		
	if ((ContainsHeaders(["Ms-Diagnostics"], sipMsg.Headers)) || (ContainsHeaders(["Ms-Diagnostics-Public"], sipMsg.Headers)))
	{
		return true;
	}
	else
	{
		return false;
	}
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "Content-Type", "Ms-Diagnostics"], this);
	}
		
	override string ToString()
	{
		if (this.Method == "SERVICE")
		{
			return "Client Error Reporting Request";
		}
		else
		{
			return "Client Error Reporting";
		}
	}
}

message ResponseMessage : SipResponseMessage
{			
	ResponseMessage(SIP.Response sipRspMsg)
	{	
		InitializeSIPRsp(sipRspMsg, ["From", "To", "Ms-Diagnostics", "Ms-Diagnostics-Public", "Retry-After"], this);	
	}
		
	override string ToString()
	{
		string msDiagnosticsValue = TryGetErrorDetails("Ms-Diagnostics", this.Headers);
		string msDiagnosticsPublicValue = TryGetErrorDetails("Ms-Diagnostics-Public", this.Headers);

		if ((msDiagnosticsValue == null) && (msDiagnosticsPublicValue == null))
		{
			return "Invalid Message: Diagnostics Header Should Be Either Ms-Diagnostics Or Ms-Diagnostics-Public";
		}
		else if (msDiagnosticsPublicValue != null)
		{	
			int index = msDiagnosticsPublicValue.IndexOf(" ");

			if (index >= 0)
			{
				string errorID = msDiagnosticsPublicValue.Segment(0, index);
			
				if ((errorID != null) && ((errorID == "2019") || (errorID == "10413")))
				{
					return "Client Error Reporting Response: " + msDiagnosticsPublicValue;
				}
				else
				{	
					return "Client Error Reporting: " + msDiagnosticsPublicValue;
				}
			}
			else
			{	
				return "Client Error Reporting: " + msDiagnosticsPublicValue;
			}
		}		
		else 
		{
			int index = msDiagnosticsValue.IndexOf(" ");
			
			if (index >= 0)
			{
				string errorID = msDiagnosticsValue.Segment(0, msDiagnosticsValue.IndexOf(" "));
	
				if ((errorID != null) && ((errorID == "2019") || (errorID == "10413")))
				{
					return "Client Error Reporting Response: " + msDiagnosticsValue;
				}
				else
				{
					return "Client Error Reporting: " + msDiagnosticsValue;
				}
			}
			else
			{	
				return "Client Error Reporting: " + msDiagnosticsPublicValue;
			}
		}
	}
}
module XMLEnc with
Documentation
{
    ProtocolName = "XML Encryption Syntax and Processing",
    ShortName = "XMLEnc",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "XMLEnc", Version = "20021210", Link = "http://www.w3.org/TR/2002/REC-xmlenc-core-20021210"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "363307", Date = "05/05/2014"}
        ]
};

using XSD;
using XMLDSig;

//----------------------------------------- Namespace -----------------------------------------//
// The prefix for this namespace name is "xenc:"
const string XencNamespace = "http://www.w3.org/2001/04/xmlenc#";

//----------------------------------------- Types ---------------------------------------------//

// 3.1 The EncryptedType Element
type EncryptedType
{
    optional EncryptionMethodType EncryptionMethod with XmlEncoding{Name = "EncryptionMethod", Namespace = XencNamespace};
    optional XMLEnc.KeyInfoExtensionType KeyInfo with XmlEncoding{Name = "KeyInfo", Namespace = DsNamespace};
    CipherDataType CipherData with XmlEncoding{Name = "CipherData", Namespace = XencNamespace};
    optional EncryptionPropertiesType EncryptionProperties with XmlEncoding{Name = "EncryptionProperties", Namespace = XencNamespace};

    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    optional XSAnyURI Type with XmlEncoding{Name = "Type", Kind = XmlKind.Attribute};
    optional string MimeType with XmlEncoding{Name = "MimeType", Kind = XmlKind.Attribute};
    optional XSAnyURI Encoding with XmlEncoding{Name = "Encoding", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence};

// 3.2 The EncryptionMethod Element
type EncryptionMethodType
{
    optional KeySizeType KeySize with XmlEncoding{Name = "KeySize", Namespace = XencNamespace};
    optional Base64Binary OAEPparams with XmlEncoding{Name = "OAEPparams"};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    XSAnyURI Algorithm with XmlEncoding{Name = "Algorithm", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence};

// 3.3 The CipherData Element
type CipherDataType
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional Base64Binary CipherValue with XmlEncoding{Name = "CipherValue", Namespace = XencNamespace};
    optional CipherReferenceType CipherReference with XmlEncoding{Name = "CipherReference", Namespace = XencNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All,  Namespace = XencNamespace};

// 3.3.1 The CipherReference Element
type CipherReferenceType
{
    optional XMLEnc.TransformsType Transforms with XmlEncoding{Name = "Transforms", Namespace = XencNamespace};
    XSAnyURI URL with XmlEncoding{Name = "URL", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = XencNamespace};

type TransformsType
{
    array<XMLDSig.TransformType> Transform with XmlEncoding{Name = "Transform", Namespace = DsNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = XencNamespace};

// 3.4 The EncryptedData Element
type EncryptedDataType : EncryptedType
{
} with XmlEncoding{Namespace = XencNamespace};

// 3.5 Extensions to ds:KeyInfo element
// Future Reference: it should use extension, but there is issue when heriting interface method
type KeyInfoExtensionType // : XMLDSig.KeyInfoType
{
    // Future Reference: use Choice and IsWrapped aspect.
    optional KeyNameType KeyName with XmlEncoding{Name = "KeyName", Namespace = DsNamespace};
    optional KeyValueType KeyValue with XmlEncoding{Name = "KeyValue", Namespace = DsNamespace};
    optional RetrievalMethodType RetrievalMethod with XmlEncoding{Name = "RetrievalMethod", Namespace = DsNamespace};
    optional X509DataType X509Data with XmlEncoding{Name = "X509Data", Namespace = DsNamespace};
    optional PGPDataType PGPData with XmlEncoding{Name = "PGPData", Namespace = DsNamespace};
    optional PGPDataType SPKIData with XmlEncoding{Name = "SPKIData", Namespace = DsNamespace};
    optional MgmtDataType MgmtData with XmlEncoding{Name = "MgmtData", Namespace = DsNamespace};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    optional EncryptedDataType EncryptedData with XmlEncoding{Name = "EncryptedData", Namespace = XencNamespace};
    optional EncryptedKeyType EncryptedKey with XmlEncoding{Name = "EncryptedKey", Namespace = XencNamespace};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = XencNamespace}; 

// 3.5.1 The EncryptedKey Element
type EncryptedKeyType: EncryptedType
{
    optional ReferenceListType ReferenceList with XmlEncoding{Name = "ReferenceList", Namespace = XencNamespace};
    optional string CarriedKeyName with XmlEncoding{Name = "CarriedKeyName", Namespace = XencNamespace};

    optional string Recipient with XmlEncoding{Name = "Recipient", Kind = XmlKind.Attribute};
}

// 3.6 The ReferenceList Element
type ReferenceListType
{
    optional XMLEncReferenceType DataReference with XmlEncoding{Name = "DataReference", Namespace = XencNamespace};
    optional XMLEncReferenceType KeyReference with XmlEncoding{Name = "KeyReference", Namespace = XencNamespace};
}

type XMLEncReferenceType
{
    XSAnyURI URI with XmlEncoding{Name = "URI", Kind = XmlKind.Attribute};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
}

// 3.7 The EncryptionProperties Element
type EncryptionPropertiesType
{
    array<EncryptionPropertyType> EncryptionProperty with XmlEncoding{Name = "Transform", Namespace = DsNamespace};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
} with XmlEncoding{Order = XmlOrderIndicator.Sequence, Namespace = XencNamespace};

type EncryptionPropertyType
{
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional XSAnyURI Target with XmlEncoding{Name = "Target", Kind = XmlKind.Attribute};
    optional XSDId Id with XmlEncoding{Name = "Id", Kind = XmlKind.Attribute};
    array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace="http://www.w3.org/XML/1998/namespace"};
} with XmlEncoding{Order = XmlOrderIndicator.All, Namespace = XencNamespace};

// 5.3 Stream Encryption Algorithms
type KeySizeType
{
    int Content with XmlEncoding{Kind = XmlKind.Text};
};

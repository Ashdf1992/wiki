protocol FRS2 with 
Documentation{
    ProtocolName = "Distributed File System Replication Protocol",
    ProtocolType = "rpc",
    ShortName = "FRS2",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference {Name = "FRS2", Version = "20.0", Date = "08/08/2013", ProgramName = ProgramName.WSPP}
        ],
    RevisionSummary = 
        [
            new Revision {Class = RevisionClass.Major, Version = "356889", Date = "11/22/2013"}
        ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using FSCC;

// Note: 
// Section 2.1 Transport
// All traffic MUST be authenticated and encrypted using LAN Manager or Kerberos over TCP/IP.
// Both the client and the server MUST require authentication and encryption.
// Since all traffic are encrypted, MA cannot parse fields of each operation, so this OPN:
// 1, Will not perform validationcheck; 
// 2, Will not parse custom marshaling types;
// 3, Will not refine the summary line.

endpoint Server over MSRPCE.Server provides FrsTransport;

contract FrsTransport
{
    accepts operation CheckConnectivity
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID replicaSetId;
        in FRS_CONNECTION_ID connectionId;
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation EstablishConnection
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID replicaSetId;
        in FRS_CONNECTION_ID connectionId;
        in DWORD downstreamProtocolVersion;
        in DWORD downstreamFlags;
        out DWORD upstreamProtocolVersion
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DWORD upstreamFlags with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation EstablishSession
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID connectionId;
        in FRS_CONNECTION_ID contentSetId;
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation RequestUpdates
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID connectionId;
        in FRS_CONNECTION_ID contentSetId;
        in DWORD creditsAvailable
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 256}};
        in IDLLong hashRequested
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 1}};
        in UPDATE_REQUEST_TYPE updateRequestType
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 2}};
        in IDLUlong versionVectorDiffCount;
        in array<FRS_VERSION_VECTOR> versionVectorDiff
               with Technologies.IDL.IDL
                        {Size_is = [versionVectorDiffCount], IndirectionLevel = 1};
        out array<FRS_UPDATE> frsUpdate
                with Technologies.IDL.IDL{Size_is = [creditsAvailable],
                                          Length_is = [updateCount],
                                          IndirectionLevel = 1};
        out DWORD updateCount with Technologies.IDL.IDL{IndirectionLevel = 1};
        out UPDATE_STATUS updateStatus
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out FRS_CONNECTION_ID gvsnDbGuid
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DWORDLONG gvsnVersion
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 3};
    
    accepts operation RequestVersionVector
    {
        in optional handle_t IDL_handle;
        in DWORD sequenceNumber;
        in FRS_CONNECTION_ID connectionId;
        in FRS_CONNECTION_ID contentSetId;
        in VERSION_REQUEST_TYPE requestType
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 2}};
        in VERSION_CHANGE_TYPE changeType
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 2}};
        in ULONGLONG vvGeneration;
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation AsyncPoll
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID connectionId;
        out FRS_ASYNC_RESPONSE_CONTEXT response
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 5};
    
    accepts operation RequestRecords
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID connectionId;
        in FRS_CONNECTION_ID contentSetId;
        in FRS_CONNECTION_ID uidDbGuid;
        in DWORDLONG uidVersion;
        in out DWORD maxRecords with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DWORD numRecords with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DWORD numBytes with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<byte> compressedRecords
                with Technologies.IDL.IDL
                         {Size_is = [null, numBytes], IndirectionLevel = 2};
        out RECORDS_STATUS recordsStatus
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 6};
    
    accepts operation UpdateCancel
    {
        in optional handle_t IDL_handle;
        in FRS_CONNECTION_ID connectionId;
        in FRS_UPDATE_CANCEL_DATA cancelData;
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 7};
    
    accepts operation RawGetFileData
    {
        in out PFRS_SERVER_CONTEXT serverContext
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<byte> dataBuffer with Technologies.IDL.IDL{Size_is = [bufferSize],
                                                      Length_is = [sizeRead],
                                                      IndirectionLevel = 1};
        in DWORD bufferSize
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 262144}};
        out DWORD sizeRead with Technologies.IDL.IDL{IndirectionLevel = 1};
        out IDLLong isEndOfFile with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 8};
    
    accepts operation RdcGetSignatures
    {
        in PFRS_SERVER_CONTEXT serverContext;
        in byte level with Technologies.IDL.IDL
                               {Range = new RangePattern {Low = 1, High = 8}};
        in DWORDLONG offset;
        out array<byte> buffer with Technologies.IDL.IDL{Size_is = [length],
                                                  Length_is = [sizeRead],
                                                  IndirectionLevel = 1};
        in DWORD length
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 1, High = 65536}};
        out DWORD sizeRead with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 9};
    
    accepts operation RdcPushSourceNeeds
    {
        in PFRS_SERVER_CONTEXT serverContext;
        in array<FRS_RDC_SOURCE_NEED> sourceNeeds
               with Technologies.IDL.IDL{Size_is = [needCount], IndirectionLevel = 1};
        in DWORD needCount
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 20}};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 10};
    
    accepts operation RdcGetFileData
    {
        in PFRS_SERVER_CONTEXT serverContext;
        // Future Reference: dataBuffer is a Custom Marshaling Format, 
        // but has not been parsed further since the message is encrypted.
        out array<byte> dataBuffer
                with Technologies.IDL.IDL{Size_is = [bufferSize],
                                          Length_is = [sizeReturned],
                                          IndirectionLevel = 1};
        in DWORD bufferSize
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 262144}};
        out DWORD sizeReturned with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 11};
    
    accepts operation RdcClose
    {
        in out PFRS_SERVER_CONTEXT serverContext
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 12};
    
    accepts operation InitializeFileTransferAsync
    {
        in FRS_CONNECTION_ID connectionId;
        in out FRS_UPDATE frsUpdate
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        in IDLLong rdcDesired
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 1}};
        in out FRS_REQUESTED_STAGING_POLICY stagingPolicy
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        out PFRS_SERVER_CONTEXT serverContext
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out FRS_RDC_FILEINFO rdcFileInfo
                with Technologies.IDL.IDL{IndirectionLevel = 2};
        out array<byte> dataBuffer with Technologies.IDL.IDL{Size_is = [bufferSize],
                                                      Length_is = [sizeRead],
                                                      IndirectionLevel = 1};
        in DWORD bufferSize
               with Technologies.IDL.IDL
                        {Range = new RangePattern {Low = 0, High = 262144}};
        out DWORD sizeRead with Technologies.IDL.IDL{IndirectionLevel = 1};
        out IDLLong isEndOfFile with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 13};
    
    accepts operation Opnum14NotUsedOnWire
    {
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 14};
    
    accepts operation RawGetFileDataAsync
    {
        in PFRS_SERVER_CONTEXT serverContext;
        out byte bytePipe with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 15};
    
    accepts operation RdcGetFileDataAsync
    {
        in PFRS_SERVER_CONTEXT serverContext;
        out byte bytePipe with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
    }
    with Technologies.IDL.IDL{Opnum = 16};
}
with Technologies.IDL.IDL
         {Uuid = {897e2e5f-93f3-4376-9c9c-fd2277495c27}, Version = "1.0"};

typedef FRS_REPLICA_SET_ID = GUID;
typedef FRS_CONTENT_SET_ID = GUID;
typedef FRS_DATABASE_ID = GUID;
typedef FRS_MEMBER_ID = GUID;
typedef FRS_CONNECTION_ID = GUID;

pattern UPDATE_REQUEST_TYPE = enum 
{
    UPDATE_REQUEST_ALL          = 0,
    UPDATE_REQUEST_TOMBSTONES   = 1,
    UPDATE_REQUEST_LIVE         = 2
};

type FRS_VERSION_VECTOR
{
    FRS_CONNECTION_ID dbGuid;
    DWORDLONG low;
    DWORDLONG high;
}

type FRS_UPDATE
{
    IDLLong present;
    IDLLong nameConflict;
    IDLUlong attributes;
    FILETIME fence;
    FILETIME clock;
    FILETIME createTime;
    FRS_CONNECTION_ID contentSetId;
    array<char> hash with Technologies.IDL.IDL{Dimensions = [20]};
    array<char> rdcSimilarity with Technologies.IDL.IDL{Dimensions = [16]};
    FRS_CONNECTION_ID uidDbGuid;
    DWORDLONG uidVersion;
    FRS_CONNECTION_ID gvsnDbGuid;
    DWORDLONG gvsnVersion;
    FRS_CONNECTION_ID parentDbGuid;
    DWORDLONG parentVersion;
    string name with Technologies.IDL.IDL
                         {Dimensions = [261], BaseStringType = TypeOf<WCHAR>()};
    IDLLong @flags;
}

pattern UPDATE_STATUS = enum 
{
    UPDATE_STATUS_DONE = 2,
    UPDATE_STATUS_MORE = 3
};

pattern VERSION_REQUEST_TYPE = enum 
{
    REQUEST_NORMAL_SYNC         = 0,
    REQUEST_SLOW_SYNC           = 1,
    REQUEST_SUBORDINATE_SYNC    = 2
};

pattern VERSION_CHANGE_TYPE = enum 
{
    CHANGE_NOTIFY   = 0,
    CHANGE_ALL      = 2
};

type FRS_ASYNC_VERSION_VECTOR_RESPONSE
{
    ULONGLONG vvGeneration;
    IDLUlong versionVectorCount;
    array<FRS_VERSION_VECTOR> versionVector
        with Technologies.IDL.IDL
                 {Size_is = [versionVectorCount], IndirectionLevel = 1};
    IDLUlong epoqueVectorCount;
    array<FRS_EPOQUE_VECTOR> epoqueVector
        with Technologies.IDL.IDL
                 {Size_is = [epoqueVectorCount], IndirectionLevel = 1};
}

type FRS_ASYNC_RESPONSE_CONTEXT
{
    IDLUlong sequenceNumber;
    DWORD status;
    FRS_ASYNC_VERSION_VECTOR_RESPONSE result;
}

type FRS_EPOQUE_VECTOR
{
    FRS_CONNECTION_ID machine;
    EPOQUE epoque;
}

typedef EPOQUE = SYSTEMTIME;

type SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
}

pattern RECORDS_STATUS = enum 
{
    RECORDS_STATUS_DONE = 0,
    RECORDS_STATUS_MORE = 1
};

type FRS_UPDATE_CANCEL_DATA
{
    FRS_UPDATE blockingUpdate;
    FRS_CONNECTION_ID contentSetId;
    FRS_CONNECTION_ID gvsnDatabaseId;
    FRS_CONNECTION_ID uidDatabaseId;
    FRS_CONNECTION_ID parentDatabaseId;
    DWORDLONG gvsnVersion;
    DWORDLONG uidVersion;
    DWORDLONG parentVersion;
    IDLUlong cancelType;
    IDLLong isUidValid;
    IDLLong isParentUidValid;
    IDLLong isBlockerValid;
}

typedef PFRS_SERVER_CONTEXT = ContextHandle;

type FRS_RDC_SOURCE_NEED
{
    ULONGLONG needOffset;
    ULONGLONG needSize;
}

pattern FRS_REQUESTED_STAGING_POLICY = enum 
{
    SERVER_DEFAULT      = 0,
    STAGING_REQUIRED    = 1,
    RESTAGING_REQUIRED  = 2
};

type FRS_RDC_FILEINFO
{
    DWORDLONG onDiskFileSize;
    DWORDLONG fileSizeEstimate;
    ushort rdcVersion;
    ushort rdcMinimumCompatibleVersion;
    byte rdcSignatureLevels
        with Technologies.IDL.IDL{Range = new RangePattern {Low = 0, High = 8}};
    RDC_FILE_COMPRESSION_TYPES compressionAlgorithm;
    array<FRS_RDC_PARAMETERS> rdcFilterParameters
        with Technologies.IDL.IDL
                 {Size_is = [rdcSignatureLevels], Dimensions = [null]};
}

pattern RDC_FILE_COMPRESSION_TYPES = enum 
{
    RDC_UNCOMPRESSED    = 0,
    RDC_XPRESS          = 1
};

type FRS_RDC_PARAMETERS
{
    ushort rdcChunkerAlgorithm;
    FRS_RDC_PARAMETERS_UnionType[rdcChunkerAlgorithm] u
        with Technologies.IDL.IDL{Switch_Is = rdcChunkerAlgorithm, EmbedType = true};
}

type FRS_RDC_PARAMETERS_UnionType[ushort tag]
{
    optional [|tag in {0}|] FRS_RDC_PARAMETERS_GENERIC filterGeneric
        with Technologies.IDL.IDL{Case = [0]};
    optional [|tag in {1}|] FRS_RDC_PARAMETERS_FILTERMAX filterMax
        with Technologies.IDL.IDL{Case = [1]};
    optional [|tag in {2}|] FRS_RDC_PARAMETERS_FILTERPOINT filterPoint
        with Technologies.IDL.IDL{Case = [2]};
}
with Technologies.IDL.IDL{Switch_Type = TypeOf<ushort>(), UnionKind = UnionKind.NonEncapsulated};

type FRS_RDC_PARAMETERS_GENERIC
{
    ushort chunkerType;
    array<byte> chunkerParameters with Technologies.IDL.IDL{Dimensions = [64]};
}

type FRS_RDC_PARAMETERS_FILTERMAX
{
    ushort horizonSize
        with Technologies.IDL.IDL{Range = new RangePattern {Low = 128, High = 16384}};
    ushort windowSize
        with Technologies.IDL.IDL{Range = new RangePattern {Low = 2, High = 96}};
}

type FRS_RDC_PARAMETERS_FILTERPOINT
{
    ushort minChunkSize;
    ushort maxChunkSize;
}

// --- Types Not In IDL -----

// 2.2.1.4.15   XPRESS Block
type XPRESSBlock
{
    XPRESSBlockHeader BlockHeader;
    binary BlockData with BinaryEncoding{Length = BlockHeader.BlockCompressedSize};
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.1.4.15.1   XPRESS Block Header
type XPRESSBlockHeader
{
    binary BlockSignature with BinaryEncoding{Length = 4};
    uint BlockCompressedSize;
    uint BlockUncompressedSize;
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 3.2.4.1.14.1   Custom Marshaling Format
type MARSHAL_BLOCK_HEADER
{
    MARSHAL_BLOCK_HEADER_streamType streamType;
    uint blockSize;
    uint Flags;
} with Technologies.IDL.IDL{DoNotGenerate = true};

pattern MARSHAL_BLOCK_HEADER_streamType = enum uint
{
    MS_TYPE_META_DATA           = 0x00000001,
    MS_TYPE_COMPRESSION_DATA    = 0x00000002,
    MS_TYPE_REPARSE_DATA        = 0x00000003,
    MS_TYPE_FLAT_DATA           = 0x00000004,
    MS_TYPE_SECURITY_DATA       = 0x00000006
} with Technologies.IDL.IDL{DoNotGenerate = true};

type MS_TYPE_META_DATA
{
    uint version;
    uint Reserved1;
    FSCC.FileBasicInformation basicInfo;
    ushort sdControl;
    binary Reserved2 with BinaryEncoding{Length = 6};
    ulong primaryDataStreamSize;
    ulong Reserved3;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type MS_TYPE_COMPRESSION_DATA
{
    FSCC.CompressionFormat format;
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 3.2.4.1.12   RdcGetFileData (Opnum 11)
type RdcGetFileData_dataBuffer
{
    (binary where value == $[46524443]) FileHeader;
    DataBlock DataBlock1;
    DataBlock DataBlock2;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type DataBlock
{
    FragmentHeader FragmentHeader;
    array<Fragment> Fragments with BinaryEncoding{Length = FragmentHeader.numberOfFragments};
    XPRESSBlock XPRESSBlock;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type FragmentHeader
{
    uint numberOfFragments;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type Fragment
{
    uint BlockOffset;
    uint FragmentSize;    
} with Technologies.IDL.IDL{DoNotGenerate = true};

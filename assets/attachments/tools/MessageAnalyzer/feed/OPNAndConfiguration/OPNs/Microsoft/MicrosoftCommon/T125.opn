protocol T125 with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "T.125 SERIES T: TERMINALS FOR TELEMATIC SERVICES Multipoint communication service protocol",
    ShortName = "T125",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "T.125"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "376455", Date = "04/03/2015"}
        ]
};

using Standard;
using IANA;
using Utility;
using Technologies.ASN1;
using X224;
using Configurations;

annotation ushort ConnectInitial#T125SourcePort;
annotation ushort ConnectInitial#T125DestinationPort;
annotation ushort ConnectResponse#T125SourcePort;
annotation ushort ConnectResponse#T125DestinationPort;
annotation ushort DomainMCSPDU#T125SourcePort;
annotation ushort DomainMCSPDU#T125DestinationPort;

endpoint Node over X224.Server
    accepts ConnectInitial issues ConnectResponse
    accepts DomainMCSPDU issues DomainMCSPDU;

autostart actor T125OverX224(X224.Server server)
{
    RDPConfiguration config = GetConfigurableValue<RDPConfiguration>();

    process server accepts tpdu:X224.TPDU
        where tpdu#TpduDestinationPort is desPort:ushort && tpdu#TpduSourcePort is srcPort:ushort && 
            (desPort == Port.RDP || desPort in config.Ports || srcPort == Port.RDP || srcPort in config.Ports)
    {
        if (tpdu is data:X224.Data &&
            data.UserData is payload:binary)
        {
            int firstByte = payload[0];
            int perTagValue = firstByte >> 2;
            int secondByte = 0;
            if (payload.Count > 1)
                secondByte = payload[1];
            switch (secondByte)
            {
                case 0x65 =>
                    switch (payload)
                    {
                        case m:ConnectInitial from Asn1BerDecoder<ConnectInitial> =>
                            m#T125DestinationPort = desPort;
                            m#T125SourcePort = srcPort;
                            dispatch (endpoint Node over server) accepts m;
                        default => 
                            ThrowDecodingException("T125 Connect Initial");
                    }
                default =>
                    switch (payload)
                    {
                        case m:DomainMCSPDU from Asn1PerDecoder<DomainMCSPDU> =>
                            m#T125DestinationPort = desPort;
                            m#T125SourcePort = srcPort;
                            dispatch (endpoint Node over server) accepts m;
                        default => 
                            ThrowDecodingException("T125 DomainMCSPDU");
                    }
            }
        }
        else
        {
            reject;
        }
    }
    
    process server issues tpdu:X224.TPDU
        where tpdu#TpduSourcePort is srcPort:ushort && tpdu#TpduDestinationPort is desPort:ushort &&
            (srcPort == Port.RDP || srcPort in config.Ports || desPort == Port.RDP || desPort in config.Ports)
    {
        if (tpdu is data:X224.Data &&
            data.UserData is payload:binary)
        {
            int firstByte = payload[0];
            int perTagValue = firstByte >> 2;
            int secondByte = 0;
            if (payload.Count > 1)
                secondByte = payload[1];
            switch (secondByte)
            {
                case 0x66 =>
                    switch (payload)
                    {
                        case m:ConnectResponse from Asn1BerDecoder<ConnectResponse> =>
                            m#T125DestinationPort = desPort;
                            m#T125SourcePort = srcPort;
                            dispatch (endpoint Node over server) issues m;
                        default => 
                            ThrowDecodingException("T125 Connect Response");
                    }
                default =>
                    switch (payload)
                    {
                        case m:DomainMCSPDU from Asn1PerDecoder<DomainMCSPDU> =>
                            m#T125DestinationPort = desPort;
                            m#T125SourcePort = srcPort;
                            dispatch (endpoint Node over server) issues m;
                        default => 
                            ThrowDecodingException("T125 DomainMCSPDU");
                    }
            }
        }
        else
        {
            reject;
        }
    }
}

pattern ChannelId = Integer with Asn1Encoding {LowerEndValue = 0, UpperEndValue = 65535};
pattern StaticChannelId = Integer with Asn1Encoding {LowerEndValue = 1, UpperEndValue = 1000};
pattern DynamicChannelId = Integer with Asn1Encoding {LowerEndValue = 1001, UpperEndValue = 65535};
pattern UserId = DynamicChannelId;
pattern TokenId = Integer with Asn1Encoding {LowerEndValue = 1, UpperEndValue = 65535};
pattern StaticTokenId = Integer with Asn1Encoding {LowerEndValue = 1, UpperEndValue = 16383};
pattern DynamicTokenId = Integer with Asn1Encoding {LowerEndValue = 16384, UpperEndValue = 65535};
pattern Time = Integer with Asn1Encoding {LowerEndValue = -2147483648, UpperEndValue = 2147483647};
pattern Handle = Integer with Asn1Encoding {LowerEndValue = 0, UpperEndValue = 4294967295};
pattern H221NonStandardIdentifier = OctetString with Asn1Encoding {MinSize = 4, MaxSize = 255};
pattern Object = ObjectIdentifier with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0};
pattern H221NonStandard = H221NonStandardIdentifier with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1};
pattern Key = Object | H221NonStandard;

// Data part
message DomainMCSPDU
{
    (PlumbDomainIndicationPattern |
     ErectDomainRequestPattern |
     MergeChannelsRequestPattern |
     MergeChannelsConfirmPattern |
     PurgeChannelsIndicationPattern |
     MergeTokensRequestPattern |
     MergeTokensConfirmPattern |
     PurgeTokensIndicationPattern |
     DisconnectProviderUltimatumPattern |
     RejectMCSPDUUltimatumPattern |
     AttachUserRequestPattern |
     AttachUserConfirmPattern |
     DetachUserRequestPattern |
     DetachUserIndicationPattern |
     ChannelJoinRequestPattern |
     ChannelJoinConfirmPattern |
     ChannelLeaveRequestPattern |
     ChannelConveneRequestPattern |
     ChannelConveneConfirmPattern |
     ChannelDisbandRequestPattern |
     ChannelDisbandIndicationPattern |
     ChannelAdmitRequestPattern |
     ChannelAdmitIndicationPattern |
     ChannelExpelRequestPattern |
     ChannelExpelIndicationPattern |
     SendDataRequestPattern |
     SendDataIndicationPattern |
     UniformSendDataRequestPattern |
     UniformSendDataIndicationPattern |
     TokenGrabRequestPattern |
     TokenGrabConfirmPattern |
     TokenInhibitRequestPattern |
     TokenInhibitConfirmPattern |
     TokenGiveRequestPattern |
     TokenGiveIndicationPattern |
     TokenGiveResponsePattern |
     TokenGiveConfirmPattern |
     TokenPleaseRequestPattern |
     TokenPleaseIndicationPattern |
     TokenReleaseRequestPattern |
     TokenReleaseConfirmPattern |
     TokenTestRequestPattern |
     TokenTestConfirmPattern) DomainMCSPDU;
     
    override string ToString()
    {
        if (DomainMCSPDU is PlumbDomainIndicationPattern)
        {
            return "Plumb Domain Indication";
        }
        else if (DomainMCSPDU is ErectDomainRequestPattern)
        {
            return "Erect Domain Request";
        }
        else if (DomainMCSPDU is MergeChannelsRequestPattern)
        {
            return "Merge Channels Request";
        }
        else if (DomainMCSPDU is MergeChannelsConfirmPattern)
        {
            return "Merge Channels Confirm";
        }
        else if (DomainMCSPDU is PurgeChannelsIndicationPattern)
        {
            return "Purge Channels Indication";
        }
        else if (DomainMCSPDU is MergeTokensRequestPattern)
        {
            return "Merge Tokens Request";
        }
        else if (DomainMCSPDU is MergeTokensConfirmPattern)
        {
            return "Merge Tokens Confirm";
        }
        else if (DomainMCSPDU is PurgeTokensIndicationPattern)
        {
            return "Purge Tokens Indication";
        }
        else if (DomainMCSPDU is DisconnectProviderUltimatumPattern)
        {
            return "Disconnect Provider Ultimatum";
        }
        else if (DomainMCSPDU is RejectMCSPDUUltimatumPattern)
        {
            return "Reject MCSPDU Ultimatum";
        }
        else if (DomainMCSPDU is AttachUserRequestPattern)
        {
            return "Attach User Request";
        }
        else if (DomainMCSPDU is AttachUserConfirmPattern)
        {
            return "Attach User Confirm";
        }
        else if (DomainMCSPDU is DetachUserRequestPattern)
        {
            return "Detach User Request";
        }
        else if (DomainMCSPDU is DetachUserIndicationPattern)
        {
            return "Detach User Indication";
        }
        else if (DomainMCSPDU is ChannelJoinRequestPattern)
        {
            return "Channel Join Request";
        }
        else if (DomainMCSPDU is ChannelJoinConfirmPattern)
        {
            return "Channel Join Confirm";
        }
        else if (DomainMCSPDU is ChannelLeaveRequestPattern)
        {
            return "Channel Leave Request";
        }
        else if (DomainMCSPDU is ChannelConveneRequestPattern)
        {
            return "Channel Convene Request";
        }
        else if (DomainMCSPDU is ChannelConveneConfirmPattern)
        {
            return "Channel Convene Confirm";
        }
        else if (DomainMCSPDU is ChannelDisbandRequestPattern)
        {
            return "Channel Disband Request";
        }
        else if (DomainMCSPDU is ChannelDisbandIndicationPattern)
        {
            return "Channel Disband Indication";
        }
        else if (DomainMCSPDU is ChannelAdmitRequestPattern)
        {
            return "Channel Admit Request";
        }
        else if (DomainMCSPDU is ChannelAdmitIndicationPattern)
        {
            return "Channel Admit Indication";
        }
        else if (DomainMCSPDU is ChannelExpelRequestPattern)
        {
            return "Channel Expel Request";
        }
        else if (DomainMCSPDU is ChannelExpelIndicationPattern)
        {
            return "Channel Expel Indication";
        }
        else if (DomainMCSPDU is SendDataRequestPattern)
        {
            return "Send Data Request";
        }
        else if (DomainMCSPDU is SendDataIndicationPattern)
        {
            return "Send Data Indication";
        }
        else if (DomainMCSPDU is UniformSendDataRequestPattern)
        {
            return "Uniform Send Data Request";
        }
        else if (DomainMCSPDU is UniformSendDataIndicationPattern)
        {
            return "Uniform Send Data Indication";
        }
        else if (DomainMCSPDU is TokenGrabRequestPattern)
        {
            return "Token Grab Request";
        }
        else if (DomainMCSPDU is TokenGrabConfirmPattern)
        {
            return "Token Grab Confirm";
        }
        else if (DomainMCSPDU is TokenInhibitRequestPattern)
        {
            return "Token Inhibit Request";
        }
        else if (DomainMCSPDU is TokenInhibitConfirmPattern)
        {
            return "Token Inhibit Confirm";
        }
        else if (DomainMCSPDU is TokenGiveRequestPattern)
        {
            return "Token Give Request";
        }
        else if (DomainMCSPDU is TokenGiveIndicationPattern)
        {
            return "Token Give Indication";
        }
        else if (DomainMCSPDU is TokenGiveResponsePattern)
        {
            return "Token Give Response";
        }
        else if (DomainMCSPDU is TokenGiveConfirmPattern)
        {
            return "TokenGiveConfirm";
        }
        else if (DomainMCSPDU is TokenPleaseRequestPattern)
        {
            return "TokenPleaseRequest";
        }
        else if (DomainMCSPDU is TokenPleaseIndicationPattern)
        {
            return "TokenPleaseIndication";
        }
        else if (DomainMCSPDU is TokenReleaseRequestPattern)
        {
            return "TokenReleaseRequest";
        }
        else if (DomainMCSPDU is TokenReleaseConfirmPattern)
        {
            return "TokenReleaseConfirm";
        }
        else if (DomainMCSPDU is TokenTestRequestPattern)
        {
            return "TokenTestRequest";
        }
        else if (DomainMCSPDU is TokenTestConfirmPattern)
        {
            return "TokenTestConfirmPattern";
        }
        else
        {
            return "Unknown DomainMCSPDU";
        }
    }
}

message ConnectInitial
{
    OctetString CallingDomainSelector;
    OctetString CalledDomainSelector;
    Boolean UpwardFlag;
    DomainParameters TargetParameters;
    DomainParameters MinimumParameters;
    DomainParameters MaximumParameters;
    OctetString UserData;
    
    override string ToString()
    {
        return "MCS Connect Initial";
    }
} with Asn1Encoding
    {
        TagClass = Asn1TagClass.Application,
        TagNumber = 101,
        Tagging = Asn1Tagging.Implicit
    };
    
type DomainParameters
{
    Integer MaxChannelIds;
    Integer MaxUserIds;
    Integer MaxTokenIds;
    Integer NumPriorities;
    Integer MinThroughput;
    Integer MaxHeight;
    Integer MaxMCSPDUsize;
    Integer ProtocolVersion;
}

message ConnectResponse
{
    Result Result;
    Integer CalledConnectId;
    DomainParameters DomainParameters;
    OctetString UserData;
    
    override string ToString()
    {
        return "MCS Connect Response";
    }
} with Asn1Encoding
    {
        TagClass = Asn1TagClass.Application,
        TagNumber = 102,
        Tagging = Asn1Tagging.Implicit
    };

pattern Reason = enum
{
    RnDomainDisconnected        = 0,
    RnProviderInitiated         = 1,
    RnTokenPurged               = 2,
    RnUserRequested             = 3,
    RnChannelPurged             = 4,
} with Asn1Encoding {LowerEndValue = 0,
                     UpperEndValue = 4};

pattern Result = enum
{
    RtSuccessful                = 0,
    RtDomainMerging             = 1,
    RtDomainNotHierarchical     = 2,
    RtNoSuchChannel             = 3,
    RtNoSuchDomain              = 4,
    RtNoSuchUser                = 5,
    RtNotAdmitted               = 6,
    RtOtherUserId               = 7,
    RtParametersUnacceptable    = 8,
    RtTokenNotAvailable         = 9,
    RtTokenNotPossessed         = 10,
    RtTooManyChannels           = 11,
    RtTooManyTokens             = 12,
    RtTooManyUsers              = 13,
    RtUnspecifiedFailure        = 14,
    RtUserRejected              = 15,
} with Asn1Encoding {LowerEndValue = 0,
                     UpperEndValue = 15};

type SendDataRequest
{
    UserId Initiator;
    ChannelId ChannelId;
    DataPriority DataPriority;
    Segmentation Segmentation;
    OctetString UserData;
}

pattern DataPriority = enum
{
    Top     = 0,
    High    = 1,
    Medium  = 2,
    Low     = 3
} with Asn1Encoding {LowerEndValue = 0,
                     UpperEndValue = 3};

pattern Segmentation = enum
{
    NotBeginOrEnd     = 0,
    Begin             = 1,
    End               = 2,
    BeginAndEnd       = 3
} with Asn1Encoding {LowerEndValue = 0,
                     UpperEndValue = 3};

type SendDataIndication
{
    UserId Initiator;
    ChannelId ChannelId;
    DataPriority DataPriority;
    Segmentation Segmentation;
    OctetString UserData;
}

type ErectDomainRequest
{
    Integer SubHeight with Asn1Encoding {LowerEndValue = 0};
    Integer SubInterval with Asn1Encoding {LowerEndValue = 0};
}

type AttachUserRequest
{
}

type AttachUserConfirm
{
    Result Result;
    optional UserId Initiator with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1};
}

type ChannelJoinRequest
{
    UserId Initiator;
    ChannelId ChannelId;
}

type ChannelJoinConfirm
{
    Result Result;
    UserId Initiator;
    ChannelId Requested;
    optional ChannelId ChannelId with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1};
}
    
type PlumbDomainIndication{}
type MergeChannelsRequest{}
type MergeChannelsConfirm{}
type PurgeChannelsIndication{}
type MergeTokensRequest{}
type MergeTokensConfirm{}
type PurgeTokensIndication{}

type DisconnectProviderUltimatum
{
    Reason Reason;
}

type RejectMCSPDUUltimatum{}
type DetachUserRequest{}
type DetachUserIndication{}
type ChannelLeaveRequest{}
type ChannelConveneRequest{}
type ChannelConveneConfirm{}
type ChannelDisbandRequest{}
type ChannelDisbandIndication{}
type ChannelAdmitRequest{}
type ChannelAdmitIndication{}
type ChannelExpelRequest{}
type ChannelExpelIndication{}
type UniformSendDataRequest{}
type UniformSendDataIndication{}
type TokenGrabRequest{}
type TokenGrabConfirm{}
type TokenInhibitRequest{}
type TokenInhibitConfirm{}
type TokenGiveRequest{}
type TokenGiveIndication{}
type TokenGiveResponse{}
type TokenGiveConfirm{}
type TokenPleaseRequest{}
type TokenPleaseIndication{}
type TokenReleaseRequest{}
type TokenReleaseConfirm{}
type TokenTestRequest{}
type TokenTestConfirm{}
    
pattern PlumbDomainIndicationPattern = PlumbDomainIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 0};
pattern ErectDomainRequestPattern = ErectDomainRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 1};
pattern MergeChannelsRequestPattern = MergeChannelsRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 2};
pattern MergeChannelsConfirmPattern = MergeChannelsConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 3};
pattern PurgeChannelsIndicationPattern = PurgeChannelsIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 4};
pattern MergeTokensRequestPattern = MergeTokensRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 5};
pattern MergeTokensConfirmPattern = MergeTokensConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 6};
pattern PurgeTokensIndicationPattern = PurgeTokensIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 7};
pattern DisconnectProviderUltimatumPattern = DisconnectProviderUltimatum with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 8};
pattern RejectMCSPDUUltimatumPattern = RejectMCSPDUUltimatum with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 9};
pattern AttachUserRequestPattern = AttachUserRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 10};
pattern AttachUserConfirmPattern = AttachUserConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 11};
pattern DetachUserRequestPattern = DetachUserRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 12};
pattern DetachUserIndicationPattern = DetachUserIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 13};
pattern ChannelJoinRequestPattern = ChannelJoinRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 14};
pattern ChannelJoinConfirmPattern = ChannelJoinConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 15};
pattern ChannelLeaveRequestPattern = ChannelLeaveRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 16};
pattern ChannelConveneRequestPattern = ChannelConveneRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 17};
pattern ChannelConveneConfirmPattern = ChannelConveneConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 18};
pattern ChannelDisbandRequestPattern = ChannelDisbandRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 19};
pattern ChannelDisbandIndicationPattern = ChannelDisbandIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 20};
pattern ChannelAdmitRequestPattern = ChannelAdmitRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 21};
pattern ChannelAdmitIndicationPattern = ChannelAdmitIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 22};
pattern ChannelExpelRequestPattern = ChannelExpelRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 23};
pattern ChannelExpelIndicationPattern = ChannelExpelIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 24};
pattern SendDataRequestPattern = SendDataRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 25};
pattern SendDataIndicationPattern = SendDataIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 26};
pattern UniformSendDataRequestPattern = UniformSendDataRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 27};
pattern UniformSendDataIndicationPattern = UniformSendDataIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 28};
pattern TokenGrabRequestPattern = TokenGrabRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 29};
pattern TokenGrabConfirmPattern = TokenGrabConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 30};
pattern TokenInhibitRequestPattern = TokenInhibitRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 31};
pattern TokenInhibitConfirmPattern = TokenInhibitConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 32};
pattern TokenGiveRequestPattern = TokenGiveRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 33};
pattern TokenGiveIndicationPattern = TokenGiveIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 34};
pattern TokenGiveResponsePattern = TokenGiveResponse with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 35};
pattern TokenGiveConfirmPattern = TokenGiveConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 36};
pattern TokenPleaseRequestPattern = TokenPleaseRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 37};
pattern TokenPleaseIndicationPattern = TokenPleaseIndication with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 38};
pattern TokenReleaseRequestPattern = TokenReleaseRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 39};
pattern TokenReleaseConfirmPattern = TokenReleaseConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 40};
pattern TokenTestRequestPattern = TokenTestRequest with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 41};
pattern TokenTestConfirmPattern = TokenTestConfirm with Asn1Encoding {TagClass = Asn1TagClass.ContextSpecific, TagNumber = 42};

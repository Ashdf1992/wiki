module FileSyncBasicType with
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-FSSHTTPB", Version = "6.0"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="11/02/2014"},
        ]
};

//
// module FileSyncBasicType:
// 
//  1) Extracted from MS-FSSHTTPB to avoid the cross-reference between MS-FSSHTTPB
//     and MS-FSSHTTPD
//  2) Provide some common routines
//
using Utility;
using Diagnostics;

type CompactUnsigned64bitIntegerWrapper
{
    CompactUnsigned64bitInteger Data with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};
}

// ====================== 2.2.1.1   Compact Unsigned 64-bit Integer ====================== 
pattern CompactUnsigned64bitInteger = CompactUintBase with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};

type CompactUintBase
{
    virtual uint GetValue()
    {
        return 0;
    }
}

// Section 2.2.1.1.1   Compact Uint Zero
type CompactUintZero : CompactUintBase
{
    byte Uint where value == 0x0;
    
    override string ToString()
    {
        return Format("Compact Uint Zero (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint;
    }
}

// Section 2.2.1.1.2   Compact Uint 7 bit values
type CompactUint7bitValues : CompactUintBase
{
    byte A where value == 0x1;
    byte Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 7 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint;
    }
}with Encoding{Decoder = CompactUint7bitValuesDecoder}; 

// Section 2.2.1.1.3   Compact Uint 14 bit values
type CompactUint14bitValues : CompactUintBase
{
    byte A where value == 0x2;
    ushort Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 14 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint;
    }
}with Encoding{Decoder = CompactUint14bitValuesDecoder}; 

// Section 2.2.1.1.4   Compact Uint 21 bit values
type CompactUint21bitValues : CompactUintBase
{
    byte A where value == 0x4;
    uint Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 21 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint;
    }
}with Encoding{Decoder = CompactUint21bitValuesDecoder}; 

// Section 2.2.1.1.5   Compact Uint 28 bit values
type CompactUint28bitValues : CompactUintBase
{
    byte A where value == 0x8;
    uint Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 28 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint;
    }
}with Encoding{Decoder = CompactUint28bitValuesDecoder}; 

// Section 2.2.1.1.6   Compact Uint 35 bit values
type CompactUint35bitValues : CompactUintBase
{
    byte A where value == 0x10;
    ulong Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 35 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint as uint;
    }
}with Encoding{Decoder = CompactUint35bitValuesDecoder}; 

// Section 2.2.1.1.7   Compact Uint 42 bit values
type CompactUint42bitValues : CompactUintBase
{
    byte A where value == 0x20;
    ulong Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 42 bit values (value = {0})", Uint);
    }
    
    override uint GetValue()
    {
        return Uint as uint;
    }
}with Encoding{Decoder = CompactUint42bitValuesDecoder}; 

// Section 2.2.1.1.8   Compact Uint 49 bit values
type CompactUint49bitValues : CompactUintBase
{
    byte A where value == 0x40;
    ulong Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 49 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint as uint;
    }
}with Encoding{Decoder = CompactUint49bitValuesDecoder}; 

// Section 2.2.1.1.9   Compact Uint 64 bit values
type CompactUint64bitValues : CompactUintBase
{
    byte A where value == 0x80;
    ulong Uint;
    
    override string ToString()
    {
        return Format("Compact Uint 64 bit values (value = {0})", Uint);
    }

    override uint GetValue()
    {
        return Uint as uint;
    }
}

// Section 2.2.1.2   File Chunk Reference
type FileChunkReference
{
    CompactUnsigned64bitInteger Start;
    CompactUnsigned64bitInteger Length;
}

// Section 2.2.1.3   Binary Item
type BinaryItem
{
    CompactUnsigned64bitInteger Length;
    binary Content with BinaryEncoding{Length = Length.Uint};
}

// Section 2.2.1.4   String Item
type StringItem
{
    CompactUnsigned64bitInteger Count;
    string Content with BinaryEncoding{TextEncoding = TextEncoding.UTF16, Length = Count.Uint};
};

// ====================== 2.2.1.5   Stream Object Header ====================== 
pattern StreamObjectHeader = StreamObjectHeaderBase with Encoding{Decoder = StreamObjectHeaderDecoder};

type StreamObjectHeaderBase
{
}

// Section 2.2.1.5.1   16-bit Stream Object Header Start
type StreamObjectStart16BitHeader : StreamObjectHeaderBase
{
    byte A;
    byte B;
    StreamObjectStart16BitHeaderType Type;
    byte Length;

    override string ToString()
    {
        return "16-bit Stream Object Header Start";
    }
}with Encoding{Decoder = StreamObjectStart16BitHeaderDecoder};

pattern StreamObjectStart16BitHeaderType = enum byte
{
    $"Data element"                               = 0x01,
    $"Object data BLOB"                           = 0x02,
    $"Object group object excluded data "         = 0x03,
    $"Waterline knowledge entry"                  = 0x04,
    $"Object group object BLOB data declaration"  = 0x05,
    $"Data element hash"                          = 0x06,
    $"Storage manifest root declare"              = 0x07,
    $"Revision manifest root declare"             = 0x0A,
    $"Cell manifest current revision"             = 0x0B,
    $"Storage manifest schema GUID"               = 0x0C,
    $"Storage index revision mapping"             = 0x0D,
    $"Storage index cell mapping"                 = 0x0E,
    $"Cell knowledge range"                       = 0x0F,
    $"Knowledge"                                  = 0x10,
    $"Storage index manifest mapping"             = 0x11,
    $"Cell Knowledge"                             = 0x14,
    $"Data element package"                       = 0x15,
    $"Object group object data"                   = 0x16,
    $"Cell knowledge entry"                       = 0x17,
    $"Object group object declare"                = 0x18,
    $"Revision manifest object group references"  = 0x19,
    $"Revision manifest"                          = 0x1A,
    $"Object group object data BLOB reference"    = 0x1C,
    $"Object group declarations"                  = 0x1D,
    $"Object group data"                          = 0x1E,
    $"Waterline knowledge"                        = 0x29,
    $"Content tag knowledge"                      = 0x2D,
    $"Content tag knowledge entry"                = 0x2E,
    ...
};

// Section 2.2.1.5.2   32-bit Stream Object Header Start
type StreamObjectStart32BitHeader : StreamObjectHeaderBase
{
    byte A;
    byte B;
    StreamObjectStart32BitHeaderType Type;
    uint Length;
    optional CompactUnsigned64bitInteger LargeLength;

    override string ToString()
    {
        return "32-bit Stream Object Header Start";
    }
}with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};

pattern StreamObjectStart32BitHeaderType = enum ushort
{
    $"Object Group Object Excluded Data"      = 0x16,  // TDI ? not addressed by TD.
    $"Request"                                = 0x040,
    $"Sub-response"                           = 0x041,
    $"sub-request"                            = 0x042,
    $"Read access response"                   = 0x043,
    $"Specialized knowledge"                  = 0x044,
    $"Write access response"                  = 0x046,
    $"Query changes filter"                   = 0x047,
    $"Error Win32"                            = 0x049,
    $"Error Protocol"                         = 0x04B,
    $"Error"                                  = 0x04D,
    $"Error String Supplemental Info"         = 0x04E,
    $"User agent version"                     = 0x04F,
    $"Query changes filter schema specific"   = 0x050,
    $"Query changes request"                  = 0x051,
    $"Error HRESULT"                          = 0x052,
    $"Query changes filter data element IDs"  = 0x054,
    $"User agent GUID"                        = 0x055,
    $"Query changes filter data element type" = 0x057,
    $"Query changes data constraint"          = 0x059,
    $"Put changes request"                    = 0x05A,
    $"Query changes request arguments"        = 0x05B,
    $"Query changes filter cell ID"           = 0x05C,
    $"User agent"                             = 0x05D,
    $"Query changes response"                 = 0x05F,
    $"Query changes filter hierarchy"         = 0x060,
    $"Response"                               = 0x062,
    $"Error cell"                             = 0x066,
    $"Query changes filter flags"             = 0x068,
    $"Data element fragment"                  = 0x06A,
    $"Fragment knowledge"                     = 0x06B,
    $"Fragment knowledge entry"               = 0x06C,
    $"Object group metadata declarations"     = 0x79,
    $"Object group metadata"                  = 0x78,
    $"Allocate ExtendedGUID range request"    = 0x080,
    $"Allocate ExtendedGUID range response"   = 0x081,
    $"Target Partition Id"                    = 0x83,
    $"Put Changes Lock Id"                    = 0x85,
    $"Additional Flags"                       = 0x86,
    $"Put Changes Response"                   = 0x87,
    $"Request hashing options"                = 0x88,
    $"Diagnostic Request Option Output"       = 0x89,
    $"Diagnostic Request Option Input"        = 0x8A,
    $"User Agent Client and Platform"         = 0x8B,
    ...
};

// Section 2.2.1.5.3   8-bit Stream Object Header End
type StreamObjectEnd8BitHeader : StreamObjectHeaderBase
{
    byte A;
    StreamObjectEnd8BitHeaderType Type;
    
    override string ToString()
    {
        return "8-bit Stream Object Header End";
    }
}with Encoding{Decoder = StreamObjectEnd8BitHeaderDecoder};

pattern StreamObjectEnd8BitHeaderType = enum byte
{
    $"Data element"              = 0x01,
    $"Knowledge"                 = 0x10,
    $"Cell Knowledge"            = 0x14,
    $"Data element package"      = 0x15,
    $"Object group declarations" = 0x1D,
    $"Object group data"         = 0x1E,
    $"Waterline knowledge"       = 0x29,
    $"Content tag knowledge"     = 0x2D,
    ...
};

// Section 2.2.1.5.4   16-bit Stream Object Header End
type StreamObjectEnd16BitHeader : StreamObjectHeaderBase
{
    byte A;
    StreamObjectEnd16BitHeaderType Type;
    
    override string ToString()
    {
        return "16-bit Stream Object Header End";
    }
}with Encoding{Decoder = StreamObjectEnd16BitHeaderDecoder};

pattern StreamObjectEnd16BitHeaderType = enum ushort
{
    $"Request"                            = 0x040,
    $"Sub-response"                       = 0x041,
    $"sub-request"                        = 0x042,
    $"Read access response"               = 0x043,
    $"Specialized knowledge"              = 0x044,
    $"Write access response"              = 0x046,
    $"Query changes filter"               = 0x047,
    $"Error"                              = 0x04D,
    $"Query changes request"              = 0x051,
    $"User agent"                         = 0x05D,
    $"Response"                           = 0x062,
    $"Fragment knowledge"                 = 0x06B,
    $"Object group metadata declarations" = 0x079,
    ...
};

// Section 2.2.1.6   Request Type Enumeration
pattern RequestTypeEnumeration = enum byte
{
    $"Query access" = 1,
    $"Query changes" = 2,
    $"Put changes" = 5,
    $"Allocate ExtendedGuid range" = 11,
    ...
};

// ======================  2.2.1.7   Extended GUID ======================
pattern ExtendedGUID = ExtendedGUIDBase with Encoding{Decoder = ExtendedGUIDDecoder};

// WORKAROUND
type ExtendedGUIDWrapper
{
    ExtendedGUID ExtendedGUID with Encoding{Decoder = ExtendedGUIDDecoder};
}

type ExtendedGUIDBase
{
    virtual uint GetValue()
    {
        return 0;
    }
}

// Section 2.2.1.7.1   Extended GUID Null Value
type ExtendedGUIDNullValue : ExtendedGUIDBase
{
    byte Type where ValidationCheck(value == 0x0, null, "MS-FSSHTTPB: The Type field in type ExtendedGUIDNullValue MUST be zero.");
    
    override string ToString()
    {
        return "Extended GUID Null Value";
    }

    override uint GetValue()
    {
        return 0;
    }
}

// Section 2.2.1.7.2   Extended GUID 5 Bit Uint Value
type ExtendedGUID5BitUintValue : ExtendedGUIDBase
{
    byte Type where ValidationCheck(value == 0x4, null, "MS-FSSHTTPB: The Type field in type ExtendedGUID5BitUintValue MUST be 4.");
    byte Value;
    guid GUID where ValidationCheck(value != {00000000-0000-0000-0000-000000000000}, null, "MS-FSSHTTPB: The GUID field in type ExtendedGUID5BitUintValue MUST NOT be \"{00000000-0000-0000-0000-000000000000}\".");
    
    override string ToString()
    {
        return Format("Extended GUID 5 Bit Uint Value (value = {0},guid = {1})", Value, GUID);
    }

    override uint GetValue()
    {
        return Value;
    }
}with Encoding{Decoder = ExtendedGUID5BitUintValueDecoder}; 

// Section 2.2.1.7.3   Extended GUID 10 Bit Uint Value
type ExtendedGUID10BitUintValue : ExtendedGUIDBase
{
    byte Type where ValidationCheck(value == 0x20, null, "MS-FSSHTTPB: The Type field in type ExtendedGUID10BitUintValue MUST be 32.");
    ushort Value;
    guid GUID where ValidationCheck(value != {00000000-0000-0000-0000-000000000000}, null, "MS-FSSHTTPB: The GUID field in type ExtendedGUID10BitUintValue MUST NOT be \"{00000000-0000-0000-0000-000000000000}\".");

    override string ToString()
    {
        return Format("Extended GUID 10 Bit Uint Value (value = {0},guid = {1})", Value, GUID);
    }

    override uint GetValue()
    {
        return Value;
    }
}with Encoding{Decoder = ExtendedGUID10BitUintValueDecoder}; 

// Section 2.2.1.7.4   Extended GUID 17 Bit Uint Value
type ExtendedGUID17BitUintValue : ExtendedGUIDBase
{
    byte Type where ValidationCheck(value == 0x40, null, "MS-FSSHTTPB: The Type field in type ExtendedGUID17BitUintValue MUST be 64.");
    uint Value;
    guid GUID where ValidationCheck(value != {00000000-0000-0000-0000-000000000000}, null, "MS-FSSHTTPB: The GUID field in type ExtendedGUID17BitUintValue MUST NOT be \"{00000000-0000-0000-0000-000000000000}\".");
    
    override string ToString()
    {
        return Format("Extended GUID 17 Bit Uint Value (value = {0},guid = {1})", Value, GUID);
    }

    override uint GetValue()
    {
        return Value;
    }
}with Encoding{Decoder = ExtendedGUID17BitUintValueDecoder}; 

// Section 2.2.1.7.5   Extended GUID 32 Bit Uint Value
type ExtendedGUID32BitUintValue : ExtendedGUIDBase
{
    byte Type where ValidationCheck(value == 0x80, null, "MS-FSSHTTPB: The Type field in type ExtendedGUID32BitUintValue MUST be 128.");
    uint Value;
    guid GUID where ValidationCheck(value != {00000000-0000-0000-0000-000000000000}, null, "MS-FSSHTTPB: The GUID field in type ExtendedGUID32BitUintValue MUST NOT be \"{00000000-0000-0000-0000-000000000000}\".");
    
    override string ToString()
    {
        return Format("Extended GUID 32 Bit Uint Value (value = {0},guid = {1})", Value, GUID);
    }

    override uint GetValue()
    {
        return Value;
    }
}

// Section 2.2.1.8   Extended GUID Array
type ExtendedGUIDArray
{
    CompactUnsigned64bitInteger Count;
    optional [|Count.Uint > 0|] (Blob | array<ExtendedGUID>) Content with Encoding{Decoder = ContentDecoder};
    
    optional (Blob | array<ExtendedGUID>) ContentDecoder(stream s)
    {
        uint count = Count.Uint;
        
        if (count > 50)
        {
            int startPos = 0;
            int currPos = startPos;
            
            for (int i = 0; i < count; i++)
            {
                int currLen = GetExtendedGUIDBytesLen(s, currPos);
                currPos += currLen;
            }

            return BinaryDecoder<Blob[(currPos - startPos) as uint]>(s);
        }
        
        array<ExtendedGUID> guidArr = [];
        
        for (int i = 0; i < count; i++)
        {
            guidArr += [(BinaryDecoder<ExtendedGUIDWrapper>(s) as ExtendedGUIDWrapper).ExtendedGUID];
        }
        
        return guidArr;
    }
    
    override string ToString()
    {
        if (Count.Uint > 50)
        {
            return Format("The count({0}) of ExtendGuid is so big which have been beyond the ability of MMA",
                           Count.Uint);
        }
        
        return Format("{0} ExtendGuid(s)", Count.Uint);
    }
}

// ====================== 2.2.1.9   SerialNumber ======================
pattern SerialNumber = [|CurrentByte(stream) == 0x0|] SerialNumberNullValue | 
                       [|CurrentByte(stream) == 0x80|] SerialNumber64BitUintValue;

// Section 2.2.1.9.1   Serial Number Null Value
type SerialNumberNullValue
{
    byte Type where ValidationCheck(value == 0x0, null, "MS-FSSHTTPB: The Type field in type SerialNumberNullValue MUST be zero.");
    
    override string ToString()
    {
        return "Serial Number Null Value";
    }
}

// Section 2.2.1.9.2   Serial Number 64 Bit Uint Value
type SerialNumber64BitUintValue
{
    byte Type where ValidationCheck(value == 0x80, null, "MS-FSSHTTPB: The Type field in type SerialNumber64BitUintValue MUST be 128.");
    guid GUID where ValidationCheck(value != {00000000-0000-0000-0000-000000000000}, null, "MS-FSSHTTPB: The GUID field in type SerialNumber64BitUintValue MUST NOT be \"{00000000-0000-0000-0000-000000000000}\".");
    ulong Value;
    
    override string ToString()
    {
        return Format("Serial Number 64 Bit Uint Value (value = {0},GUID = {1}", Value, GUID);
    }
}

// Section 2.2.1.10   Cell ID
type CellID
{
    ExtendedGUID EXGUID1;
    ExtendedGUID EXGUID2;
}

// Section 2.2.1.11   Cell ID Array
type CellIDArray
{
    CompactUnsigned64bitInteger Count;
    optional [|Count.Uint > 0|] (Blob | array<CellID>) Content with Encoding{Decoder = ContentDecoder};
    
    optional (Blob | array<CellID>) ContentDecoder(stream s)
    {
        uint count = Count.Uint;
        
        if (count > 50)
        {
            int startPos = 0;
            int currPos = startPos;
            
            for (int i = 0; i < count; i++)
            {
                int exLen1 = GetExtendedGUIDBytesLen(s, currPos);
                currPos += exLen1;
                int exLen2 = GetExtendedGUIDBytesLen(s, currPos);
                currPos += exLen2;
            }

            return BinaryDecoder<Blob[(currPos - startPos) as uint]>(s);
        }
        
        array<CellID> cellIdArr = [];
        
        for (int i = 0; i < count; i++)
        {
            cellIdArr += [BinaryDecoder<CellID>(s) as CellID];
        }
        
        return cellIdArr;
    }
    
    override string ToString()
    {
        if (Count.Uint > 50)
        {
            return Format("The count({0}) of Cell ID is so big which have been beyond the ability of MMA",
                           Count.Uint);
        }
        
        return Format("{0} Cell ID(s)", Count.Uint);
    }
}

// ================== Utility functions ==================
uint get Uint(this CompactUnsigned64bitInteger compactUint)
{
    return (compactUint as CompactUintBase).GetValue();
}

optional CompactUintBase CompactUnsigned64bitIntegerDecoder(stream payloadStream)
{
    optional CompactUintBase resultObj = null;
    byte lsb = payloadStream.CurrentByte;
    
    if (lsb == 0x0)
        resultObj = BinaryDecoder<CompactUintZero>(payloadStream);
    else if (lsb == 0x80)
        resultObj = BinaryDecoder<CompactUint64bitValues>(payloadStream);
    else if ((lsb & 0x01) == 0x1)
        resultObj = CompactUint7bitValuesDecoder(payloadStream);
    else if ((lsb & 0x03) == 0x2)
        resultObj = CompactUint14bitValuesDecoder(payloadStream);
    else if ((lsb & 0x07) == 0x4)
        resultObj = CompactUint21bitValuesDecoder(payloadStream);
    else if ((lsb & 0x0F) == 0x8)
        resultObj = CompactUint28bitValuesDecoder(payloadStream);
    else if ((lsb & 0x1F) == 0x10)
        resultObj = CompactUint35bitValuesDecoder(payloadStream);
    else if ((lsb & 0x3F) == 0x20)
        resultObj = CompactUint42bitValuesDecoder(payloadStream);
    else if ((lsb & 0x7F) == 0x40)
        resultObj = CompactUint49bitValuesDecoder(payloadStream);
        
    return resultObj;
}

optional CompactUint7bitValues CompactUint7bitValuesDecoder(stream payloadStream)
{
    CompactUint7bitValues result = new CompactUint7bitValues();
    byte rawValue = BinaryDecoder<byte>(payloadStream) as byte;
    result.A = (rawValue & 0x01) as byte;
    result.Uint = (rawValue >> 1 & 0x7F) as byte;
    return result;
}

optional CompactUint14bitValues CompactUint14bitValuesDecoder(stream payloadStream)
{
    CompactUint14bitValues result = new CompactUint14bitValues();
    ushort rawValue = BinaryDecoder<ushort>(payloadStream) as ushort;
    result.A = (rawValue & 0x03) as byte;
    result.Uint = (rawValue >> 2 & 0x3FFF) as ushort;
    return result;
}

optional CompactUint21bitValues CompactUint21bitValuesDecoder(stream payloadStream)
{
    CompactUint21bitValues result = new CompactUint21bitValues();
    uint rawValue = BinaryDecodeToUlong(payloadStream, 3) as uint;
    result.A = (rawValue & 0x07) as byte;
    result.Uint = (rawValue >> 3 & 0x1FFFFF) as uint;
    return result;
}

optional CompactUint28bitValues CompactUint28bitValuesDecoder(stream payloadStream)
{
    CompactUint28bitValues result = new CompactUint28bitValues();
    uint rawValue = BinaryDecoder<uint>(payloadStream) as uint;
    result.A = (rawValue & 0x0F) as byte;
    result.Uint = (rawValue >> 4 & 0xFFFFFFF) as uint;
    return result;
}

optional CompactUint35bitValues CompactUint35bitValuesDecoder(stream payloadStream)
{
    CompactUint35bitValues result = new CompactUint35bitValues();
    ulong rawValue = BinaryDecodeToUlong(payloadStream, 5) as ulong;
    result.A = (rawValue & 0x1F) as byte;
    result.Uint = (rawValue >> 5 & 0x7FFFFFFFF) as ulong;
    return result;
}

optional CompactUint42bitValues CompactUint42bitValuesDecoder(stream payloadStream)
{
    CompactUint42bitValues result = new CompactUint42bitValues();
    ulong rawValue = BinaryDecodeToUlong(payloadStream, 6) as ulong;
    result.A = (rawValue & 0x3F) as byte;
    result.Uint = (rawValue >> 6 & 0x3FFFFFFFFFF) as ulong;
    return result;
}

optional CompactUint49bitValues CompactUint49bitValuesDecoder(stream payloadStream)
{
    CompactUint49bitValues result = new CompactUint49bitValues();
    ulong rawValue = BinaryDecodeToUlong(payloadStream, 7) as ulong;
    result.A = (rawValue & 0x7F) as byte;
    result.Uint = (rawValue >> 7 & 0x1FFFFFFFFFFFF) as ulong;
    return result;
}

ulong ReadCompactUnsigned64bitIntegerValue(stream payloadStream, int byteOffset)
{
    int currentBitOffset = payloadStream.BitPosition + byteOffset * 8;
    byte lsb = payloadStream.PeekBytes(currentBitOffset, 1)[0] as byte;
    
    if (lsb == 0x0)
        return lsb as ulong;
        
    if (lsb == 0x80)
        return GetBigEnidanUlong(payloadStream, currentBitOffset + 8, 8);

    if ((lsb & 0x01) == 0x1) 
        return (lsb >> 1 & 0x7F) as ulong;
    
    if ((lsb & 0x03) == 0x2)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 2) as ulong;
        return (rawValue >> 2 & 0x3FFF) as ulong;
    }

    if ((lsb & 0x07) == 0x4)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 3) as ulong;
        return (rawValue >> 3 & 0x1FFFFF) as ulong;
    }
        
    if ((lsb & 0x0F) == 0x8)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 4) as ulong;
        return (rawValue >> 4 & 0xFFFFFFF) as ulong;
    }

    if ((lsb & 0x1F) == 0x10)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 5) as ulong;
        return (rawValue >> 5 & 0x7FFFFFFFF) as ulong;
    }
        
    if ((lsb & 0x3F) == 0x20)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 6) as ulong;
        return (rawValue >> 6 & 0x3FFFFFFFFFF) as ulong;
    }
    
    if ((lsb & 0x7F) == 0x40)
    {
        ulong rawValue = GetBigEnidanUlong(payloadStream, currentBitOffset, 7) as ulong;
        return (rawValue >> 7 & 0x1FFFFFFFFFFFF) as ulong;
    }

    return 0;
}

optional ExtendedGUIDBase ExtendedGUIDDecoder(stream payloadStream)
{
    optional ExtendedGUIDBase resultObj = null;
    byte lsb = payloadStream.CurrentByte;
 
    if (lsb == 0x0)
        resultObj = BinaryDecoder<ExtendedGUIDNullValue>(payloadStream);
        
    if (lsb == 0x80) 
        resultObj = BinaryDecoder<ExtendedGUID32BitUintValue>(payloadStream);
    
    if ((lsb & 0x07) == 0x4) 
        resultObj = ExtendedGUID5BitUintValueDecoder(payloadStream);
    
    if ((lsb & 0x3F) == 0x20) 
        resultObj = ExtendedGUID10BitUintValueDecoder(payloadStream);
    
    if ((lsb & 0x7F) == 0x40) 
        resultObj = ExtendedGUID17BitUintValueDecoder(payloadStream);
    
    return resultObj;
}

uint get DataLength(this StreamObjectHeaderBase header)
{
    if (header is headerObj_1:StreamObjectStart16BitHeader)
    {
        return headerObj_1.Length;
    }
        
    if (header is headerObj_2:StreamObjectStart32BitHeader)
    {
        if (headerObj_2.Length != 32767)
            return headerObj_2.Length;
        return (headerObj_2.LargeLength as CompactUnsigned64bitInteger).Uint;
    }
    
    return 0;
}

optional StreamObjectHeaderBase StreamObjectHeaderDecoder(stream payloadStream)
{
    optional StreamObjectHeaderBase resultObj = null;
    byte lsb = payloadStream.CurrentByte;
        
    if ((lsb & 0x03) == 0x0) 
        resultObj = StreamObjectStart16BitHeaderDecoder(payloadStream);
    
    if ((lsb & 0x03) == 0x2) 
        resultObj = StreamObjectStart32BitHeaderDecoder(payloadStream);
        
    if ((lsb & 0x03) == 0x1) 
        resultObj = StreamObjectEnd8BitHeaderDecoder(payloadStream);
        
    if ((lsb & 0x03) == 0x3) 
        resultObj = StreamObjectEnd16BitHeaderDecoder(payloadStream);

    return resultObj;
}
    
optional StreamObjectStart16BitHeader StreamObjectStart16BitHeaderDecoder(stream payloadStream)
{
    StreamObjectStart16BitHeader result = new StreamObjectStart16BitHeader();
    ushort header16BitValue = BinaryDecoder<ushort>(payloadStream) as ushort;
    result.A        = (header16BitValue & 0x03) as byte;
    result.B        = (header16BitValue >> 2 & 0x01) as byte;
    result.Type     = (header16BitValue >> 3 & 0x3F) as byte;
    result.Length   = (header16BitValue >> 9 & 0x7F) as byte;
        
    return result;
}   

optional StreamObjectStart32BitHeader StreamObjectStart32BitHeaderDecoder(stream payloadStream)
{
    int startBitPosition = payloadStream.BitPosition;
    StreamObjectStart32BitHeader result = new StreamObjectStart32BitHeader();
	uint header32BitValue;
	if (BinaryDecoder<uint>(payloadStream) != nothing)
	{
		header32BitValue = BinaryDecoder<uint>(payloadStream) as uint;
	}
    result.A        = (header32BitValue & 0x03) as byte;
    result.B        = (header32BitValue >> 2 & 0x01) as byte;
    result.Type     = (header32BitValue >> 3 & 0x3FFF) as ushort;
    result.Length   = (header32BitValue >> 17 & 0x7FFF) as ushort;

    // Associate the filed with raw stream source.
    result.AssignFieldEncodingInfo("A", startBitPosition, 2);
    result.AssignFieldEncodingInfo("B", startBitPosition + 2, 1);
    result.AssignFieldEncodingInfo("Type", startBitPosition + 3, 14);
    result.AssignFieldEncodingInfo("Length", startBitPosition + 17, 15);
    
    if (result.Length == 32767)
        result.LargeLength = (BinaryDecoder<CompactUnsigned64bitIntegerWrapper>(payloadStream) 
                              as CompactUnsigned64bitIntegerWrapper).Data;
        
    return result;
}   

optional StreamObjectEnd8BitHeader StreamObjectEnd8BitHeaderDecoder(stream payloadStream)
{
    StreamObjectEnd8BitHeader result = new StreamObjectEnd8BitHeader();
    byte header8BitValue;
	if (BinaryDecoder<byte>(payloadStream) != nothing)
	{
		header8BitValue = BinaryDecoder<byte>(payloadStream) as byte;
	}
    result.A        = (header8BitValue & 0x03) as byte;
    result.Type     = (header8BitValue >> 2 & 0x3F) as byte;      
    return result;
}   

optional StreamObjectEnd16BitHeader StreamObjectEnd16BitHeaderDecoder(stream payloadStream)
{
    StreamObjectEnd16BitHeader result = new StreamObjectEnd16BitHeader();
	ushort header16BitValue;
	if (BinaryDecoder<ushort>(payloadStream) != nothing)
	{
		header16BitValue = BinaryDecoder<ushort>(payloadStream) as ushort;
	}
    result.A        = (header16BitValue & 0x03) as byte;
    result.Type     = (header16BitValue >> 2 & 0x3FFF) as ushort;      
    return result;
}   

optional ExtendedGUID5BitUintValue ExtendedGUID5BitUintValueDecoder(stream payloadStream)
{
    ExtendedGUID5BitUintValue result = new ExtendedGUID5BitUintValue();
    byte rawValue;
	if (BinaryDecoder<byte>(payloadStream) != nothing)
	{
		rawValue = BinaryDecoder<byte>(payloadStream) as byte;
	} 
    result.Type = (rawValue & 0x07) as byte;
    result.Value = (rawValue >> 3 & 0x1F) as byte;
    result.GUID = BinaryDecoder<guid>(payloadStream) as guid;
    return result;
}

optional ExtendedGUID10BitUintValue ExtendedGUID10BitUintValueDecoder(stream payloadStream)
{
    ExtendedGUID10BitUintValue result = new ExtendedGUID10BitUintValue();
    ushort rawValue;
	if (BinaryDecoder<ushort>(payloadStream) != nothing)
	{
		rawValue = BinaryDecoder<ushort>(payloadStream) as ushort;
	}
    result.Type = (rawValue & 0x3F) as byte;
    result.Value = (rawValue >> 6 & 0x3FF) as ushort;
    result.GUID = BinaryDecoder<guid>(payloadStream) as guid;
    return result;
}

optional ExtendedGUID17BitUintValue ExtendedGUID17BitUintValueDecoder(stream payloadStream)
{
    ExtendedGUID17BitUintValue result = new ExtendedGUID17BitUintValue();
    uint rawValue;
	if (BinaryDecodeToUlong(payloadStream, 3) != nothing)
	{
		rawValue =  BinaryDecodeToUlong(payloadStream, 3) as uint;
	}
    result.Type = (rawValue & 0x7F) as byte;
    result.Value = (rawValue >> 7 & 0x1FFFF) as uint;
    result.GUID = BinaryDecoder<guid>(payloadStream) as guid;
    return result;
}

uint get Value(this ExtendedGUID extendGuid)
{
    return (extendGuid as ExtendedGUIDBase).GetValue();
}

uint get Value(this SerialNumber serialNumberValue)
{
    if (serialNumberValue is SerialNumberNullValue)
        return 0;
        
    if (serialNumberValue is SerialNumber64BitUintValue)
        return (serialNumberValue as SerialNumber64BitUintValue).Value as uint;

    return 0;
}

bool ValidationCheckHeader(optional StreamObjectHeaderBase header, ushort expectedType)
{
    if (header == nothing)
        return false;
    
    if (header is StreamObjectStart16BitHeader)
        return ValidationCheck((header as StreamObjectStart16BitHeader).Type as ushort == expectedType,
            null, DiagnosisLevel.Error, Format("MS-FSSHTTPB: The Type filed in current StreamObjectStart16BitHeader should be {0}",
            EnumToString<StreamObjectStart16BitHeaderType>(expectedType as StreamObjectStart16BitHeaderType, true)));
    if (header is StreamObjectStart32BitHeader)
        return ValidationCheck((header as StreamObjectStart32BitHeader).Type as ushort == expectedType,
            null, DiagnosisLevel.Error, Format("MS-FSSHTTPB: The Type filed in current StreamObjectStart32BitHeader should be {0}", 
            EnumToString<StreamObjectStart32BitHeaderType>(expectedType as StreamObjectStart32BitHeaderType, true)));
            
    if (header is StreamObjectEnd8BitHeader)
        return ValidationCheck((header as StreamObjectEnd8BitHeader).Type as ushort == expectedType,
            null, DiagnosisLevel.Error, Format("MS-FSSHTTPB: The Type filed in current StreamObjectEnd8BitHeader should be {0}", 
            EnumToString<StreamObjectEnd8BitHeaderType>(expectedType as StreamObjectEnd8BitHeaderType, true)));
            
    if (header is StreamObjectEnd16BitHeader)
        return ValidationCheck((header as StreamObjectEnd16BitHeader).Type as ushort == expectedType,
            null, DiagnosisLevel.Error, Format("MS-FSSHTTPB: The Type filed in current StreamObjectEnd16BitHeader should be {0}", 
            EnumToString<StreamObjectEnd16BitHeaderType>(expectedType as StreamObjectEnd16BitHeaderType, true)));

    return true;
}

bool ContainsStreamObjectHeader(stream payloadStream, ushort headerType)
{
    byte lsb = payloadStream.CurrentByte;
    
    // StreamObjectStart16BitHeader
    if ((lsb & 0x03) == 0x0)
    {
        uint header16BitValue = GetBigEnidanUint(payloadStream, 2);
        return (header16BitValue >> 3 & 0x3F) as ushort == headerType;
    }
    
    // StreamObjectStart32BitHeader
    if ((lsb & 0x03) == 0x2)
    {
        uint header32BitValue = GetBigEnidanUint(payloadStream, 3);
        return (header32BitValue >> 3 & 0x3FFF) as ushort == headerType;
    }
    
    // StreamObjectEnd8BitHeader
    if ((lsb & 0x03) == 0x1)
        return (lsb >> 2 & 0x3F) as ushort == headerType;
    
    // StreamObjectEnd16BitHeader
    if ((lsb & 0x03) == 0x3) 
    {
        uint header16BitValue = GetBigEnidanUint(payloadStream, 2);
        return (header16BitValue >> 2 & 0x3FFF) as ushort == headerType;
    }

    return false;
}

bool ContainsStreamObjectStart32BitHeader(stream payloadStream, ushort headerType)
{
    byte lsb = payloadStream.CurrentByte;
    
    // StreamObjectStart32BitHeader
    if ((lsb & 0x03) == 0x2)
    {
        uint header32BitValue = GetBigEnidanUint(payloadStream, 3);
        return (header32BitValue >> 3 & 0x3FFF) as ushort == headerType;
    }
    
    return false;
}

bool ContainsStreamObjectStart16BitHeader(stream payloadStream, ushort headerType)
{
    byte lsb = payloadStream.CurrentByte;
    
    // StreamObjectStart16BitHeader
    if ((lsb & 0x03) == 0x0)
    {
        uint header16BitValue = GetBigEnidanUint(payloadStream, 2);
        return (header16BitValue >> 3 & 0x3F) as ushort == headerType;
    }

    return false;
}

uint GetBigEnidanUint(stream payloadStream, int byteNumber)
{
    uint result = 0x0;
    
    for (int i = 0; i < byteNumber; i++)
    {
        uint byteOfi = payloadStream.PeekBytes(payloadStream.BitPosition + i * 8, 1)[0] as uint;
        result = result | (byteOfi << 8 * i);
    }

    return result;
}

ulong GetBigEnidanUlong(stream payloadStream, int position, int byteNumber)
{
    ulong result = 0x0;
    
    for (int i = 0; i < byteNumber; i++)
    {
        uint byteOfi = payloadStream.PeekBytes(position + i * 8, 1)[0] as uint;
        result = result | (byteOfi << 8 * i);
    }

    return result;
}

ulong BinaryDecodeToUlong(stream payloadStream, int byteNumber)
{
    ulong result = 0x0;
    
    for (int i = 0; i < byteNumber; i++)
    {
        ulong byteOfi = BinaryDecoder<byte>(payloadStream) as ulong;
        result = result | (byteOfi << 8 * i);
    }

    return result;
}

int GetSerialNumberBytesLen(stream payloadStream, int byteOffset)
{
    byte lsb = payloadStream.PeekBytes(payloadStream.BitPosition + byteOffset * 8, 1)[0] as byte;
    
    if (lsb == 0x0)
        return 1;
        
    if (lsb == 0x80) 
        return 25;

    return 0;
}

int GetExtendedGUIDBytesLen(stream payloadStream, int byteOffset)
{ 
    byte lsb = payloadStream.PeekByte(payloadStream.BitPosition + byteOffset * 8);
    
    if (lsb == 0x0)
        return 1;
        
    if (lsb == 0x80) 
        return 21;

    if ((lsb & 0x07) == 0x4) 
        return 17;

    if ((lsb & 0x3F) == 0x20) 
        return 18;
    
    if ((lsb & 0x7F) == 0x40) 
        return 19;
        
    return 0;
}

ulong PreReadDataElementPackageType(stream payloadStream)
{
    int dataElementStartLen = 2;
    int guidLen = GetExtendedGUIDBytesLen(payloadStream, dataElementStartLen);
    int snLen = GetSerialNumberBytesLen(payloadStream, guidLen + dataElementStartLen);
    return ReadCompactUnsigned64bitIntegerValue(payloadStream, guidLen + dataElementStartLen + snLen);
}

string FlagMeaningToText(any data, string meaning)
{
    byte actualValue = data as byte;
    
    if (actualValue > 0)
        return Format("{0} flag is set", meaning);
    else
        return Format("{0} flag is not set", meaning);
}

// Check if the start point is FSSHTTPB bits
bool IsFSSHTTPBStart(binary payload)
{
    if (payload == null || payload.Count < 4)
        return false;
        
    return payload.Segment(0, 4) == $[0C000B00];
}
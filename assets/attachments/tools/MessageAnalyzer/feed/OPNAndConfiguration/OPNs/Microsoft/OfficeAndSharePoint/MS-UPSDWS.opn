protocol MSUPSDWS with
Documentation
{
    ProtocolName = "User Profile Social Data Web Service Protocol",
    ShortName = "MS-UPSDWS",
    DocumentName = "MS-UPSDWS",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-UPSDWS", Version = "2.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSUPSDWS";

const map<string, string> SoapActionsMap =
{
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/AddComment" -> "AddComment",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/AddTag" -> "AddTag",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/AddTagByKeyword" -> "AddTagByKeyword",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/CountCommentsOfUser" -> "CountCommentsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/CountCommentsOfUserOnUrl" -> "CountCommentsOfUserOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/CountCommentsOnUrl" -> "CountCommentsOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/CountRatingsOnUrl" -> "CountRatingsOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/CountTagsOfUser" -> "CountTagsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/DeleteComment" -> "DeleteComment",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/DeleteRating" -> "DeleteRating",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/DeleteTag" -> "DeleteTag",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/DeleteTagByKeyword" -> "DeleteTagByKeyword",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/DeleteTags" -> "DeleteTags",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetAllTagTerms" -> "GetAllTagTerms",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetAllTagTermsForUrlFolder" -> "GetAllTagTermsForUrlFolder",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetAllTagUrls" -> "GetAllTagUrls",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetAllTagUrlsByKeyword" -> "GetAllTagUrlsByKeyword",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetCommentsOfUser" -> "GetCommentsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetCommentsOfUserOnUrl" -> "GetCommentsOfUserOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetCommentsOnUrl" -> "GetCommentsOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetRatingAverageOnUrl" -> "GetRatingAverageOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetRatingOfUserOnUrl" -> "GetRatingOfUserOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetRatingOnUrl" -> "GetRatingOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetRatingsOfUser" -> "GetRatingsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetRatingsOnUrl" -> "GetRatingsOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetSocialDataForFullReplication" -> "GetSocialDataForFullReplication",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetSocialDataForIncrementalReplication" -> "GetSocialDataForIncrementalReplication",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTags" -> "GetTags",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagsOfUser" -> "GetTagsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagTerms" -> "GetTagTerms",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagTermsOfUser" -> "GetTagTermsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagTermsOnUrl" -> "GetTagTermsOnUrl",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagUrls" -> "GetTagUrls",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagUrlsByKeyword" -> "GetTagUrlsByKeyword",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagUrlsOfUser" -> "GetTagUrlsOfUser",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/GetTagUrlsOfUserByKeyword" -> "GetTagUrlsOfUserByKeyword",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/PropagateRating" -> "PropagateRating",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/ReplicateFullSocialData" -> "ReplicateFullSocialData",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/ReplicateIncrementalSocialData" -> "ReplicateIncrementalSocialData",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/SetRating" -> "SetRating",
    "http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/UpdateComment" -> "UpdateComment"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        this.SoapAction = soapMsg.SoapAction as string;
        this.ContainsFault = soapMsg.ContainsFault;
        
        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        return SoapActionsMap[this.SoapAction];
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}


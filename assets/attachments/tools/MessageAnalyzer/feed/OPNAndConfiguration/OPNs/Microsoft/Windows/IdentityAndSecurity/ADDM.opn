module ADDM with 
Documentation
{
    ProtocolName = "Active Directory Web Services: Data Model and Common Elements",
    ShortName = "ADDM",
    DocumentName = "MS-ADDM",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-ADDM", Version = "11.0", Date = "05/15/2014", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = ""}
    ]
};

using Standard;
using TCP;
using IANA;
using NMF;

// ---------------------------------- Namespace ----------------------------------------
const string XsiNamespace = "http://www.w3.org/2001/XMLSchema-instance";
const string AdNamespace = "http://schemas.microsoft.com/2008/1/ActiveDirectory";
const string AdDataNamespace = "http://schemas.microsoft.com/2008/1/ActiveDirectory/Data";
const string XsdNamespace = "http://www.w3.org/2001/XMLSchema";

// ---------------------------------- Endpoints Definition -----------------------------------------
// net.tcp://localhost:9389/ActiveDirectoryWebServices/Windows/Resource
const string WxfrWstimWindowsIntegratedEndpointURI = ":9389/ActiveDirectoryWebServices/Windows/Resource";
const string WstimWindowsIntegratedEndpointURI = ":9389/ActiveDirectoryWebServices/Windows/ResourceFactory";
const string WsdsWindowsIntegratedEndpointURI = ":9389/ActiveDirectoryWebServices/Windows/Enumeration";
const string WxfrWstimUsernamePasswordEndpointURI = ":9389/ActiveDirectoryWebServices/UserName/Resource";
const string WstimUsernamePasswordEndpointURI = ":9389/ActiveDirectoryWebServices/UserName/ResourceFactory";
const string WsdsUsernamePasswordEndpointURI = ":9389/ActiveDirectoryWebServices/UserName/Enumeration";
const string NetTcpPrefix = "net.tcp://";

// ----------------------------------- Functions -------------------------------------------------------
bool IsWSTIMEndpoint(string endpointURI)
{
    return endpointURI.Count > NetTcpPrefix.Count && NetTcpPrefix == endpointURI.Segment(0, NetTcpPrefix.Count) && // check prefix
        (endpointURI.Count > WxfrWstimWindowsIntegratedEndpointURI.Count && WxfrWstimWindowsIntegratedEndpointURI == endpointURI.Segment(endpointURI.Count - WxfrWstimWindowsIntegratedEndpointURI.Count) ||
        endpointURI.Count > WstimWindowsIntegratedEndpointURI.Count && WstimWindowsIntegratedEndpointURI == endpointURI.Segment(endpointURI.Count - WstimWindowsIntegratedEndpointURI.Count) ||
        endpointURI.Count > WxfrWstimUsernamePasswordEndpointURI.Count && WxfrWstimUsernamePasswordEndpointURI == endpointURI.Segment(endpointURI.Count - WxfrWstimUsernamePasswordEndpointURI.Count) ||
        endpointURI.Count > WstimUsernamePasswordEndpointURI.Count && WstimUsernamePasswordEndpointURI == endpointURI.Segment(endpointURI.Count - WstimUsernamePasswordEndpointURI.Count));
}

bool IsWSDSEndpoint(string endpointURI)
{
    return endpointURI.Count > NetTcpPrefix.Count && NetTcpPrefix == endpointURI.Segment(0, NetTcpPrefix.Count) && // check prefix
        (endpointURI.Count > WsdsWindowsIntegratedEndpointURI.Count && WsdsWindowsIntegratedEndpointURI == endpointURI.Segment(endpointURI.Count - WsdsWindowsIntegratedEndpointURI.Count) ||
        endpointURI.Count > WsdsUsernamePasswordEndpointURI.Count && WsdsUsernamePasswordEndpointURI == endpointURI.Segment(endpointURI.Count - WsdsUsernamePasswordEndpointURI.Count));
}

optional Object ObjectDecoder(xml xmlValue)
{
    switch (xmlValue)
    {
        case obj:ADDM.Object from XmlDecoder<ADDM.Object> =>
            if (xmlValue.Name is xmlName:XmlName)
            {
                obj.ObjectName = xmlName.LocalName;
            }
            else
            {
                obj.ObjectName = "";
            }
            return obj;
        default =>
            return nothing;
    }
}

optional Attribute AttributeDecoder(xml xmlValue)
{
    switch (xmlValue)
    {
        case attribute:ADDM.Attribute from XmlDecoder<ADDM.Attribute> =>
            if (xmlValue.Name is xmlName:XmlName)
            {
                attribute.AttributeName = xmlName.LocalName;
            }
            else
            {
                attribute.AttributeName = "";
            }
            return attribute;
        default =>
            return nothing;
    }
}

// ----------------------------------- Types -------------------------------------------------------
// section 2.3.2
type Attribute
{
    string AttributeName with Standard.Encoding{Ignore = true};
    array<ValueType> $"value" with XmlEncoding{Namespace = AdNamespace};
   
    override string ToString()
    {
        return AttributeName + ": " + $"value".ToString();
    }
}

// section 2.3.2
type ValueType
{
    string $"value" with XmlEncoding{Kind = XmlKind.Text};
    string $"type" with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XsiNamespace};
    
    override string ToString()
    {
        return $"value";
    }
}

// section 2.3.2
type Object
{
    string ObjectName with Standard.Encoding{Ignore = true};
    // below 4 elements defined in 2.3.3
    optional ObjectReferenceProperty objectReferenceProperty with XmlEncoding{Namespace = AdNamespace};
    optional ContainerHierarchyParent $"container-hierarchy-parent" with XmlEncoding{Namespace = AdNamespace};
    optional DistinguishedName distinguishedName with XmlEncoding{Namespace = AdNamespace};
    optional RelativeDistinguishedName relativeDistinguishedName with XmlEncoding{Namespace = AdNamespace};
    array<ADDM.Attribute> Attributes with XmlEncoding{IsAny = true},
        Standard.Encoding{Decoder = AttributesDecoder, SourcePattern = TypeOf<array<xml>>()};
    
    optional array<ADDM.Attribute> AttributesDecoder(array<xml> xmlArray)
    {
        array<ADDM.Attribute> attributes = [];
        // select all element with namespace addata
        var attributesXmlArray = xmlArray.Filter(
            e => e is (xml where value.Kind == XmlKind.Element && (value.Name as XmlName).NamespaceUri is AdDataNamespace));
        foreach (var item in attributesXmlArray)
        {
            // decode ADDM attribute for each element in xml array
            if (AttributeDecoder(item) is attribute:ADDM.Attribute)
            {
                attributes += [attribute];
            }
            else
            {
                return nothing;
            }
        }
        
        return attributes;
    }
    
    override string ToString()
    {
        return ObjectName;
    }
} with XmlEncoding{Order = XmlOrderIndicator.All};

// section 2.3.3.1
type ObjectReferenceProperty
{
    ValueType $"value" with XmlEncoding{Namespace = AdNamespace};
}

// section 2.3.3.2
type ContainerHierarchyParent
{
    ValueType $"value" with XmlEncoding{Namespace = AdNamespace};
}

// section 2.3.3.3
type DistinguishedName
{
    ValueType $"value" with XmlEncoding{Namespace = AdNamespace};
}

// section 2.3.3.4
type RelativeDistinguishedName
{
    ValueType $"value" with XmlEncoding{Namespace = AdNamespace};
}

autostart actor ADDMOverTCP(TCP.Server server)
{
    // All NMF message length is bigger than 2
    process server issues seg:TCP.Segment where seg.SourcePort == IANA.Port.ADWS
    {
        dispatch endpoint NMF.LowestServer over server issues seg;
    }
    
    process server accepts seg:TCP.Segment where seg.DestinationPort == IANA.Port.ADWS
    {
        dispatch endpoint NMF.LowestServer over server accepts seg;
    }
    
    // Below rules are added in case that TCP mistakes the Client for Server by port number for the trace without TCP 3-way handshake.
    process server accepts seg:TCP.Segment where server.isMissingThreeWayHandshake && seg.SourcePort == IANA.Port.ADWS
    {
        dispatch endpoint NMF.LowestServer over server issues seg;
    }
    
    process server issues seg:TCP.Segment where server.isMissingThreeWayHandshake && seg.DestinationPort == IANA.Port.ADWS
    {
        dispatch endpoint NMF.LowestServer over server accepts seg;
    }
}

protocol RDPEAR with
Documentation
{
    ProtocolName = "Remote Desktop Protocol Authentication Redirection Virtual Channel",
    ShortName = "RDPEAR",
    DocumentName = "MS-RDPEAR",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
    [
        new Reference {Name = "MS-RDPEAR", Version = "3.0", Date = "09/15/2017", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary =
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = ""}
    ]
};

using Standard;
using Utility;
using DTYP;
using RDPEDYC;

endpoint Server
    over RDPEDYC.Server
    accepts RDPEARMsg
    issues RDPEARMsg;

client endpoint Client connected to Server;

// --------------------------------- actor ---------------------------------------------

autostart actor RDPEAROverRDPEDYC(RDPEDYC.Server edycServer)
{
    process edycServer accepts m:DVCDataPDU where m#EDYCChannelName == "Microsoft::Windows::RDS::AuthRedirection"
    {
        if (BinaryDecoder<RDPEARMsg>(m.Data) is msg:RDPEARMsg)
        {
            dispatch endpoint Server over edycServer accepts msg;
        }
        else
        {
            ThrowDecodingException("RDPEAR", "RDPEARMsg");
        }
    }

    process edycServer issues m:DVCDataPDU where m#EDYCChannelName == "Microsoft::Windows::RDS::AuthRedirection"
    {
        if (BinaryDecoder<RDPEARMsg>(m.Data) is msg:RDPEARMsg)
        {
            dispatch endpoint Server over edycServer issues msg;
        }
        else
        {
            ThrowDecodingException("RDPEAR", "RDPEARMsg");
        }
    }
}

// ---------------------------- message & types ----------------------------------------

message RDPEARMsg
{
    uint ProtocolMagic where ValidationCheckValue(value == 0x4eacc3c8, null, true, ReferenceType.Type, "RDPEAR", "ProtocolMagic", "RDPEARMsg", 0x4eacc3c8, value);
    uint Length;
    uint Version;
    uint Reserved;
    ulong TsPkgContext;

    // This message is encrypted by the negotiated (Kerberos) security context between the client/server
    binary TSRemotGuardInnerPacket;

    override string ToString()
    {
        return "RDPEARMsg" +
            ", ProtocolMagic: " + ProtocolMagic.ToString() +
            ", Length: " + Length.ToString() +
            ", Version: " + Version.ToString() +
            ", Reserved: " + Reserved.ToString() +
            ", TsPkgContext: " + TsPkgContext.ToString();
    }
} with BinaryEncoding{Endian = Endian.Little};

// ---------------------------- idl types ----------------------------------------

pattern RemoteGuardCallId = enum int
{
    RemoteCallMinimum = 0,

    // start generic calls - not tied to a specific SSP
    RemoteCallGenericMinimum = 0,
    RemoteCallGenericReserved = 0,
    RemoteCallGenericMaximum = 0xff,
    // end general calls

    // Start Kerberos remote calls
    RemoteCallKerbMinimum = 0x100,
    RemoteCallKerbNegotiateVersion = 0x100,
    RemoteCallKerbBuildAsReqAuthenticator,
    RemoteCallKerbVerifyServiceTicket,
    RemoteCallKerbCreateApReqAuthenticator,
    RemoteCallKerbDecryptApReply,
    RemoteCallKerbUnpackKdcReplyBody,
    RemoteCallKerbComputeTgsChecksum,
    RemoteCallKerbBuildEncryptedAuthData,
    RemoteCallKerbPackApReply,
    RemoteCallKerbHashS4UPreauth,
    RemoteCallKerbSignS4UPreauthData,
    RemoteCallKerbVerifyChecksum,
    RemoteCallKerbBuildTicketArmorKey,
    RemoteCallKerbBuildExplicitArmorKey,
    RemoteCallKerbVerifyFastArmoredTgsReply,
    RemoteCallKerbVerifyEncryptedChallengePaData,
    RemoteCallKerbBuildFastArmoredKdcRequest,
    RemoteCallKerbDecryptFastArmoredKerbError,
    RemoteCallKerbDecryptFastArmoredAsReply,
    RemoteCallKerbDecryptPacCredentials,
    RemoteCallKerbCreateECDHKeyAgreement,
    RemoteCallKerbCreateDHKeyAgreement,
    RemoteCallKerbDestroyKeyAgreement,
    RemoteCallKerbKeyAgreementGenerateNonce,
    RemoteCallKerbFinalizeKeyAgreement,
    RemoteCallKerbMaximum = 0x1ff,
    // End Kerberos remote calls

    // Start NTLM remote calls
    RemoteCallNtlmMinimum = 0x200,
    RemoteCallNtlmNegotiateVersion = 0x200,
    RemoteCallNtlmProtectCredential,
    RemoteCallNtlmLm20GetNtlm3ChallengeResponse,
    RemoteCallNtlmCalculateNtResponse,
    RemoteCallNtlmCalculateUserSessionKeyNt,
    RemoteCallNtlmCompareCredentials,

    RemoteCallNtlmMaximum = 0x2ff,
    // End NTLM remote calls

    RemoteCallMaximum = 0x2ff,

    RemoteCallInvalid = 0xffff, // This enumeration MUST fit in 16 bits
    ...
};

const int MSV1_0_CREDENTIAL_KEY_LENGTH = 20;
const int MSV1_0_CHALLENGE_LENGTH = 8;
const int MSV1_0_RESPONSE_LENGTH = 24;
const int MSV1_0_NTLM3_RESPONSE_LENGTH = 16;
const int MSV1_0_USER_SESSION_KEY_LENGTH = 16;
const int MSV1_0_NT_OWF_PASSWORD_LENGTH = 16;
const int MSV1_0_LM_OWF_PASSWORD_LENGTH = 16;
const int MSV1_0_SHA_OWF_PASSWORD_LENGTH = 20;

type NT_CHALLENGE
{
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_CHALLENGE_LENGTH};
};

type NT_RESPONSE
{
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_RESPONSE_LENGTH};
};

type MSV1_0_LM3_RESPONSE
{
    array<UCHAR> Response with BinaryEncoding {Length = MSV1_0_NTLM3_RESPONSE_LENGTH};
    array<UCHAR> ChallengeFromClient with BinaryEncoding {Length = MSV1_0_CHALLENGE_LENGTH};
};

type USER_SESSION_KEY
{
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_USER_SESSION_KEY_LENGTH};
};

typedef LM_SESSION_KEY = NT_CHALLENGE;

pattern MSV1_0_CREDENTIAL_KEY_TYPE = enum int
{
    InvalidCredKey = 0,
    IUMCredKey = 1,
    DomainUserCredKey = 2,
    LocalUserCredKey = 3,
    ExternallySuppliedCredKey = 4,
    ...
};

type MSV1_0_CREDENTIAL_KEY {
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_CREDENTIAL_KEY_LENGTH};
};

type MSV1_0_NT_OWF_PASSWORD {
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_NT_OWF_PASSWORD_LENGTH};
};

type MSV1_0_LM_OWF_PASSWORD {
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_LM_OWF_PASSWORD_LENGTH};
};

type MSV1_0_SHA_OWF_PASSWORD {
    array<UCHAR> Data with BinaryEncoding {Length = MSV1_0_SHA_OWF_PASSWORD_LENGTH};
};

type MSV1_0_REMOTE_ENCRYPTED_SECRETS
{
    BOOLEAN reserved1;
    BOOLEAN reserved2;
    BOOLEAN reserved3;
    MSV1_0_CREDENTIAL_KEY_TYPE reserved4;
    MSV1_0_CREDENTIAL_KEY reserved5;
    ULONG reservedSize;
    array<UCHAR> reserved6 with BinaryEncoding {Length = reservedSize};
};

type MSV1_0_REMOTE_PLAINTEXT_SECRETS
{
    BOOLEAN NtPasswordPresent;
    BOOLEAN LmPasswordPresent;
    BOOLEAN ShaPasswordPresent;
    MSV1_0_CREDENTIAL_KEY_TYPE CredentialKeyType;
    MSV1_0_CREDENTIAL_KEY CredentialKeySecret;
    MSV1_0_NT_OWF_PASSWORD NtOwfPassword;
    MSV1_0_LM_OWF_PASSWORD LmOwfPassword;
    MSV1_0_SHA_OWF_PASSWORD ShaOwfPassword;
};

type NtlmCredIsoRemoteInputNegotiateVersion {
    ULONG MaxSupportedVersion;
};

type NtlmCredIsoRemoteInputProtectCredential {
    MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
};

type NtlmCredIsoRemoteInputLm20GetNtlm3ChallengeResponse {
    MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_UNICODE_STRING ServerName;
    array<UCHAR> ChallengeToClient with BinaryEncoding {Length = MSV1_0_CHALLENGE_LENGTH};
};

type NtlmCredIsoRemoteInputCalculateNtResponse {
    NT_CHALLENGE NtChallenge;
    MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
};

type NtlmCredIsoRemoteInputCalculateUserSessionKeyNt {
    NT_RESPONSE NtResponse;
    MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
};

type NtlmCredIsoRemoteInputCompareCredentials {
    MSV1_0_REMOTE_ENCRYPTED_SECRETS LhsCredential;
    MSV1_0_REMOTE_ENCRYPTED_SECRETS RhsCredential;
};

type NtlmCredIsoRemoteInput
{
    RemoteGuardCallId CallId;
    (NtlmCredIsoRemoteInputNegotiateVersion |
        NtlmCredIsoRemoteInputProtectCredential |
        NtlmCredIsoRemoteInputLm20GetNtlm3ChallengeResponse |
        NtlmCredIsoRemoteInputCalculateNtResponse |
        NtlmCredIsoRemoteInputCalculateUserSessionKeyNt |
        NtlmCredIsoRemoteInputCompareCredentials) Content;
};

type NtlmCredIsoRemoteOutputNegotiateVersion
{
    ULONG VersionToUse;
};

type NtlmCredIsoRemoteOutputProtectCredential
{
    MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
};

type NtlmCredIsoRemoteOutputLm20GetNtlm3ChallengeResponse
{
    USHORT Ntlm3ResponseLength;
    array<BYTE> Ntlm3Response with BinaryEncoding {Length = Ntlm3ResponseLength};
    MSV1_0_LM3_RESPONSE Lm3Response;
    USER_SESSION_KEY UserSessionKey;
    LM_SESSION_KEY LmSessionKey;
};

type NtlmCredIsoRemoteOutputCalculateNtResponse
{
    NT_RESPONSE NtResponse;
};

type NtlmCredIsoRemoteOutputCalculateUserSessionKeyNt
{
    USER_SESSION_KEY UserSessionKey;
};

type NtlmCredIsoRemoteOutputCompareCredentials
{
    BOOL AreNtOwfsEqual;
    BOOL AreLmOwfsEqual;
    BOOL AreShaOwfsEqual;
};

type NtlmCredIsoRemoteOutput
{
    RemoteGuardCallId CallId;
    NTSTATUS Status;
    (NtlmCredIsoRemoteOutputNegotiateVersion |
        NtlmCredIsoRemoteOutputProtectCredential |
        NtlmCredIsoRemoteOutputLm20GetNtlm3ChallengeResponse |
        NtlmCredIsoRemoteOutputCalculateNtResponse |
        NtlmCredIsoRemoteOutputCalculateUserSessionKeyNt |
        NtlmCredIsoRemoteOutputCompareCredentials) Content;
};

typedef KEY_AGREEMENT_HANDLE = LONG64;

// [RFC4120], section 7.5.9
typedef KERBERR = LONG;

const int KEY_AGREEMENT_HANDLE_INVALID = -1;

type KERB_ASN1_DATA {
    ULONG Pdu;
    ULONG32 Length;
    array<UCHAR> Asn1Buffer with BinaryEncoding {Length = Length};
};

type KERB_RPC_OCTET_STRING {
    ULONG Length;
    array<UCHAR> Value with BinaryEncoding {Length = Length};
};

type KERB_RPC_PREAUTH_DATA {
    ULONG Type;             // [RFC4120], section 7.5.2
    KERB_ASN1_DATA Data;
};

type KERB_RPC_INTERNAL_NAME {
    SHORT NameType;
    USHORT NameCount;
    RPC_UNICODE_STRING Names;
};

type KERB_RPC_PA_DATA
{
    INT32 preauth_data_type;
    KERB_RPC_OCTET_STRING preauth_data;
};

type KERB_RPC_FAST_ARMOR
{
    INT32 armor_type;
    KERB_RPC_OCTET_STRING armor_value;
};

type KERB_RPC_CRYPTO_API_BLOB
{
    DWORD cbData;
    array<BYTE> pbData with BinaryEncoding {Length = cbData};
};

type KERB_RPC_CRYPT_BIT_BLOB {
    DWORD cbData;
    array<BYTE> pbData with BinaryEncoding {Length = cbData};
    DWORD cUnusedBits;
};

type SECPKG_SUPPLEMENTAL_CRED {
    RPC_UNICODE_STRING PackageName;
    ULONG CredentialSize;
    array<UCHAR> Credentials with BinaryEncoding {Length = CredentialSize};
};

type SECPKG_SUPPLEMENTAL_CRED_ARRAY {
    ULONG CredentialCount;
    array<SECPKG_SUPPLEMENTAL_CRED> Credentials with BinaryEncoding {Length = CredentialCount};
};

type KERB_RPC_ENCRYPTION_KEY {
    optional ULONG reserved1;
    long reserved2;
    KERB_RPC_OCTET_STRING reserved3;
};

type KerbCredIsoRemoteInputNegotiateVersion {
    ULONG MaxSupportedVersion;
};

type KerbCredIsoRemoteInputBuildAsReqAuthenticator {
    KERB_RPC_ENCRYPTION_KEY EncryptionKey;
    optional KERB_RPC_ENCRYPTION_KEY ArmorKey;
    LARGE_INTEGER TimeSkew;
};

type KerbCredIsoRemoteInputVerifyServiceTicket {
    KERB_ASN1_DATA PackedTicket;
    KERB_RPC_ENCRYPTION_KEY ServiceKey;
    optional LARGE_INTEGER TimeSkew;
};

type KerbCredIsoRemoteInputCreateApReqAuthenticator {
    KERB_RPC_ENCRYPTION_KEY EncryptionKey;
    ULONG SequenceNumber;
    KERB_RPC_INTERNAL_NAME ClientName;
    RPC_UNICODE_STRING ClientRealm;
    LARGE_INTEGER SkewTime;
    optional KERB_RPC_ENCRYPTION_KEY SubKey;
    optional KERB_ASN1_DATA AuthData;
    optional KERB_ASN1_DATA GssChecksum;
    ULONG KeyUsage;
};

type KerbCredIsoRemoteInputDecryptApReply {
    KERB_ASN1_DATA EncryptedReply;
    KERB_RPC_ENCRYPTION_KEY Key;
};

type KerbCredIsoRemoteInputUnpackKdcReplyBody {
    KERB_ASN1_DATA EncryptedData;
    KERB_RPC_ENCRYPTION_KEY Key;
    KERB_RPC_ENCRYPTION_KEY StrengthenKey;
    ULONG Pdu;
    ULONG KeyUsage;
};

type KerbCredIsoRemoteInputComputeTgsChecksum {
    KERB_ASN1_DATA RequestBody;
    KERB_RPC_ENCRYPTION_KEY Key;
    ULONG ChecksumType;
};

type KerbCredIsoRemoteInputBuildEncryptedAuthData {
    ULONG KeyUsage;
    KERB_RPC_ENCRYPTION_KEY Key;
    KERB_ASN1_DATA PlainAuthData;
};

type KerbCredIsoRemoteInputPackApReply {
    KERB_ASN1_DATA Reply;
    KERB_ASN1_DATA ReplyBody;
    KERB_RPC_ENCRYPTION_KEY SessionKey;
};

type KerbCredIsoRemoteInputHashS4UPreauth {
    KERB_ASN1_DATA S4UPreauth;
    KERB_RPC_ENCRYPTION_KEY Key;
    LONG ChecksumType;
};

type KerbCredIsoRemoteInputSignS4UPreauthData {
    KERB_RPC_ENCRYPTION_KEY Key;
    BOOL IsRequest;
    KERB_ASN1_DATA UserId;
    LONG ChecksumType;
};

type KerbCredIsoRemoteInputVerifyChecksum
{
    KERB_RPC_ENCRYPTION_KEY Key;
    ULONG ChecksumType;
    ULONG ExpectedChecksumSize;
    array<UCHAR> ExpectedChecksum;
    ULONG DataToCheckSize;
    array<UCHAR> DataToCheck;
};

type KerbCredIsoRemoteInputBuildTicketArmorKey {
    KERB_RPC_ENCRYPTION_KEY SharedKey;
};

type KerbCredIsoRemoteInputBuildExplicitArmorKey {
    KERB_RPC_ENCRYPTION_KEY TicketSessionKey;
};

type KerbCredIsoRemoteInputVerifyFastArmoredTgsReply {
    KERB_ASN1_DATA KdcRequest;
    KERB_ASN1_DATA KdcReply;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
    KERB_RPC_ENCRYPTION_KEY ReplyKey;
};

type KerbCredIsoRemoteInputVerifyEncryptedChallengePaData {
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
    KERB_RPC_ENCRYPTION_KEY UserKey;
    KERB_RPC_PA_DATA PaData;
};

type KerbCredIsoRemoteInputBuildFastArmoredKdcRequest {
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
    KERB_ASN1_DATA KdcRequest;
    KERB_RPC_PA_DATA PaTgsReqPaData;
    KERB_RPC_FAST_ARMOR FastArmor;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
};

type KerbCredIsoRemoteInputDecryptFastArmoredKerbError {
    INT32 RequestNonce;
    KERB_ASN1_DATA InputKerbError;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
};

type KerbCredIsoRemoteInputDecryptFastArmoredAsReply {
    KERB_ASN1_DATA KdcRequest;
    KERB_ASN1_DATA KdcReply;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
};

type KerbCredIsoRemoteInputDecryptPacCredentials {
    KERB_RPC_ENCRYPTION_KEY Key;
    ULONG Version;
    ULONG EncryptionType;
    ULONG DataSize;
    array<UCHAR> Data with BinaryEncoding {Length = DataSize};
};

type KerbCredIsoRemoteInputCreateECDHKeyAgreement
{
    ULONG KeyBitLen;
};

type KerbCredIsoRemoteInputCreateDHKeyAgreement
{
    UCHAR Ignored;
};

type KerbCredIsoRemoteInputDestroyKeyAgreement
{
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
};

type KerbCredIsoRemoteInputKeyAgreementGenerateNonce
{
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
};

type KerbCredIsoRemoteInputFinalizeKeyAgreement
{
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
    ULONG KerbEType;
    ULONG RemoteNonceLen;
    array<BYTE> RemoteNonce;
    ULONG X509PublicKeyLen;
    array<BYTE> X509PublicKey;
};

type KerbCredIsoRemoteInput
{
    RemoteGuardCallId CallId;

    (KerbCredIsoRemoteInputNegotiateVersion |
        KerbCredIsoRemoteInputBuildAsReqAuthenticator |
        KerbCredIsoRemoteInputVerifyServiceTicket |
        KerbCredIsoRemoteInputCreateApReqAuthenticator |
        KerbCredIsoRemoteInputDecryptApReply |
        KerbCredIsoRemoteInputUnpackKdcReplyBody |
        KerbCredIsoRemoteInputComputeTgsChecksum |
        KerbCredIsoRemoteInputBuildEncryptedAuthData |
        KerbCredIsoRemoteInputPackApReply |
        KerbCredIsoRemoteInputHashS4UPreauth |
        KerbCredIsoRemoteInputSignS4UPreauthData |
        KerbCredIsoRemoteInputVerifyChecksum |
        KerbCredIsoRemoteInputBuildTicketArmorKey |
        KerbCredIsoRemoteInputBuildExplicitArmorKey |
        KerbCredIsoRemoteInputVerifyFastArmoredTgsReply |
        KerbCredIsoRemoteInputVerifyEncryptedChallengePaData |
        KerbCredIsoRemoteInputBuildFastArmoredKdcRequest |
        KerbCredIsoRemoteInputDecryptFastArmoredKerbError |
        KerbCredIsoRemoteInputDecryptFastArmoredAsReply |
        KerbCredIsoRemoteInputDecryptPacCredentials |
        KerbCredIsoRemoteInputCreateECDHKeyAgreement |
        KerbCredIsoRemoteInputCreateDHKeyAgreement |
        KerbCredIsoRemoteInputDestroyKeyAgreement |
        KerbCredIsoRemoteInputKeyAgreementGenerateNonce |
        KerbCredIsoRemoteInputFinalizeKeyAgreement) Content;
};

type KerbCredIsoRemoteOutputNegotiateVersion
{
    ULONG VersionToUse;
};

type KerbCredIsoRemoteOutputBuildAsReqAuthenticator
{
    LONG PreauthDataType;
    KERB_RPC_OCTET_STRING PreauthData;
};

type KerbCredIsoRemoteOutputVerifyServiceTicket
{
    KERB_ASN1_DATA DecryptedTicket;
    LONG KerbProtocolError;
};

type KerbCredIsoRemoteOutputCreateApReqAuthenticator
{
    LARGE_INTEGER AuthenticatorTime;
    KERB_ASN1_DATA Authenticator;
    LONG KerbProtocolError;
};

type KerbCredIsoRemoteOutputDecryptApReply
{
    KERB_ASN1_DATA ApReply;
};

type KerbCredIsoRemoteOutputUnpackKdcReplyBody
{
    LONG KerbProtocolError;
    KERB_ASN1_DATA ReplyBody;
};

type KerbCredIsoRemoteOutputComputeTgsChecksum
{
    KERB_ASN1_DATA Checksum;
};

type KerbCredIsoRemoteOutputBuildEncryptedAuthData
{
    KERB_ASN1_DATA EncryptedAuthData;
};

type KerbCredIsoRemoteOutputPackApReply
{
    ULONG PackedReplySize;
    array<UCHAR> PackedReply with BinaryEncoding {Length = PackedReplySize};
};

type KerbCredIsoRemoteOutputHashS4UPreauth
{
    ULONG ChecksumSize;
    array<UCHAR> ChecksumValue;
};

type KerbCredIsoRemoteOutputSignS4UPreauthData
{
    LONG ChecksumType;
    ULONG ChecksumSize;
    array<UCHAR> ChecksumValue;
};

type KerbCredIsoRemoteOutputVerifyChecksum
{
    BOOL IsValid;
};

type KerbCredIsoRemoteOutputBuildTicketArmorKey
{
    KERB_RPC_ENCRYPTION_KEY SubKey;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
};

type KerbCredIsoRemoteOutputBuildExplicitArmorKey
{
    KERB_RPC_ENCRYPTION_KEY ArmorSubKey;
    KERB_RPC_ENCRYPTION_KEY ExplicitArmorKey;
    KERB_RPC_ENCRYPTION_KEY SubKey;
    KERB_RPC_ENCRYPTION_KEY ArmorKey;
};

type KerbCredIsoRemoteOutputVerifyFastArmoredTgsReply
{
    KERB_RPC_ENCRYPTION_KEY NewReplyKey;
    KERB_ASN1_DATA ModifiedKdcReply;
    LARGE_INTEGER KdcTime;
};

type KerbCredIsoRemoteOutputVerifyEncryptedChallengePaData
{
    BOOLEAN IsValid;
};

type KerbCredIsoRemoteOutputBuildFastArmoredKdcRequest
{
    KERB_RPC_PA_DATA FastPaDataResult;
};

type KerbCredIsoRemoteOutputDecryptFastArmoredKerbError
{
    KERB_ASN1_DATA OutputKerbError;
    KERB_ASN1_DATA FastResponse;
};

type KerbCredIsoRemoteOutputDecryptFastArmoredAsReply
{
    KERB_RPC_ENCRYPTION_KEY StrengthenKey;
    KERB_ASN1_DATA ModifiedKdcReply;
    LARGE_INTEGER KdcTime;
};

type KerbCredIsoRemoteOutputDecryptPacCredentials
{
    SECPKG_SUPPLEMENTAL_CRED_ARRAY Credentials;
};

type KerbCredIsoRemoteOutputCreateECDHKeyAgreement
{
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
    KERBERR KerbErr;
    ULONG EncodedPubKeyLen;
    array<BYTE> EncodedPubKey;
};

type KerbCredIsoRemoteOutputCreateDHKeyAgreement
{
    KERB_RPC_CRYPTO_API_BLOB ModulusP;
    KERB_RPC_CRYPTO_API_BLOB GeneratorG;
    KERB_RPC_CRYPTO_API_BLOB FactorQ;
    KEY_AGREEMENT_HANDLE KeyAgreementHandle;
    KERBERR KerbErr;
    ULONG LittleEndianPublicKeyLen;
    array<BYTE> LittleEndianPublicKey;
};

type KerbCredIsoRemoteOutputDestroyKeyAgreement
{
    UCHAR Ignored;
};

type KerbCredIsoRemoteOutputKeyAgreementGenerateNonce
{
    ULONG NonceLen;
    array<BYTE> Nonce;
};

type KerbCredIsoRemoteOutputFinalizeKeyAgreement
{
    KERB_RPC_ENCRYPTION_KEY SharedKey;
};

type KerbCredIsoRemoteOutput
{
    RemoteGuardCallId CallId;
    NTSTATUS Status;
    (KerbCredIsoRemoteOutputNegotiateVersion |
        KerbCredIsoRemoteOutputBuildAsReqAuthenticator |
        KerbCredIsoRemoteOutputVerifyServiceTicket |
        KerbCredIsoRemoteOutputCreateApReqAuthenticator |
        KerbCredIsoRemoteOutputDecryptApReply |
        KerbCredIsoRemoteOutputUnpackKdcReplyBody |
        KerbCredIsoRemoteOutputComputeTgsChecksum |
        KerbCredIsoRemoteOutputBuildEncryptedAuthData |
        KerbCredIsoRemoteOutputPackApReply |
        KerbCredIsoRemoteOutputHashS4UPreauth |
        KerbCredIsoRemoteOutputSignS4UPreauthData |
        KerbCredIsoRemoteOutputVerifyChecksum |
        KerbCredIsoRemoteOutputBuildTicketArmorKey |
        KerbCredIsoRemoteOutputBuildExplicitArmorKey |
        KerbCredIsoRemoteOutputVerifyFastArmoredTgsReply |
        KerbCredIsoRemoteOutputVerifyEncryptedChallengePaData |
        KerbCredIsoRemoteOutputBuildFastArmoredKdcRequest |
        KerbCredIsoRemoteOutputDecryptFastArmoredKerbError |
        KerbCredIsoRemoteOutputDecryptFastArmoredAsReply |
        KerbCredIsoRemoteOutputDecryptPacCredentials |
        KerbCredIsoRemoteOutputCreateECDHKeyAgreement |
        KerbCredIsoRemoteOutputCreateDHKeyAgreement |
        KerbCredIsoRemoteOutputDestroyKeyAgreement |
        KerbCredIsoRemoteOutputKeyAgreementGenerateNonce |
        KerbCredIsoRemoteOutputFinalizeKeyAgreement) Content;
};
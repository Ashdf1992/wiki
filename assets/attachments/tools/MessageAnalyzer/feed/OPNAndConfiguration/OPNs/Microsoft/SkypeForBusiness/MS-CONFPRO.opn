protocol MSCONFPRO with
Documentation
{
    ProtocolName = "Centralized Conference Control Protocol: Provisioning",
    ShortName = "MS-CONFPRO",
    DocumentName = "MS-CONFPRO",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-CONFPRO", Version = "5.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server 
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverSIP(SIP.Server node)
{	
    process node accepts sipMsg:SIP.Request	where (IsConfproReq(sipMsg))
    {       	
		RequestMessage msg = new RequestMessage(sipMsg);
		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Response where (IsConfproRsp(sipMsg))
    {  
		ResponseMessage msg = new ResponseMessage(sipMsg);
		dispatch (endpoint Server over node) issues msg;
	}	
}

bool IsConfproReq(SIP.Request sipMsg)
{	
	if ((sipMsg.Method == "SERVICE") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/cccp+xml")) 		
	{
		return true;
	}	
	else
	{
		return false;
	}
}

bool IsConfproRsp(SIP.Response sipMsg)
{	
	string cSeq = TryGetHeaderValue("CSeq", sipMsg.Headers);
	
	if ((cSeq == "SERVICE") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/cccp+xml")) 		
	{
		return true;
	}	
	else
	{
		return false;
	}
}

message RequestMessage : SipRequestMessage
{	
	RequestMessage(SIP.Request sipReqMsg)
	{
		InitializeSIPReq(sipReqMsg, ["From", "To", "p-session-on-behalf-of", "Authorization", "Authentication-Info", "WWW-Authenticate", "Proxy-Authorization", "Proxy-Authenticate", "Content-Type"], this);
	}
	
	override string ToString()
	{
		if (this.Body == nothing || this.Body == null)
		{
			return "Conference Request";
		}

		xml tempBody = this.Body as xml;

		if (tempBody == null)
		{	
			return "Conference Request";
		}

		array<xml> bodyXmls = tempBody select xpath{//request};

		if (bodyXmls == null || bodyXmls.Count == 0)
		{
			return "Invalid Message: Missing request Element in Message Body";
		}
		else if (bodyXmls.Count > 1)
		{
			return "Invalid Message: More Than One request Element in Message Body";
		}

		array<xml> childrenOfBodyXmls = bodyXmls[0].Children;

		if (childrenOfBodyXmls == null || childrenOfBodyXmls.Count == 0)
		{
			return "Conference Request Invalid Message: Missing Conference Type Element for request Element in Message Body";
		}
		else if (childrenOfBodyXmls.Count > 1)
		{
			return "Conference Request Invalid Message: More Than One Conference Type Elements for request Element in Message Body";
		}

		optional XmlName name = childrenOfBodyXmls[0].Name;

		if (name == nothing)
		{
			return "Conference Request";
		}

		XmlName tempName = name as XmlName;

		if (tempName == null)		
		{
			return "Conference Request";
		}

		switch (tempName.LocalName)
		{
			case "addConference" =>
			{
				return "Add Conference Request";
			}
			case "modifyConference" =>
			{
				return "Modify Conference Request";
			}
			case "deleteConference" =>
			{
				return "Delete Conference Request";
			}
			case "getConference" =>
			{
				return "Get Conference Request";
			}
			case "getConferences" =>
			{
				return "Get Conferences Request";
			}
			case "getEncryptionKey" =>
			{
				return "Get Encryption Key Request";
			}
			case "getAvailableMcuTypes" =>
			{
				return "Get Available MCU Types Request";
			}
			case "getConferencingCapabilities" =>
			{
				return "Get Conferencing Capabilities Request";					
			}
			default =>
			{
				return "Conference Request";
			}
		}
	}
}
	
message ResponseMessage : SipResponseMessage
{		
	ResponseMessage(SIP.Response sipRspMsg)
	{
		InitializeSIPRsp(sipRspMsg, ["From", "To"], this);
	}
	
	override string ToString()
	{ 
		string commonSummary = null; 	
		
		if ((this.StatusCode == 0) && (this.ReasonPhrase == null))
		{	
			commonSummary = "";
		}
		else
		{
			commonSummary = Format(", {0} {1}", this.StatusCode, this.ReasonPhrase);
		}
				
		if (this.Body == nothing || this.Body == null)
		{
			return "Conference Response" + commonSummary;
		}

		xml tempBody = this.Body as xml;

		if (tempBody == null)
		{	
			return "Conference Response" + commonSummary;
		}

		array<xml> bodyXmls = tempBody select xpath{//response};
		
		if (bodyXmls == null || bodyXmls.Count == 0)
		{
			return "Invalid Message: Missing response Element in Message Body" + commonSummary;
		}
		else if (bodyXmls.Count > 1)
		{
			return "Invalid Message: More Than One response Element in Message Body" + commonSummary;
		}

		array<xml> childrenOfBodyXmls = bodyXmls[0].Children;
		
		if (childrenOfBodyXmls == null || childrenOfBodyXmls.Count == 0)
		{
			return "Conference Response Invalid Message: Missing Conference Type Element for response Element in Message Body" + commonSummary;
		}
		else if (childrenOfBodyXmls.Count > 1)
		{
			return "Conference Response Invalid Message: More Than One Conference Type Elements for response Element in Message Body" + commonSummary;
		}

		optional XmlName name = childrenOfBodyXmls[0].Name;

		if (name == nothing)
		{
			return "Conference Response" + commonSummary;
		}

		XmlName tempName = name as XmlName;

		if (tempName == null)		
		{
			return "Conference Response" + commonSummary;
		}

		switch (tempName.LocalName)
		{
			case "addConference" =>
			{
				return "Add Conference Response" + commonSummary;
			}
			case "modifyConference" =>
			{
				return "Modify Conference Response" + commonSummary;
			}
			case "deleteConference" =>
			{
				return "Delete Conference Response" + commonSummary;
			}
			case "getConference" =>
			{
				return "Get Conference Response" + commonSummary;
			}
			case "getConferences" =>
			{
				return "Get Conferences Response" + commonSummary;
			}
			case "getEncryptionKey" =>
			{
				return "Get Encryption Key Response" + commonSummary;
			}
			case "getAvailableMcuTypes" =>
			{
				return "Get Available MCU Types Response" + commonSummary;
			}
			case "getConferencingCapabilities" =>
			{
				return "Get Conferencing Capabilities Response" + commonSummary;				
			}
			default =>
			{
				return "Conference Response" + commonSummary;
			}
		}		
		return "Conference Response Invalid Message: Unrecognized Name for Conference Element for response Element in Message Body" + commonSummary;
	}
}
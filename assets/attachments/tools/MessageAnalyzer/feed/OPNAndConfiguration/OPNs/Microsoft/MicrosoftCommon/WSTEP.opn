// partial implemented for MDE
protocol WSTEP with
XmlEncodingDefaults{Namespace = WstepNamespace},
Documentation
{
    ProtocolName = "WS-Trust X.509v3 Token Enrollment Extensions",
    ShortName = "WSTEP",
    DocumentName = "MS-WSTEP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "WSTEP", Version = "10.0", Date = "06/01/2017", ProgramName = ProgramName.WSPP},
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = ""},
    ]
};

using Technologies.SOAP;
using WSTrust13;
using WSS;
using WSFederation;
using XSD;
using Utility;
using PKCS;
using SOAP;
using WSA2005;
using WSPolicy;
using WCCE;
using CMS;
using CMC;
using X509;
using Standard;
using Utility;
using MicrosoftCommonResources;

const string AuthNamespace = "http://schemas.xmlsoap.org/ws/2006/12/authorization";
const string WsseNamespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
const string Wst13Namespace = "http://docs.oasis-open.org/ws-sx/ws-trust/200512";
const string WstepNamespace = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment";

const string RequestSecurityTokenAction = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment/RST/wstep";
const string RequestSecurityTokenResponseCollectionAction = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment/RSTRC/wstep";

const string TokenTypeValue = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3";

// ------------------------------------- Endpoint & Actor---------------------------------------//
// Endpoint: Server
endpoint Server
    over SOAP.Server
    accepts mutable RequestSecurityTokenMsg
    issues mutable RequestSecurityTokenResponseCollectionMsg
    provides mutable SecurityTokenService;

client endpoint Client connected to Server;

autostart actor WSTEPServerOverSOAP(SOAP.Server server)
{
    RequestSecurityTokenMsg cachedRstInputMessage = null;

    // process RequestSecurityToken Message
    // partial implemented, only check certificate issue and renewal (MDE)
    process server accepts soapMessage:SoapMessage where soapMessage.WsaAction == RequestSecurityTokenAction
    {
        switch (soapMessage.Body)
        {
            case rstMsg:RequestSecurityTokenMsg from XmlDecoder<RequestSecurityTokenMsg> =>
                rstMsg.Origins = [soapMessage];
            
                // cache the input message
                cachedRstInputMessage = rstMsg;
            default =>
                ThrowDecodingException("WSTEP", "RequestSecurityTokenMsg");
        }
    }
    
    // process RequestSecurityTokenResponseCollectionMsg Message
    process server issues soapMessage:SoapMessage where soapMessage.WsaAction == RequestSecurityTokenResponseCollectionAction
    {
        switch (soapMessage.Body)
        {
            case rstrcMessage:RequestSecurityTokenResponseCollectionMsg from XmlDecoder<RequestSecurityTokenResponseCollectionMsg> =>
                // set the origins of response
                rstrcMessage.Origins = [soapMessage];
                
                // dispatch operation
                DispatchRequestSecurityTokenOperation(cachedRstInputMessage, rstrcMessage);
                cachedRstInputMessage = null;
            default =>
                ThrowDecodingException("WSTEP", "RequestSecurityTokenResponseCollectionMsg");
        }
    }
    
    // construct & dispatch operation RequestSecurityToken
    void DispatchRequestSecurityTokenOperation(RequestSecurityTokenMsg rstMsg, RequestSecurityTokenResponseCollectionMsg rstrcMsg)
    {
        if (rstMsg == null)
        {
            ReportInsufficientData(rstrcMsg, DiagnosisLevel.Error, WSTEP_INCOMPLETE_REQUESTSECURITYTOKEN_OPERATION_REQUEST);
            // dispatch output message when there's no request message
            dispatch (endpoint WSTEP.Server over server) issues rstrcMsg;
            return;
        }

        var rstOperation = new SecurityTokenService.RequestSecurityToken2
        {
            request = rstMsg.RequestSecurityToken,
            responseCollection = rstrcMsg.RequestSecurityTokenResponseCollection
        };

        // dispatch operation
        rstOperation.Origins = [rstMsg as any message, rstrcMsg as any message];
        dispatch (endpoint WSTEP.Server over server) issues rstOperation;
    }
    
    ~endpoint(SOAP.Server server)
    {
        if (cachedRstInputMessage != null)
        {
            ReportInsufficientData(cachedRstInputMessage, DiagnosisLevel.Error, WSTEP_INCOMPLETE_REQUESTSECURITYTOKEN_OPERATION_RESPONSE);
            dispatch (endpoint WSTEP.Server over server) accepts cachedRstInputMessage;
        }
    }
}

// partial implemented, only operation RequestSecurityToken2
contract SecurityTokenService
{
    operation RequestSecurityToken2
    {
        in WSTEP.RequestSecurityTokenType request;
        out WSTEP.RequestSecurityTokenResponseCollectionType responseCollection;

        override string ToString()
        {
            return "RequestSecurityToken2";
        }
    }
    with SoapMessageInfo{Action = RequestSecurityTokenAction, ReplyAction = RequestSecurityTokenResponseCollectionAction};
}

// 3.1.4.1.1.1   wst:RequestSecurityTokenMsg
message RequestSecurityTokenMsg 
{
    WSTEP.RequestSecurityTokenType RequestSecurityToken with XmlEncoding{Namespace = Wst13Namespace};

    override string ToString()
    {
        return "RequestSecurityTokenMsg";
    }
}

message RequestSecurityTokenResponseCollectionMsg
{
    WSTEP.RequestSecurityTokenResponseCollectionType RequestSecurityTokenResponseCollection with XmlEncoding{Namespace = Wst13Namespace};

    override string ToString()
    {
        return "RequestSecurityTokenResponseCollectionMsg";
    }
}

// 3.1.4.1.3.3   wst:RequestSecurityTokenType
type RequestSecurityTokenType : WSTrust13.RequestSecurityTokenType
{
    // Future Reference: #75351, PEF team does not support well. And the cost is not small to implement the work around.
    new optional XSAnyURI TokenType
        // where ValidationCheckValue(value == TokenTypeValue, null, true, ReferenceType.Type,
        //     "WSTEP", "TokenType", "RequestSecurityTokenTypeWstepExtended", TokenTypeValue, value)
        with XmlEncoding{Namespace = Wst13Namespace};
    new optional RequestTypeOpenEnum RequestType
        where ValidationCheckEnumValueTooManyItems(InRange<RequestTypeOpenEnum>(value as RequestTypeOpenEnum), null, true, ReferenceType.Type,
            "WSTEP", "RequestType", "RequestSecurityTokenTypeWstepExtended", "RequestType", "[MS-WSTEP]")
        with XmlEncoding{Namespace = Wst13Namespace};
    new optional array<xml> AnyElements with Encoding{Ignore = true};
    new optional array<xml> AnyAttributes with Encoding{Ignore = true};
    optional WSTEP.RequestSecurityTokenTypeBinarySecurityTokenType BinarySecurityToken with XmlEncoding{Namespace = WsseNamespace};
    optional AdditionalContextType AdditionalContext with XmlEncoding{Namespace = AuthNamespace};
    optional RequestKETType RequestKET with XmlEncoding{Namespace = Wst13Namespace};
    optional RequestID RequestID;
    optional XSLanguage PreferedLanguage with XmlEncoding{Namespace = "", Kind = XmlKind.Attribute};
    optional array<xml> AnyElementsExtended with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributesExtended with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{Order = XmlOrderIndicator.All};

// according section 3.1.4.1.3.3   wst:RequestSecurityTokenType
type RequestSecurityTokenTypeBinarySecurityTokenType : WSS.BinarySecurityTokenType
{
    new (PKCS.CertificationRequest | CMS.ContentInfo | CMC.PKIData | WCCE.SignedPublicKeyAndChallenge | binary) Value with XmlEncoding{Kind = XmlKind.Text},
        Encoding{Decoder = DecodeCertificate, SourceConverter = Base64StringToBinary, SourcePattern = TypeOf<string>()};
    optional (PKCS.CertificationRequest | CMS.ContentInfo | CMC.PKIData | WCCE.SignedPublicKeyAndChallenge | binary) DecodeCertificate(binary b)
    {
        var ret = WCCE.DecodeRequestFormat(b);
        if (ret == nothing)
        {
            return b;
        }
        return ret;
    }
}

// 3.1.4.1.2.4   RequestID
pattern RequestID = string;

pattern RequestTypeOpenEnum = enum XSAnyURI
{
    Issue                   = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue",
    QueryTokenStatus        = "http://schemas.microsoft.com/windows/pki/2009/01/enrollment/QueryTokenStatus",
    KET                     = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/KET",
    ...
};

// 3.1.4.1.2.6   RequestSecurityTokenResponseCollection
type RequestSecurityTokenResponseCollectionType : WSTrust13.RequestSecurityTokenResponseCollectionType
{
    new array<WSTEP.RequestSecurityTokenResponseType> RequestSecurityTokenResponse with XmlEncoding{Namespace = Wst13Namespace};
}

// 3.1.4.1.3.4   wst:RequestSecurityTokenResponseType
type RequestSecurityTokenResponseType : WSTrust13.RequestSecurityTokenResponseType
{
    // Future Reference: #75351
    new optional XSAnyURI TokenType
        // where ValidationCheckValue(value == TokenTypeValue, null, true, ReferenceType.Type,
        //    "WSTEP", "TokenType", "RequestSecurityTokenTypeWstepExtended", TokenTypeValue, value)
        with XmlEncoding{Namespace = Wst13Namespace};
    new optional WSTEP.RequestedSecurityTokenType RequestedSecurityToken with XmlEncoding{Namespace = Wst13Namespace};
    new optional array<xml> AnyElements with Encoding{Ignore = true};
    new optional array<xml> AnyAttributes with Encoding{Ignore = true};
    optional DispositionMessageType DispositionMessage;
    optional RequestedSecurityTokenTypeBinarySecurityTokenType BinarySecurityToken with XmlEncoding{Namespace = WsseNamespace};
    optional string RequestID;
    optional array<xml> AnyElementsExtended with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional array<xml> AnyAttributesExtended with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{ Order = XmlOrderIndicator.All};

// according section 3.1.4.1.3.2   wst:RequestedSecurityTokenType
type RequestedSecurityTokenTypeBinarySecurityTokenType : WSS.BinarySecurityTokenType
{
    new (CMS.ContentInfo | CMC.PKIData | X509.Certificate | binary) Value with XmlEncoding{Kind = XmlKind.Text},
        Encoding{Decoder = DecodeCertificate, SourceConverter = Base64StringToBinary, SourcePattern = TypeOf<string>()};

    // TDI: TD does not document X509 Certificate
    optional (CMS.ContentInfo | CMC.PKIData | X509.Certificate | binary) DecodeCertificate(binary b)
    {
        // WORKAROUND: bug #81283, skip decoding binary if it is MDE
        if (ValueType == "http://schemas.microsoft.com/5.0.0.0/ConfigurationManager/Enrollment/DeviceEnrollmentProvisionDoc")
        {
            return b;
        }
        var ret = WCCE.DecodeResponseFormat(b);
        if (ret == nothing)
        {
            return b;
        }
        return ret;
    }
}

// 3.1.4.1.3.1   DispositionMessageType
type DispositionMessageType
{
    string Value with XmlEncoding{Kind = XmlKind.Text};
    optional XSLanguage lang with XmlEncoding{Namespace = ""};
}

// 3.1.4.1.3.2   wst:RequestedSecurityTokenType
type RequestedSecurityTokenType : WSTrust13.RequestedSecurityTokenType
{
    new optional array<xml> AnyElements with Encoding{Ignore = true};
    optional RequestedSecurityTokenTypeBinarySecurityTokenType BinarySecurityToken with XmlEncoding{Namespace = WsseNamespace};
    optional SecurityTokenReferenceType SecurityTokenReference with XmlEncoding{Namespace = WsseNamespace};
    optional array<xml> AnyElementsExtended with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{ Order = XmlOrderIndicator.All};

protocol SAMR with
Documentation
{
    ProtocolName = "Security Account Manager (SAM) Remote Protocol (Client-to-Server)",
    ProtocolType = "rpc",
    ShortName = "SAMR",
    DocumentName = "MS-SAMR",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference{Name = "MS-SAMR", Version = "38.0", Date = "06/01/2017", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary =
    [
        new Revision{Class = RevisionClass.Major, Version = "381821", Date = "10/08/2015"}
    ]
};

using Technologies.IDL;
using DTYP;
using ERREF;
using Utility;
using MSRPCE;

endpoint SamrService over MSRPCE.Server provides samr;

contract samr
{
    accepts operation SamrConnect
    {
        in PSAMPR_SERVER_NAME ServerName with IDL{PointerType = PointerKind.UniquePtr};
        out SAMPR_HANDLE ServerHandle with IDL{IndirectionLevel = 1};
        in Server_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<Server_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrConnect", "Server ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Server_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrConnect, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 0};

    accepts operation SamrCloseHandle
    {
        in out SAMPR_HANDLE SamHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrCloseHandle, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 1};

    accepts operation SamrSetSecurityObject
    {
        in SAMPR_HANDLE ObjectHandle;
        in SECURITY_INFORMATION SecurityInformation;
        in PSAMPR_SR_SECURITY_DESCRIPTOR SecurityDescriptor;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetSecurityObject, SecurityInformation = " + (SecurityInformation as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 2};

    accepts operation SamrQuerySecurityObject
    {
        in SAMPR_HANDLE ObjectHandle;
        in SECURITY_INFORMATION SecurityInformation;
        out PSAMPR_SR_SECURITY_DESCRIPTOR SecurityDescriptor with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQuerySecurityObject, SecurityInformation = " + (SecurityInformation as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 3};

    accepts operation Opnum4NotUsedOnWire{} with IDL{Opnum = 4};

    accepts operation SamrLookupDomainInSamServer
    {
        in SAMPR_HANDLE ServerHandle;
        in PRPC_UNICODE_STRING Name;
        out PRPC_SID DomainId with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrLookupDomainInSamServer, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 5};

    accepts operation SamrEnumerateDomainsInSamServer
    {
        in SAMPR_HANDLE ServerHandle;
        in out IDLUlong EnumerationContext with IDL{IndirectionLevel = 1};
        out PSAMPR_ENUMERATION_BUFFER Buffer with IDL{IndirectionLevel = 1};
        in IDLUlong PreferedMaximumLength;
        out IDLUlong CountReturned with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrEnumerateDomainsInSamServer, EnumerationContext = " + (EnumerationContext as string) +
                ", CountReturned = " + (CountReturned as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 6};

    accepts operation SamrOpenDomain
    {
        in SAMPR_HANDLE ServerHandle;
        in Domain_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<Domain_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrOpenDomain", "Domain ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Domain_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        in PRPC_SID DomainId;
        out SAMPR_HANDLE DomainHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrOpenDomain, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 7};

    accepts operation SamrQueryInformationDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_INFORMATION_CLASS DomainInformationClass;
        out PSAMPR_DOMAIN_INFO_BUFFER[DomainInformationClass] Buffer
            with IDL{Switch_Is = DomainInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationDomain, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 8};

    accepts operation SamrSetInformationDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_INFORMATION_CLASS DomainInformationClass;
        in PSAMPR_DOMAIN_INFO_BUFFER[DomainInformationClass] DomainInformation
            with IDL{Switch_Is = DomainInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetInformationDomain, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 9};

    accepts operation SamrCreateGroupInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in PRPC_UNICODE_STRING Name;
        in Group_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<Group_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrCreateGroupInDomain", "Group ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Group_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        out SAMPR_HANDLE GroupHandle with IDL{IndirectionLevel = 1};
        out IDLUlong RelativeId with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrCreateGroupInDomain, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", RelativeId = " + (RelativeId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 10};

    accepts operation SamrEnumerateGroupsInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in out IDLUlong EnumerationContext with IDL{IndirectionLevel = 1};
        out PSAMPR_ENUMERATION_BUFFER Buffer with IDL{IndirectionLevel = 1};
        in IDLUlong PreferedMaximumLength;
        out IDLUlong CountReturned with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrEnumerateGroupsInDomain, EnumerationContext = " + (EnumerationContext as string) +
                ", CountReturned = " + (CountReturned as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 11};

    accepts operation SamrCreateUserInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in PRPC_UNICODE_STRING Name;
        in User_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<User_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrCreateUserInDomain", "User ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<User_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        out SAMPR_HANDLE UserHandle with IDL{IndirectionLevel = 1};
        out IDLUlong RelativeId with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrCreateUserInDomain, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", RelativeId = " + (RelativeId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 12};

    accepts operation SamrEnumerateUsersInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in out IDLUlong EnumerationContext with IDL{IndirectionLevel = 1};
        in UserAccountCodes UserAccountControl
            where ValidationCheck(InRange<UserAccountCodes>(value), this, DiagnosisLevel.Error,
                () => "SAMR: Value of UserAccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
            with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
        out PSAMPR_ENUMERATION_BUFFER Buffer with IDL{IndirectionLevel = 1};
        in IDLUlong PreferedMaximumLength;
        out IDLUlong CountReturned with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrEnumerateUsersInDomain, EnumerationContext = " + (EnumerationContext as string) +
                ", UserAccountControl = " + Utility.DecToHexFormat(UserAccountControl) +
                ", CountReturned = " + (CountReturned as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 13};

    accepts operation SamrCreateAliasInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in PRPC_UNICODE_STRING AccountName;
        in Alias_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<Alias_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrCreateAliasInDomain", "Alias ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Alias_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        out SAMPR_HANDLE AliasHandle with IDL{IndirectionLevel = 1};
        out IDLUlong RelativeId with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrCreateAliasInDomain, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", RelativeId = " + (RelativeId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 14};

    accepts operation SamrEnumerateAliasesInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in out IDLUlong EnumerationContext with IDL{IndirectionLevel = 1};
        out PSAMPR_ENUMERATION_BUFFER Buffer with IDL{IndirectionLevel = 1};
        in IDLUlong PreferedMaximumLength;
        out IDLUlong CountReturned with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrEnumerateAliasesInDomain, EnumerationContext = " + (EnumerationContext as string) +
                ", CountReturned = " + (CountReturned as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 15};

    accepts operation SamrGetAliasMembership
    {
        in SAMPR_HANDLE DomainHandle;
        in PSAMPR_PSID_ARRAY SidArray;
        out PSAMPR_ULONG_ARRAY Membership;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetAliasMembership, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 16};

    accepts operation SamrLookupNamesInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in IDLUlong Count with IDL{Range = new RangePattern {Low = 0, High = 1000}};
        in array<RPC_UNICODE_STRING> Names
               with IDL{Size_is = [1000], Length_is = [Count], Dimensions = [null]};
        out PSAMPR_ULONG_ARRAY RelativeIds;
        out PSAMPR_ULONG_ARRAY Use;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrLookupNamesInDomain, Count = " + (Count as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 17};

    accepts operation SamrLookupIdsInDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in IDLUlong Count with IDL{Range = new RangePattern {Low = 0, High = 1000}};
        in array<IDLUlong> RelativeIds
            with IDL{Size_is = [1000], Length_is = [Count], IndirectionLevel = 1};
        out PSAMPR_RETURNED_USTRING_ARRAY Names;
        out PSAMPR_ULONG_ARRAY Use;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrLookupIdsInDomain, Count = " + (Count as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 18};

    accepts operation SamrOpenGroup
    {
        in SAMPR_HANDLE DomainHandle;
        in Group_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<Group_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrOpenGroup", "Group ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Group_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong GroupId;
        out SAMPR_HANDLE GroupHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrOpenGroup, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", GroupId = " + (GroupId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 19};

    accepts operation SamrQueryInformationGroup
    {
        in SAMPR_HANDLE GroupHandle;
        in GROUP_INFORMATION_CLASS GroupInformationClass;
        out PSAMPR_GROUP_INFO_BUFFER[GroupInformationClass] Buffer
            with IDL{Switch_Is = GroupInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationGroup, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 20};

    accepts operation SamrSetInformationGroup
    {
        in SAMPR_HANDLE GroupHandle;
        in GROUP_INFORMATION_CLASS GroupInformationClass;
        in PSAMPR_GROUP_INFO_BUFFER[GroupInformationClass] Buffer
               with IDL{Switch_Is = GroupInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetInformationGroup, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 21};

    accepts operation SamrAddMemberToGroup
    {
        in SAMPR_HANDLE GroupHandle;
        in IDLUlong MemberId;
        in SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), this, DiagnosisLevel.Error,
            () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
            with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrAddMemberToGroup, MemberId = " + (MemberId as string) +
                ", Attributes = " + Utility.DecToHexFormat(Attributes)  +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 22};

    accepts operation SamrDeleteGroup
    {
        in out SAMPR_HANDLE GroupHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrDeleteGroup, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 23};

    accepts operation SamrRemoveMemberFromGroup
    {
        in SAMPR_HANDLE GroupHandle;
        in IDLUlong MemberId;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrRemoveMemberFromGroup, MemberId = " + (MemberId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 24};

    accepts operation SamrGetMembersInGroup
    {
        in SAMPR_HANDLE GroupHandle;
        out PSAMPR_GET_MEMBERS_BUFFER Members with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetMembersInGroup, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 25};

    accepts operation SamrSetMemberAttributesOfGroup
    {
        in SAMPR_HANDLE GroupHandle;
        in IDLUlong MemberId;
        in SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), this, DiagnosisLevel.Error,
            () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
            with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetMemberAttributesOfGroup, MemberId = " + (MemberId as string) +
                ", Attributes = " + Utility.DecToHexFormat(Attributes) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 26};

    accepts operation SamrOpenAlias
    {
        in SAMPR_HANDLE DomainHandle;
        in Alias_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<Alias_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrOpenAlias", "Alias ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Alias_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong AliasId;
        out SAMPR_HANDLE AliasHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrOpenAlias, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", AliasId = " + (AliasId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 27};

    accepts operation SamrQueryInformationAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in ALIAS_INFORMATION_CLASS AliasInformationClass;
        out PSAMPR_ALIAS_INFO_BUFFER[AliasInformationClass] Buffer
            with IDL{Switch_Is = AliasInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 28};

    accepts operation SamrSetInformationAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in ALIAS_INFORMATION_CLASS AliasInformationClass;
        in PSAMPR_ALIAS_INFO_BUFFER[AliasInformationClass] Buffer
               with IDL{Switch_Is = AliasInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetInformationAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 29};

    accepts operation SamrDeleteAlias
    {
        in out SAMPR_HANDLE AliasHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrDeleteAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 30};

    accepts operation SamrAddMemberToAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in PRPC_SID MemberId;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrAddMemberToAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 31};

    accepts operation SamrRemoveMemberFromAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in PRPC_SID MemberId;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrRemoveMemberFromAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 32};

    accepts operation SamrGetMembersInAlias
    {
        in SAMPR_HANDLE AliasHandle;
        out PSAMPR_PSID_ARRAY_OUT Members;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetMembersInAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 33};

    accepts operation SamrOpenUser
    {
        in SAMPR_HANDLE DomainHandle;
        in User_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<User_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrOpenUser", "User ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<User_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong UserId;
        out SAMPR_HANDLE UserHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrOpenUser, DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", UserId = " + (UserId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 34};

    accepts operation SamrDeleteUser
    {
        in out SAMPR_HANDLE UserHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrDeleteUser, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 35};

    accepts operation SamrQueryInformationUser
    {
        in SAMPR_HANDLE UserHandle;
        in USER_INFORMATION_CLASS UserInformationClass;
        out PSAMPR_USER_INFO_BUFFER[UserInformationClass] Buffer
            with IDL{Switch_Is = UserInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationUser, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 36};

    accepts operation SamrSetInformationUser
    {
        in SAMPR_HANDLE UserHandle;
        in USER_INFORMATION_CLASS UserInformationClass;
        in PSAMPR_USER_INFO_BUFFER[UserInformationClass] Buffer
            with IDL{Switch_Is = UserInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetInformationUser, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 37};

    accepts operation SamrChangePasswordUser
    {
        in SAMPR_HANDLE UserHandle;
        in char LmPresent;
        in PENCRYPTED_LM_OWF_PASSWORD OldLmEncryptedWithNewLm with IDL{PointerType = PointerKind.UniquePtr};
        in PENCRYPTED_LM_OWF_PASSWORD NewLmEncryptedWithOldLm with IDL{PointerType = PointerKind.UniquePtr};
        in char NtPresent;
        in PENCRYPTED_LM_OWF_PASSWORD OldNtEncryptedWithNewNt with IDL{PointerType = PointerKind.UniquePtr};
        in PENCRYPTED_LM_OWF_PASSWORD NewNtEncryptedWithOldNt with IDL{PointerType = PointerKind.UniquePtr};
        in char NtCrossEncryptionPresent;
        in PENCRYPTED_LM_OWF_PASSWORD NewNtEncryptedWithNewLm with IDL{PointerType = PointerKind.UniquePtr};
        in char LmCrossEncryptionPresent;
        in PENCRYPTED_LM_OWF_PASSWORD NewLmEncryptedWithNewNt with IDL{PointerType = PointerKind.UniquePtr};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrChangePasswordUser, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 38};

    accepts operation SamrGetGroupsForUser
    {
        in SAMPR_HANDLE UserHandle;
        out PSAMPR_GET_GROUPS_BUFFER Groups with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetGroupsForUser, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 39};

    accepts operation SamrQueryDisplayInformation
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_DISPLAY_INFORMATION DisplayInformationClass;
        in IDLUlong Index;
        in IDLUlong EntryCount;
        in IDLUlong PreferredMaximumLength;
        out IDLUlong TotalAvailable with IDL{IndirectionLevel = 1};
        out IDLUlong TotalReturned with IDL{IndirectionLevel = 1};
        out PSAMPR_DISPLAY_INFO_BUFFER[DisplayInformationClass] Buffer
            with IDL{Switch_Is = DisplayInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryDisplayInformation, Index = " + (Index as string) +
                ", EntryCount = " + (EntryCount as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 40};

    accepts operation SamrGetDisplayEnumerationIndex
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_DISPLAY_INFORMATION DisplayInformationClass;
        in PRPC_UNICODE_STRING Prefix;
        out IDLUlong Index with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetDisplayEnumerationIndex, Index = " + (Index as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 41};

    accepts operation Opnum42NotUsedOnWire{} with IDL{Opnum = 42};

    accepts operation Opnum43NotUsedOnWire{} with IDL{Opnum = 43};

    accepts operation SamrGetUserDomainPasswordInformation
    {
        in SAMPR_HANDLE UserHandle;
        out PUSER_DOMAIN_PASSWORD_INFORMATION PasswordInformation;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetUserDomainPasswordInformation, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 44};

    accepts operation SamrRemoveMemberFromForeignDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in PRPC_SID MemberSid;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrRemoveMemberFromForeignDomain, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 45};

    accepts operation SamrQueryInformationDomain2
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_INFORMATION_CLASS DomainInformationClass;
        out PSAMPR_DOMAIN_INFO_BUFFER[DomainInformationClass] Buffer
            with IDL{Switch_Is = DomainInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationDomain2, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 46};

    accepts operation SamrQueryInformationUser2
    {
        in SAMPR_HANDLE UserHandle;
        in USER_INFORMATION_CLASS UserInformationClass;
        out PSAMPR_USER_INFO_BUFFER[UserInformationClass] Buffer
            with IDL{Switch_Is = UserInformationClass, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryInformationUser2, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 47};

    accepts operation SamrQueryDisplayInformation2
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_DISPLAY_INFORMATION DisplayInformationClass;
        in IDLUlong Index;
        in IDLUlong EntryCount;
        in IDLUlong PreferredMaximumLength;
        out IDLUlong TotalAvailable with IDL{IndirectionLevel = 1};
        out IDLUlong TotalReturned with IDL{IndirectionLevel = 1};
        out PSAMPR_DISPLAY_INFO_BUFFER[DisplayInformationClass] Buffer
            with IDL{Switch_Is = DisplayInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryDisplayInformation2, Index = " + (Index as string) +
                ", EntryCount = " + (EntryCount as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 48};

    accepts operation SamrGetDisplayEnumerationIndex2
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_DISPLAY_INFORMATION DisplayInformationClass;
        in PRPC_UNICODE_STRING Prefix;
        out IDLUlong Index with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetDisplayEnumerationIndex2, Index = " + (Index as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 49};

    accepts operation SamrCreateUser2InDomain
    {
        in SAMPR_HANDLE DomainHandle;
        in PRPC_UNICODE_STRING Name;
        in IDLUlong AccountType;
        in User_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<User_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrCreateUser2InDomain", "User ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<User_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        out SAMPR_HANDLE UserHandle with IDL{IndirectionLevel = 1};
        out User_ACCESS_MASK GrantedAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<User_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "GrantedAccess", "SamrCreateUser2InDomain", "User ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<User_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        out IDLUlong RelativeId with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrCreateUser2InDomain, AccountType = " + Utility.DecToHexFormat(AccountType) +
                ", DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", GrantedAccess = " + Utility.DecToHexFormat(GrantedAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 50};

    accepts operation SamrQueryDisplayInformation3
    {
        in SAMPR_HANDLE DomainHandle;
        in DOMAIN_DISPLAY_INFORMATION DisplayInformationClass;
        in IDLUlong Index;
        in IDLUlong EntryCount;
        in IDLUlong PreferredMaximumLength;
        out IDLUlong TotalAvailable with IDL{IndirectionLevel = 1};
        out IDLUlong TotalReturned with IDL{IndirectionLevel = 1};
        out PSAMPR_DISPLAY_INFO_BUFFER[DisplayInformationClass] Buffer
            with IDL{Switch_Is = DisplayInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrQueryDisplayInformation3, Index = " + (Index as string) +
                ", EntryCount = " + (EntryCount as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 51};

    accepts operation SamrAddMultipleMembersToAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in PSAMPR_PSID_ARRAY MembersBuffer;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrAddMultipleMembersToAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 52};

    accepts operation SamrRemoveMultipleMembersFromAlias
    {
        in SAMPR_HANDLE AliasHandle;
        in PSAMPR_PSID_ARRAY MembersBuffer;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrRemoveMultipleMembersFromAlias, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 53};

    accepts operation SamrOemChangePasswordUser2
    {
        in optional handle_t BindingHandle;
        in PRPC_STRING ServerName with IDL{PointerType = PointerKind.UniquePtr};
        in PRPC_STRING UserName;
        in PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldLm
            with IDL{PointerType = PointerKind.UniquePtr};
        in PENCRYPTED_LM_OWF_PASSWORD OldLmOwfPasswordEncryptedWithNewLm
            with IDL{PointerType = PointerKind.UniquePtr};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrOemChangePasswordUser2, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 54};

    accepts operation SamrUnicodeChangePasswordUser2
    {
        in optional handle_t BindingHandle;
        in PRPC_UNICODE_STRING ServerName
            with IDL{PointerType = PointerKind.UniquePtr};
        in PRPC_UNICODE_STRING UserName;
        in PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldNt
            with IDL{PointerType = PointerKind.UniquePtr};
        in PENCRYPTED_LM_OWF_PASSWORD OldNtOwfPasswordEncryptedWithNewNt
            with IDL{PointerType = PointerKind.UniquePtr};
        in char LmPresent;
        in PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldLm
            with IDL{PointerType = PointerKind.UniquePtr};
        in PENCRYPTED_LM_OWF_PASSWORD OldLmOwfPasswordEncryptedWithNewNt
            with IDL{PointerType = PointerKind.UniquePtr};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrUnicodeChangePasswordUser2, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 55};

    accepts operation SamrGetDomainPasswordInformation
    {
        in optional handle_t BindingHandle;
        in PRPC_UNICODE_STRING Unused with IDL{PointerType = PointerKind.UniquePtr};
        out PUSER_DOMAIN_PASSWORD_INFORMATION PasswordInformation;
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrGetDomainPasswordInformation, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 56};

    accepts operation SamrConnect2
    {
        in string ServerName
            with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<PSAMPR_SERVER_NAME>()};
        out SAMPR_HANDLE ServerHandle with IDL{IndirectionLevel = 1};
        in Server_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<Server_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrConnect2", "Server ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Server_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrConnect2, ServerName = " + ServerName +
                ", DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 57};

    accepts operation SamrSetInformationUser2
    {
        in SAMPR_HANDLE UserHandle;
        in USER_INFORMATION_CLASS UserInformationClass;
        in PSAMPR_USER_INFO_BUFFER[UserInformationClass] Buffer
            with IDL{Switch_Is = UserInformationClass};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetInformationUser2, ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 58};

    accepts operation Opnum59NotUsedOnWire{} with IDL{Opnum = 59};

    accepts operation Opnum60NotUsedOnWire{} with IDL{Opnum = 60};

    accepts operation Opnum61NotUsedOnWire{} with IDL{Opnum = 61};

    accepts operation SamrConnect4
    {
        in string ServerName
            with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<PSAMPR_SERVER_NAME>()};
        out SAMPR_HANDLE ServerHandle with IDL{IndirectionLevel = 1};
        in IDLUlong ClientRevision where ValidationCheck(value == 2, this, DiagnosisLevel.Error,
            "SAMR: ClientRevision must be set to 2 and must be ignored.");
        in Server_ACCESS_MASK DesiredAccess
            where ValidationCheckCombinationValueTooManyItems(InRange<Server_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrConnect4", "Server ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Server_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrConnect4, ServerName = " + ServerName +
                ", DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 62};

    accepts operation Opnum63NotUsedOnWire{} with IDL{Opnum = 63};

    accepts operation SamrConnect5
    {
        in string ServerName
            with IDL{PointerType = PointerKind.UniquePtr, BaseStringType = TypeOf<PSAMPR_SERVER_NAME>()};
        in Server_ACCESS_MASK DesiredAccess 
            where ValidationCheckCombinationValueTooManyItems(InRange<Server_ACCESS_MASK>(value), null, true, ReferenceType.Message,
                    "SAMR", "DesiredAccess", "SamrConnect5", "Server ACCESS_MASK Values", "[MS-SAMR]")
            with Encoding{Decoder = PatternDecoder<Server_ACCESS_MASK>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong InVersion;
        in SAMPR_REVISION_INFO[InVersion] InRevisionInfo
            with IDL{Switch_Is = InVersion, IndirectionLevel = 1};
        out IDLUlong OutVersion with IDL{IndirectionLevel = 1};
        out SAMPR_REVISION_INFO[OutVersion] OutRevisionInfo
            with IDL{Switch_Is = OutVersion, IndirectionLevel = 1};
        out SAMPR_HANDLE ServerHandle with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrConnect5, ServerName = " + ServerName +
                ", DesiredAccess = " + Utility.DecToHexFormat(DesiredAccess) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 64};

    accepts operation SamrRidToSid
    {
        in SAMPR_HANDLE ObjectHandle;
        in IDLUlong Rid;
        out PRPC_SID Sid with IDL{IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrRidToSid, Rid = " + (Rid as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 65};

    accepts operation SamrSetDSRMPassword
    {
        in optional handle_t BindingHandle;
        in PRPC_UNICODE_STRING Unused with IDL{PointerType = PointerKind.UniquePtr};
        in IDLUlong UserId;
        in PENCRYPTED_LM_OWF_PASSWORD EncryptedNtOwfPassword
            with IDL{PointerType = PointerKind.UniquePtr};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrSetDSRMPassword, UserId = " + (UserId as string) +
                ", ReturnValue = " + NtStatusValuesToText(ReturnValue as uint);
        }
    }
    with IDL{Opnum = 66};

    accepts operation SamrValidatePassword
    {
        in optional handle_t Handle;
        in PASSWORD_POLICY_VALIDATION_TYPE ValidationType;
        in PSAM_VALIDATE_INPUT_ARG[ValidationType] InputArg
            with IDL{Switch_Is = ValidationType};
        out PSAM_VALIDATE_OUTPUT_ARG[ValidationType] OutputArg
            with IDL{Switch_Is = ValidationType, IndirectionLevel = 1};
        result IDLLong ReturnValue;

        override string ToString()
        {
            return "SamrValidatePassword";
        }
    }
    with IDL{Opnum = 67};

    accepts operation Opnum68NotUsedOnWire{} with IDL{Opnum = 68};

    accepts operation Opnum69NotUsedOnWire{} with IDL{Opnum = 69};
}
with IDL{
        Uuid = {12345778-1234-abcd-ef00-0123456789ac},
        Version = "1.0",
        Pointer_default = PointerKind.UniquePtr,
        Ms_union = true
    };

typedef PSAMPR_SERVER_NAME = wchar_t with IDL{Handle = true, IndirectionLevel = 1} ;

typedef SAMPR_HANDLE = ContextHandle ;

type SAMPR_SR_SECURITY_DESCRIPTOR
{
    IDLUlong Length with IDL{Range = new RangePattern {Low = 0, High = 256 * 1024}};
    array<char> SecurityDescriptor with IDL{Size_is = [Length], IndirectionLevel = 1};
}

typedef PSAMPR_SR_SECURITY_DESCRIPTOR = SAMPR_SR_SECURITY_DESCRIPTOR with IDL{IndirectionLevel = 1};

type SAMPR_ENUMERATION_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_RID_ENUMERATION> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_ENUMERATION_BUFFER = SAMPR_ENUMERATION_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_RID_ENUMERATION
{
    IDLUlong RelativeId;
    RPC_UNICODE_STRING Name;
}

typedef PSAMPR_RID_ENUMERATION = SAMPR_RID_ENUMERATION with IDL{IndirectionLevel = 1};

pattern DOMAIN_INFORMATION_CLASS = enum 
{
    DomainPasswordInformation = 1,
    DomainGeneralInformation = 2,
    DomainLogoffInformation = 3,
    DomainOemInformation = 4,
    DomainNameInformation = 5,
    DomainReplicationInformation = 6,
    DomainServerRoleInformation = 7,
    DomainModifiedInformation = 8,
    DomainStateInformation = 9,
    DomainGeneralInformation2 = 11,
    DomainLockoutInformation = 12,
    DomainModifiedInformation2 = 13
};

type SAMPR_DOMAIN_INFO_BUFFER[DOMAIN_INFORMATION_CLASS tag]
{
    optional [|tag in {1}|] DOMAIN_PASSWORD_INFORMATION Password with IDL{Case = [1]};
    optional [|tag in {2}|] SAMPR_DOMAIN_GENERAL_INFORMATION General with IDL{Case = [2]};
    optional [|tag in {3}|] DOMAIN_LOGOFF_INFORMATION Logoff with IDL{Case = [3]};
    optional [|tag in {4}|] SAMPR_DOMAIN_OEM_INFORMATION Oem with IDL{Case = [4]};
    optional [|tag in {5}|] SAMPR_DOMAIN_NAME_INFORMATION Name with IDL{Case = [5]};
    optional [|tag in {7}|] DOMAIN_SERVER_ROLE_INFORMATION Role with IDL{Case = [7]};
    optional [|tag in {6}|] SAMPR_DOMAIN_REPLICATION_INFORMATION Replication with IDL{Case = [6]};
    optional [|tag in {8}|] DOMAIN_MODIFIED_INFORMATION Modified with IDL{Case = [8]};
    optional [|tag in {9}|] DOMAIN_STATE_INFORMATION State with IDL{Case = [9]};
    optional [|tag in {11}|] SAMPR_DOMAIN_GENERAL_INFORMATION2 General2 with IDL{Case = [11]};
    optional [|tag in {12}|] SAMPR_DOMAIN_LOCKOUT_INFORMATION Lockout with IDL{Case = [12]};
    optional [|tag in {13}|] DOMAIN_MODIFIED_INFORMATION2 Modified2 with IDL{Case = [13]};
} with IDL{
    Switch_Type = TypeOf<DOMAIN_INFORMATION_CLASS>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAMPR_DOMAIN_INFO_BUFFER = SAMPR_DOMAIN_INFO_BUFFER with IDL{IndirectionLevel = 1};

type DOMAIN_PASSWORD_INFORMATION
{
    ushort MinPasswordLength;
    ushort PasswordHistoryLength;
    PasswordProperties PasswordProperties 
        where ValidationCheck(InRange<PasswordProperties>(value), null, DiagnosisLevel.Error,
        () => "SAMR: " + Utility.DecToHexFormat(value) + " is not a valid value for the PasswordProperties in type DOMAIN_PASSWORD_INFORMATION.")
        with Encoding{Decoder = PatternDecoder<PasswordProperties>, SourcePattern = TypeOf<IDLUlong>()};
    OLD_LARGE_INTEGER MaxPasswordAge;
    OLD_LARGE_INTEGER MinPasswordAge;
}

typedef PDOMAIN_PASSWORD_INFORMATION = DOMAIN_PASSWORD_INFORMATION with IDL{IndirectionLevel = 1};

type OLD_LARGE_INTEGER
{
    IDLUlong LowPart;
    IDLLong HighPart;
}

typedef POLD_LARGE_INTEGER = OLD_LARGE_INTEGER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_GENERAL_INFORMATION
{
    OLD_LARGE_INTEGER ForceLogoff;
    RPC_UNICODE_STRING OemInformation;
    RPC_UNICODE_STRING DomainName;
    RPC_UNICODE_STRING ReplicaSourceNodeName;
    OLD_LARGE_INTEGER DomainModifiedCount;
    SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerState DomainServerState
        where ValidationCheck(InRange<SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerState>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of DomainServerState = " + Utility.DecToHexFormat(value) + " is not valid.")
        with Encoding{Decoder = PatternDecoder<SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerState>, SourcePattern = TypeOf<IDLUlong>()};
    SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerRole DomainServerRole
        where ValidationCheck(InRange<SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerRole>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of DomainServerRole = " + Utility.DecToHexFormat(value) + " is not valid.")
        with Encoding{Decoder = PatternDecoder<SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerRole>, SourcePattern = TypeOf<IDLUlong>()};
    char UasCompatibilityRequired;
    IDLUlong UserCount;
    IDLUlong GroupCount;
    IDLUlong AliasCount;
}

typedef PSAMPR_DOMAIN_GENERAL_INFORMATION = SAMPR_DOMAIN_GENERAL_INFORMATION with IDL{IndirectionLevel = 1};

type DOMAIN_LOGOFF_INFORMATION
{
    OLD_LARGE_INTEGER ForceLogoff;
}

typedef PDOMAIN_LOGOFF_INFORMATION = DOMAIN_LOGOFF_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_OEM_INFORMATION
{
    RPC_UNICODE_STRING OemInformation;
}

typedef PSAMPR_DOMAIN_OEM_INFORMATION = SAMPR_DOMAIN_OEM_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_NAME_INFORMATION
{
    RPC_UNICODE_STRING DomainName;
}

typedef PSAMPR_DOMAIN_NAME_INFORMATION = SAMPR_DOMAIN_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type DOMAIN_SERVER_ROLE_INFORMATION
{
    DOMAIN_SERVER_ROLE DomainServerRole;
}

typedef PDOMAIN_SERVER_ROLE_INFORMATION = DOMAIN_SERVER_ROLE_INFORMATION with IDL{IndirectionLevel = 1};

pattern DOMAIN_SERVER_ROLE = enum 
{
    DomainServerRoleBackup = 2,
    DomainServerRolePrimary = 3
};

typedef PDOMAIN_SERVER_ROLE = DOMAIN_SERVER_ROLE with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_REPLICATION_INFORMATION
{
    RPC_UNICODE_STRING ReplicaSourceNodeName;
}

typedef PSAMPR_DOMAIN_REPLICATION_INFORMATION = SAMPR_DOMAIN_REPLICATION_INFORMATION with IDL{IndirectionLevel = 1};

type DOMAIN_MODIFIED_INFORMATION
{
    OLD_LARGE_INTEGER DomainModifiedCount;
    OLD_LARGE_INTEGER CreationTime;
}

typedef PDOMAIN_MODIFIED_INFORMATION = DOMAIN_MODIFIED_INFORMATION with IDL{IndirectionLevel = 1};

type DOMAIN_STATE_INFORMATION
{
    DOMAIN_SERVER_ENABLE_STATE DomainServerState;
}

typedef PDOMAIN_STATE_INFORMATION = DOMAIN_STATE_INFORMATION with IDL{IndirectionLevel = 1};

pattern DOMAIN_SERVER_ENABLE_STATE = enum 
{
    DomainServerEnabled = 1,
    DomainServerDisabled
};

typedef PDOMAIN_SERVER_ENABLE_STATE = DOMAIN_SERVER_ENABLE_STATE with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_GENERAL_INFORMATION2
{
    SAMPR_DOMAIN_GENERAL_INFORMATION I1;
    LARGE_INTEGER LockoutDuration;
    LARGE_INTEGER LockoutObservationWindow;
    ushort LockoutThreshold;
}

typedef PSAMPR_DOMAIN_GENERAL_INFORMATION2 = SAMPR_DOMAIN_GENERAL_INFORMATION2 with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_LOCKOUT_INFORMATION
{
    LARGE_INTEGER LockoutDuration;
    LARGE_INTEGER LockoutObservationWindow;
    ushort LockoutThreshold;
}

typedef PSAMPR_DOMAIN_LOCKOUT_INFORMATION = SAMPR_DOMAIN_LOCKOUT_INFORMATION with IDL{IndirectionLevel = 1};

type DOMAIN_MODIFIED_INFORMATION2
{
    OLD_LARGE_INTEGER DomainModifiedCount;
    OLD_LARGE_INTEGER CreationTime;
    OLD_LARGE_INTEGER ModifiedCountAtLastPromotion;
}

typedef PDOMAIN_MODIFIED_INFORMATION2 = DOMAIN_MODIFIED_INFORMATION2 with IDL{IndirectionLevel = 1};

type SAMPR_PSID_ARRAY
{
    IDLUlong Count with IDL{Range = new RangePattern {Low = 0, High = 1024}};
    array<PSAMPR_SID_INFORMATION> Sids with IDL{Size_is = [Count]};
}

typedef PSAMPR_PSID_ARRAY = SAMPR_PSID_ARRAY with IDL{IndirectionLevel = 1};

type SAMPR_SID_INFORMATION
{
    PRPC_SID SidPointer;
}

typedef PSAMPR_SID_INFORMATION = SAMPR_SID_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_ULONG_ARRAY
{
    IDLUlong Count;
    array<IDLUlong> Element with IDL{Size_is = [Count], IndirectionLevel = 1};
}

typedef PSAMPR_ULONG_ARRAY = SAMPR_ULONG_ARRAY with IDL{IndirectionLevel = 1};

type SAMPR_RETURNED_USTRING_ARRAY
{
    IDLUlong Count;
    array<PRPC_UNICODE_STRING> Element with IDL{Size_is = [Count]};
}

typedef PSAMPR_RETURNED_USTRING_ARRAY = SAMPR_RETURNED_USTRING_ARRAY with IDL{IndirectionLevel = 1};

pattern GROUP_INFORMATION_CLASS = enum 
{
    GroupGeneralInformation = 1,
    GroupNameInformation,
    GroupAttributeInformation,
    GroupAdminCommentInformation,
    GroupReplicationInformation
};

type SAMPR_GROUP_INFO_BUFFER[GROUP_INFORMATION_CLASS tag]
{
    optional [|tag in {1}|] SAMPR_GROUP_GENERAL_INFORMATION General
        with IDL{Case = [1]};
    optional [|tag in {2}|] SAMPR_GROUP_NAME_INFORMATION Name
        with IDL{Case = [2]};
    optional [|tag in {3}|] GROUP_ATTRIBUTE_INFORMATION Attribute
        with IDL{Case = [3]};
    optional [|tag in {4}|] SAMPR_GROUP_ADM_COMMENT_INFORMATION AdminComment
        with IDL{Case = [4]};
    optional [|tag in {5}|] SAMPR_GROUP_GENERAL_INFORMATION DoNotUse
        with IDL{Case = [5]};
}
with IDL{
    Switch_Type = TypeOf<GROUP_INFORMATION_CLASS>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAMPR_GROUP_INFO_BUFFER = SAMPR_GROUP_INFO_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_GROUP_GENERAL_INFORMATION
{
    RPC_UNICODE_STRING Name;
    SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), null, DiagnosisLevel.Error,
        () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
        with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
    IDLUlong MemberCount;
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_GROUP_GENERAL_INFORMATION = SAMPR_GROUP_GENERAL_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_GROUP_NAME_INFORMATION
{
    RPC_UNICODE_STRING Name;
}

typedef PSAMPR_GROUP_NAME_INFORMATION = SAMPR_GROUP_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type GROUP_ATTRIBUTE_INFORMATION
{
    SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), null, DiagnosisLevel.Error,
        () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
        with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PGROUP_ATTRIBUTE_INFORMATION = GROUP_ATTRIBUTE_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_GROUP_ADM_COMMENT_INFORMATION
{
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_GROUP_ADM_COMMENT_INFORMATION = SAMPR_GROUP_ADM_COMMENT_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_GET_MEMBERS_BUFFER
{
    IDLUlong MemberCount;
    array<IDLUlong> Members with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
    array<IDLUlong> Attributes with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
}

typedef PSAMPR_GET_MEMBERS_BUFFER = SAMPR_GET_MEMBERS_BUFFER with IDL{IndirectionLevel = 1};

pattern ALIAS_INFORMATION_CLASS = enum 
{
    AliasGeneralInformation = 1,
    AliasNameInformation,
    AliasAdminCommentInformation
};

type SAMPR_ALIAS_INFO_BUFFER[ALIAS_INFORMATION_CLASS tag]
{
    optional [|tag in {1}|] SAMPR_ALIAS_GENERAL_INFORMATION General
        with IDL{Case = [1]};
    optional [|tag in {2}|] SAMPR_ALIAS_NAME_INFORMATION Name
        with IDL{Case = [2]};
    optional [|tag in {3}|] SAMPR_ALIAS_ADM_COMMENT_INFORMATION AdminComment
        with IDL{Case = [3]};
}
with IDL{
    Switch_Type = TypeOf<ALIAS_INFORMATION_CLASS>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAMPR_ALIAS_INFO_BUFFER = SAMPR_ALIAS_INFO_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_ALIAS_GENERAL_INFORMATION
{
    RPC_UNICODE_STRING Name;
    IDLUlong MemberCount;
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_ALIAS_GENERAL_INFORMATION = SAMPR_ALIAS_GENERAL_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_ALIAS_NAME_INFORMATION
{
    RPC_UNICODE_STRING Name;
}

typedef PSAMPR_ALIAS_NAME_INFORMATION = SAMPR_ALIAS_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_ALIAS_ADM_COMMENT_INFORMATION
{
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_ALIAS_ADM_COMMENT_INFORMATION = SAMPR_ALIAS_ADM_COMMENT_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_PSID_ARRAY_OUT
{
    IDLUlong Count;
    array<PSAMPR_SID_INFORMATION> Sids with IDL{Size_is = [Count]};
}

typedef PSAMPR_PSID_ARRAY_OUT = SAMPR_PSID_ARRAY_OUT with IDL{IndirectionLevel = 1};

pattern USER_INFORMATION_CLASS = enum 
{
    UserGeneralInformation = 1,
    UserPreferencesInformation = 2,
    UserLogonInformation = 3,
    UserLogonHoursInformation = 4,
    UserAccountInformation = 5,
    UserNameInformation = 6,
    UserAccountNameInformation = 7,
    UserFullNameInformation = 8,
    UserPrimaryGroupInformation = 9,
    UserHomeInformation = 10,
    UserScriptInformation = 11,
    UserProfileInformation = 12,
    UserAdminCommentInformation = 13,
    UserWorkStationsInformation = 14,
    UserControlInformation = 16,
    UserExpiresInformation = 17,
    UserInternal1Information = 18,
    UserParametersInformation = 20,
    UserAllInformation = 21,
    UserInternal4Information = 23,
    UserInternal5Information = 24,
    UserInternal4InformationNew = 25,
    UserInternal5InformationNew = 26
};

typedef PUSER_INFORMATION_CLASS = USER_INFORMATION_CLASS with IDL{IndirectionLevel = 1};

type SAMPR_USER_INFO_BUFFER[USER_INFORMATION_CLASS tag]
{
    optional [|tag in {1}|] SAMPR_USER_GENERAL_INFORMATION General
        with IDL{Case = [1]};
    optional [|tag in {2}|] SAMPR_USER_PREFERENCES_INFORMATION Preferences
        with IDL{Case = [2]};
    optional [|tag in {3}|] SAMPR_USER_LOGON_INFORMATION Logon
        with IDL{Case = [3]};
    optional [|tag in {4}|] SAMPR_USER_LOGON_HOURS_INFORMATION LogonHours
        with IDL{Case = [4]};
    optional [|tag in {5}|] SAMPR_USER_ACCOUNT_INFORMATION Account
        with IDL{Case = [5]};
    optional [|tag in {6}|] SAMPR_USER_NAME_INFORMATION Name
        with IDL{Case = [6]};
    optional [|tag in {7}|] SAMPR_USER_A_NAME_INFORMATION AccountName
        with IDL{Case = [7]};
    optional [|tag in {8}|] SAMPR_USER_F_NAME_INFORMATION FullName
        with IDL{Case = [8]};
    optional [|tag in {9}|] USER_PRIMARY_GROUP_INFORMATION PrimaryGroup
        with IDL{Case = [9]};
    optional [|tag in {10}|] SAMPR_USER_HOME_INFORMATION Home
        with IDL{Case = [10]};
    optional [|tag in {11}|] SAMPR_USER_SCRIPT_INFORMATION Script
        with IDL{Case = [11]};
    optional [|tag in {12}|] SAMPR_USER_PROFILE_INFORMATION Profile
        with IDL{Case = [12]};
    optional [|tag in {13}|] SAMPR_USER_ADMIN_COMMENT_INFORMATION AdminComment
        with IDL{Case = [13]};
    optional [|tag in {14}|] SAMPR_USER_WORKSTATIONS_INFORMATION WorkStations
        with IDL{Case = [14]};
    optional [|tag in {16}|] USER_CONTROL_INFORMATION Control
        with IDL{Case = [16]};
    optional [|tag in {17}|] USER_EXPIRES_INFORMATION Expires
        with IDL{Case = [17]};
    optional [|tag in {18}|] SAMPR_USER_INTERNAL1_INFORMATION Internal1
        with IDL{Case = [18]};
    optional [|tag in {20}|] SAMPR_USER_PARAMETERS_INFORMATION Parameters
        with IDL{Case = [20]};
    optional [|tag in {21}|] SAMPR_USER_ALL_INFORMATION All
        with IDL{Case = [21]};
    optional [|tag in {23}|] SAMPR_USER_INTERNAL4_INFORMATION Internal4
        with IDL{Case = [23]};
    optional [|tag in {24}|] SAMPR_USER_INTERNAL5_INFORMATION Internal5
        with IDL{Case = [24]};
    optional [|tag in {25}|] SAMPR_USER_INTERNAL4_INFORMATION_NEW Internal4New
        with IDL{Case = [25]};
    optional [|tag in {26}|] SAMPR_USER_INTERNAL5_INFORMATION_NEW Internal5New
        with IDL{Case = [26]};
}
with IDL{
    Switch_Type = TypeOf<USER_INFORMATION_CLASS>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAMPR_USER_INFO_BUFFER = SAMPR_USER_INFO_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_USER_GENERAL_INFORMATION
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    IDLUlong PrimaryGroupId;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING UserComment;
}

typedef PSAMPR_USER_GENERAL_INFORMATION = SAMPR_USER_GENERAL_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_PREFERENCES_INFORMATION
{
    RPC_UNICODE_STRING UserComment;
    RPC_UNICODE_STRING Reserved1 where ValidationCheck(value.Length == 0 && value.MaximumLength == 0, null, DiagnosisLevel.Error,
        "SAMR: The Reserved1 in type SAMPR_USER_PREFERENCES_INFORMATION must be a zero-length string when sent and returned.");
    ushort CountryCode;
    ushort CodePage;
}

typedef PSAMPR_USER_PREFERENCES_INFORMATION = SAMPR_USER_PREFERENCES_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_LOGON_INFORMATION
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    IDLUlong UserId;
    IDLUlong PrimaryGroupId;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    RPC_UNICODE_STRING ScriptPath;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING WorkStations;
    OLD_LARGE_INTEGER LastLogon;
    OLD_LARGE_INTEGER LastLogoff;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER PasswordCanChange;
    OLD_LARGE_INTEGER PasswordMustChange;
    SAMPR_LOGON_HOURS LogonHours;
    ushort BadPasswordCount;
    ushort LogonCount;
    UserAccountCodes UserAccountControl
        where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of UserAccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PSAMPR_USER_LOGON_INFORMATION = SAMPR_USER_LOGON_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_LOGON_HOURS_INFORMATION
{
    SAMPR_LOGON_HOURS LogonHours;
}

typedef PSAMPR_USER_LOGON_HOURS_INFORMATION = SAMPR_USER_LOGON_HOURS_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_ACCOUNT_INFORMATION
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    IDLUlong UserId;
    IDLUlong PrimaryGroupId;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    RPC_UNICODE_STRING ScriptPath;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING WorkStations;
    OLD_LARGE_INTEGER LastLogon;
    OLD_LARGE_INTEGER LastLogoff;
    SAMPR_LOGON_HOURS LogonHours;
    ushort BadPasswordCount;
    ushort LogonCount;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER AccountExpires;
    UserAccountCodes UserAccountControl
        where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of UserAccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PSAMPR_USER_ACCOUNT_INFORMATION = SAMPR_USER_ACCOUNT_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_NAME_INFORMATION
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
}

typedef PSAMPR_USER_NAME_INFORMATION = SAMPR_USER_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_A_NAME_INFORMATION
{
    RPC_UNICODE_STRING UserName;
}

typedef PSAMPR_USER_A_NAME_INFORMATION = SAMPR_USER_A_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_F_NAME_INFORMATION
{
    RPC_UNICODE_STRING FullName;
}

typedef PSAMPR_USER_F_NAME_INFORMATION = SAMPR_USER_F_NAME_INFORMATION with IDL{IndirectionLevel = 1};

type USER_PRIMARY_GROUP_INFORMATION
{
    IDLUlong PrimaryGroupId;
}

typedef PUSER_PRIMARY_GROUP_INFORMATION = USER_PRIMARY_GROUP_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_HOME_INFORMATION
{
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
}

typedef PSAMPR_USER_HOME_INFORMATION = SAMPR_USER_HOME_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_SCRIPT_INFORMATION
{
    RPC_UNICODE_STRING ScriptPath;
}

typedef PSAMPR_USER_SCRIPT_INFORMATION = SAMPR_USER_SCRIPT_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_PROFILE_INFORMATION
{
    RPC_UNICODE_STRING ProfilePath;
}

typedef PSAMPR_USER_PROFILE_INFORMATION = SAMPR_USER_PROFILE_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_ADMIN_COMMENT_INFORMATION
{
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_USER_ADMIN_COMMENT_INFORMATION = SAMPR_USER_ADMIN_COMMENT_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_WORKSTATIONS_INFORMATION
{
    RPC_UNICODE_STRING WorkStations;
}

typedef PSAMPR_USER_WORKSTATIONS_INFORMATION = SAMPR_USER_WORKSTATIONS_INFORMATION with IDL{IndirectionLevel = 1};

type USER_CONTROL_INFORMATION
{
    UserAccountCodes UserAccountControl
        where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of UserAccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PUSER_CONTROL_INFORMATION = USER_CONTROL_INFORMATION with IDL{IndirectionLevel = 1};

type USER_EXPIRES_INFORMATION
{
    OLD_LARGE_INTEGER AccountExpires;
}

typedef PUSER_EXPIRES_INFORMATION = USER_EXPIRES_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_INTERNAL1_INFORMATION
{
    ENCRYPTED_LM_OWF_PASSWORD EncryptedNtOwfPassword;
    ENCRYPTED_LM_OWF_PASSWORD EncryptedLmOwfPassword;
    char NtPasswordPresent;
    char LmPasswordPresent;
    char PasswordExpired;
}

typedef PSAMPR_USER_INTERNAL1_INFORMATION = SAMPR_USER_INTERNAL1_INFORMATION with IDL{IndirectionLevel = 1};

type ENCRYPTED_LM_OWF_PASSWORD
{
    array<char> data with IDL{Dimensions = [16]};
}

typedef PENCRYPTED_LM_OWF_PASSWORD = ENCRYPTED_LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

typedef ENCRYPTED_NT_OWF_PASSWORD = ENCRYPTED_LM_OWF_PASSWORD;

typedef PENCRYPTED_NT_OWF_PASSWORD = ENCRYPTED_LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

type SAMPR_USER_PARAMETERS_INFORMATION
{
    RPC_UNICODE_STRING Parameters;
}

typedef PSAMPR_USER_PARAMETERS_INFORMATION = SAMPR_USER_PARAMETERS_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_ALL_INFORMATION
{
    OLD_LARGE_INTEGER LastLogon;
    OLD_LARGE_INTEGER LastLogoff;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER AccountExpires;
    OLD_LARGE_INTEGER PasswordCanChange;
    OLD_LARGE_INTEGER PasswordMustChange;
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    RPC_UNICODE_STRING ScriptPath;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING WorkStations;
    RPC_UNICODE_STRING UserComment;
    RPC_UNICODE_STRING Parameters;
    RPC_SHORT_BLOB LmOwfPassword;
    RPC_SHORT_BLOB NtOwfPassword;
    RPC_UNICODE_STRING PrivateData where ValidationCheck(value.Length == 0 && value.MaximumLength == 0, null, DiagnosisLevel.Error,
        "SAMR: The PrivateData in type SAMPR_USER_ALL_INFORMATION must be set to zero when sent and must be set to zero on return.");
    SAMPR_SR_SECURITY_DESCRIPTOR SecurityDescriptor where ValidationCheck(value.Length == 0, null, DiagnosisLevel.Error,
        "SAMR: The SecurityDescriptor in type SAMPR_USER_ALL_INFORMATION must be set to zero when sent and must be set to zero on return.");
    IDLUlong UserId;
    IDLUlong PrimaryGroupId;
    UserAccountCodes UserAccountControl
        where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of UserAccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
    UserAll WhichFields
        where ValidationCheckCombinationValueTooManyItems(InRange<UserAll>(value), null, true, ReferenceType.Type,
            "SAMR", "WhichFields", "SAMPR_USER_ALL_INFORMATION", "USER_ALL Values", "[MS-SAMR]")
        with Encoding{Decoder = PatternDecoder<UserAll>, SourcePattern = TypeOf<IDLUlong>()};
    SAMPR_LOGON_HOURS LogonHours;
    ushort BadPasswordCount;
    ushort LogonCount;
    ushort CountryCode;
    ushort CodePage;
    UCHAR LmPasswordPresent;
    UCHAR NtPasswordPresent;
    UCHAR PasswordExpired;
    UCHAR PrivateDataSensitive;
}

typedef PSAMPR_USER_ALL_INFORMATION = SAMPR_USER_ALL_INFORMATION with IDL{IndirectionLevel = 1};

type RPC_SHORT_BLOB
{
    ushort Length;
    ushort MaximumLength;
    array<ushort> Buffer 
        with IDL{Size_is = [MaximumLength / 2], Length_is = [Length / 2], IndirectionLevel = 1};
}

typedef PRPC_SHORT_BLOB = RPC_SHORT_BLOB with IDL{IndirectionLevel = 1};

type SAMPR_LOGON_HOURS
{
    ushort UnitsPerWeek;
    array<char> LogonHours
        with IDL{Size_is = [1260], Length_is = [(UnitsPerWeek + 7) / 8], IndirectionLevel = 1};
}

typedef PSAMPR_LOGON_HOURS = SAMPR_LOGON_HOURS with IDL{IndirectionLevel = 1};

type SAMPR_USER_INTERNAL4_INFORMATION
{
    SAMPR_USER_ALL_INFORMATION I1;
    SAMPR_ENCRYPTED_USER_PASSWORD UserPassword;
}

typedef PSAMPR_USER_INTERNAL4_INFORMATION = SAMPR_USER_INTERNAL4_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_ENCRYPTED_USER_PASSWORD
{
    array<UCHAR> Buffer with IDL{Dimensions = [(256 * 2) + 4]};
}

typedef PSAMPR_ENCRYPTED_USER_PASSWORD = SAMPR_ENCRYPTED_USER_PASSWORD with IDL{IndirectionLevel = 1};

type SAMPR_USER_INTERNAL5_INFORMATION
{
    SAMPR_ENCRYPTED_USER_PASSWORD UserPassword;
    char PasswordExpired;
}

typedef PSAMPR_USER_INTERNAL5_INFORMATION = SAMPR_USER_INTERNAL5_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_USER_INTERNAL4_INFORMATION_NEW
{
    SAMPR_USER_ALL_INFORMATION I1;
    SAMPR_ENCRYPTED_USER_PASSWORD_NEW UserPassword;
}

typedef PSAMPR_USER_INTERNAL4_INFORMATION_NEW = SAMPR_USER_INTERNAL4_INFORMATION_NEW with IDL{IndirectionLevel = 1};

type SAMPR_ENCRYPTED_USER_PASSWORD_NEW
{
    array<UCHAR> Buffer with IDL{Dimensions = [(256 * 2) + 4 + 16]};
}

typedef PSAMPR_ENCRYPTED_USER_PASSWORD_NEW = SAMPR_ENCRYPTED_USER_PASSWORD_NEW with IDL{IndirectionLevel = 1};

type SAMPR_USER_INTERNAL5_INFORMATION_NEW
{
    SAMPR_ENCRYPTED_USER_PASSWORD_NEW UserPassword;
    char PasswordExpired;
}

typedef PSAMPR_USER_INTERNAL5_INFORMATION_NEW = SAMPR_USER_INTERNAL5_INFORMATION_NEW with IDL{IndirectionLevel = 1};

type SAMPR_GET_GROUPS_BUFFER
{
    IDLUlong MembershipCount;
    array<PGROUP_MEMBERSHIP> Groups with IDL{Size_is = [MembershipCount]};
}

typedef PSAMPR_GET_GROUPS_BUFFER = SAMPR_GET_GROUPS_BUFFER with IDL{IndirectionLevel = 1};

type GROUP_MEMBERSHIP
{
    IDLUlong RelativeId;
    SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
        with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PGROUP_MEMBERSHIP = GROUP_MEMBERSHIP with IDL{IndirectionLevel = 1};

pattern DOMAIN_DISPLAY_INFORMATION = enum 
{
    DomainDisplayUser = 1,
    DomainDisplayMachine,
    DomainDisplayGroup,
    DomainDisplayOemUser,
    DomainDisplayOemGroup
};

typedef PDOMAIN_DISPLAY_INFORMATION = DOMAIN_DISPLAY_INFORMATION with IDL{IndirectionLevel = 1};

type SAMPR_DISPLAY_INFO_BUFFER[DOMAIN_DISPLAY_INFORMATION tag]
{
    optional [|tag in {1}|]
        SAMPR_DOMAIN_DISPLAY_USER_BUFFER UserInformation with IDL{Case = [1]};
    optional [|tag in {2}|]
        SAMPR_DOMAIN_DISPLAY_MACHINE_BUFFER MachineInformation with IDL{Case = [2]};
    optional [|tag in {3}|]
        SAMPR_DOMAIN_DISPLAY_GROUP_BUFFER GroupInformation with IDL{Case = [3]};
    optional [|tag in {4}|]
        SAMPR_DOMAIN_DISPLAY_OEM_USER_BUFFER OemUserInformation with IDL{Case = [4]};
    optional [|tag in {5}|]
        SAMPR_DOMAIN_DISPLAY_OEM_GROUP_BUFFER OemGroupInformation with IDL{Case = [5]};
}
with IDL{
    Switch_Type = TypeOf<DOMAIN_DISPLAY_INFORMATION>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAMPR_DISPLAY_INFO_BUFFER = SAMPR_DISPLAY_INFO_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_USER_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_DOMAIN_DISPLAY_USER> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_DOMAIN_DISPLAY_USER_BUFFER = SAMPR_DOMAIN_DISPLAY_USER_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_USER
{
    IDLUlong Index;
    IDLUlong Rid;
    UserAccountCodes AccountControl where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
            () => "SAMR: Value of AccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
    RPC_UNICODE_STRING AccountName;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING FullName;
}

typedef PSAMPR_DOMAIN_DISPLAY_USER = SAMPR_DOMAIN_DISPLAY_USER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_MACHINE_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_DOMAIN_DISPLAY_MACHINE> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_DOMAIN_DISPLAY_MACHINE_BUFFER = SAMPR_DOMAIN_DISPLAY_MACHINE_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_MACHINE
{
    IDLUlong Index;
    IDLUlong Rid;
    UserAccountCodes AccountControl
        where ValidationCheck(InRange<UserAccountCodes>(value), null, DiagnosisLevel.Error,
                () => "SAMR: Value of AccountControl = " + Utility.DecToHexFormat(value) + " is not USER_ACCOUNT flags.")
        with Encoding{Decoder = PatternDecoder<UserAccountCodes>, SourcePattern = TypeOf<IDLUlong>()};
    RPC_UNICODE_STRING AccountName;
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_DOMAIN_DISPLAY_MACHINE = SAMPR_DOMAIN_DISPLAY_MACHINE with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_GROUP_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_DOMAIN_DISPLAY_GROUP> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_DOMAIN_DISPLAY_GROUP_BUFFER = SAMPR_DOMAIN_DISPLAY_GROUP_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_GROUP
{
    IDLUlong Index;
    IDLUlong Rid;
    SeGroupAttributes Attributes where ValidationCheck(InRange<SeGroupAttributes>(value), null, DiagnosisLevel.Error,
        () => "SAMR: Value of Attributes = " + Utility.DecToHexFormat(value) + " is not SE_GROUP attributes.")
        with Encoding{Decoder = PatternDecoder<SeGroupAttributes>, SourcePattern = TypeOf<IDLUlong>()};
    RPC_UNICODE_STRING AccountName;
    RPC_UNICODE_STRING AdminComment;
}

typedef PSAMPR_DOMAIN_DISPLAY_GROUP = SAMPR_DOMAIN_DISPLAY_GROUP with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_OEM_USER_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_DOMAIN_DISPLAY_OEM_USER> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_DOMAIN_DISPLAY_OEM_USER_BUFFER = SAMPR_DOMAIN_DISPLAY_OEM_USER_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_OEM_USER
{
    IDLUlong Index;
    RPC_STRING OemAccountName;
}

typedef PSAMPR_DOMAIN_DISPLAY_OEM_USER = SAMPR_DOMAIN_DISPLAY_OEM_USER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_OEM_GROUP_BUFFER
{
    IDLUlong EntriesRead;
    array<PSAMPR_DOMAIN_DISPLAY_OEM_GROUP> Buffer with IDL{Size_is = [EntriesRead]};
}

typedef PSAMPR_DOMAIN_DISPLAY_OEM_GROUP_BUFFER = SAMPR_DOMAIN_DISPLAY_OEM_GROUP_BUFFER with IDL{IndirectionLevel = 1};

type SAMPR_DOMAIN_DISPLAY_OEM_GROUP
{
    IDLUlong Index;
    RPC_STRING OemAccountName;
}

typedef PSAMPR_DOMAIN_DISPLAY_OEM_GROUP = SAMPR_DOMAIN_DISPLAY_OEM_GROUP with IDL{IndirectionLevel = 1};

type USER_DOMAIN_PASSWORD_INFORMATION
{
    ushort MinPasswordLength;
    PasswordProperties PasswordProperties 
        where ValidationCheck(InRange<PasswordProperties>(value), null, DiagnosisLevel.Error,
        () => "SAMR: " + Utility.DecToHexFormat(value) + " is not a valid value for the PasswordProperties in type USER_DOMAIN_PASSWORD_INFORMATION.")
        with Encoding{Decoder = PatternDecoder<PasswordProperties>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PUSER_DOMAIN_PASSWORD_INFORMATION = USER_DOMAIN_PASSWORD_INFORMATION with IDL{IndirectionLevel = 1};

type RPC_STRING
{
    ushort Length;
    ushort MaximumLength;
    array<char> Buffer
        with IDL{Size_is = [MaximumLength], Length_is = [Length], IndirectionLevel = 1};
}

typedef PRPC_STRING = RPC_STRING with IDL{IndirectionLevel = 1};

type SAMPR_REVISION_INFO[IDLUlong tag]
{
    optional [|tag in {1}|] SAMPR_REVISION_INFO_V1 V1 with IDL{Case = [1]};
}
with IDL{
    UnionKind = UnionKind.NonEncapsulated,
    EmptyDefault = true,
    Switch_Type = TypeOf<IDLUlong>()
};

typedef PSAMPR_REVISION_INFO = SAMPR_REVISION_INFO with IDL{IndirectionLevel = 1};

type SAMPR_REVISION_INFO_V1
{
    IDLUlong Revision where ValidationCheck(value == 3, null, DiagnosisLevel.Error,
        "SAMR: Revision must be set to 3 and must be ignored.");
    SAMPR_REVISION_INFO_V1_SupportedFeatures SupportedFeatures 
        where ValidationCheck(InRange<SAMPR_REVISION_INFO_V1_SupportedFeatures>(value), null, DiagnosisLevel.Error,
        () => "SAMR: " + Utility.DecToHexFormat(value) + " is not a valid value for the SupportedFeatures in type SAMPR_REVISION_INFO_V1.")
        with Encoding{Decoder = PatternDecoder<SAMPR_REVISION_INFO_V1_SupportedFeatures>, SourcePattern = TypeOf<IDLUlong>()};
}

typedef PSAMPR_REVISION_INFO_V1 = SAMPR_REVISION_INFO_V1 with IDL{IndirectionLevel = 1};

pattern PASSWORD_POLICY_VALIDATION_TYPE = enum 
{
    SamValidateAuthentication = 1,
    SamValidatePasswordChange,
    SamValidatePasswordReset
};

type SAM_VALIDATE_INPUT_ARG[PASSWORD_POLICY_VALIDATION_TYPE tag]
{
    optional [|tag in {1}|] SAM_VALIDATE_AUTHENTICATION_INPUT_ARG
        ValidateAuthenticationInput with IDL{Case = [1]};
    optional [|tag in {2}|] SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
        ValidatePasswordChangeInput with IDL{Case = [2]};
    optional [|tag in {3}|] SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG
        ValidatePasswordResetInput with IDL{Case = [3]};
}
with IDL{
    Switch_Type = TypeOf<PASSWORD_POLICY_VALIDATION_TYPE>(),
    EmptyDefault = true,
    UnionKind = UnionKind.NonEncapsulated
};

typedef PSAM_VALIDATE_INPUT_ARG = SAM_VALIDATE_INPUT_ARG with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_AUTHENTICATION_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    char PasswordMatched;
}

typedef PSAM_VALIDATE_AUTHENTICATION_INPUT_ARG = SAM_VALIDATE_AUTHENTICATION_INPUT_ARG with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_PERSISTED_FIELDS
{
    SAM_VALIDATE_PERSISTED_FIELDS_PresentFields PresentFields 
        where ValidationCheck(InRange<SAM_VALIDATE_PERSISTED_FIELDS_PresentFields>(value), null, DiagnosisLevel.Error,
        () => "SAMR: " + Utility.DecToHexFormat(value) + " is not a valid value for the PresentFields in type SAM_VALIDATE_PERSISTED_FIELDS.")
        with Encoding{Decoder = PatternDecoder<SAM_VALIDATE_PERSISTED_FIELDS_PresentFields>, SourcePattern = TypeOf<IDLUlong>()};
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER BadPasswordTime;
    LARGE_INTEGER LockoutTime;
    IDLUlong BadPasswordCount;
    IDLUlong PasswordHistoryLength;
    array<PSAM_VALIDATE_PASSWORD_HASH> PasswordHistory
        with IDL{Size_is = [PasswordHistoryLength], PointerType = PointerKind.UniquePtr};
}

typedef PSAM_VALIDATE_PERSISTED_FIELDS = SAM_VALIDATE_PERSISTED_FIELDS with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_PASSWORD_HASH
{
    IDLUlong Length;
    array<char> Hash
        with IDL{Size_is = [Length], PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
}

typedef PSAM_VALIDATE_PASSWORD_HASH = SAM_VALIDATE_PASSWORD_HASH with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    RPC_UNICODE_STRING ClearPassword;
    RPC_UNICODE_STRING UserAccountName;
    SAM_VALIDATE_PASSWORD_HASH HashedPassword;
    char PasswordMatch;
}

typedef PSAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG = SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    RPC_UNICODE_STRING ClearPassword;
    RPC_UNICODE_STRING UserAccountName;
    SAM_VALIDATE_PASSWORD_HASH HashedPassword;
    char PasswordMustChangeAtNextLogon;
    char ClearLockout;
}

typedef PSAM_VALIDATE_PASSWORD_RESET_INPUT_ARG = SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_OUTPUT_ARG[PASSWORD_POLICY_VALIDATION_TYPE tag]
{
    optional [|tag in {1}|] SAM_VALIDATE_STANDARD_OUTPUT_ARG
        ValidateAuthenticationOutput with IDL{Case = [1]};
    optional [|tag in {2}|] SAM_VALIDATE_STANDARD_OUTPUT_ARG
        ValidatePasswordChangeOutput with IDL{Case = [2]};
    optional [|tag in {3}|] SAM_VALIDATE_STANDARD_OUTPUT_ARG
        ValidatePasswordResetOutput with IDL{Case = [3]};
}
with IDL{Switch_Type = TypeOf<PASSWORD_POLICY_VALIDATION_TYPE>(),
         UnionKind = UnionKind.NonEncapsulated};

typedef PSAM_VALIDATE_OUTPUT_ARG = SAM_VALIDATE_OUTPUT_ARG with IDL{IndirectionLevel = 1};

type SAM_VALIDATE_STANDARD_OUTPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS ChangedPersistedFields;
    SAM_VALIDATE_VALIDATION_STATUS ValidationStatus;
}

typedef PSAM_VALIDATE_STANDARD_OUTPUT_ARG = SAM_VALIDATE_STANDARD_OUTPUT_ARG with IDL{IndirectionLevel = 1};

pattern SAM_VALIDATE_VALIDATION_STATUS = enum 
{
    SamValidateSuccess = 0,
    SamValidatePasswordMustChange,
    SamValidateAccountLockedOut,
    SamValidatePasswordExpired,
    SamValidatePasswordIncorrect,
    SamValidatePasswordIsInHistory,
    SamValidatePasswordTooShort,
    SamValidatePasswordTooLong,
    SamValidatePasswordNotComplexEnough,
    SamValidatePasswordTooRecent,
    SamValidatePasswordFilterError
};

typedef PSAM_VALIDATE_VALIDATION_STATUS = SAM_VALIDATE_VALIDATION_STATUS with IDL{IndirectionLevel = 1};

// Following types are used for validation check.

pattern SeGroupAttributes = enum IDLUlong
{
    SE_GROUP_MANDATORY = 0x00000001,
    SE_GROUP_ENABLE_BY_DEFAULT = 0x00000002,
    SE_GROUP_ENABLED = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern UserAccountCodes = flags IDLUlong
{
    USER_ACCOUNT_DISABLED = 0X00000001,
    USER_HOME_DIRECTORY_REQUIRED = 0X00000002,
    USER_PASSWORD_NOT_REQUIRED = 0X00000004,
    USER_TEMP_DUPLICATE_ACCOUNT = 0X00000008,
    USER_NORMAL_ACCOUNT = 0X00000010,
    USER_MNS_LOGON_ACCOUNT = 0X00000020,
    USER_INTERDOMAIN_TRUST_ACCOUNT = 0X00000040,
    USER_WORKSTATION_TRUST_ACCOUNT = 0X00000080,
    USER_SERVER_TRUST_ACCOUNT = 0X00000100,
    USER_DONT_EXPIRE_PASSWORD = 0X00000200,
    USER_ACCOUNT_AUTO_LOCKED = 0X00000400,
    USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 0X00000800,
    USER_SMARTCARD_REQUIRED = 0X00001000,
    USER_TRUSTED_FOR_DELEGATION = 0X00002000,
    USER_NOT_DELEGATED = 0X00004000,
    USER_USE_DES_KEY_ONLY = 0X00008000,
    USER_DONT_REQUIRE_PREAUTH = 0X00010000,
    USER_PASSWORD_EXPIRED = 0X00020000,
    USER_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 0X00040000,
    USER_NO_AUTH_DATA_REQUIRED = 0X00080000,
    USER_PARTIAL_SECRET_ACCOUNT = 0X00100000,
    USER_USER_AES_KEYS = 0X00200000,
    ...
} with IDL{DoNotGenerate = true};

pattern SAMPR_REVISION_INFO_V1_SupportedFeatures = flags IDLUlong
{
    $"Indicates that RID values returned from the server MUST NOT be concatenated with the domain SID" = 0x00000001,
    Reserved1 = 0x00000002,
    Reserved2 = 0x00000004,
    ...
} with IDL{DoNotGenerate = true};

pattern PasswordProperties = enum IDLUlong
{
    DOMAIN_PASSWORD_COMPLEX = 0x00000001,
    DOMAIN_PASSWORD_NO_ANON_CHANGE = 0x00000002,
    DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 0x00000004,
    DOMAIN_LOCKOUT_ADMINS = 0x00000008,
    DOMAIN_PASSWORD_STORE_CLEARTEXT = 0x00000010,
    DOMAIN_REFUSE_PASSWORD_CHANGE = 0X00000020,
    ...
} with IDL{DoNotGenerate = true};

pattern SAM_VALIDATE_PERSISTED_FIELDS_PresentFields = enum IDLUlong
{
    SAM_VALIDATE_PASSWORD_LAST_SET = 0x00000001,
    SAM_VALIDATE_BAD_PASSWORD_TIME = 0x00000002,
    SAM_VALIDATE_LOCKOUT_TIME = 0x00000004,
    SAM_VALIDATE_BAD_PASSWORD_COUNT = 0x00000008,
    SAM_VALIDATE_PASSWORD_HISTORY_LENGTH = 0x00000010,
    SAM_VALIDATE_PASSWORD_HISTORY = 0x00000020
    ...
} with IDL{DoNotGenerate = true};

pattern SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerState = enum IDLUlong
{
    DomainServerEnabled = 1,
    DomainServerDisabled = 2,
    ...
} with IDL{DoNotGenerate = true};

pattern SAMPR_DOMAIN_GENERAL_INFORMATION_DomainServerRole = enum IDLUlong
{
    DomainServerRoleBackup = 2,
    DomainServerRolePrimary = 3,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.3   Server ACCESS_MASK Values
pattern Server_ACCESS_MASK = flags ACCESS_MASK
{
    GenericRead                         = 0x80000000,
    GenericWrite                        = 0x40000000,
    GenericExecute                      = 0x20000000,
    GenericAll                          = 0x10000000,
    Reserved1                           = 0x0C000000,
    MaximumAllowed                      = 0x02000000,
    AccessSystemSecurity                = 0x01000000,
    Reserved2                           = 0x00E00000,
    Synchronize                         = 0x00100000,
    WriteOwner                          = 0x00080000,
    WriteDacl                           = 0x00040000,
    ReadControl                         = 0x00020000,
    Delete                              = 0x00010000,
    SAM_SERVER_CONNECT                  = 0x00000001,
    SAM_SERVER_SHUTDOWN                 = 0x00000002,
    SAM_SERVER_INITIALIZE               = 0x00000004,
    SAM_SERVER_CREATE_DOMAIN            = 0x00000008,
    SAM_SERVER_ENUMERATE_DOMAINS        = 0x00000010,
    SAM_SERVER_LOOKUP_DOMAIN            = 0x00000020,
    SAM_SERVER_ALL_ACCESS               = 0x000F003F,
    SAM_SERVER_READ                     = 0x00020010,
    SAM_SERVER_WRITE                    = 0x0002000E,
    SAM_SERVER_EXECUTE                  = 0x00020021,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.4   Domain ACCESS_MASK Values
pattern Domain_ACCESS_MASK = flags ACCESS_MASK
{
    GenericRead                         = 0x80000000,
    GenericWrite                        = 0x40000000,
    GenericExecute                      = 0x20000000,
    GenericAll                          = 0x10000000,
    Reserved1                           = 0x0C000000,
    MaximumAllowed                      = 0x02000000,
    AccessSystemSecurity                = 0x01000000,
    Reserved2                           = 0x00E00000,
    Synchronize                         = 0x00100000,
    WriteOwner                          = 0x00080000,
    WriteDacl                           = 0x00040000,
    ReadControl                         = 0x00020000,
    Delete                              = 0x00010000,
    DOMAIN_READ_PASSWORD_PARAMETERS     = 0x00000001,
    DOMAIN_WRITE_PASSWORD_PARAMS        = 0x00000002,
    DOMAIN_READ_OTHER_PARAMETERS        = 0x00000004,
    DOMAIN_WRITE_OTHER_PARAMETERS       = 0x00000008,
    DOMAIN_CREATE_USER                  = 0x00000010,
    DOMAIN_CREATE_GROUP                 = 0x00000020,
    DOMAIN_CREATE_ALIAS                 = 0x00000040,
    DOMAIN_GET_ALIAS_MEMBERSHIP         = 0x00000080,
    DOMAIN_LIST_ACCOUNTS                = 0x00000100,
    DOMAIN_LOOKUP                       = 0x00000200,
    DOMAIN_ADMINISTER_SERVER            = 0x00000400,
    DOMAIN_ALL_ACCESS                   = 0x000F07FF,
    DOMAIN_READ                         = 0x00020084,
    DOMAIN_WRITE                        = 0x0002047A,
    DOMAIN_EXECUTE                      = 0x00020301,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.5   Group ACCESS_MASK Values
pattern Group_ACCESS_MASK = flags ACCESS_MASK
{
    GenericRead                         = 0x80000000,
    GenericWrite                        = 0x40000000,
    GenericExecute                      = 0x20000000,
    GenericAll                          = 0x10000000,
    Reserved1                           = 0x0C000000,
    MaximumAllowed                      = 0x02000000,
    AccessSystemSecurity                = 0x01000000,
    Reserved2                           = 0x00E00000,
    Synchronize                         = 0x00100000,
    WriteOwner                          = 0x00080000,
    WriteDacl                           = 0x00040000,
    ReadControl                         = 0x00020000,
    Delete                              = 0x00010000,
    GROUP_READ_INFORMATION              = 0x00000001,
    GROUP_WRITE_ACCOUNT                 = 0x00000002,
    GROUP_ADD_MEMBER                    = 0x00000004,
    GROUP_REMOVE_MEMBER                 = 0x00000008,
    GROUP_LIST_MEMBERS                  = 0x00000010,
    GROUP_ALL_ACCESS                    = 0x000F001F,
    GROUP_READ                          = 0x00020010,
    GROUP_WRITE                         = 0x0002000E,
    GROUP_EXECUTE                       = 0x00020001,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.6   Alias ACCESS_MASK Values
pattern Alias_ACCESS_MASK = flags ACCESS_MASK
{
    GenericRead                         = 0x80000000,
    GenericWrite                        = 0x40000000,
    GenericExecute                      = 0x20000000,
    GenericAll                          = 0x10000000,
    Reserved1                           = 0x0C000000,
    MaximumAllowed                      = 0x02000000,
    AccessSystemSecurity                = 0x01000000,
    Reserved2                           = 0x00E00000,
    Synchronize                         = 0x00100000,
    WriteOwner                          = 0x00080000,
    WriteDacl                           = 0x00040000,
    ReadControl                         = 0x00020000,
    Delete                              = 0x00010000,
    ALIAS_ADD_MEMBER                    = 0x00000001,
    ALIAS_REMOVE_MEMBER                 = 0x00000002,
    ALIAS_LIST_MEMBERS                  = 0x00000004,
    ALIAS_READ_INFORMATION              = 0x00000008,
    ALIAS_WRITE_ACCOUNT                 = 0x00000010,
    ALIAS_ALL_ACCESS                    = 0x000F001F,
    ALIAS_READ                          = 0x00020004,
    ALIAS_WRITE                         = 0x00020013,
    ALIAS_EXECUTE                       = 0x00020008,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.7   User ACCESS_MASK Values
pattern User_ACCESS_MASK = flags ACCESS_MASK
{
    GenericRead                         = 0x80000000,
    GenericWrite                        = 0x40000000,
    GenericExecute                      = 0x20000000,
    GenericAll                          = 0x10000000,
    Reserved1                           = 0x0C000000,
    MaximumAllowed                      = 0x02000000,
    AccessSystemSecurity                = 0x01000000,
    Reserved2                           = 0x00E00000,
    Synchronize                         = 0x00100000,
    WriteOwner                          = 0x00080000,
    WriteDacl                           = 0x00040000,
    ReadControl                         = 0x00020000,
    Delete                              = 0x00010000,
    USER_READ_GENERAL                   = 0x00000001,
    USER_READ_PREFERENCES               = 0x00000002,
    USER_WRITE_PREFERENCES              = 0x00000004,
    USER_READ_LOGON                     = 0x00000008,
    USER_READ_ACCOUNT                   = 0x00000010,
    USER_WRITE_ACCOUNT                  = 0x00000020,
    USER_CHANGE_PASSWORD                = 0x00000040,
    USER_FORCE_PASSWORD_CHANGE          = 0x00000080,
    USER_LIST_GROUPS                    = 0x00000100,
    USER_READ_GROUP_INFORMATION         = 0x00000200,
    USER_WRITE_GROUP_INFORMATION        = 0x00000400,
    USER_ALL_ACCESS                     = 0x000F07FF,
    USER_READ                           = 0x0002031A,
    USER_WRITE                          = 0x00020044,
    USER_EXECUTE                        = 0x00020041,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.1.8   USER_ALL Values
pattern UserAll = flags IDLUlong
{
    USER_ALL_USERNAME = 0x00000001,
    USER_ALL_FULLNAME = 0x00000002,
    USER_ALL_USERID = 0x00000004,
    USER_ALL_PRIMARYGROUPID = 0x00000008,
    USER_ALL_ADMINCOMMENT = 0x00000010,
    USER_ALL_USERCOMMENT = 0x00000020,
    USER_ALL_HOMEDIRECTORY = 0x00000040,
    USER_ALL_HOMEDIRECTORYDRIVE = 0x00000080,
    USER_ALL_SCRIPTPATH = 0x00000100,
    USER_ALL_PROFILEPATH = 0x00000200,
    USER_ALL_WORKSTATIONS = 0x00000400,
    USER_ALL_LASTLOGON = 0x00000800,
    USER_ALL_LASTLOGOFF = 0x00001000,
    USER_ALL_LOGONHOURS = 0x00002000,
    USER_ALL_BADPASSWORDCOUNT = 0x00004000,
    USER_ALL_LOGONCOUNT = 0x00008000,
    USER_ALL_PASSWORDCANCHANGE = 0x00010000,
    USER_ALL_PASSWORDMUSTCHANGE = 0x00020000,
    USER_ALL_PASSWORDLASTSET = 0x00040000,
    USER_ALL_ACCOUNTEXPIRES = 0x00080000,
    USER_ALL_USERACCOUNTCONTROL = 0x00100000,
    USER_ALL_PARAMETERS = 0x00200000,
    USER_ALL_COUNTRYCODE = 0x00400000,
    USER_ALL_CODEPAGE = 0x00800000,
    USER_ALL_NTPASSWORDPRESENT = 0x01000000,
    USER_ALL_LMPASSWORDPRESENT = 0x02000000,
    USER_ALL_PRIVATEDATA = 0x04000000,
    USER_ALL_PASSWORDEXPIRED = 0x08000000,
    USER_ALL_SECURITYDESCRIPTOR = 0x10000000,
    USER_ALL_UNDEFINED_MASK = 0xC0000000,
    ...
} with IDL{DoNotGenerate = true};

protocol MSESP with
Documentation
{
    ProtocolName = "Excel Web Services Protocol",
    ShortName = "MS-ESP",
    DocumentName = "MS-ESP",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-ESP", Version = "3.1"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSESP";

const map<string, string> SoapActionsMap =
{
    "http://schemas.microsoft.com/office/excel/server/webservices/Calculate" -> "Calculate",
    "http://schemas.microsoft.com/office/excel/server/webservices/CalculateA1" -> "CalculateA1",
    "http://schemas.microsoft.com/office/excel/server/webservices/CalculateWorkbook" -> "CalculateWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/CancelRequest" -> "CancelRequest",
    "http://schemas.microsoft.com/office/excel/server/webservices/CloseWorkbook" -> "CloseWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/EnsureWorkbookModel" -> "EnsureWorkbookModel",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetApiVersion" -> "GetApiVersion",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetCell" -> "GetCell",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetCellA1" -> "GetCellA1",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetChartImageUrl" -> "GetChartImageUrl",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetPublishedItemNames" -> "GetPublishedItemNames",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetRange" -> "GetRange",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetRangeA1" -> "GetRangeA1",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetSessionInformation" -> "GetSessionInformation",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetSheetNames" -> "GetSheetNames",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetWorkbook" -> "GetWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/GetWorkbookConnections" -> "GetWorkbookConnections",
    "http://schemas.microsoft.com/office/excel/server/webservices/NewWorkbook" -> "NewWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbook" -> "OpenWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbookEx" -> "OpenWorkbookEx",
    "http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbookForEditing" -> "OpenWorkbookForEditing",
    "http://schemas.microsoft.com/office/excel/server/webservices/Refresh" -> "Refresh",
    "http://schemas.microsoft.com/office/excel/server/webservices/RefreshEx" -> "RefreshEx",
    "http://schemas.microsoft.com/office/excel/server/webservices/SaveWorkbook" -> "SaveWorkbook",
    "http://schemas.microsoft.com/office/excel/server/webservices/SaveWorkbookCopy" -> "SaveWorkbookCopy",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetCalculationOptions" -> "SetCalculationOptions",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetCell" -> "SetCell",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetCellA1" -> "SetCellA1",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetParameters" -> "SetParameters",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetRange" -> "SetRange",
    "http://schemas.microsoft.com/office/excel/server/webservices/SetRangeA1" -> "SetRangeA1"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        this.SoapAction = soapMsg.SoapAction as string;
        this.ContainsFault = soapMsg.ContainsFault;
        
        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        return SoapActionsMap[this.SoapAction];
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}

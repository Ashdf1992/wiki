module OAUT with
Documentation
{
    ProtocolName = "OLE Automation Protocol",
    ShortName = "OAUT",
    DocumentName = "MS-OAUT",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-OAUT", Version = "15.0", Date = "01/24/2014", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="368428", Date="09/26/2014"}
        ]
};

using Standard;
using Technologies.IDL;
using DTYP;
using DCOM;
using Utility;

type _FLAGGED_WORD_BLOB
{
    IDLUlong cBytes;
    IDLUlong clSize;

    optional string asData with IDL{Size_is = [clSize], Dimensions = [null]},
        Encoding
        {
            Decoder = BinaryDecoder<string>,
            SourceConverter = ConvertArrayWCHAR2Binary,
            SourcePattern = TypeOf<array<WCHAR>>()
        },
        BinaryEncoding{Endian = Endian.Little, TextEncoding = TextEncoding.Unicode};
    
    override string ToString()
    {
        if(asData == nothing)
        {
            return "";
        }
        return asData as string;
    }
    
    optional binary ConvertArrayWCHAR2Binary(array<WCHAR> arrayWCHAR)
    {
        array<byte> result = [];
        foreach (WCHAR c in arrayWCHAR)
        {
            result += [c as byte, (c >> 8) as byte];
        }
        return result as binary;
    }
}
typedef FLAGGED_WORD_BLOB = _FLAGGED_WORD_BLOB;
typedef BSTR = FLAGGED_WORD_BLOB with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};

typedef IID = GUID;
type CURRENCY
{
    long int64;
}
typedef DATE = double;
typedef VARIANT_BOOL = short;
type DECIMAL
{
    WORD wReserved;
    BYTE scale where ValidationCheckValueInRange(value >= 0 && value <= 28, null, true, ReferenceType.Type, "OAUT", "scale", "DECIMAL", "0", "28", value);
    DECIMAL_sign sign
        where ValidationCheckEnumValue(InRange<DECIMAL_sign>(sign), null, true, ReferenceType.Type, "OAUT", "sign", "DECIMAL", "0x00, 0x80", value)
        with Encoding{Decoder = PatternDecoder<DECIMAL_sign>, SourcePattern = TypeOf<BYTE>()};
    ULONG Hi32;
    ULONGLONG Lo64;
}

pattern DECIMAL_sign = enum BYTE
{
    Positive = 0,
    Negative = 0x80,
    ...
};

type _wireBRECORD
{
    ULONG fFlags;
    ULONG clSize;
    MInterfacePointer pRecInfo with IDL{IndirectionLevel = 1};
    array<byte> pRecord with IDL{Size_is = [clSize]};
}

pattern wireBRECORDStr = _wireBRECORD;

typedef BRECORD = _wireBRECORD with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};

pattern VARENUM = enum
{
    VT_EMPTY = 0x0000,
    VT_NULL = 0x0001,
    VT_I2 = 0x0002,
    VT_I4 = 0x0003,
    VT_R4 = 0x0004,
    VT_R8 = 0x0005,
    VT_CY = 0x0006,
    VT_DATE = 0x0007,
    VT_BSTR = 0x0008,
    VT_DISPATCH = 0x0009,
    VT_ERROR = 0x000A,
    VT_BOOL = 0x000B,
    VT_VARIANT = 0x000C,
    VT_UNKNOWN = 0x000D,
    VT_DECIMAL = 0x000E,
    VT_I1 = 0x0010,
    VT_UI1 = 0x0011,
    VT_UI2 = 0x0012,
    VT_UI4 = 0x0013,
    VT_I8 = 0x0014,
    VT_UI8 = 0x0015,
    VT_INT = 0x0016,
    VT_UINT = 0x0017,
    VT_VOID = 0x0018,
    VT_HRESULT = 0x0019,
    VT_PTR = 0x001A,
    VT_SAFEARRAY = 0x001B,
    VT_CARRAY = 0x001C,
    VT_USERDEFINED = 0x001D,
    VT_LPSTR = 0x001E,
    VT_LPWSTR = 0x001F,
    VT_RECORD = 0x0024,
    VT_INT_PTR = 0x0025,
    VT_UINT_PTR = 0x0026,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    ...
};

string VARENUMToText(any input)
{
    string str = "";

    if (input is val:USHORT)
    {
        int lByte = (val & 0x00FF);
        bool isArray = (val & VARENUM.VT_ARRAY) > 0;
        bool isBYREF = (val & VARENUM.VT_BYREF) > 0;

        str = EnumToString<VARENUM>(lByte) + (isArray ? " | VT_ARRAY" : "") + (isBYREF ? "| VT_BYREF" : "");
    }

    return str;
}

type wireVARIANT_Union[ULONG vt]
{
    optional [|vt == VARENUM.VT_I8|] LONGLONG llVal with IDL{Case = [VARENUM.VT_I8]};
    optional [|vt == VARENUM.VT_I4|] LONG lVal with IDL{Case = [VARENUM.VT_I4]};
    optional [|vt == VARENUM.VT_UI1|] BYTE bVal with IDL{Case = [VARENUM.VT_UI1]};
    optional [|vt == VARENUM.VT_I2|] SHORT iVal with IDL{Case = [VARENUM.VT_I2]};
    optional [|vt == VARENUM.VT_R4|] FLOAT fltVal with IDL{Case = [VARENUM.VT_R4]};
    optional [|vt == VARENUM.VT_R8|] DOUBLE dbVal with IDL{Case = [VARENUM.VT_R8]};
    optional [|vt == VARENUM.VT_BOOL|] VARIANT_BOOL boolVal with IDL{Case = [VARENUM.VT_BOOL]};
    optional [|vt == VARENUM.VT_ERROR|] HRESULT scode with IDL{Case = [VARENUM.VT_ERROR]};
    optional [|vt == VARENUM.VT_CY|] CURRENCY cyVal with IDL{Case = [VARENUM.VT_CY]};
    optional [|vt == VARENUM.VT_DATE|] DATE date with IDL{Case = [VARENUM.VT_DATE]};
    optional [|vt == VARENUM.VT_BSTR|] BSTR bstrVal with IDL{Case = [VARENUM.VT_BSTR]};
    optional [|vt == VARENUM.VT_UNKNOWN|] MInterfacePointer punkVal with IDL{Case = [VARENUM.VT_UNKNOWN], IndirectionLevel = 1};
    optional [|vt == VARENUM.VT_DISPATCH|] MInterfacePointer pdispVal with IDL{Case = [VARENUM.VT_DISPATCH], IndirectionLevel = 1};
    optional [|vt == VARENUM.VT_ARRAY|] PSAFEARRAY parray with IDL{Case = [VARENUM.VT_ARRAY]};
    optional [|vt == VARENUM.VT_RECORD || vt == (VARENUM.VT_RECORD | VARENUM.VT_BYREF)|] BRECORD brecVal with IDL{Case = [VARENUM.VT_RECORD, (VARENUM.VT_RECORD | VARENUM.VT_BYREF)]};
    optional [|vt == (VARENUM.VT_UI1 | VARENUM.VT_BYREF)|] BYTE pbVal with IDL{Case = [(VARENUM.VT_UI1 | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_I2 | VARENUM.VT_BYREF)|] SHORT piVal with IDL{Case = [VARENUM.VT_I2 | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_I4 | VARENUM.VT_BYREF)|] LONG plVal with IDL{Case = [VARENUM.VT_I4 | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_I8 | VARENUM.VT_BYREF)|] LONGLONG pllVal with IDL{Case = [VARENUM.VT_I8 | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_R4 | VARENUM.VT_BYREF)|] FLOAT pfltVal with IDL{Case = [VARENUM.VT_R4 | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_R8 | VARENUM.VT_BYREF)|] DOUBLE pdblVal with IDL{Case = [VARENUM.VT_R8 | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_BOOL | VARENUM.VT_BYREF)|] VARIANT_BOOL pboolVal with IDL{Case = [VARENUM.VT_BOOL | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_ERROR | VARENUM.VT_BYREF)|] HRESULT pscode with IDL{Case = [VARENUM.VT_ERROR | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_CY | VARENUM.VT_BYREF)|] CURRENCY pcyVal with IDL{Case = [VARENUM.VT_CY | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_DATE | VARENUM.VT_BYREF)|] DATE pdate with IDL{Case = [VARENUM.VT_DATE | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_BSTR | VARENUM.VT_BYREF)|] BSTR pbstrVal with IDL{Case = [VARENUM.VT_BSTR | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_UNKNOWN | VARENUM.VT_BYREF)|] MInterfacePointer ppunkVal with IDL{Case = [VARENUM.VT_UNKNOWN | VARENUM.VT_BYREF], IndirectionLevel = 2};
    optional [|vt == (VARENUM.VT_DISPATCH | VARENUM.VT_BYREF)|] MInterfacePointer ppdispVal with IDL{Case = [VARENUM.VT_DISPATCH | VARENUM.VT_BYREF], IndirectionLevel = 2};
    optional [|vt == (VARENUM.VT_ARRAY | VARENUM.VT_BYREF)|] PSAFEARRAY pparray with IDL{Case = [VARENUM.VT_ARRAY | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_VARIANT | VARENUM.VT_BYREF)|] VARIANT pvarVal with IDL{Case = [VARENUM.VT_VARIANT | VARENUM.VT_BYREF], IndirectionLevel = 1};
    optional [|vt == VARENUM.VT_I1|] CHAR cVal with IDL{Case = [VARENUM.VT_I1]};
    optional [|vt == VARENUM.VT_UI2|] USHORT uiVal with IDL{Case = [VARENUM.VT_UI2]};
    optional [|vt == VARENUM.VT_UI4|] ULONG ulVal with IDL{Case = [VARENUM.VT_UI4]};
    optional [|vt == VARENUM.VT_UI8|] ULONGLONG ullVal with IDL{Case = [VARENUM.VT_UI8]};
    optional [|vt == VARENUM.VT_INT|] INT intVal with IDL{Case = [VARENUM.VT_INT]};
    optional [|vt == VARENUM.VT_UINT|] UINT uintVal with IDL{Case = [VARENUM.VT_UINT]};
    optional [|vt == VARENUM.VT_DECIMAL|] DECIMAL decVal with IDL{Case = [VARENUM.VT_DECIMAL]};
    optional [|vt == (VARENUM.VT_I1 | VARENUM.VT_BYREF)|] CHAR pcVal with IDL{Case = [(VARENUM.VT_I1 | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_UI2 | VARENUM.VT_BYREF)|] USHORT puiVal with IDL{Case = [(VARENUM.VT_UI2 | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_UI4 | VARENUM.VT_BYREF)|] ULONG pulVal with IDL{Case = [(VARENUM.VT_UI4 | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_UI8 | VARENUM.VT_BYREF)|] ULONGLONG pullVal with IDL{Case = [(VARENUM.VT_UI8 | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_INT | VARENUM.VT_BYREF)|] INT pintVal with IDL{Case = [(VARENUM.VT_INT | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_UINT | VARENUM.VT_BYREF)|] UINT puintVal with IDL{Case = [(VARENUM.VT_UINT | VARENUM.VT_BYREF)], IndirectionLevel = 1};
    optional [|vt == (VARENUM.VT_DECIMAL | VARENUM.VT_BYREF)|] DECIMAL pdecVal with IDL{Case = [(VARENUM.VT_DECIMAL | VARENUM.VT_BYREF)], IndirectionLevel = 1};
} with IDL {UnionKind = UnionKind.NonEncapsulated};

type wireVARIANTStr
{
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt with DisplayInfo{ToText = VARENUMToText};
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    wireVARIANT_Union[vt as ULONG] _varUnion with IDL{Switch_Is = vt};
}

typedef VARIANT = wireVARIANTStr with IDL{IndirectionLevel = 1, Pointer_default = PointerKind.UniquePtr};

pattern SF_TYPE = enum
{
    SF_ERROR    = VARENUM.VT_ERROR,
    SF_I1       = VARENUM.VT_I1,
    SF_I2       = VARENUM.VT_I2,
    SF_I4       = VARENUM.VT_I4,
    SF_I8       = VARENUM.VT_I8,
    SF_BSTR     = VARENUM.VT_BSTR,
    SF_UNKNOWN  = VARENUM.VT_UNKNOWN,
    SF_DISPATCH = VARENUM.VT_DISPATCH,
    SF_VARIANT  = VARENUM.VT_VARIANT,
    SF_RECORD   = VARENUM.VT_RECORD,
    SF_HAVEIID  = (VARENUM.VT_UNKNOWN | 0x8000),
    ...
} with IDL{V1_enum = true};

pattern ADVFEATUREFLAGS = flags USHORT
{
    FADF_AUTO = 0x0001,
    FADF_STATIC = 0x0002,
    FADF_EMBEDDED = 0x0004,
    FADF_FIXEDSIZE = 0x0010,
    FADF_RECORD = 0x0020,
    FADF_HAVEIID = 0x0040,
    FADF_HAVEVARTYPE = 0x0080,
    FADF_BSTR = 0x0100,
    FADF_UNKNOWN = 0x0200,
    FADF_DISPATCH = 0x0400,
    FADF_VARIANT = 0x0800,
    ...
};

type SAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
}

typedef LPSAFEARRAYBOUND = SAFEARRAYBOUND with IDL{IndirectionLevel = 1};

type SAFEARR_BSTR
{
    ULONG Size;
    array<BSTR> aBstr with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1, Size_is = [Size]};
}

type SAFEARR_UNKNOWN
{
    ULONG Size;
    array<MInterfacePointer> apUnknown with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 2, Size_is = [Size]};
}

type SAFEARR_DISPATCH
{
    ULONG Size;
    array<MInterfacePointer> apDispatch with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 2, Size_is = [Size]};
}

type SAFEARR_VARIANT
{
    ULONG Size;
    array<VARIANT> aVariant with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1, Size_is = [Size]};
}

type SAFEARR_BRECORD
{
    ULONG Size;
    array<BRECORD> aRecord with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1, Size_is = [Size]};
}

type SAFEARR_HAVEIID
{
    ULONG Size;
    array<MInterfacePointer> apUnknown with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 2, Size_is = [Size]};
    IID iid;
}

type BYTE_SIZEDARR
{
    IDLUlong clSize;
    array<byte> pData with IDL{IndirectionLevel = 1, Size_is = [clSize]};
}

type WORD_SIZEDARR
{
    IDLUlong clSize;
    array<ushort> pData with IDL{IndirectionLevel = 1, Size_is = [clSize]};
}

type DWORD_SIZEDARR
{
    IDLUlong clSize;
    array<IDLUlong> pData with IDL{IndirectionLevel = 1, Size_is = [clSize]};
}

type HYPER_SIZEDARR
{
    IDLUlong clSize;
    array<hyper> pData with IDL{IndirectionLevel = 1, Size_is = [clSize]};
}

type SAFEARRAYUNION
{
    IDLUlong sfType;
    optional [|sfType == SF_TYPE.SF_BSTR|] SAFEARR_BSTR BstrStr with IDL{Case = [SF_TYPE.SF_BSTR]};
    optional [|sfType == SF_TYPE.SF_UNKNOWN|] SAFEARR_UNKNOWN UnknownStr with IDL{Case = [SF_TYPE.SF_UNKNOWN]};
    optional [|sfType == SF_TYPE.SF_DISPATCH|] SAFEARR_DISPATCH DispatchStr with IDL{Case = [SF_TYPE.SF_DISPATCH]};
    optional [|sfType == SF_TYPE.SF_VARIANT|] SAFEARR_VARIANT VariantStr with IDL{Case = [SF_TYPE.SF_VARIANT]};
    optional [|sfType == SF_TYPE.SF_RECORD|] SAFEARR_BRECORD RecordStr with IDL{Case = [SF_TYPE.SF_RECORD]};
    optional [|sfType == SF_TYPE.SF_HAVEIID|] SAFEARR_HAVEIID HaveIidStr with IDL{Case = [SF_TYPE.SF_HAVEIID]};
    optional [|sfType == SF_TYPE.SF_I1|] BYTE_SIZEDARR ByteStr with IDL{Case = [SF_TYPE.SF_I1]};
    optional [|sfType == SF_TYPE.SF_I2|] WORD_SIZEDARR WordStr with IDL{Case = [SF_TYPE.SF_I2]};
    optional [|sfType == SF_TYPE.SF_I4|] DWORD_SIZEDARR LongStr with IDL{Case = [SF_TYPE.SF_I4]};
    optional [|sfType == SF_TYPE.SF_I8|] HYPER_SIZEDARR HyperStr with IDL{Case = [SF_TYPE.SF_I8]};
} with IDL{UnionKind = UnionKind.Encapsulated, Switch = sfType, UnionName = "u"};

type _wireSAFEARRAY
{
    USHORT cDims where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "OAUT", "cDims", "_wireSAFEARRAY", "0", value);
    ADVFEATUREFLAGS fFeatures
        where ValidationCheckCombinationValueIncludeZeroTooManyItems(InRange<ADVFEATUREFLAGS>(value) || value == 0, null, true, ReferenceType.Type, "OAUT", "fFeatures", "_wireSAFEARRAY", "_wireSAFEARRAY", "[MS-OAUT]")
        with Encoding{Decoder = PatternDecoder<ADVFEATUREFLAGS>, SourcePattern = TypeOf<USHORT>()};
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    array<SAFEARRAYBOUND> rgsabound with IDL{Size_is = [cDims], Dimensions = [null]};
}

typedef SAFEARRAY = _wireSAFEARRAY with IDL{IndirectionLevel = 1, Pointer_default = PointerKind.UniquePtr};
typedef PSAFEARRAY = SAFEARRAY with IDL{IndirectionLevel = 1, Pointer_default = PointerKind.UniquePtr};

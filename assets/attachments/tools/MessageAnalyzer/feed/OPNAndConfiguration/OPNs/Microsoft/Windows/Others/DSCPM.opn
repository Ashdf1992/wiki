protocol DSCPM with 
Documentation
{
    ProtocolName = "Desired State Configuration Pull Model Protocol",
    ShortName = "DSCPM",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-DSCPM", Version = "6.0", Date = "09/15/2017"},
        ]
};
using Standard;
using Utility;
using HTTP;
using InfrastructureResources;
using Diagnostics;
using OthersResources;

// ------------------------------------- Endpoint & Actor---------------------------------------//
endpoint Server
    over HTTP.Server
    provides DSCPMContract;

client endpoint Client connected to Server;

autostart actor DSCPMServerOverHTTP(HTTP.Server server)
{
    any message DSCPMMsg;
    MsgType msgType;
    
    process server accepts httpRequest:HttpContract.Request where IsDSCPMRequestMessage(httpRequest, out msgType, out DSCPMMsg)
    {
        if (msgType == MsgType.GetConfigurationRequest)
        {
            DSCPMContract.GetConfigurationRequest request = DSCPMMsg as DSCPMContract.GetConfigurationRequest;
            ValidationCheck(UUID(request.ConfigurationId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ConfigurationId", "GetConfigurationRequest"));
            if ("ConfigurationName" in httpRequest.Headers)
            {
                request.ConfigurationName = httpRequest.Headers["ConfigurationName"] as string;
            }
            else
            {
                request.ConfigurationName = nothing;
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.GetModuleRequest)
        {
            DSCPMContract.GetModuleRequest request = DSCPMMsg as DSCPMContract.GetModuleRequest;
            ValidationCheck(UUID(request.ConfigurationId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ConfigurationId", "GetModuleRequest"));
            ValidationCheck(ModuleNameSyntax(request.ModuleName) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ModuleName", "GetModuleRequest"));
            ValidationCheck(request.ModuleVersion == null || ModuleVersionSyntax(request.ModuleVersion) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ModuleVersion", "GetModuleRequest"));
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.GetActionRequest)
        {
            DSCPMContract.GetActionRequest request = DSCPMMsg as DSCPMContract.GetActionRequest;
            ValidationCheck(UUID(request.ConfigurationId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ConfigurationId", "GetActionRequest"));
            if (JsonDecoder<GetActionRequestBody>(httpRequest.Payload) is body:GetActionRequestBody)
            {
                request.RequestBody = body;
            }
            else
            {
                request.RequestBody = new GetActionRequestBody{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "GetActionRequest"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.SendStatusReportRequest)
        {
            DSCPMContract.SendStatusReportRequest request = DSCPMMsg as DSCPMContract.SendStatusReportRequest;
            ValidationCheck(UUID(request.ConfigurationId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ConfigurationId", "SendStatusReportRequest"));
            if (JsonDecoder<SendStatusReportRequestBody>(httpRequest.Payload) is body:SendStatusReportRequestBody)
            {
                request.RequestBody = body;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "SendStatusReportRequest"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.GetStatusReportRequest)
        {
            ValidationCheck(UUID((DSCPMMsg as DSCPMContract.GetStatusReportRequest).ConfigurationId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ConfigurationId", "GetStatusReportRequest"));
            dispatch (endpoint DSCPM.Server over server) accepts DSCPMMsg;
        }
        else if (msgType == MsgType.GetConfigurationRequestV2)
        {
            DSCPMContract.GetConfigurationRequestV2 request = DSCPMMsg as DSCPMContract.GetConfigurationRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "GetConfigurationRequestV2"));
            if ("ConfigurationName" in httpRequest.Headers)
            {
                request.ConfigurationName = httpRequest.Headers["ConfigurationName"] as string;
            }
            else
            {
                request.ConfigurationName = nothing;
            }
            if ("ProtocolVersion" in httpRequest.Headers)
            {
                request.ProtocolVersion = httpRequest.Headers["ProtocolVersion"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ProtocolVersion", "Headers", "GetConfigurationRequestV2"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }

        else if (msgType == MsgType.GetModuleRequestV2)
        {
            DSCPMContract.GetModuleRequestV2 request = DSCPMMsg as DSCPMContract.GetModuleRequestV2;
            ValidationCheck(ModuleNameSyntax(request.ModuleName) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ModuleName", "GetModuleRequestV2"));
            ValidationCheck(request.ModuleVersion == null || ModuleVersionSyntax(request.ModuleVersion) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "ModuleVersion", "GetModuleRequestV2"));
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.GetDscActionRequestV2)
        {
            DSCPMContract.GetDscActionRequestV2 request = DSCPMMsg as DSCPMContract.GetDscActionRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "GetDscActionRequestV2"));
            if (JsonDecoder<GetDscActionRequestV2Body>(httpRequest.Payload) is body:GetDscActionRequestV2Body)
            {
                request.RequestBody = body;
            }
            else
            {
                request.RequestBody = new GetDscActionRequestV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "GetDscActionRequestV2"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.RegisterDscAgentRequestV2)
        {
            DSCPMContract.RegisterDscAgentRequestV2 request = DSCPMMsg as DSCPMContract.RegisterDscAgentRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "RegisterDscAgentRequestV2"));
            if (JsonDecoder<RegisterDscAgentRequestV2Body>(httpRequest.Payload) is body:RegisterDscAgentRequestV2Body)
            {
                request.RequestBody = body;
            }
            else
            {
                request.RequestBody = new RegisterDscAgentRequestV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "RegisterDscAgentRequestV2"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.SendReportRequestV2)
        {
            DSCPMContract.SendReportRequestV2 request = DSCPMMsg as DSCPMContract.SendReportRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "SendReportRequestV2"));
            if (JsonDecoder<SendReportRequestV2Body>(httpRequest.Payload) is body:SendReportRequestV2Body)
            {
                request.RequestBody = body;
            }
            else
            {
                request.RequestBody = new SendReportRequestV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "SendReportRequestV2"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.GetReportsRequestV2)
        {
            DSCPMContract.GetReportsRequestV2 request = DSCPMMsg as DSCPMContract.GetReportsRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "GetReportsRequestV2"));
            if ("JobId" in httpRequest.Headers)
            {
                request.JobId = httpRequest.Headers["JobId"] as string;
            }
            else
            {
                request.JobId = nothing;
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
        else if (msgType == MsgType.CertificateRotationRequestV2)
        {
            DSCPMContract.CertificateRotationRequestV2 request = DSCPMMsg as DSCPMContract.CertificateRotationRequestV2;
            ValidationCheck(UUID(request.AgentId) != nothing , null, DiagnosisLevel.Error, 
                () => Format(DSCPM_UNDEFINED_FORMAT, "AgentId", "CertificateRotationRequestV2"));
            if (JsonDecoder<CertificateRotationRequestV2Body>(httpRequest.Payload) is body:CertificateRotationRequestV2Body)
            {
                request.RequestBody = body;
            }
            else
            {
                request.RequestBody = new CertificateRotationRequestV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "RequestBody", "CertificateRotationRequestV2"));
            }
            dispatch (endpoint DSCPM.Server over server) accepts request;
        }
    }

    process server issues httpResponse:HttpContract.Response where IsDSCPMResponseMessage(httpResponse, out msgType)
    {
        if (msgType == MsgType.GetConfigurationResponse)
        {
            DSCPMContract.GetConfigurationResponse response = new DSCPMContract.GetConfigurationResponse{};
            if ("Checksum" in httpResponse.Headers)
            {
                response.Checksum = httpResponse.Headers["Checksum"] as string;
            }
            else 
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "Checksum", "Headers", "HTTP.Response"));
            }
            if ("ChecksumAlgorithm" in httpResponse.Headers)
            {
                response.ChecksumAlgorithm = httpResponse.Headers["ChecksumAlgorithm"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ChecksumAlgorithm", "Headers", "HTTP.Response"));
            }
            response.StatusCode = httpResponse.StatusCode;
            response.ResponseBody = new GetConfigurationResponseBody{configuration = httpResponse.Payload};
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetModuleResponse)
        {
            DSCPMContract.GetModuleResponse response = new DSCPMContract.GetModuleResponse{};
            if ("Checksum" in httpResponse.Headers)
            {
                response.Checksum = httpResponse.Headers["Checksum"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "Checksum", "Headers", "HTTP.Response"));
            }
            if ("ChecksumAlgorithm" in httpResponse.Headers)
            {
                response.ChecksumAlgorithm = httpResponse.Headers["ChecksumAlgorithm"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ChecksumAlgorithm", "Headers", "HTTP.Response"));
            }
            response.ResponseBody = new GetModuleResponseBody{ModuleData = httpResponse.Payload};
            response.StatusCode = httpResponse.StatusCode;
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetActionResponse)
        {
            DSCPMContract.GetActionResponse response = new DSCPMContract.GetActionResponse{};
            if (JsonDecoder<GetActionResponseBody>(httpResponse.Payload) is body:GetActionResponseBody)
            {
                response.ResponseBody = body;
            }
            else
            {
                response.ResponseBody = new GetActionResponseBody{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "ResponseBody", "GetActionResponse"));
            }
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.SendStatusReportResponse)
        {
            DSCPMContract.SendStatusReportResponse response = 
                new DSCPMContract.SendStatusReportResponse
                {
                    StatusCode = httpResponse.StatusCode,
                };
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetStatusReportResponse)
        {
            DSCPMContract.GetStatusReportResponse response = 
                new DSCPMContract.GetStatusReportResponse
                {
                    StatusCode = httpResponse.StatusCode,
                    ResponseBody = 
                        new GetStatusReportResponseBody
                        {
                            StatusReportContent = httpResponse.Payload,
                        },
                };
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetConfigurationResponseV2)
        {
            DSCPMContract.GetConfigurationResponseV2 response = new DSCPMContract.GetConfigurationResponseV2{};
            if ("Checksum" in httpResponse.Headers)
            {
                response.Checksum = httpResponse.Headers["Checksum"] as string;
            }
            else 
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "Checksum", "Headers", "HTTP.Response"));
            }
            if ("ChecksumAlgorithm" in httpResponse.Headers)
            {
                response.ChecksumAlgorithm = httpResponse.Headers["ChecksumAlgorithm"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ChecksumAlgorithm", "Headers", "HTTP.Response"));
            }
            if ("ProtocolVersion" in httpResponse.Headers)
            {
                response.ProtocolVersion = httpResponse.Headers["ProtocolVersion"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ProtocolVersion", "Headers", "HTTP.Response"));
            }
            response.StatusCode = httpResponse.StatusCode;
            response.ResponseBody = new GetConfigurationResponseV2Body{configuration = httpResponse.Payload};
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetModuleResponseV2)
        {
            DSCPMContract.GetModuleResponseV2 response = new DSCPMContract.GetModuleResponseV2{};
            if ("Checksum" in httpResponse.Headers)
            {
                response.Checksum = httpResponse.Headers["Checksum"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "Checksum", "Headers", "HTTP.Response"));
            }
            if ("ChecksumAlgorithm" in httpResponse.Headers)
            {
                response.ChecksumAlgorithm = httpResponse.Headers["ChecksumAlgorithm"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ChecksumAlgorithm", "Headers", "HTTP.Response"));
            }
            if ("ProtocolVersion" in httpResponse.Headers)
            {
                response.ProtocolVersion = httpResponse.Headers["ProtocolVersion"] as string;
            }
            else
            {
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_LACK_OF_FIELD, "ProtocolVersion", "Headers", "HTTP.Response"));
            }
            response.ResponseBody = new GetModuleResponseV2Body{ModuleData = httpResponse.Payload};
            response.StatusCode = httpResponse.StatusCode;
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetDscActionResponseV2)
        {
            DSCPMContract.GetDscActionResponseV2 response = new DSCPMContract.GetDscActionResponseV2{};
            if (JsonDecoder<GetDscActionResponseV2Body>(httpResponse.Payload) is body:GetDscActionResponseV2Body)
            {
                response.ResponseBody = body;
            }
            else
            {
                response.ResponseBody = new GetDscActionResponseV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "ResponseBody", "GetDscActionResponseV2"));
            }
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.RegisterDscAgentResponseV2)
        {
            DSCPMContract.RegisterDscAgentResponseV2 response = new DSCPMContract.RegisterDscAgentResponseV2{};
            if (JsonDecoder<RegisterDscAgentResponseV2Body>(httpResponse.Payload) is body:RegisterDscAgentResponseV2Body)
            {
                response.ResponseBody = body;
            }
            else
            {
                response.ResponseBody = new RegisterDscAgentResponseV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "ResponseBody", "RegisterDscAgentResponseV2"));
            }
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.SendReportResponseV2)
        {
            DSCPMContract.SendReportResponseV2 response = new DSCPMContract.SendReportResponseV2{};
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.GetReportsResponseV2)
        {
            DSCPMContract.GetReportsResponseV2 response = new DSCPMContract.GetReportsResponseV2{};
            if (JsonDecoder<GetReportsResponseV2Body>(httpResponse.Payload) is body:GetReportsResponseV2Body)
            {
                response.ResponseBody = body;
            }
            else
            {
                response.ResponseBody = new GetReportsResponseV2Body{};
                ValidationCheck(false, null, DiagnosisLevel.Error, 
                    () => Format(DSCPM_DECODING_FAILURE_WITH_JSON, "ResponseBody", "GetReportsResponseV2"));
            }
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
        else if (msgType == MsgType.CertificateRotationReponseV2)
        {
            DSCPMContract.CertificateRotationReponseV2 response = new DSCPMContract.CertificateRotationReponseV2{};
            dispatch (endpoint DSCPM.Server over server) issues response;
        }
    }
}

// ----------------------- message-------------------------------- 
contract DSCPMContract
{
    // 3.1 GetConfiguration -- GET
    accepts message GetConfigurationRequest
    {
        string ConfigurationId;
        optional string ConfigurationName;
        override string ToString()
        {
            string summary = "GetConfigurationRequest";
            if (ConfigurationId != null)
            {
                summary += ", ConfigurationId: " + ConfigurationId;
            }
            if (ConfigurationName is configName:string)
            {
                summary += ", ConfigurationName: " + configName;
            }
            return summary;
        }
    }

    issues message GetConfigurationResponse
    {
        string Checksum;
        string ChecksumAlgorithm;
        uint StatusCode;
        GetConfigurationResponseBody ResponseBody;
        override string ToString()
        {
            return "GetConfigurationResponse, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.2 GetModule -- GET
    accepts message GetModuleRequest
    {
        string ConfigurationId;
        string ModuleName;
        string ModuleVersion;
        override string ToString()
        {
            string summary = "GetModuleRequest";
            if (ConfigurationId != null)
            {
                summary += ", ConfigurationId: " + ConfigurationId;
            }
            if (ModuleName != null)
            {
                summary += ", ModuleName: " + ModuleName;
            }
            if (ModuleVersion != null)
            {
                summary += ", ModuleVersion: " + ModuleVersion;
            }
            return summary;
        }
    }

    issues message GetModuleResponse
    {
        string Checksum;
        string ChecksumAlgorithm;
        uint StatusCode;
        GetModuleResponseBody ResponseBody;
        override string ToString()
        {
            return "GetModuleResponse, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.3 GetAction -- POST
    accepts message GetActionRequest
    {
        string ConfigurationId;
        GetActionRequestBody RequestBody;
        override string ToString()
        {
            string summary = "GetActionRequest";
            if (ConfigurationId != null)
            {
                summary += ", ConfigurationId: " + ConfigurationId;
            }
            summary += ", StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(RequestBody.StatusCode);
            return summary;
        }
    }
    
    issues message GetActionResponse
    {
        GetActionResponseBody ResponseBody;
        override string ToString()
        {
            string summary = "GetActionResponse";
            if (ResponseBody.@value != null && ResponseBody.@value != "")
            {
                summary += ", value: " + ResponseBody.@value;
            }
            return summary;
        }
    }

    // 3.4 SendStatusReport -- POST
    accepts message SendStatusReportRequest
    {
        string ConfigurationId;
        SendStatusReportRequestBody RequestBody;
        override string ToString()
        {
            string summary = "SendStatusReportRequest";
            if (ConfigurationId != null)
            {
                summary += ", ConfigurationId: " + ConfigurationId;
            }
            if (RequestBody != null)
            {
                summary += ", JobId: " + RequestBody.JobId;
                if (RequestBody.NodeName is nodeName:string)
                {
                    summary += ", NodeName: " + nodeName;
                }
            }
            return summary;
        }
    }

    issues message SendStatusReportResponse
    {
        uint StatusCode;
        override string ToString()
        {
            return "GetStatusReportResponse, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.5 GetStatusReport -- GET
    accepts message GetStatusReportRequest
    {
        string ConfigurationId;
        optional string JobId;
        // request body // TDI #72779
        override string ToString()
        {
            string summary = "GetStatusReportRequest";
            if (ConfigurationId != null)
            {
                summary += ", ConfigurationId: " + ConfigurationId;
            }
            if (JobId is jobId:string)
            {
                summary += ", JobId: " + jobId;
            }
            return summary;
        }
    }

    issues message GetStatusReportResponse
    {
        uint StatusCode;
        GetStatusReportResponseBody ResponseBody;
        override string ToString()
        {
            return "GetStatusReportResponse, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.6 GetConfiguration V2 -- GET
    accepts message GetConfigurationRequestV2
    {
        string AgentId;
        optional string ConfigurationName;
        string ProtocolVersion;
        override string ToString()
        {
            string summary = "GetConfigurationRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            if (ConfigurationName is configName:string)
            {
                summary += ", ConfigurationName: " + configName;
            }
            return summary;
        }
    }

    issues message GetConfigurationResponseV2
    {
        string Checksum;
        string ChecksumAlgorithm;
        string ProtocolVersion;
        uint StatusCode;
        GetConfigurationResponseV2Body ResponseBody;
        override string ToString()
        {
            return "GetConfigurationResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.7 GetModule V2 -- GET
    accepts message GetModuleRequestV2
    {
        string ModuleName;
        string ModuleVersion;
        override string ToString()
        {
            string summary = "GetModuleRequestV2";
            if (ModuleName != null)
            {
                summary += ", ModuleName: " + ModuleName;
            }
            if (ModuleVersion != null)
            {
                summary += ", ModuleVersion: " + ModuleVersion;
            }
            return summary;
        }
    }

    issues message GetModuleResponseV2
    {
        string Checksum;
        string ChecksumAlgorithm;
        string ProtocolVersion;
        uint StatusCode;
        GetModuleResponseV2Body ResponseBody;
        override string ToString()
        {
            return "GetModuleResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.8 GetDscAction V2 -- POST
    accepts message GetDscActionRequestV2
    {
        string AgentId;
        GetDscActionRequestV2Body RequestBody;
        override string ToString()
        {
            string summary = "GetDscActionRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            return summary;
        }
    }
    
    issues message GetDscActionResponseV2
    {
        GetDscActionResponseV2Body ResponseBody;
        override string ToString()
        {
            return "GetDscActionResponseV2, NodeStatus: " + EnumToStringInSummary<DSCPM.GetActionValueType>(ResponseBody.NodeStatus);
        }
    }

    // 3.9 RegisterDscAgent V2 -- PUT
    accepts message RegisterDscAgentRequestV2
    {
        string AgentId;
        RegisterDscAgentRequestV2Body RequestBody;
        override string ToString()
        {
            string summary = "RegisterDscAgentRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            return summary;
        }
    }
    
    issues message RegisterDscAgentResponseV2
    {
        uint StatusCode;
        RegisterDscAgentResponseV2Body ResponseBody;
        override string ToString()
        {
            return "RegisterDscAgentResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.10 SendReport V2 -- POST
    accepts message SendReportRequestV2
    {
        string AgentId;
        SendReportRequestV2Body RequestBody;
        override string ToString()
        {
            string summary = "SendReportRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            if (RequestBody != null)
            {
                summary += ", JobId: " + RequestBody.JobId;
                if (RequestBody.NodeName is nodeName:string)
                {
                    summary += ", NodeName: " + nodeName;
                }
            }
            return summary;
        }
    }

    issues message SendReportResponseV2
    {
        uint StatusCode;
        override string ToString()
        {
            return "SendReportResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.11 GetReports V2 -- GET
    accepts message GetReportsRequestV2
    {
        string AgentId;
        optional string JobId;
        override string ToString()
        {
            string summary = "GetReportsRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            if (JobId is jobId:string)
            {
                summary += ", JobId: " + jobId;
            }
            return summary;
        }
    }

    issues message GetReportsResponseV2
    {
        uint StatusCode;
        GetReportsResponseV2Body ResponseBody;
        override string ToString()
        {
            return "GetReportsResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }

    // 3.12 CertificateRotation V2 -- POST
    accepts message CertificateRotationRequestV2
    {
        string AgentId;
        CertificateRotationRequestV2Body RequestBody;
        override string ToString()
        {
            string summary = "CertificateRotationRequestV2";
            if (AgentId != null)
            {
                summary += ", AgentId: " + AgentId;
            }
            return summary;
        }
    }
    
    issues message CertificateRotationReponseV2
    {
        uint StatusCode;
        override string ToString()
        {
            return "CertificateRotationResponseV2, StatusCode: " + EnumToStringInSummary<DSCPM.StatusCodeType>(StatusCode);
        }
    }
}

// --------------------------structures and syntax-------------------------------------------//
// 3.1.5.2.2
type GetConfigurationResponseBody
{
    binary configuration;
}

// 3.2.5.1.1.2
type GetModuleResponseBody
{
    binary ModuleData;
}

// 3.3.5.1.1.1   Request Body
type GetActionRequestBody
{
    string Checksum;
    string ChecksumAlgorithm;
    string NodeCompliant;
    uint StatusCode;
    optional string ConfigurationName;
}
// 3.3.5.1.1.2   Response Body
type GetActionResponseBody
{
    string @value where ValidationCheck((value != null) && InRange<GetActionValueType>(value), null, DiagnosisLevel.Error, 
         () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["DSCPM", "value", INFRASTRUCTURE_STR_TYPE, "GetActionResponseBody", 
         INFRASTRUCTURE_STR_MUST, "GetConfiguration, OK", value]));
}

// 3.4.5.1.1.1    Request Body
type SendStatusReportRequestBody
{
    string JobId;
    optional string OperationType;
    optional string LCMVersion;
    optional string ReportFormatVersion;
    optional string ConfigurationVersion;
    optional string NodeName;
    optional string IpAddress;
    optional string StartTime;
    optional string EndTime;
    optional array<string> Errors;
    optional array<string> StatusData;
}

// 3.5.5.1.1.1    Request Body
type GetStatusReportRequestBody
{
    string JobId;
    string NodeName;
    string OperationType;
    string LCMVersion;
    string ReportFormatVersion;
    string ConfigurationVersion;
    string IpAddress;
    string StartTime;
    string EndTime;
    string Errors;
    string StatusData;
}

// 3.5.5.1.1.1    Response Body
type GetStatusReportResponseBody
{
    binary StatusReportContent;
}

// 3.6.5.2.2    Response Body
type GetConfigurationResponseV2Body
{
    binary configuration;
}

// 3.7.5.1.1.2    Response Body
type GetModuleResponseV2Body
{
    binary ModuleData;
}

// 3.8.5.1.1.1   Request Body
type GetDscActionRequestV2Body
{
    array<GetDscActionRequestV2BodyClientStatus> ClientStatus;
}
type GetDscActionRequestV2BodyClientStatus
{
    string Checksum;
    string ChecksumAlgorithm;
    optional string ConfigurationName;
}
// 3.8.5.1.1.2   Response Body
type GetDscActionResponseV2Body
{
    GetActionValueType NodeStatus;
    array<GetDscActionResponseV2BodyDetails> Details;
}
type GetDscActionResponseV2BodyDetails
{
    string ConfigurationName;
    GetActionValueType Status;
}

// 3.9.5.1.1.1   Request Body
type RegisterDscAgentRequestV2Body
{
    RegisterDscAgentRequestV2BodyAgentInformation AgentInformation;
    CertificateInformation CertificateInformation;
    array<string> ConfigurationNames;
}
type RegisterDscAgentRequestV2BodyAgentInformation
{
    string LCMVersion;
    string NodeName;
    string IpAddress;
}
type CertificateInformation
{
    string FriendlyName;
    string Issuer;
    string NotAfter;
    string NotBefore;
    string Subject;
    string PublicKey;
    string Thumbprint;
    string Version;
}

// 3.9.5.1.1.2   Response Body
type RegisterDscAgentResponseV2Body
{
    binary RegisterDscAgentContent;
}

// 3.10.5.1.1.1   Request Body
type SendReportRequestV2Body
{
    string JobId;
    string OperationType;
    string RefreshMode;
    string Status;
    string LCMVersion;
    string ReportFormatVersion;
    string ConfigurationVersion;
    string NodeName;
    string IpAddress;
    string StartTime;
    string EndTime;
    string RebootRequested;
    string Errors;
    string StatusData;
    array<SendReportRequestV2BodyAdditionalData> AdditionalData;
}
type SendReportRequestV2BodyAdditionalData
{
    string Key;
    string Value;
}

type GetReportsResponseV2Body
{
    binary ReportsContent;
}

type CertificateRotationRequestV2Body
{
    CertificateInformation CertificateInformation;
}

bool IsDSCPMRequestMessage(HttpContract.Request httpRequest, out MsgType msgType, out any message msg)
{
    if (httpRequest.Uri.AbsPath is absPath:string)
    {
        if (absPath.IndexOf("Action(ConfigurationId=") is actionIndex:int && actionIndex > -1)
        {
            switch (absPath.Segment(actionIndex))
            {
                case str:string from GetConfigurationSyntax =>
                    msgType = MsgType.GetConfigurationRequest;
                    msg = new DSCPMContract.GetConfigurationRequest
                        {
                            ConfigurationId = str,
                        };
                    return true;
                case str:string from GetActionSyntax =>
                    msgType = MsgType.GetActionRequest;
                    msg = new DSCPMContract.GetActionRequest
                        {
                            ConfigurationId = str,
                        };
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Module(ConfigurationId=") is moduleIndex:int && moduleIndex > -1)
        {
            switch (absPath.Segment(moduleIndex))
            {
                case getModuleType:GetModuleType from GetModuleSyntax =>
                    msgType = MsgType.GetModuleRequest;
                    msg = new DSCPMContract.GetModuleRequest
                        {
                            ConfigurationId = getModuleType.ConfigurationId,
                            ModuleName = getModuleType.ModuleName,
                            ModuleVersion = getModuleType.ModuleVersion,
                        };
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Nodes(ConfigurationId=") is nodesIndex:int && nodesIndex > -1)
        {
            switch (absPath.Segment(nodesIndex))
            {
                case str:string from SendStatusReportSyntax =>
                    msgType = MsgType.SendStatusReportRequest;
                    msg = new DSCPMContract.SendStatusReportRequest
                        {
                            ConfigurationId = str,
                        };
                    return true;
                case req:DSCPMContract.GetStatusReportRequest from GetStatusReportSyntax =>
                    msgType = MsgType.GetStatusReportRequest;
                    msg = req;
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Nodes(AgentId=") is nodesAIndex:int && nodesAIndex > -1)
        {
            switch (absPath.Segment(nodesAIndex))
            {
                case req:GetConfigurationV2Type from GetConfigurationV2Syntax =>
                    msgType = MsgType.GetConfigurationRequestV2;
                    msg = new DSCPMContract.GetConfigurationRequestV2
                    {
                        AgentId = req.AgentId,
                        ConfigurationName = req.ConfigurationName
                    };
                    return true;
                case str:string from GetDscActionV2Syntax =>
                    msgType = MsgType.GetDscActionRequestV2;
                    msg = new DSCPMContract.GetDscActionRequestV2
                        {
                            AgentId = str
                        };
                    return true;
                case str:string from RegisterDscAgentV2Syntax =>
                    msgType = MsgType.RegisterDscAgentRequestV2;
                    msg = new DSCPMContract.RegisterDscAgentRequestV2
                        {
                            AgentId = str
                        };
                    return true;
                case str:string from SendReportV2Syntax =>
                    msgType = MsgType.SendReportRequestV2;
                    msg = new DSCPMContract.SendReportRequestV2
                        {
                            AgentId = str
                        };
                    return true;
                case str:string from GetReportsV2Syntax =>
                    msgType = MsgType.GetReportsRequestV2;
                    msg = new DSCPMContract.GetReportsRequestV2
                        {
                            AgentId = str
                        };
                    return true;
                case str:string from CertificateRotationV2Syntax =>
                    msgType = MsgType.CertificateRotationRequestV2;
                    msg = new DSCPMContract.CertificateRotationRequestV2
                        {
                            AgentId = str
                        };
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Modules(ModuleName=") is moduleMIndex:int && moduleMIndex > -1)
        {
            switch (absPath.Segment(moduleMIndex))
            {
                case getModuleType:GetModuleV2Type from GetModuleV2Syntax =>
                    msgType = MsgType.GetModuleRequestV2;
                    msg = new DSCPMContract.GetModuleRequestV2
                        {
                            ModuleName = getModuleType.ModuleName,
                            ModuleVersion = getModuleType.ModuleVersion,
                        };
                    return true;
                default =>
                    return false;
            }
        }
    }
    return false;
}

bool IsDSCPMResponseMessage(HttpContract.Response httpResponse, out MsgType msgType)
{
    if ((httpResponse#Uri is uri:UriType) && (uri.AbsPath is absPath:string))
    {
        if (absPath.IndexOf("Action(ConfigurationId=") is actionIndex:int && actionIndex > -1)
        {
            switch (absPath.Segment(actionIndex))
            {
                case str:string from GetConfigurationSyntax =>
                    msgType = MsgType.GetConfigurationResponse;
                    return true;
                case str:string from GetActionSyntax =>
                    msgType = MsgType.GetActionResponse;
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Module(ConfigurationId=") is moduleIndex:int && moduleIndex > -1)
        {
            switch (absPath.Segment(moduleIndex))
            {
                case getModuleType:GetModuleType from GetModuleSyntax =>
                    msgType = MsgType.GetModuleResponse;
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Nodes(ConfigurationId=") is nodesIndex:int && nodesIndex > -1)
        {
            switch (absPath.Segment(nodesIndex))
            {
                case str:string from SendStatusReportSyntax =>
                    msgType = MsgType.SendStatusReportResponse;
                    return true;
                case req:DSCPMContract.GetStatusReportRequest from GetStatusReportSyntax =>
                    msgType = MsgType.GetStatusReportResponse;
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Nodes(AgentId=") is nodesAIndex:int && nodesAIndex > -1)
        {
            switch (absPath.Segment(nodesAIndex))
            {
                case req:GetConfigurationV2Type from GetConfigurationV2Syntax =>
                    msgType = MsgType.GetConfigurationResponseV2;
                    return true;
                case str:string from GetDscActionV2Syntax =>
                    msgType = MsgType.GetDscActionResponseV2;
                    return true;
                case str:string from RegisterDscAgentV2Syntax =>
                    msgType = MsgType.RegisterDscAgentResponseV2;
                    return true;
                case str:string from SendReportV2Syntax =>
                    msgType = MsgType.SendReportResponseV2;
                    return true;
                case str:string from GetReportsV2Syntax =>
                    msgType = MsgType.GetReportsResponseV2;
                    return true;
                case str:string from CertificateRotationV2Syntax =>
                    msgType = MsgType.CertificateRotationRequestV2;
                    return true;
                default =>
                    return false;
            }
        }
        else if (absPath.IndexOf("Modules(ModuleName=") is moduleMIndex:int && moduleMIndex > -1)
        {
            switch (absPath.Segment(moduleMIndex))
            {
                case getModuleType:GetModuleV2Type from GetModuleV2Syntax =>
                    msgType = MsgType.GetModuleResponseV2;
                    return true;
                default =>
                    return false;
            }
        }
    }
    return false;
}

type GetModuleType
{
    string ConfigurationId;
    string ModuleName;
    string ModuleVersion;
}

type GetConfigurationV2Type
{
    string AgentId;
    optional string ConfigurationName;
}

type GetModuleV2Type
{
    string ModuleName;
    string ModuleVersion;
}

syntax GetConfigurationSyntax = "Action(ConfigurationId='" s1:regex{[^']*} "')/ConfigurationContent"=> s1;
syntax GetModuleSyntax = "Module(ConfigurationId='" s1:regex{[^']*} "',ModuleName='" s2:regex{[^']*} "',ModuleVersion='" s3:regex{[^']*} "')/ModuleContent"
    => new GetModuleType
    {
        ConfigurationId = s1,
        ModuleName = s2,
        ModuleVersion = s3
    };
syntax GetActionSyntax = "Action(ConfigurationId='" s1:regex{[^']*} "')/GetAction"=> s1;
syntax SendStatusReportSyntax = "Nodes(ConfigurationId='" s1:regex{[^']*} "')/SendStatusReport"=> s1;
syntax GetStatusReportSyntax = "Nodes(ConfigurationId='" s1:regex{[^']*} "')/Reports" s2:("(JobId='" s21:regex{[^']*} "')" => s21)?
    => new DSCPMContract.GetStatusReportRequest
    {
        ConfigurationId = s1,
        JobId = (s2.Count == 0 ? nothing : s2[0]),
    };

syntax ModuleNameSyntax = s1:regex{[A-Za-z0-9_]+} => s1;
syntax ModuleVersionSyntax = s1:regex{[0-9]+(\.[0-9]+){1,3}} => s1;

syntax GetConfigurationV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')/Configurations" s2:("(ConfigurationName='" s21:regex{[^']*} "')" => s21)?
    => new GetConfigurationV2Type
    {
        AgentId = s1,
        ConfigurationName = (s2.Count == 0 ? nothing : s2[0]),
    };
syntax GetModuleV2Syntax = "Module(ModuleName='" s1:regex{[^']*} "',ModuleVersion='" s2:regex{[^']*} "')/ModuleContent"
    => new GetModuleV2Type
    {
        ModuleName = s1,
        ModuleVersion = s2
    };
syntax GetDscActionV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')/GetDscAction"=> s1;
syntax RegisterDscAgentV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')"=> s1;
syntax SendReportV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')/SendReport"=> s1;
syntax GetReportsV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')/Reports"=> s1;
syntax CertificateRotationV2Syntax = "Nodes(AgentId='" s1:regex{[^']*} "')/CertificateRotation"=> s1;

// RFC 4122
syntax UUID                     = s1:TimeLow s2:"-" s3:TimeMid s4:"-" s5:TimeHighAndVersion s6:"-" s7:ClockSeqAndReserved s8:ClockSeqLow s9:"-" s10:Node => (s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10);
syntax TimeLow                  = regex{[A-Fa-f0-9]{8}};
syntax TimeMid                  = regex{[A-Fa-f0-9]{4}};
syntax TimeHighAndVersion       = regex{[A-Fa-f0-9]{4}};
syntax ClockSeqAndReserved      = regex{[A-Fa-f0-9]{2}};
syntax ClockSeqLow              = regex{[A-Fa-f0-9]{2}};
syntax Node                     = regex{[A-Fa-f0-9]{12}};

pattern StatusCodeType = enum uint
{
    OK = 200,
    BAD_REQUEST = 400,
    NOT_FOUND = 404,
    ...
};

pattern GetActionValueType = enum string
{
    GetConfiguration        = "GetConfiguration",
    Retry                   = "Retry",
    Ok                      = "Ok",
    UpdateMetaConfiguration = "UpdateMetaConfiguration",
    ...
};

pattern MsgType = enum ushort
{
    GetConfigurationRequest = 0,
    GetConfigurationResponse = 1,
    GetModuleRequest = 2,
    GetModuleResponse = 3,
    GetActionRequest = 4,
    GetActionResponse = 5,
    SendStatusReportRequest = 6,
    SendStatusReportResponse = 7,
    GetStatusReportRequest = 8,
    GetStatusReportResponse = 9,
    GetConfigurationRequestV2 = 10,
    GetConfigurationResponseV2 = 11,
    GetModuleRequestV2 = 12,
    GetModuleResponseV2 = 13,
    GetDscActionRequestV2 = 14,
    GetDscActionResponseV2 = 15,
    RegisterDscAgentRequestV2 = 16,
    RegisterDscAgentResponseV2 = 17,
    SendReportRequestV2 = 18,
    SendReportResponseV2 = 19,
    GetReportsRequestV2 = 20,
    GetReportsResponseV2 = 21,
    CertificateRotationRequestV2 = 22,
    CertificateRotationReponseV2 = 23,
    ...
};

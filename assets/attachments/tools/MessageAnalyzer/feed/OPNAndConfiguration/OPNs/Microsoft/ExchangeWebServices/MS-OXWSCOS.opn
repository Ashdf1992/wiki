protocol MSOXWSCOS with
Documentation
{
    ProtocolName = "Unified Contact Store Web Service Protocol",
    ShortName = "MS-OXWSCOS",
    DocumentName = "MS-OXWSCOS",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2016 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-OXWSCOS", Version = "3.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="14/09/2015"},
        ]
};

using SOAP;

const map<string, string> SoapActionsMap =
{
    "http://schemas.microsoft.com/exchange/services/2006/messages/AddDistributionGroupToImList" -> "AddDistributionGroupToImList",
    "http://schemas.microsoft.com/exchange/services/2006/messages/AddImContactToGroup" -> "AddImContactToGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/AddImGroup" -> "AddImGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewImContactToGroup" -> "AddNewImContactToGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewTelUriContactToGroup" -> "AddNewTelUriContactToGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItemList" -> "GetImItemList",
    "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItems" -> "GetImItems",
    "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveContactFromImList" -> "RemoveContactFromImList",
    "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDistributionGroupFromImList" -> "RemoveDistributionGroupFromImList",
    "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImContactFromGroup" -> "RemoveImContactFromGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImGroup" -> "RemoveImGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/SetImGroup" -> "SetImGroup",
    "http://schemas.microsoft.com/exchange/services/2006/messages/SetImListMigrationCompleted" -> "SetImListMigrationCompleted"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer)
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        RequestMessage msg = new RequestMessage();
        msg.Initialize(soapMsg);
        dispatch (endpoint Server over soapServer) accepts msg;
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where ((soapMsg.SoapAction as string) in SoapActionsMap)
    {
        ResponseMessage msg = new ResponseMessage();
        msg.Initialize(soapMsg);
        dispatch (endpoint Server over soapServer) issues msg;
    }
}

message MessageBase
{
    string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        this.SoapAction = soapMsg.SoapAction as string;
        this.ContainsFault = soapMsg.ContainsFault;
        
        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        return SoapActionsMap[this.SoapAction];
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}
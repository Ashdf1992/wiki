// OPN FileSharing strings library
module FileSharingResources;

///////////////////////////////////////////////
// FSRVPServerSequenceValidation.opn
string FSRVP_SRV_SEQ_STR_MUST_RETURN_ZERO = "FSRVP: The server must return zero to the caller.";
string FSRVP_SRV_SEQ_STR_INVALID_CONTEXT = "FSRVP: When the Context parameter contains an invalid value, the server must fail the call with FSRVP_E_UNSUPPORTED_CONTEXT.";
string FSRVP_SRV_SEQ_STR_CURRENTCONTEXT_IS_ZERO = "FSRVP: When CurrentContext is zero, the server must fail the call with FSRVP_E_BAD_STATE.";
string FSRVP_SRV_SEQ_STR_WRONG_STATUS = "FSRVP: When ShadowCopySet.Status is not \"{0}\", the server must fail the call with FSRVP_E_BAD_STATE.";
string FSRVP_SRV_SEQ_STR_ERROR_SUPPORTEDBYTHISPROVIDER = "FSRVP: The server must set SupportedByThisProvider to true when returning zero to the caller.";
string FSRVP_SRV_SEQ_STR_INVALID_LEVEL = "FSRVP: When the value of Level is invalid, the server must fail the call with E_INVALIDARG.";
string FSRVP_SRV_SEQ_STR_SET_VALUE_WHEN_LEVEL_EQUAL_ONE = "FSRVP: When the value of Level is 1, {0} should be set to {1} {2}, but not {3}.";
string FSRVP_SRV_SEQ_STR_UPDATE_SHAREMAPPING1_WHEN_LEVEL_EQUAL_ONE = "FSRVP: When the value of Level is 1, the server must update the ShareMapping1 structure of the ShareMapping parameter.";
string FSRVP_SRV_SEQ_STR_UPDATE_SHADOWCOPYSHARENAME_WHEN_LEVEL_EQUAL_ONE = "FSRVP: When the value of Level is 1 and MappedShare.IsExposed is {0}, ShareMapping1.ShadowCopyShareName is set to {1}, but not {2}.";
string FSRVP_SRV_SEQ_STR_NO_SHADOWCOPYSET = "FSRVP: When no shadow copy set is found, the server must fail the call with E_INVALIDARG.";
string FSRVP_SRV_SEQ_STR_NO_SHADOWCOPY = "FSRVP: The server must look up the ShadowCopy in ShadowCopySet.ShadowCopyList where ShadowCopy.ShadowCopyId matches ShadowCopyId. When no entry is found, the server must fail the call with E_INVALIDARG.";
string FSRVP_SRV_SEQ_STR_NO_MAPPEDSHARE = "FSRVP: The server must look up the MappedShare in ShadowCopy.ShareMappingList where MappedShare.ShareName matches ShareName. When no entry is found, the server must fail the call with FSRVP_E_OBJECT_NOT_FOUND.";
string FSRVP_SRV_SEQ_STR_NO_MAPPEDSHARE_GETSHAREMAPPING = "FSRVP: The server must look up the MappedShare in ShadowCopy.ShareMappingList where MappedShare.ShareName matches ShareName. When no entry is found, the server must fail the call with E_INVALIDARG.";
string FSRVP_SRV_SEQ_STR_WINDOWS_BEHAVIOR_WRONG_STATUS_GETSHAREMAPPING = "FSRVP: Windows Server 2012 FSRVP servers should not return an error value of 0x80042311 when GetShareMapping is called with that ShadowCopySet.Status is \"{0}\".";
string FSRVP_SRV_SEQ_STR_AMBIGUOUS_INTERVAL = "FSRVP: Cannot finish sequence validation when the interval between this request and last valid response is {0}.";

///////////////////////////////////////////////
// SMB2ServerSequenceValidation.opn
string SMB2_SerSeq_STR_1 = "SMB2 Response: The server erroneously sent an SMB2 NEGOTIATE response. After receiving a SMB_COM_NEGOTIATE request when Connection.NegotiateDialect is not 0xFFFF, the server must disconnect the connection without sending a response. For more information, see \"Receiving an SMB_COM_NEGOTIATE\" in SMB2 technical document.";
string SMB2_SerSeq_STR_2 = "SMB2 Response: The server erroneously sent an SMB2 NEGOTIATE response. When the client does not support SMB2, the server must disconnect the connection without sending a response. For more information, please refer to Section \"SMB 2.002 Support\" in SMB2 technical document.";
string SMB2_SerSeq_STR_3 = "SMB2 Response: The server erroneously sent an SMB2 NEGOTIATE response. After receiving a SMB2 NEGOTIATE request when Connection.NegotiateDialect is not 0xFFFF, the server must disconnect the connection, and not reply. For more information, see \"SMB 2.002 Support\" in SMB2 technical document.";
string SMB2_SerSeq_STR_4 = "SMB2 Response: The server erroneously sent an SMB2 NEGOTIATE response. When the DialectCount of the SMB2 NEGOTIATE Request is zero, the server must send an ERROR Response. For more information, see \"Receiving an SMB2 NEGOTIATE Request\" in SMB2 technical document.";
string SMB2_SerSeq_STR_5 = "SMB2 Response: The server sent a NEGOTIATE Response with wrong DialectRevision. DialectRevision of the SMB2 NEGOTIATE Response must be the greatest common dialect between the dialects the server implemented and the Dialects array of the SMB2 NEGOTIATE Request. For more information, see \"SMB 2.002 SupportReceiving an SMB2 NEGOTIATE Request\" in SMB2 technical document.";
string SMB2_SerSeq_STR_6 = "SMB2 Response: The server erroneously sent an SMB2 NEGOTIATE response. After receiving a request that is not an SMB2 NEGOTIATE Request or a traditional SMB_COM_NEGOTIATE before NEGOTIATE finished successfully, the server must disconnect the connection, and send no reply. For more information, see \"Verifying the Connection State\" in SMB2 technical document.";
string SMB2_SerSeq_STR_7 = "SMB2 Response: The server erroneously sent a response. After receiving a request with invalid MessageId, the server should send a ERROR Response with the error code STATUS_INVALID_PARAMETER, and must disconnect the connection. For more information, see \"Verifying the Sequence Number\" in SMB2 technical document.";
string SMB2_SerSeq_STR_8 = "SMB2 Response: The server sent an SMB2 NEGOTIATE response with an incorrect DialectRevision. The server only supports SMB2.002 and the incoming request is an SMB_COM_NEGOTIATE request that contains the dialect string \"SMB 2.002\". The DialectRevision of the SMB2 NEGOTIATE response must be set to 0x0202. For more information, see \"SMB 2.002 Support\" in SMB2 technical document.";
string SMB2_SerSeq_STR_9 = "SMB2 Response: The server sent an SMB2 NEGOTIATE response with the incorrect value of the SMB2_NEGOTIATE_SIGNING_ENABLED bit. When the server supports SMB 2.1 or SMB 3.0, the SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set. For more information, see \"SMB 2.1 or SMB 3.0 Support\" in SMB2 technical document.";
string SMB2_SerSeq_STR_10 = "SMB2 Response: The server sent an SMB2 NEGOTIATE response with the incorrect value of the SMB2_NEGOTIATE_SIGNING_ENABLED bit. When the server only supports SMB 2.002, the SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set. For more information, see \"SMB 2.002 Support\" in SMB2 technical document.";
string SMB2_SerSeq_STR_11 = "SMB2 Response: The server sent an SMB2 NEGOTIATE response with the incorrect value of the SMB2_NEGOTIATE_SIGNING_ENABLED bit. The SecurityMode field of the SMB2 NEGOTIATE response must have the SMB2_NEGOTIATE_SIGNING_ENABLED bit set. For more information, see \"Receiving an SMB2 NEGOTIATE Request\" in SMB2 technical document.";
string SMB2_SerSeq_STR_12 = "SMB2 Response: The server sent an incorrect response. The corresponding request is SMB_COM_NEGOTIATE request, so the response must be SMB2 NEGOTIATE response.";
string SMB2_SerSeq_STR_13 = "SMB2 Response: The server sent an incorrect response. The request is SMB2 NEGOTIATE request, so the response must be SMB2 NEGOTIATE response or SMB2 Error response.";
string SMB2_SerSeq_STR_14 = "SMB2 Response: There is no corresponding request for this response.";

///////////////////////////////////////////////
// SMB2.opn
string SMB2_STR_GSSAPI_DECODING_FAILURE = "SMB2: The Buffer field in type {0} cannot be decoded as a GSSAPI message successfully.";
string SMB2_STR_NLMP_DECODING_FAILURE = "SMB2: The Buffer field in type {0} cannot be decoded as a NLMP message successfully.";
string SMB2_STR_QUERYDIRECTORYRESPONSE_FAILURE = "SMB2: Failed to decode the Buffer field in type SMB2QueryDirectoryResponse in detail because the corresponding request message is missing.";
string SMB2_STR_QUERYINFORESPONSE_FAILURE = "SMB2: Failed to decode the Buffer field in type SMB2QueryInfoResponse in detail because the corresponding request message is missing.";
string SMB2_STR_CHECK_MESSAGE_ID = "SMB2: Message with MessageId #{0} is missing.";
string SMB2_STR_CHECK_MESSAGE_CREDIT = "SMB2: This message exceeds the number of granted credits.";
string SMB2_STR_SMB2ErrorResponse_ErrorContextCount = "SMB2: The ErrorContextCount field in type SMB2ErrorResponse must be set to zero for SMB dialects other than 3.1.1.";
///////////////////////////////////////////////
// SMB.opn
string SMB_STR_GSSAPI_DECODING_FAILURE = "SMB: The SecurityBlob field in type {0} cannot be decoded as a GSSAPI message successfully.";
string SMB_STR_NLMP_DECODING_FAILURE = "SMB: The SecurityBlob field in type {0} cannot be decoded as a NLMP message successfully.";

///////////////////////////////////////////////
// RSVD.opn
string RSVD_INVALID_OPERATION_CODE = "RSVD: Decode this message partially due to unknown OperationCode ({0}).";

///////////////////////////////////////////////
// PCCRD.opn
string PCCRD_UNKNOWN_MESSAGE_TYPE = "PCCRD: The Type field in type ProbeMatch is unknown ({0}).";

///////////////////////////////////////////////
// RPRN.opn
string RPRN_GENERAL_DECODING_FAILURE = "RPRN: Failed to decode {0} in {1}.";
string RPRN_FIXED_PORTION_DECODING_FAILURE = "RPRN: Failed to decode Fixed_Portion[{0}] in {1}.";
string RPRN_VARIABLE_DATA_DECODING_FAILURE = "RPRN: Failed to decode Variable_Data[{0}] in {1}.";

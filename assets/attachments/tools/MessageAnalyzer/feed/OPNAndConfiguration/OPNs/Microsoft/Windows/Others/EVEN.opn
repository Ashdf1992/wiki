protocol EVEN with 
Documentation
{
    ProtocolName = "EventLog Remoting Protocol",
    ProtocolType = "rpc",
    ShortName = "EVEN",
    DocumentName = "MS-EVEN",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
    new Reference{Name = "MS-EVEN", Version = "17.0", Date = "05/02/2014"}
    ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using Utility;
using InfrastructureResources;
using Diagnostics;
using ERREF;
using OthersResources;

const int MAX_STRINGS = 0x00000100;
const int MAX_BATCH_BUFF = 0x0007FFFF;

endpoint EventlogService over MSRPCE.Server provides eventlog;

contract eventlog
{
    accepts operation ElfrClearELFW
    {
        in IELF_HANDLE LogHandle;
        in PRPC_UNICODE_STRING BackupFileName with IDL{PointerType = PointerKind.UniquePtr};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrClearELFW, LogHandle: " + LogHandle.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 0};
    
    accepts operation ElfrBackupELFW
    {
        in IELF_HANDLE LogHandle;
        in PRPC_UNICODE_STRING BackupFileName where ValidationCheck(value != null && value.ToString() != "" , this, DiagnosisLevel.Error, 
            () => Format(EVEN_MUST_NOT_NULL, "BackupFileName", "ElfrBackupELFW"));
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrBackupELFW, LogHandle: " + LogHandle.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 1};
    
    accepts operation ElfrCloseEL
    {
        in out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrCloseEL, LogHandle: " + LogHandle.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 2};
    
    accepts operation ElfrDeregisterEventSource
    {
        in out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrDeregisterEventSource, LogHandle: " +
                LogHandle.ToString() + ", ReturnValue: " +
                NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation ElfrNumberOfRecords
    {
        in IELF_HANDLE LogHandle;
        out IDLUlong NumberOfRecords with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrNumberOfRecords, LogHandle: " + LogHandle.ToString() +
                ", NumberOfRecords: " + NumberOfRecords.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation ElfrOldestRecord
    {
        in IELF_HANDLE LogHandle;
        out IDLUlong OldestRecordNumber with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrOldestRecord, LogHandle: " + LogHandle.ToString() +
                ", OldestRecordNumber: " + OldestRecordNumber.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation ElfrChangeNotify
    {
        in IELF_HANDLE LogHandle;
        in RPC_CLIENT_ID ClientId;
        in ULONG Event;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrChangeNotify, LogHandle: " + LogHandle.ToString() +
                ", ClientId: " + ClientId.ToString() + ", Event: " +
                Event.ToString() + ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation ElfrOpenELW
    {
        in EVENTLOG_HANDLE_W UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_UNICODE_STRING ModuleName;
        in PRPC_UNICODE_STRING RegModuleName;
        in IDLUlong MajorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenELWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenELWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrOpenELW" + ", UNCServerName: " + UNCServerName.ToString() +
                ", ModuleName: " + ModuleName.ToString() + ", LogHandle: " + LogHandle.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 7};
    
    accepts operation ElfrRegisterEventSourceW
    {
        in EVENTLOG_HANDLE_W UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_UNICODE_STRING ModuleName;
        in PRPC_UNICODE_STRING RegModuleName;
        in IDLUlong MajorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrRegisterEventSourceWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrRegisterEventSourceWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrRegisterEventSourceW" + ", UNCServerName: " +
                UNCServerName.ToString() + ", ModuleName: " +
                ModuleName.ToString() + ", LogHandle: " + LogHandle.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 8};
    
    accepts operation ElfrOpenBELW
    {
        in EVENTLOG_HANDLE_W UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_UNICODE_STRING BackupFileName;
        in IDLUlong MajorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenBELWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenBELWRequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrOpenBELW" + ", UNCServerName: " + UNCServerName.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", LogHandle: " + LogHandle.ToString() + ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 9};
    
    accepts operation ElfrReadELW
    {
        in IELF_HANDLE LogHandle;
        in ReadFlagsPattern ReadFlags where ValidationCheck(InRange<ReadFlagsPattern>(value), this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "ReadFlags", INFRASTRUCTURE_STR_MESSAGE, "ElfrReadELW", INFRASTRUCTURE_STR_MUST, "0x00000001, 0x00000002, 0x00000004, 0x00000008", value]))
         with Encoding{Decoder = PatternDecoder<ReadFlagsPattern>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong RecordOffset;
        in RULONG NumberOfBytesToRead;
        out optional array<EVENTLOGRECORD_UNICODE> Buffer with IDL{Size_is = [NumberOfBytesToRead], IndirectionLevel = 1}, Encoding{Decoder = BinaryDecoder<array<EVENTLOGRECORD_UNICODE>>, SourcePattern = TypeOf<array<UCHAR>>()};
        out IDLUlong NumberOfBytesRead with IDL{IndirectionLevel = 1};
        out IDLUlong MinNumberOfBytesNeeded with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
                string summary = "ElfrReadELW" + ", LogHandle: " + LogHandle.ToString() + 
                ", ReadFlags: " + EnumToString(ReadFlags, "EVEN.ReadFlagsPattern") + 
                ", NumberOfBytesToRead: " + NumberOfBytesToRead.ToString() + 
                ", NumberOfBytesRead: " + NumberOfBytesRead.ToString() + 
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
                return summary;
        }
    }
    with IDL{Opnum = 10};
    
    accepts operation ElfrReportEventW
    {
        in IELF_HANDLE LogHandle;
        in IDLUlong Time;
        in EventTypeEnum EventType where ValidationCheck(InRange<EventTypeEnum>(value), this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "EventType", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventWRequest", INFRASTRUCTURE_STR_MUST, "0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010", value]))
            with Encoding{Decoder = PatternDecoder<EventTypeEnum>, SourcePattern = TypeOf<ushort>()};
        in ushort EventCategory;
        in IDLUlong EventID;
        in ushort NumStrings with IDL{Range = new RangePattern {Low = 0, High = MAX_STRINGS}};
        in IDLUlong DataSize with IDL{Range = new RangePattern {Low = 0, High = 61440}};
        in PRPC_UNICODE_STRING ComputerName;
        in PRPC_SID UserSID with IDL{PointerType = PointerKind.UniquePtr};
        in array<PRPC_UNICODE_STRING> Strings with IDL{Size_is = [NumStrings], Dimensions = [null], PointerType = PointerKind.UniquePtr};
        in array<UCHAR> Data with IDL{Size_is = [DataSize], IndirectionLevel = 1, PointerType = PointerKind.UniquePtr};
        in ushort Flags where ValidationCheck(value == 0, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "Flags", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventW", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
        in out IDLUlong RecordNumber with IDL{IndirectionLevel = 1, PointerType = PointerKind.UniquePtr};
        in out IDLUlong TimeWritten with IDL{IndirectionLevel = 1, PointerType = PointerKind.UniquePtr};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
                string summary = "ElfrReportEventW, LogHandle: " + LogHandle.ToString() +
                ", Time: " + Time.ToString() + ", EventType: " +
                EnumToString(EventType, "EVEN.EventTypeEnum") + ", EventCategory: " +
                EventCategory.ToString() + ", EventID: " + EventID.ToString() +
                ", NumStrings: " + NumStrings.ToString() + ", DataSize: " +
                DataSize.ToString() + ", ComputerName: " +
                ComputerName.ToString();
                if (UserSID != null)
                {
                    summary += ", UserSID: " + UserSID.ToString();
                }
                if (NumStrings != 0)
                {
                    summary += ", Strings: " + Strings.ToString();
                }
                summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
                return summary;
        }
    }
    with IDL{Opnum = 11};
    
    accepts operation ElfrClearELFA
    {
        in IELF_HANDLE LogHandle;
        in PRPC_STRING BackupFileName with IDL{PointerType = PointerKind.UniquePtr};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrClearELFA, LogHandle: " + LogHandle.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 12};
    
    accepts operation ElfrBackupELFA
    {
        in IELF_HANDLE LogHandle;
        in PRPC_STRING BackupFileName;
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrBackupELFA, LogHandle: " + LogHandle.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 13};
    
    accepts operation ElfrOpenELA
    {
        in EVENTLOG_HANDLE_A UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_STRING ModuleName;
        in PRPC_STRING RegModuleName;
        in IDLUlong MajorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenELARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenELARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrOpenELA" + ", UNCServerName: " + UNCServerName.ToString() +
                ", ModuleName: " + ModuleName.ToString() + ", LogHandle: " + LogHandle.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 14};
    
    accepts operation ElfrRegisterEventSourceA
    {
        in EVENTLOG_HANDLE_A UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_STRING ModuleName;
        in PRPC_STRING RegModuleName;
        in IDLUlong MajorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrRegisterEventSourceARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrRegisterEventSourceARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return
                "ElfrRegisterEventSourceA" + ", UNCServerName: " +
                UNCServerName.ToString() + ", ModuleName: " +
                ModuleName.ToString() + ", LogHandle: " + LogHandle.ToString() +
                ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 15};
    
    accepts operation ElfrOpenBELA
    {
        in EVENTLOG_HANDLE_A UNCServerName with IDL{PointerType = PointerKind.UniquePtr}; //bug #80460: PointerKind.UniquePtr defined by typedef should be add to RPC Operation's top level parameters.
        in PRPC_STRING BackupFileName;
        in IDLUlong MajorVersion  where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MajorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenBELARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        in IDLUlong MinorVersion  where ValidationCheck(value == 1, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "MinorVersion", INFRASTRUCTURE_STR_MESSAGE, "ElfrOpenBELARequest", INFRASTRUCTURE_STR_MUST, "1", value]));
        out IELF_HANDLE LogHandle with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrOpenBELA" + ", UNCServerName: " + UNCServerName.ToString();
            if (BackupFileName != null && BackupFileName.ToString() != "")
            {
                summary += ", BackupFileName: " + BackupFileName.ToString();
            }
            summary += ", LogHandle: " + LogHandle.ToString() + ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 16};
    
    accepts operation ElfrReadELA
    {
        in IELF_HANDLE LogHandle;
        in ReadFlagsPattern ReadFlags where ValidationCheck(InRange<ReadFlagsPattern>(value), this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "ReadFlags", INFRASTRUCTURE_STR_MESSAGE, "ElfrReadELA", INFRASTRUCTURE_STR_MUST, "0x00000001, 0x00000002, 0x00000004, 0x00000008", value]))
         with Encoding{Decoder = PatternDecoder<ReadFlagsPattern>, SourcePattern = TypeOf<IDLUlong>()};
        in IDLUlong RecordOffset;
        in RULONG NumberOfBytesToRead;
        out optional array<EVENTLOGRECORD_ANSI> Buffer with IDL{Size_is = [NumberOfBytesToRead], IndirectionLevel = 1}, Encoding{Decoder = BinaryDecoder<array<EVENTLOGRECORD_ANSI>>, SourcePattern = TypeOf<array<UCHAR>>()};
        out IDLUlong NumberOfBytesRead with IDL{IndirectionLevel = 1};
        out IDLUlong MinNumberOfBytesNeeded with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrReadELA, LogHandle: " + LogHandle.ToString() +
                ", ReadFlags: " + EnumToString(ReadFlags, "EVEN.ReadFlagsPattern") + 
                ", NumberOfBytesToRead: " + NumberOfBytesToRead.ToString() + 
                ", NumberOfBytesRead: " + NumberOfBytesRead.ToString() + ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 17};
    
    accepts operation ElfrReportEventA
    {
        in IELF_HANDLE LogHandle;
        in IDLUlong Time;
        in EventTypeEnum EventType where ValidationCheck(InRange<EventTypeEnum>(value), this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "EventType", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventARequest", INFRASTRUCTURE_STR_MUST, "0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010", value]))
        with Encoding{Decoder = PatternDecoder<EventTypeEnum>, SourcePattern = TypeOf<ushort>()};
        in ushort EventCategory;
        in IDLUlong EventID;
        in ushort NumStrings with IDL{Range = new RangePattern {Low = 0, High = MAX_STRINGS}};
        in IDLUlong DataSize with IDL{Range = new RangePattern {Low = 0, High = 61440}};
        in PRPC_STRING ComputerName;
        in PRPC_SID UserSID with IDL{PointerType = PointerKind.UniquePtr};
        in array<PRPC_STRING> Strings with IDL{Size_is = [NumStrings], PointerType = PointerKind.UniquePtr, Dimensions = [null]};
        in array<UCHAR> Data with IDL{Size_is = [DataSize], PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in ushort Flags where ValidationCheck(value == 0, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "Flags", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventA", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
        in out IDLUlong RecordNumber with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out IDLUlong TimeWritten with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary =  "ElfrReportEventA" + ", LogHandle: " + LogHandle.ToString() +
                ", Time: " + Time.ToString() + ", EventType: " + EnumToString(EventType, "EVEN.EventTypeEnum") + ", EventCategory: " +
                EventCategory.ToString() + ", EventID: " + EventID.ToString() + ", NumStrings: " + NumStrings.ToString() + ", DataSize: " +
                DataSize.ToString() + ", ComputerName: " + ComputerName.ToString();
            if (UserSID != null)
            {
                summary += ", UserSID: " + UserSID.ToString();
            }
            if (NumStrings != 0)
            {
                summary += ", Strings: " + Strings.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 18};
    
    accepts operation Opnum19NotUsedOnWire
    {
    }
    with IDL{Opnum = 19};
    
    accepts operation Opnum20NotUsedOnWire
    {
    }
    with IDL{Opnum = 20};
    
    accepts operation Opnum21NotUsedOnWire
    {
    }
    with IDL{Opnum = 21};
    
    accepts operation ElfrGetLogInformation
    {
        in IELF_HANDLE LogHandle;
        in IDLUlong InfoLevel where ValidationCheck(value == 0, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "InfoLevel", INFRASTRUCTURE_STR_MESSAGE, "ElfrGetLogInformation", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
        out optional EVENTLOG_FULL_INFORMATION lpBuffer with IDL{Size_is = [cbBufSize], IndirectionLevel = 1}, Encoding{Decoder = BinaryDecoder<EVENTLOG_FULL_INFORMATION>, SourcePattern = TypeOf<array<UCHAR>>()};
        in IDLUlong cbBufSize with IDL{Range = new RangePattern {Low = 0, High = 1024}};
        out IDLUlong pcbBytesNeeded with IDL{IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        override string ToString()
        {
            string summary = "ElfrGetLogInformation" + ", LogHandle: " + LogHandle.ToString() + ", InfoLevel: " + InfoLevel.ToString();
            if (lpBuffer != nothing)
            {
                summary += ", lpBuffer: " + lpBuffer.ToString();
            }
            summary += ", cbBufSize: " + cbBufSize.ToString() + ", pcbBytesNeeded: " + pcbBytesNeeded.ToString() + ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 22};
    
    accepts operation Opnum23NotUsedOnWire
    {
    }
    with IDL{Opnum = 23};
    
    accepts operation ElfrReportEventAndSourceW
    {
        in IELF_HANDLE LogHandle;
        in IDLUlong Time;
        in EventTypeEnum EventType where ValidationCheck(InRange<EventTypeEnum>(value), this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "EventType", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventAndSourceWRequest", INFRASTRUCTURE_STR_MUST, "0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010", value]))
        with Encoding{Decoder = PatternDecoder<EventTypeEnum>, SourcePattern = TypeOf<ushort>()};
        in ushort EventCategory;
        in IDLUlong EventID;
        in PRPC_UNICODE_STRING SourceName;
        in ushort NumStrings with IDL{Range = new RangePattern {Low = 0, High = MAX_STRINGS}};
        in IDLUlong DataSize with IDL{Range = new RangePattern {Low = 0, High = 61440}};
        in PRPC_UNICODE_STRING ComputerName;
        in PRPC_SID UserSID with IDL{PointerType = PointerKind.UniquePtr};
        in array<PRPC_UNICODE_STRING> Strings with IDL{PointerType = PointerKind.UniquePtr, Size_is = [NumStrings], Dimensions = [null]};
        in array<char> Data with IDL{Size_is = [DataSize], IndirectionLevel = 1, PointerType = PointerKind.UniquePtr};
        in ushort Flags where ValidationCheck(value == 0, this, DiagnosisLevel.Error, 
            () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "Flags", INFRASTRUCTURE_STR_MESSAGE, "ElfrReportEventAndSourceW", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
        in out IDLUlong RecordNumber with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in out IDLUlong TimeWritten with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result DTYP.NTSTATUS ReturnValue;
        
        override string ToString()
        {
            string summary = "ElfrReportEventAndSourceW" + ", LogHandle: " +
                LogHandle.ToString() + ", Time: " + Time.ToString() +
                ", EventType: " + EnumToString(EventType, "EVEN.EventTypeEnum") + ", EventCategory: " +
                EventCategory.ToString() + ", EventID: " + EventID.ToString() +
                ", SourceName: " + SourceName.ToString() + ", NumStrings: " +
                NumStrings.ToString() + ", DataSize: " + DataSize.ToString() +
                ", ComputerName: " + ComputerName.ToString();
            if (UserSID != null)
            {
                summary += ", UserSID: " + UserSID.ToString();
            }
            if (NumStrings != 0)
            {
                summary += ", Strings: " + Strings.ToString();
            }
            summary += ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
            return summary;
        }
    }
    with IDL{Opnum = 24};
}
with IDL{Uuid = {82273fdc-e32a-18c3-3f78-827929dc23ea},
                          Version = "0.0",
                          Pointer_default = PointerKind.UniquePtr,
                          Ms_union = true};

type RPC_STRING
{
    ushort Length;
    ushort MaximumLength;
    optional string Buffer with IDL{Size_is = [MaximumLength], IndirectionLevel = 1}, Encoding{Decoder = ArrayChar2OpString, SourcePattern = TypeOf<array<char>>()}, BinaryEncoding{Endian = Endian.Little, TextEncoding = TextEncoding.ASCII};
    override string ToString()
    {
        if(Buffer == nothing)
        {
            return "";
        }
        return Buffer as string;
    }
}
typedef PRPC_STRING = RPC_STRING with IDL{IndirectionLevel = 1};

optional string ArrayChar2OpString(array<char> arr)
{
    if (arr.Count > 0)
    {
        return arr.Segment(0, arr.Count - 1) as string;//remove the '\0' in the end
    }
    else
    {
        return arr as string;
    }
}

type RPC_CLIENT_ID
{
    IDLUlong UniqueProcess;
    IDLUlong UniqueThread;
}
typedef PRPC_CLIENT_ID = RPC_CLIENT_ID with IDL{IndirectionLevel = 1};

typedef EVENTLOG_HANDLE_W = wchar_t with IDL{Handle = true, PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};

typedef EVENTLOG_HANDLE_A = char with IDL{Handle = true, PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};

typedef IELF_HANDLE = ContextHandle;

typedef PIELF_HANDLE = PCONTEXT_HANDLE;

typedef RULONG = IDLUlong
    with IDL{Range = new RangePattern {Low = 0, High = MAX_BATCH_BUFF}};
    
// ----------------------Not defined in IDL---------------------
// 2.2.2 EventType
pattern EventTypeEnum = enum ushort
{
    EVENTLOG_SUCCESS = 0x0000,
    EVENTLOG_ERROR_TYPE = 0x0001,
    EVENTLOG_WARNING_TYPE = 0x0002,
    EVENTLOG_INFORMATION_TYPE = 0x0004,
    EVENTLOG_AUDIT_SUCCESS = 0x0008,
    EVENTLOG_AUDIT_FAILURE = 0x0010,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.3   EVENTLOGRECORD
type EVENTLOGRECORD_UNICODE
{
    uint Length;
    uint Reserved where ValidationCheck(value == 0x654c664C, null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "Reserved", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x654c664C", value]));
    uint RecordNumber;
    uint TimeGenerated;
    uint TimeWritten;
    uint EventID;
    EventTypeEnum EventType where ValidationCheck(InRange<EventTypeEnum>(value), null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "EventType", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010", value]));
    ushort NumStrings where ValidationCheck(value >=0 && value <= 256, null, DiagnosisLevel.Error, 
    () => Format(INFRASTRUCTURE_STR_CHECK_VALUE_IN_RANGE, ["EVEN", "NumStrings", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0", "256", value]));
    ushort EventCategory;
    ReservedFlagsEnum ReservedFlags where ValidationCheck(InRange<ReservedFlagsEnum>(value), null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "ReservedFlags", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x0000, 0x8000", value]));
    uint ClosingRecordNumber where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "ClosingRecordNumber", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
    uint StringOffset;
    uint UserSidLength;
    uint UserSidOffset;
    uint DataLength;
    uint DataOffset;
    string SourceName with BinaryEncoding{TextEncoding = TextEncoding.Unicode};
    string Computername with BinaryEncoding{TextEncoding = TextEncoding.Unicode};
    optional [|UserSidLength > 0 && (UserSidOffset - BytePosition(stream) > 0)|] binary UserSidPadding with BinaryEncoding{Length = GetUserSidPaddingLength()};
    optional [|UserSidLength > 0|] SID UserSid;
    optional [|NumStrings > 0|] array<string> Strings with BinaryEncoding{Length = NumStrings, TextEncoding = TextEncoding.Unicode}, IDL{Size_is = [NumStrings], Dimensions = [null]};
    optional [|DataLength > 0|] array<byte> Data with BinaryEncoding{Length = DataLength}, IDL{Size_is = [DataLength]};
    optional [|GetPaddingLength() > 0|] binary Padding with BinaryEncoding{Length = GetPaddingLength()};
    uint Length2;
    long GetUserSidPaddingLength()
    {
        // usedLength = (all the uint/ushort before SourceName) + (SourceName + terminal-null)*SizeOf(Unicode-Char) + (Computername + terminal-null)*SizeOf(Unicode-Char)
        long usedLength = 56 + (SourceName.Count + 1) * 2 + (Computername.Count + 1) * 2;
        return UserSidOffset - usedLength;
    }
    long GetPaddingLength()
    {
        // usedLength = (all the uint/ushort before SourceName) + (SourceName + terminal-null)*SizeOf(Unicode-Char) + (Computername + terminal-null)*SizeOf(Unicode-Char) + UserSidPadding + UserSid
        long usedLength = 56 + (SourceName.Count + 1) * 2 + (Computername.Count + 1) * 2 + (UserSidPadding == nothing ? 0 : (UserSidPadding as binary).Count) + UserSidLength;
        // usedLength += SizeOf(Strings)
        for (int i = 0; i < NumStrings; i++)
        {
            usedLength += ((Strings as array<string>)[i].Count() + 1) *2;
        }
        // usedLength += SizeOf(Data) + Length2
        usedLength += DataLength + 4;
        return Length - usedLength;
    }
} with IDL{DoNotGenerate = true};

type EVENTLOGRECORD_ANSI
{
    uint Length;
    uint Reserved where ValidationCheck(value == 0x654c664C, null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "Reserved", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x654c664C", value]));
    uint RecordNumber;
    uint TimeGenerated;
    uint TimeWritten;
    uint EventID;
    EventTypeEnum EventType where ValidationCheck(InRange<EventTypeEnum>(value), null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "EventType", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010", value]));
    ushort NumStrings where ValidationCheck(value >=0 && value <= 256, null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_VALUE_IN_RANGE, ["EVEN", "NumStrings", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0", "256", value]));
    ushort EventCategory;
    ReservedFlagsEnum ReservedFlags where ValidationCheck(InRange<ReservedFlagsEnum>(value), null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_ENUM_VALUE, ["EVEN", "ReservedFlags", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, "0x0000, 0x8000", value]));
    uint ClosingRecordNumber where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => Format(INFRASTRUCTURE_STR_CHECK_VALUE, ["EVEN", "ClosingRecordNumber", INFRASTRUCTURE_STR_TYPE, "EVENTLOGRECORD", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, value]));
    uint StringOffset;
    uint UserSidLength;
    uint UserSidOffset;
    uint DataLength;
    uint DataOffset;
    string SourceName with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
    string Computername with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
    optional [|UserSidLength > 0 && GetUserSidPaddingLength() > 0|] binary UserSidPadding with BinaryEncoding{Length = GetUserSidPaddingLength()};
    optional [|UserSidLength > 0|] SID UserSid;
    optional [|NumStrings > 0|] array<string> Strings with BinaryEncoding{Length = NumStrings, TextEncoding = TextEncoding.ASCII}, IDL{Size_is = [NumStrings], Dimensions = [null]};
    optional [|DataLength > 0|] array<byte> Data with BinaryEncoding{Length = DataLength}, IDL{Size_is = [DataLength]};
    optional [|GetPaddingLength() > 0|] binary Padding with BinaryEncoding{Length = GetPaddingLength()};
    uint Length2;
    long GetUserSidPaddingLength()
    {
        // usedLength = (all the uint/ushort before SourceName) + SourceName + null + Computername + null
        long usedLength = 56 + SourceName.Count + 1 + Computername.Count + 1;
        return UserSidOffset - usedLength;
    }
    long GetPaddingLength()
    {
        // usedLength = (all the uint/ushort before SourceName) + (SourceName + null)*SizeOf(Unicode-Char) + (Computername + null) + UserSidPadding + UserSid
        long usedLength = 56 + SourceName.Count + 1 + Computername.Count + 1 + (UserSidPadding == nothing ? 0 : (UserSidPadding as binary).Count) + UserSidLength;
        // usedLength += SizeOf(Strings)
        for (int i = 0; i < NumStrings; i++)
        {
            usedLength += (Strings as array<string>)[i].Count() + 1;
        }
        // usedLength += SizeOf(Data) + Length2
        usedLength += DataLength + 4;
        return Length - usedLength;
    }
} with IDL{DoNotGenerate = true};

pattern ReservedFlagsEnum = enum ushort
{
    EventDoesNotContainXML = 0x0000,
    EventContainXML = 0x8000,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.4 EVENTLOG_FULL_INFORMATION
type EVENTLOG_FULL_INFORMATION
{
    IDLUlong dwFull;
} with IDL{DoNotGenerate = true};

// 3.1.4.7
pattern ReadFlagsPattern = flags uint
{
    EVENTLOG_SEQUENTIAL_READ = 0x00000001,
    EVENTLOG_SEEK_READ = 0x00000002,
    EVENTLOG_FORWARDS_READ = 0x00000004,
    EVENTLOG_BACKWARDS_READ = 0x00000008,
    ...
} with IDL{DoNotGenerate = true};

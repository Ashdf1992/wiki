protocol WFDPE with
StreamEncodingDefaults{Encoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "Wi-Fi Display Protocol Extension",
    ShortName = "WFDPE",
    DocumentName = "MS-WFDPE",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-WFDPE", Version = "2.0", Date = "07/14/2016", ProgramName = ProgramName.WSPP}
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "379009", Date = "08/10/2015"}
        ]
};

using WFD;
using HTTP;

const string IntelSinkDeviceURLConstString = "intel_sink_device_URL";
const string IntelSinkVersionConstString = "intel_sink_version";
const string MicrosoftTeardownReasonConstString = "microsoft_teardown_reason";

autostart actor WfdpeObserveWfd(WFD.Server server)
{
    observe server issues rtspM3Response:RTSPControlMessage.RtspM3Response
    {
        ExtendWfdpeFields(ref rtspM3Response.ParameterValues);
    }

    observe server issues rtspM8Request:RTSPControlMessage.RtspM8Request
    {
        if (rtspM8Request.ParameterValues.Keys[MicrosoftTeardownReasonConstString])
        {
            HTTP.ParseHeaderValue<MicrosoftTeardownReasonType>("WFDPE", MicrosoftTeardownReasonConstString,
                ref rtspM8Request.ParameterValues, MicrosoftTeardownReason, null);
        }
    } 
}

// syntax
// section 2.1.1.6 intel_sink_version
syntax IntelSinkVersion = p:ProductId HTTP.SP h:HwVersion HTTP.SP s:SwVersion =>
    new IntelSinkVersionType
    {
        ProductId = p,
        HwVersion = h,
        SwVersion = s,
    };
type IntelSinkVersionType
{
    string ProductId;
    VersionTagType HwVersion;
    VersionTagType SwVersion;
}
syntax ProductId = "product_ID=" v:regex{[\x21-\x7E]{1,16}} => v;
syntax HwVersion = "hw_version=" versionTag:VersionTag => versionTag;
syntax SwVersion = "sw_version=" versionTag:VersionTag => versionTag;
syntax VersionTag = major:regex{[0-9]{1,2}} "." minor:regex{[0-9]{1,2}} "."
    sku:regex{[0-9]{1,2}} "." build:regex{[0-9]{1,4}} =>
    new VersionTagType
    {
        Major = major.ToByte() as byte,
        Minor = minor.ToByte() as byte,
        Sku = sku.ToByte() as byte,
        Build = build.ToByte() as byte,
    };
type VersionTagType
{
    byte Major;
    byte Minor;
    byte Sku;
    byte Build;

    override string ToString()
    {
        return Major.ToString() + "." + Minor.ToString() + "." + Sku.ToString() + "." + Build.ToString();
    }
}
// section 2.2.1.2 2.2.1.2 microsoft_teardown_reason
syntax MicrosoftTeardownReason = errorCode:regex{[0-9A-Fa-f]{8}} errorReason:regex{[\x21-\x7E]*} =>
    new MicrosoftTeardownReasonType
    {
        ErrorCode = errorCode.ToULong(true) as ulong,
        ErrorReason = errorReason,
    };
type MicrosoftTeardownReasonType
{
    ulong ErrorCode;
    string ErrorReason;
}

// Convert key value pair array to map and parse the value to WFD defined structure
void ExtendWfdpeFields(ref map<string, any> parameterValues)
{
    set<string> keys = parameterValues.Keys;  // value copy
    if (keys[IntelSinkDeviceURLConstString])
    {
        HTTP.ParseHeaderValue<UriType>("WFDPE", IntelSinkDeviceURLConstString, ref parameterValues, UriSyntax, null);
    }
    if (keys[IntelSinkVersionConstString])
    {
        HTTP.ParseHeaderValue<IntelSinkVersionType>("WFDPE", IntelSinkVersionConstString, ref parameterValues, IntelSinkVersion, null);
    }
}

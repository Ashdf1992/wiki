protocol RNAS
    with BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Vendor-Specific RADIUS Attributes for Network Policy and Access Server (NPAS) Data Structure",
    ShortName = "RNAS",
    DocumentName = "MS-RNAS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference {Name = "MS-RNAS", Version = "1.0", Date = "08/19/2015", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
        new Revision {Class = RevisionClass.Major, Version = "", Date = "09/22/2015"}
    ]
};

using DTYP;
using Diagnostics;
using Utility;
using RADIUS;
using IdentityAndSecurityResources;
using InfrastructureResources;

autostart actor RNASExtendsRADIUS(RADIUS.Node node) 
{
    observe node accepts p:RADIUS.Packet
    {
        foreach (AttributeType attr in p.Attributes)
        {
            if (attr.Attribute is vendorAttr:VendorSpecificAttribute && vendorAttr.String is orignalAttr:MicrosoftVendorSpecifixAttributes)
            {
                stream s = orignalAttr.AttributeSpecificValue;
                uint vendorLength = orignalAttr.VendorLength as uint;
                if (vendorLength > 2)
                {
                    switch (orignalAttr.VendorType)
                    {
                        case 0x22 =>
                            switch (s)
                            {
                                case rnasAttr:MSRASClientName from BinaryDecoder<MSRASClientName[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSRASClientName");
                            }
                        case 0x23 =>
                            switch (s)
                            {
                                case rnasAttr:MSRASClientVersion from BinaryDecoder<MSRASClientVersion[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSRASClientVersion");
                            }
                        case 0x28 =>
                            switch (s)
                            {
                                case rnasAttr:MSUserSecurityIdentity from BinaryDecoder<MSUserSecurityIdentity[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSUserSecurityIdentity");
                            }
                        case 0x2F =>
                            switch (s)
                            {
                                case rnasAttr:MSNetworkAccessServerType from BinaryDecoder<MSNetworkAccessServerType[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSNetworkAccessServerType");
                            }
                        case 0x32 =>
                            switch (s)
                            {
                                case rnasAttr:MSMachineName from BinaryDecoder<MSMachineName[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSMachineName");
                            }
                        case 0x33 =>
                            switch (s)
                            {
                                case rnasAttr:MSIPv6Filter from BinaryDecoder<MSIPv6Filter[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSIPv6Filter");
                            }
                        case 0x38 =>
                            switch (s)
                            {
                                case rnasAttr:MSRASCorrelationID from BinaryDecoder<MSRASCorrelationID> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSRASCorrelationID");
                            }
                        case 0x3D =>
                            switch (s)
                            {
                                case rnasAttr:MSUserIPv4Address from BinaryDecoder<MSUserIPv4Address[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSUserIPv4Address");
                            }
                        case 0x3E =>
                            switch (s)
                            {
                                case rnasAttr:MSUserIPv6Address from BinaryDecoder<MSUserIPv6Address[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSUserIPv6Address");
                            }
                        case 0x3F =>
                            switch (s)
                            {
                                case rnasAttr:MSRDGDeviceRedirection from BinaryDecoder<MSRDGDeviceRedirection[vendorLength]> =>
                                    rnasAttr.VendorType = orignalAttr.VendorType;
                                    rnasAttr.VendorLength = orignalAttr.VendorLength;
                                    vendorAttr.String = rnasAttr;
                                default =>
                                    ThrowDecodingException("RNAS", "MSRDGDeviceRedirection");
                            }
                        default =>; // do nothing
                    }
                }
            }
        }
    }
}

pattern MSRNASAttribute = [|RemainingBitLength(stream) >= 8|]
    ([|CurrentByte(stream) == 0x22|] MSRASClientName |
    [|CurrentByte(stream) == 0x23|] MSRASClientVersion |
    [|CurrentByte(stream) == 0x28|] MSUserSecurityIdentity |
    [|CurrentByte(stream) == 0x2F|] MSNetworkAccessServerType |
    [|CurrentByte(stream) == 0x32|] MSMachineName |
    [|CurrentByte(stream) == 0x33|] MSIPv6Filter |
    [|CurrentByte(stream) == 0x38|] MSRASCorrelationID |
    [|CurrentByte(stream) == 0x3D|] MSUserIPv4Address |
    [|CurrentByte(stream) == 0x3E|] MSUserIPv6Address |
    [|CurrentByte(stream) == 0x3F|] MSRDGDeviceRedirection);

// 2.2.1.1 MS-RAS-Client-Name
type MSRASClientName[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckValueInRange(Length >= 3 && Length <= 35, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSRASClientName", 3, 35, Length) with Encoding{Ignore = true};
    new string AttributeSpecificValue with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = Length - 2};
}

// 2.2.1.2 MS-RAS-Client-Version
type MSRASClientVersion[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckGreaterThanOrEqualTo(Length >= 3, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSRASClientVersion", 3, Length) with Encoding{Ignore = true};
    new string AttributeSpecificValue with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = Length - 2};
}

// 2.2.1.3 MS-User-Security-Identity
type MSUserSecurityIdentity[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckGreaterThanOrEqualTo(Length >= 3, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSUserSecurityIdentity", 3, Length) with Encoding{Ignore = true};
    new DTYP.SID AttributeSpecificValue;
}

// 2.2.1.4 MS-Network-Access-Server-Type
type MSNetworkAccessServerType[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckValue(Length == 6, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSNetworkAccessServerType", 6, Length) with Encoding{Ignore = true};
    new MSNetworkAccessServerType_AttributeSpecificValue AttributeSpecificValue;
}

pattern MSNetworkAccessServerType_AttributeSpecificValue = enum uint
{
    $"Unspecified"                                          = 0x00000000,
    $"Terminal Server Gateway"                              = 0x00000001,
    $"Remote Access Service (RAS) server (VPN or dial-in)"  = 0x00000002,
    $"DHCP server"                                          = 0x00000003,
    $"Health Registration Authority (HRA)"                  = 0x00000005,
    ...
};

// 2.2.1.5 MS-Machine-Name
type MSMachineName[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckGreaterThanOrEqualTo(Length >= 3, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSMachineName", 3, Length) with Encoding{Ignore = true};
    new string AttributeSpecificValue with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = Length - 2};
};

// 2.2.1.6 MS-IPv6-Filter
type MSIPv6Filter[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckGreaterThanOrEqualTo(Length >= 98, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSIPv6Filter", 98, Length) with Encoding{Ignore = true};
    new FilterSets AttributeSpecificValue;
};

type FilterSets
{
    uint Version where ValidationCheckValue(value == 0x00000001, null, true, ReferenceType.Type, "RNAS", "Version", "FilterSets", "0x00000001", value);
    uint Size where ValidationCheckGreaterThanOrEqualTo(value >= 96, null, true, ReferenceType.Type, "RNAS", "Size", "FilterSets", 96, value);
    uint FilterSetEntryCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RNAS", "FilterSetEntryCount", "FilterSets", INFRASTRUCTURE_STR_ZERO, value);
    array<FilterSetEntry> FilterSetEntryList with BinaryEncoding{Length = FilterSetEntryCount};
    // A filter set MUST begin at an 8-octet aligned offset
    optional binary Padding with BinaryEncoding{Length = 4};
    // FilterSetEntryCount * 16 is the length of FilterSetEntryList, 16 is the length of Version, Size, FilterSetEntryCount and Padding
    array<FilterSet> FilterSetList with BinaryEncoding{WidthForComposedType = (Size - FilterSetEntryCount * 16 - 16) * 8};
};

type FilterSetEntry
{
    FilterSetEntry_InfoType InfoType where ValidationCheckEnumValue(InRange<FilterSetEntry_InfoType>(value), null, true, ReferenceType.Type, "RNAS", "InfoType", "FilterSetEntry", "0xFFFF0011, 0xFFFF0012", value);
    uint InfoSize;
    uint FilterSetCount;
    uint Offset;
};

pattern FilterSetEntry_InfoType = enum uint
{
    $"Input filter � The filter NAS MUST be applied to IP packets sent from the endpoint to the NAS." = 0xFFFF0011,
    $"Output filter � The filter MUST be applied to IP packets sent from the NAS to the endpoint."    = 0xFFFF0012,
    ...
};

type FilterSet
{
    uint FilterVersion where ValidationCheckValue(value == 0x00000001, null, true, ReferenceType.Type, "RNAS", "FilterVersion", "FilterSet", "0x00000001", value);
    uint FilterCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RNAS", "FilterCount", "FilterSet", INFRASTRUCTURE_STR_ZERO, value);
    FilterSet_ForwardAction ForwardAction where ValidationCheckEnumValue(InRange<FilterSet_ForwardAction>(value), null, true, ReferenceType.Type, "RNAS", "ForwardAction", "FilterSet", "0x00000000, 0x00000001", value);
    array<Filter> FilterList with BinaryEncoding{Length = FilterCount};
    // FilterCount * 44 is the length of FilterList, 12 is the length of FilterVersion, FilterCount and ForwardAction
    optional [|(FilterCount * 44 + 12) % 8 > 0|] binary Padding with BinaryEncoding{Length = 8 - (FilterCount * 44 + 12) % 8};
};

pattern FilterSet_ForwardAction = enum uint
{
    Forward = 0x00000000,
    Drop    = 0x00000001,
    ...
};

type Filter
{
    IPv6Address SourceAddress;
    uint SourcePrefixLength;
    IPv6Address DestinationAddress;
    uint DestinationPrefixLength;
    Filter_Protocol Protocol;
    Filter_LateBound LateBound where ValidationCheckCombinationValueTooManyItems(InRange<Filter_LateBound>(value), null, true, ReferenceType.Type, "RNAS", "LateBound", "Filter", "Late Bound", "MS-RNAS");
    ushort SourcePort where ValidationCheck((Protocol == Filter_Protocol.TCP || Protocol == Filter_Protocol.UDP || Protocol == Filter_Protocol.ICMP || Protocol == Filter_Protocol.ICMPv6) || (value == 0), 
        null, DiagnosisLevel.Error, () => Format(RNAS_Port_MUST_BE_ZERO, "SourcePort"));
    ushort DestinationPort where ValidationCheck((Protocol == Filter_Protocol.TCP || Protocol == Filter_Protocol.UDP || Protocol == Filter_Protocol.ICMP || Protocol == Filter_Protocol.ICMPv6) || (value == 0), 
        null, DiagnosisLevel.Error, () => Format(RNAS_Port_MUST_BE_ZERO, "DestinationPort"));
}

pattern Filter_Protocol = enum uint
{
    ANY    = 0x00000000,
    ICMP   = 0x00000001,
    ICMPv6 = 0x0000003A,
    TCP    = 0x00000006,
    UDP    = 0x00000011,
    ...
};

pattern Filter_LateBound = flags uint
{
    $"No source or destination address or mask replacement"  = 0x00000000,
    $"Source address replaceable with a new address"         = 0x00000001,
    $"Destination address replaceable with a new address"    = 0x00000004,
    $"Source address mask replaceable with a new mask"       = 0x00000010,
    $"Destination address mask replaceable with a new mask"  = 0x00000020,
    ...
};

// 2.2.1.7 MS-RAS-Correlation-ID
type MSRASCorrelationID : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength with Encoding{Ignore = true};
    new GUID AttributeSpecificValue;
};

// 2.2.1.8 MS-User-IPv4-Address
type MSUserIPv4Address[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckValue(Length == 6, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSUserIPv4Address", 6, Length) with Encoding{Ignore = true};
    new IPv4Address AttributeSpecificValue;
};

// 2.2.1.9 MS-User-IPv6-Address
type MSUserIPv6Address[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckValue(Length == 18, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSUserIPv6Address", 18, Length) with Encoding{Ignore = true};
    new IPv6Address AttributeSpecificValue;
};

// 2.2.1.10 MS-RDG-Device-Redirection
type MSRDGDeviceRedirection[uint Length] : RADIUS.MicrosoftVendorSpecifixAttributes
{
    new byte VendorType with Encoding{Ignore = true};
    new byte VendorLength where ValidationCheckValue(Length == 6, null, true, ReferenceType.Type, "RNAS", "VendorLength", "MSUserIPv6Address", 6, Length) with Encoding{Ignore = true};
    new uint AttributeSpecificValue with DisplayInfo{ToText = AttributeSpecificValue2String};

    static string AttributeSpecificValue2String(any anyV)
    {
        uint val = anyV as uint;
        string result = "";
        if ((val & 0x00000002) != 0)
        {
            result += "Enable redirection for all devices";
        }
        else if ((val & 0x00000004) != 0)
        {
            result += "Disable redirection for all devices";
        }
        else
        {
            string tmp= "";
            if ((val & 0x80000000) == 0)
                tmp += "Drives redirection";
            if ((val & 0x40000000) == 0)
                tmp += ((tmp.Count == 0) ? "Printers ports redirection" : ", Printers redirection");
            if ((val & 0x20000000) == 0)
                tmp += ((tmp.Count == 0) ? "Serial ports redirection" : ", Serial ports redirection");
            if ((val & 0x10000000) == 0)
                tmp += ((tmp.Count == 0) ? "Clipboard redirection" : ", Clipboard redirection");
            if ((val & 0x08000000) == 0)
                tmp += ((tmp.Count == 0) ? "Plug and play devices redirection" : ", Plug and play devices redirection");

            if (tmp.Count == 0)
                result += "Disable Drives redirection, Printers ports redirection, Serial ports redirection, Clipboard redirection, Plug and play devices redirection";
        }
        return result + " (0x" + DecToHexFormat(val) + ")";
    }
};

protocol RDPERP with
Documentation
{
    ProtocolName = "Remote Desktop Protocol: Remote Programs Virtual Channel Extension",
    ShortName = "RDPERP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-RDPERP", Version = "27.0", Date = "09/12/2018", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="383234", Date="12/23/2015"}
        ]
};

using Standard;
using Utility;
using RDPBCGR;

const string MODULE_NAME = "RDPERP";

endpoint Server over RDPBCGR.Server
    accepts TS_RAIL_PDU_HEADER issues TS_RAIL_PDU_HEADER
    accepts TS_RAIL_ORDER_HANDSHAKE issues TS_RAIL_ORDER_HANDSHAKE
    accepts TS_RAIL_ORDER_CLIENTSTATUS
    accepts TS_RAIL_ORDER_HANDSHAKE_EX issues TS_RAIL_ORDER_HANDSHAKE_EX
    accepts TS_RAIL_ORDER_EXEC
    issues TS_RAIL_ORDER_EXEC_RESULT
    accepts CLIENT_TS_RAIL_ORDER_SYSPARAM issues SERVER_TS_RAIL_ORDER_SYSPARAM
    accepts TS_RAIL_ORDER_ACTIVATE
    accepts TS_RAIL_ORDER_SYSMENU
    accepts TS_RAIL_ORDER_SYSCOMMAND
    accepts TS_RAIL_ORDER_NOTIFY_EVENT
    accepts TS_RAIL_ORDER_GET_APPID_REQ
    issues TS_RAIL_ORDER_MINMAXINFO
    issues TS_RAIL_ORDER_LOCALMOVESIZE
    issues TS_RAIL_ORDER_LOCALMOVESIZE_END
    accepts TS_RAIL_ORDER_WINDOWMOVE
    issues TS_RAIL_ORDER_GET_APPID_RESP
    accepts TS_RAIL_ORDER_SNAP_ARRANGE issues TS_RAIL_ORDER_GET_APPID_RESP_EX
    accepts TS_RAIL_ORDER_LANGBARINFO issues TS_RAIL_ORDER_LANGBARINFO
    accepts TS_RAIL_ORDER_LANGUAGEIMEINFO issues TS_RAIL_ORDER_LANGUAGEIMEINFO
    accepts TS_RAIL_ORDER_COMPARTMENTINFO_BODY issues TS_RAIL_ORDER_COMPARTMENTINFO_BODY
    accepts TS_RAIL_ORDER_CLOAK issues TS_RAIL_ORDER_ZORDER_SYNC
    issues TS_RAIL_ORDER_POWER_DISPLAY_REQUEST;

autostart actor RDPERPOverRDPBCGR(RDPBCGR.Server server)
{
    Server EPT = endpoint Server over server;

    process server accepts vcp:VirtualChannelPdu
        where vcp#ChannelName != nothing && vcp#ChannelName.ToString() == "rail" && vcp.virtualChannelData.Count >= 4
    {
        ushort orderType = MakeWord(vcp.virtualChannelData[1], vcp.virtualChannelData[0]);
        optional TS_RAIL_PDU_HEADER res;
        switch (orderType)
        {
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE =>
                res = BinaryDecoder<TS_RAIL_ORDER_HANDSHAKE>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_CLIENTSTATUS =>
                res = BinaryDecoder<TS_RAIL_ORDER_CLIENTSTATUS>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE_EX =>
                res = BinaryDecoder<TS_RAIL_ORDER_HANDSHAKE_EX>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_EXEC =>
                res = BinaryDecoder<TS_RAIL_ORDER_EXEC>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSPARAM =>
                res = BinaryDecoder<CLIENT_TS_RAIL_ORDER_SYSPARAM>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_ACTIVATE =>
                res = BinaryDecoder<TS_RAIL_ORDER_ACTIVATE>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSMENU =>
                res = BinaryDecoder<TS_RAIL_ORDER_SYSMENU>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSCOMMAND =>
                res = BinaryDecoder<TS_RAIL_ORDER_SYSCOMMAND>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_NOTIFY_EVENT =>
                res = BinaryDecoder<TS_RAIL_ORDER_NOTIFY_EVENT>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_REQ =>
                res = BinaryDecoder<TS_RAIL_ORDER_GET_APPID_REQ>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_WINDOWMOVE =>
                res = BinaryDecoder<TS_RAIL_ORDER_WINDOWMOVE>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SNAP_ARRANGE =>
                res = BinaryDecoder<TS_RAIL_ORDER_SNAP_ARRANGE>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGBARINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_LANGBARINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGUAGEIMEINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_LANGUAGEIMEINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_COMPARTMENTINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_COMPARTMENTINFO_BODY>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_CLOAK =>
                res = BinaryDecoder<TS_RAIL_ORDER_CLOAK>(vcp.virtualChannelData);
            default =>;
        }

        if (res is rail:TS_RAIL_PDU_HEADER)
        {
            dispatch EPT accepts rail;
        }
        else
        {
            ThrowDecodingException("RDPERP", EnumToString<TS_RAIL_PDU_HEADER_orderType>(orderType));
        }
    }

    process server issues vcp:VirtualChannelPdu
        where vcp#ChannelName != nothing && vcp#ChannelName.ToString() == "rail" && vcp.virtualChannelData.Count >= 4
    {
        ushort orderType = MakeWord(vcp.virtualChannelData[1], vcp.virtualChannelData[0]);
        optional TS_RAIL_PDU_HEADER res;
        switch (orderType)
        {
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE =>
                res = BinaryDecoder<TS_RAIL_ORDER_HANDSHAKE>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE_EX =>
                res = BinaryDecoder<TS_RAIL_ORDER_HANDSHAKE_EX>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_EXEC_RESULT =>
                res = BinaryDecoder<TS_RAIL_ORDER_EXEC_RESULT>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSPARAM =>
                res = BinaryDecoder<SERVER_TS_RAIL_ORDER_SYSPARAM>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_MINMAXINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_MINMAXINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LOCALMOVESIZE =>
                if (vcp.virtualChannelData.Count >= 10)
                {
                    if (MakeWord(vcp.virtualChannelData[9], vcp.virtualChannelData[8]) > 0)
                    {
                        res = BinaryDecoder<TS_RAIL_ORDER_LOCALMOVESIZE>(vcp.virtualChannelData);
                    }
                    else
                    {
                        res = BinaryDecoder<TS_RAIL_ORDER_LOCALMOVESIZE_END>(vcp.virtualChannelData);
                    }
                }
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_RESP =>
                res = BinaryDecoder<TS_RAIL_ORDER_GET_APPID_RESP>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_RESP_EX =>
                res = BinaryDecoder<TS_RAIL_ORDER_GET_APPID_RESP_EX>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_TASKBARINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_TASKBARINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGBARINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_LANGBARINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGUAGEIMEINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_LANGUAGEIMEINFO>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_COMPARTMENTINFO =>
                res = BinaryDecoder<TS_RAIL_ORDER_COMPARTMENTINFO_BODY>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_ZORDER_SYNC =>
                res = BinaryDecoder<TS_RAIL_ORDER_ZORDER_SYNC>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_POWER_DISPLAY_REQUEST =>
                res = BinaryDecoder<TS_RAIL_ORDER_POWER_DISPLAY_REQUEST>(vcp.virtualChannelData);
            case TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_CLOAK =>
                res = BinaryDecoder<TS_RAIL_ORDER_CLOAK>(vcp.virtualChannelData);
            default =>;
        }

        if (res is rail:TS_RAIL_PDU_HEADER)
        {
            dispatch EPT issues rail;
        }
        else
        {
            ThrowDecodingException("RDPERP", EnumToString<TS_RAIL_PDU_HEADER_orderType>(orderType));
        }
    }
}

message TS_RAIL_PDU_HEADER
{
    TS_RAIL_PDU_HEADER_orderType orderType 
        where ValidationCheckEnumValueTooManyItems(InRange<TS_RAIL_PDU_HEADER_orderType>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "orderType", "TS_RAIL_PDU_HEADER", "TS_RAIL_PDU_HEADER", "[MS-RDPERP]");
    ushort orderLength;

    override string ToString()
    {
        return "Common Header, orderType:" + orderType.ToString();
    }
}

pattern TS_RAIL_PDU_HEADER_orderType = enum ushort
{
    TS_RAIL_ORDER_EXEC                  = 0x0001,
    TS_RAIL_ORDER_ACTIVATE              = 0x0002,
    TS_RAIL_ORDER_SYSPARAM              = 0x0003,
    TS_RAIL_ORDER_SYSCOMMAND            = 0x0004,
    TS_RAIL_ORDER_HANDSHAKE             = 0x0005,
    TS_RAIL_ORDER_NOTIFY_EVENT          = 0x0006,
    TS_RAIL_ORDER_WINDOWMOVE            = 0x0008,
    TS_RAIL_ORDER_LOCALMOVESIZE         = 0x0009,
    TS_RAIL_ORDER_MINMAXINFO            = 0x000a,
    TS_RAIL_ORDER_CLIENTSTATUS          = 0x000b,
    TS_RAIL_ORDER_SYSMENU               = 0x000c,
    TS_RAIL_ORDER_LANGBARINFO           = 0x000d,
    TS_RAIL_ORDER_EXEC_RESULT           = 0x0080,
    TS_RAIL_ORDER_GET_APPID_REQ         = 0x000E,
    TS_RAIL_ORDER_GET_APPID_RESP        = 0x000F,
    TS_RAIL_ORDER_TASKBARINFO           = 0x0010,
    TS_RAIL_ORDER_LANGUAGEIMEINFO       = 0x0011,
    TS_RAIL_ORDER_COMPARTMENTINFO       = 0x0012,
    TS_RAIL_ORDER_HANDSHAKE_EX          = 0x0013,
    TS_RAIL_ORDER_ZORDER_SYNC           = 0x0014,
    TS_RAIL_ORDER_CLOAK                 = 0x0015,
    TS_RAIL_ORDER_POWER_DISPLAY_REQUEST = 0x0016,
    TS_RAIL_ORDER_SNAP_ARRANGE          = 0x0017,
    TS_RAIL_ORDER_GET_APPID_RESP_EX     = 0x0018,
    ...
};

message TS_RAIL_ORDER_HANDSHAKE : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE;
    uint buildNumber;

    override string ToString()
    {
        return "Handshake PDU, buildNumber: " + buildNumber.ToString();
    }
}

message TS_RAIL_ORDER_CLIENTSTATUS : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_CLIENTSTATUS;
    TS_RAIL_ORDER_CLIENTSTATUS_Flags Flags 
        where ValidationCheckEnumValue(InRange<TS_RAIL_ORDER_CLIENTSTATUS_Flags>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "Flags", "TS_RAIL_ORDER_CLIENTSTATUS", "0x00000001, 0x00000002" ,value);

    override string ToString()
    {
        return "Client Information PDU, Flags: " + EnumToStringInSummary<TS_RAIL_ORDER_CLIENTSTATUS_Flags>(Flags);
    }
}

pattern TS_RAIL_ORDER_CLIENTSTATUS_Flags = flags uint
{
    TS_RAIL_CLIENTSTATUS_ALLOWLOCALMOVESIZE              = 0x00000001,
    TS_RAIL_CLIENTSTATUS_AUTORECONNECT                   = 0x00000002,
    TS_RAIL_CLIENTSTATUS_ZORDER_SYNC                     = 0x00000004,
    TS_RAIL_CLIENTSTATUS_WINDOW_RESIZE_MARGIN_SUPPORTED  = 0x00000010,
    TS_RAIL_CLIENTSTATUS_APPBAR_REMOTING_SUPPORTED       = 0x00000040,
    TS_RAIL_CLIENTSTATUS_POWER_DISPLAY_REQUEST_SUPPORTED = 0x00000080,
    TS_RAIL_CLIENTSTATUS_BIDIRECTIONAL_CLOAK_SUPPORTED   = 0x00000200,
    ...
};

message TS_RAIL_ORDER_HANDSHAKE_EX : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_HANDSHAKE_EX;
    uint buildNumber;
    TS_RAIL_ORDER_HANDSHAKE_EX_Flags railHandshakeFlags
        where ValidationCheckCombinationValueIncludeZero(InRange<TS_RAIL_ORDER_HANDSHAKE_EX_Flags>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "railHandshakeFlags", "TS_RAIL_ORDER_HANDSHAKE_EX", "0x00000001, 0x00000002, 0x00000004", value);

    override string ToString()
    {
        return "HandshakeEx PDU, buildNumber: " + buildNumber.ToString() + ", railHandshakeFlags: " + EnumToStringInSummary<TS_RAIL_ORDER_HANDSHAKE_EX_Flags>(railHandshakeFlags);
    }
}

pattern TS_RAIL_ORDER_HANDSHAKE_EX_Flags = flags uint
{
    TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_HIDEF = 0x00000001
        with Documentation
            {Description = "Enhanced RemoteApp is supported."},
    TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_EXTENDED_SPI_SUPPORTED = 0x00000002
        with Documentation
            {Description = "The additional system parameter flags are supported in the Client System Parameters Update PDU."},
    TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_SNAP_ARRANGE_SUPPORTED = 0x00000004
        with Documentation
            {Description = "Indicates that the server supports the Client Window Snap PDU."},
    ...
};

message TS_RAIL_ORDER_EXEC : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_EXEC;
    TS_RAIL_ORDER_EXEC_Flags Flags
        where ValidationCheckCombinationValueIncludeZero(InRange<TS_RAIL_ORDER_EXEC_Flags>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "Flags", "TS_RAIL_ORDER_EXEC", "0x0001, 0x0002, 0x0004, 0x0008", value);
    ushort ExeOrFileLength;
    ushort WorkingDirLength;
    ushort ArgumentsLen;
    string ExeOrFile with BinaryEncoding{Length = ExeOrFileLength / 2};
    optional [|WorkingDirLength > 0|] string WorkingDir with BinaryEncoding{Length = WorkingDirLength / 2};
    optional [|ArgumentsLen > 0|] string Arguments with BinaryEncoding{Length = ArgumentsLen / 2};

    override string ToString()
    {
        return "Client Execute PDU, ExeOrFile: " + ExeOrFile + (Arguments != nothing ? (", Arguments: " + Arguments.ToString()) : "") + 
            (WorkingDir != nothing ? (", WorkingDir: " + WorkingDir.ToString()) : "");
    }
}

pattern TS_RAIL_ORDER_EXEC_Flags = flags ushort
{
    TS_RAIL_EXEC_FLAG_EXPAND_WORKINGDIRECTORY = 0x0001
        with Documentation
            {Description = "The environment variables in the WorkingDir field MUST be expanded on the server."},
    TS_RAIL_EXEC_FLAG_TRANSLATE_FILES         = 0x0002
        with Documentation
            {Description = "The drive letters in the file path MUST be converted to corresponding mapped drives on the server."},
    TS_RAIL_EXEC_FLAG_FILE                    = 0x0004
        with Documentation
            {Description = "If this flag is set, the ExeOrFile field refers to a file path."},
    TS_RAIL_EXEC_FLAG_EXPAND_ARGUMENTS        = 0x0008
        with Documentation
            {Description = "The environment variables in the Arguments field MUST be expanded on the server."},
    TS_RAIL_EXEC_FLAG_APP_USER_MODEL_ID        = 0x0010
        with Documentation
            {Description = "If this flag is set, the ExeOrFile field refers to an application user model ID. If it is not set, the ExeOrFile field refers to a file path. This flag MUST be ignored if the TS_RAIL_EXEC_FLAG_FILE (0x0004) flag is set."},
    ...
};

message TS_RAIL_ORDER_EXEC_RESULT : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_EXEC_RESULT;
    TS_RAIL_ORDER_EXEC_Flags Flags
        where ValidationCheckCombinationValueIncludeZero(InRange<TS_RAIL_ORDER_EXEC_Flags>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "Flags", "TS_RAIL_ORDER_EXEC_RESULT", "0x0001, 0x0002, 0x0004, 0x0008", value);
    TS_RAIL_ORDER_EXEC_RESULT_ExecResult ExecResult
        where ValidationCheckEnumValueTooManyItems(InRange<TS_RAIL_ORDER_EXEC_RESULT_ExecResult>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "ExecResult", "TS_RAIL_ORDER_EXEC_RESULT", "TS_RAIL_ORDER_EXEC_RESULT", "[MS-RDPERP]");
    uint RawResult;
    ushort Padding;
    ushort ExeOrFileLength;
    string ExeOrFile with BinaryEncoding{Length = ExeOrFileLength / 2};

    override string ToString()
    {
        return "Server Execute Result PDU, ExeOrFile: " + ExeOrFile + ", ExecResult: " + EnumToStringInSummary<TS_RAIL_ORDER_EXEC_RESULT_ExecResult>(ExecResult);
    }
}

pattern TS_RAIL_ORDER_EXEC_RESULT_ExecResult = enum ushort
{
    RAIL_EXEC_S_OK               = 0x0000,
    RAIL_EXEC_E_HOOK_NOT_LOADED  = 0x0001,
    RAIL_EXEC_E_DECODE_FAILED    = 0x0002,
    RAIL_EXEC_E_NOT_IN_ALLOWLIST = 0x0003,
    RAIL_EXEC_E_FILE_NOT_FOUND   = 0x0005,
    RAIL_EXEC_E_FAIL             = 0x0006,
    RAIL_EXEC_E_SESSION_LOCKED   = 0x0007,
    ...
};

message CLIENT_TS_RAIL_ORDER_SYSPARAM : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSPARAM;
    CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam SystemParam 
        where ValidationCheckEnumValueTooManyItems(InRange<CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "SystemParam", "CLIENT_TS_RAIL_ORDER_SYSPARAM", "CLIENT_TS_RAIL_ORDER_SYSPARAM", "[MS-RDPERP]");
    ([|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETDRAGFULLWINDOWS ||
        SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETKEYBOARDCUES ||
        SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETKEYBOARDPREF ||
        SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETMOUSEBUTTONSWAP|] byte
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETWORKAREA ||
        SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.RAIL_SPI_DISPLAYCHANGE ||
        SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.RAIL_SPI_TASKBARPOS|] TS_RECTANGLE_16
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETHIGHCONTRAST|] TS_HIGHCONTRAST
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETCARETWIDTH|] uint
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETSTICKYKEYS|] TS_STICKYKEYS
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETTOGGLEKEYS|] TS_TOGGLEKEYS
    | [|SystemParam == CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam.SPI_SETFILTERKEYS|] TS_FILTERKEYS) Body;

    override string ToString()
    {
        return "Client System Parameters Update PDU, SystemParam: " + EnumToStringInSummary<CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam>(SystemParam);
    }
}

pattern CLIENT_TS_RAIL_ORDER_SYSPARAM_SystemParam = enum uint
{
    SPI_SETDRAGFULLWINDOWS = 0x00000025,
    SPI_SETKEYBOARDCUES    = 0x0000100B,
    SPI_SETKEYBOARDPREF    = 0x00000045,
    SPI_SETWORKAREA        = 0x0000002F,
    RAIL_SPI_DISPLAYCHANGE = 0x0000F001,
    SPI_SETMOUSEBUTTONSWAP = 0x00000021,
    RAIL_SPI_TASKBARPOS    = 0x0000F000,
    SPI_SETHIGHCONTRAST    = 0x00000043,
    SPI_SETCARETWIDTH      = 0x00002007,
    SPI_SETSTICKYKEYS      = 0x0000003B,
    SPI_SETTOGGLEKEYS      = 0x00000035,
    SPI_SETFILTERKEYS      = 0x00000033,
    ...
};

// 2.2.2.4.2 High Contrast System Information Structure (TS_HIGHCONTRAST)
type TS_HIGHCONTRAST
{
    TS_HIGHCONTRAST_Flags Flags;
    uint ColorSchemeLength;
    UNICODE_STRING ColorScheme;
}

pattern TS_HIGHCONTRAST_Flags = flags uint
{
    HCF_HIGHCONTRASTON      = 0x00000001
        with Documentation
            {Description = "The High Contrast feature is enabled."},
    HCF_AVAILABLE           = 0x00000002
        with Documentation
            {Description = "The High Contrast feature is available."},
    HCF_HOTKEYACTIVE        = 0x00000004
        with Documentation
            {Description = "The user can turn the High Contrast feature on or off by using the hotkey (left SHIFT + left ALT + PRINT SCREEN)."},
    HCF_CONFIRMHOTKEY       = 0x00000008
        with Documentation
            {Description = "The user will be prompted with a confirmation dialog before the High Contrast feature is enabled using the hotkey."},
    HCF_HOTKEYSOUND         = 0x00000010
        with Documentation
            {Description = "A sound is played whenever the High Contrast feature is turned on or off using the hotkey."},
    ...
};

// 2.2.2.4.3 Filter Keys System Information Structure (TS_FILTERKEYS)
type TS_FILTERKEYS
{
    TS_FILTERKEYS_Flags Flags;
    uint WaitTime;
    uint DelayTime;
    uint RepeatTime;
    uint BounceTime;
}

pattern TS_FILTERKEYS_Flags = flags uint
{
    FKF_FILTERKEYSON    = 0x00000001
        with Documentation
            {Description = "The Filter Keys feature is enabled."},
    FKF_AVAILABLE       = 0x00000002
        with Documentation
            {Description = "The Filter Keys feature is available."},
    FKF_HOTKEYACTIVE    = 0x00000004
        with Documentation
            {Description = "The user can turn the Filter Keys feature on or off by using the default hotkey (holding right SHIFT for 8 seconds)."},
    FKF_CONFIRMHOTKEY   = 0x00000008
        with Documentation
            {Description = "The user will be prompted with a confirmation dialog before the Filter Keys feature is enabled using the hotkey."},
    FKF_HOTKEYSOUND     = 0x00000010
        with Documentation
            {Description = "A sound is played whenever the Filter Keys feature is turned on or off using the hotkey."},
    FKF_INDICATOR       = 0x00000020
        with Documentation
            {Description = "A visual indicator is displayed when the Filter Keys feature is enabled."},
    FKF_CLICKON         = 0x00000040
        with Documentation
            {Description = "A click sound is played whenever a key is pressed or accepted."},
    ...
};

// 2.2.2.4.4 Toggle Keys System Information Structure (TS_TOGGLEKEYS)
type TS_TOGGLEKEYS
{
    TS_TOGGLEKEYS_Flags Flags;
}

pattern TS_TOGGLEKEYS_Flags = flags uint
{
    TKF_TOGGLEKEYSON    = 0x00000001
        with Documentation
            {Description = "The Toggle Keys feature is enabled."},
    TKF_AVAILABLE       = 0x00000002
        with Documentation
            {Description = "The Toggle Keys feature is available."},
    TKF_HOTKEYACTIVE    = 0x00000004
        with Documentation
            {Description = "The user can turn the Toggle Keys feature on or off by using the hotkey (holding NUM LOCK for 8 seconds). "},
    TKF_CONFIRMHOTKEY   = 0x00000008
        with Documentation
            {Description = "The user will be prompted with a confirmation dialog before the Toggle Keys feature is enabled using the hotkey."},
    TKF_HOTKEYSOUND     = 0x00000010
        with Documentation
            {Description = "A sound is played whenever the Toggle Keys feature is turned on or off using the hotkey."},
    ...
};

// 2.2.2.4.5 Sticky Keys System Information Structure (TS_STICKYKEYS)
type TS_STICKYKEYS
{
    TS_STICKYKEYS_Flags Flags;
}

pattern TS_STICKYKEYS_Flags = flags uint
{
    SKF_STICKYKEYSON    = 0x00000001
        with Documentation
            {Description = "The Sticky Keys feature is enabled."},
    SKF_AVAILABLE       = 0x00000002
        with Documentation
            {Description = "The Sticky Keys feature is available."},
    SKF_HOTKEYACTIVE    = 0x00000004
        with Documentation
            {Description = "The user can turn the Sticky Keys feature on or off by using the hotkey (pressing the SHIFT key five times)."},
    SKF_CONFIRMHOTKEY   = 0x00000008
        with Documentation
            {Description = "The user will be prompted with a confirmation dialog before the Sticky Keys feature is enabled using the hotkey."},
    SKF_HOTKEYSOUND     = 0x00000010
        with Documentation
            {Description = "A sound is played whenever the Sticky Keys feature is turned on or off using the hotkey."},
    SKF_INDICATOR       = 0x00000020
        with Documentation
            {Description = "A visual indicator is displayed when the Sticky Keys feature is enabled."},
    SKF_AUDIBLEFEEDBACK = 0x00000040
        with Documentation
            {Description = "A sound is played whenever a modifier key is latched, locked, or released."},
    SKF_TRISTATE        = 0x00000080
        with Documentation
            {Description = "Pressing a modifier key twice in a row will lock the key down until the user presses it a third time."},
    SKF_TWOKEYSOFF      = 0x00000100
        with Documentation
            {Description = "Releasing a modifier key that has been pressed in combination with another key will turn off the Sticky Keys feature."},
    SKF_LSHIFTLOCKED    = 0x00010000
        with Documentation
            {Description = "The left SHIFT key is locked."},
    SKF_RSHIFTLOCKED    = 0x00020000
        with Documentation
            {Description = "The right SHIFT key is locked."},
    SKF_LCTLLOCKED      = 0x00040000
        with Documentation
            {Description = "The left CTRL key is locked."},
    SKF_RCTLLOCKED      = 0x00080000
        with Documentation
            {Description = "The right CTRL key is locked."},
    SKF_LALTLOCKED      = 0x00100000
        with Documentation
            {Description = "The left ALT key is locked."},
    SKF_RALTLOCKED      = 0x00200000
        with Documentation
            {Description = "The right ALT key is locked."},
    SKF_LWINLOCKED      = 0x00400000
        with Documentation
            {Description = "The left WINDOWS key is locked."},
    SKF_RWINLOCKED      = 0x00800000
        with Documentation
            {Description = "The right WINDOWS key is locked."},
    SKF_LSHIFTLATCHED   = 0x01000000
        with Documentation
            {Description = "The left SHIFT key is latched."},
    SKF_RSHIFTLATCHED   = 0x02000000
        with Documentation
            {Description = "The right SHIFT key is latched."},
    SKF_LCTLLATCHED     = 0x04000000
        with Documentation
            {Description = "The left CTRL key is latched."},
    SKF_RCTLLATCHED     = 0x08000000
        with Documentation
            {Description = "The right CTRL key is latched."},
    SKF_LALTLATCHED     = 0x10000000
        with Documentation
            {Description = "The left ALT key is latched."},
    SKF_RALTLATCHED     = 0x20000000
        with Documentation
            {Description = "The right ALT key is latched."},
    SKF_LWINLATCHED     = 0x40000000
        with Documentation
            {Description = "The left WINDOWS key is latched."},
    SKF_RWINLATCHED     = 0x80000000
        with Documentation
            {Description = "The right WINDOWS key is latched."},
        ...
};

message SERVER_TS_RAIL_ORDER_SYSPARAM : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSPARAM;
    SERVER_TS_RAIL_ORDER_SYSPARAM_SystemParam SystemParam
        where ValidationCheckEnumValue(InRange<SERVER_TS_RAIL_ORDER_SYSPARAM_SystemParam>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "SystemParam", "SERVER_TS_RAIL_ORDER_SYSPARAM", "0x00000011, 0x00000077", value);
    byte Body;

    override string ToString()
    {
        return "Server System Parameters Update PDU, SystemParam: " + EnumToStringInSummary<SERVER_TS_RAIL_ORDER_SYSPARAM_SystemParam>(SystemParam);
    }
}

pattern SERVER_TS_RAIL_ORDER_SYSPARAM_SystemParam = enum uint
{
    SPI_SETSCREENSAVEACTIVE = 0x00000011,
    SPI_SETSCREENSAVESECURE = 0x00000077,
    ...
};

message TS_RAIL_ORDER_ACTIVATE : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_ACTIVATE;
    uint WindowId;
    byte Enabled;

    override string ToString()
    {
        return "Client Activate PDU, WindowId: " + WindowId.ToString() + ", Enabled: " + Enabled.ToString();
    }
}

message TS_RAIL_ORDER_SYSMENU : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSMENU;
    uint WindowId;
    ushort Left;
    ushort Top;

    override string ToString()
    {
        return "Client System Menu PDU, WindowId: " + WindowId.ToString() + ", Left: " + Left.ToString() + ", Top: " + Top.ToString();
    }
}

message TS_RAIL_ORDER_SYSCOMMAND : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SYSCOMMAND;
    uint WindowId;
    TS_RAIL_ORDER_SYSCOMMAND_Command Command
        where ValidationCheckEnumValueTooManyItems(InRange<TS_RAIL_ORDER_SYSCOMMAND_Command>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "Command", "TS_RAIL_ORDER_SYSCOMMAND", "TS_RAIL_ORDER_SYSCOMMAND", "[MS-RDPERP]");

    override string ToString()
    {
        return "Client System Command PDU, WindowId: " + WindowId.ToString() + ", Command: " + EnumToStringInSummary<TS_RAIL_ORDER_SYSCOMMAND_Command>(Command);
    }
}

pattern TS_RAIL_ORDER_SYSCOMMAND_Command = enum ushort
{
    SC_SIZE     = 0xF000,
    SC_MOVE     = 0xF010,
    SC_MINIMIZE = 0xF020,
    SC_MAXIMIZE = 0xF030,
    SC_CLOSE    = 0xF060,
    SC_KEYMENU  = 0xF100,
    SC_RESTORE  = 0xF120,
    SC_DEFAULT  = 0xF160,
    ...
};

message TS_RAIL_ORDER_NOTIFY_EVENT : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_NOTIFY_EVENT;
    uint WindowId;
    uint NotifyIconId;
    TS_RAIL_ORDER_NOTIFY_EVENT_Message Message
        where ValidationCheckEnumValueTooManyItems(InRange<TS_RAIL_ORDER_NOTIFY_EVENT_Message>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "Message", "TS_RAIL_ORDER_NOTIFY_EVENT", "TS_RAIL_ORDER_NOTIFY_EVENT", "[MS-RDPERP]");

    override string ToString()
    {
        return "Client Notify Event PDU, WindowId: " + WindowId.ToString() + ", Message: " + EnumToStringInSummary<TS_RAIL_ORDER_NOTIFY_EVENT_Message>(Message);
    }
}

pattern TS_RAIL_ORDER_NOTIFY_EVENT_Message = enum uint
{
    WM_LBUTTONDOWN       = 0x00000201,
    WM_LBUTTONUP         = 0x00000202,
    WM_RBUTTONDOWN       = 0x00000204,
    WM_RBUTTONUP         = 0x00000205,
    WM_CONTEXTMENU       = 0x0000007B,
    WM_LBUTTONDBLCLK     = 0x00000203,
    WM_RBUTTONDBLCLK     = 0x00000206,
    NIN_SELECT           = 0x00000400,
    NIN_KEYSELECT        = 0x00000401,
    NIN_BALLOONSHOW      = 0x00000402,
    NIN_BALLOONHIDE      = 0x00000403,
    NIN_BALLOONTIMEOUT   = 0x00000404,
    NIN_BALLOONUSERCLICK = 0x00000405,
    ...
};

message TS_RAIL_ORDER_GET_APPID_REQ : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_REQ;
    uint WindowId;

    override string ToString()
    {
        return "Client Get Application ID PDU, WindowId: " + WindowId.ToString();
    }
}

message TS_RAIL_ORDER_MINMAXINFO : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_MINMAXINFO;
    uint WindowId;
    ushort MaxWidth;
    ushort MaxHeight;
    ushort MaxPosX;
    ushort MaxPosY;
    ushort MinTrackWidth;
    ushort MinTrackHeight;
    ushort MaxTrackWidth;
    ushort MaxTrackHeight;

    override string ToString()
    {
        return "Server Min Max Info PDU, WindowId: " + WindowId.ToString() + ", MaxWidth: " + MaxWidth.ToString() + ", MaxHeight: " + MaxHeight.ToString();
    }
}

message TS_RAIL_ORDER_LOCALMOVESIZE : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LOCALMOVESIZE;
    uint WindowId;
    ushort IsMoveSizeStart where value > 0;
    Server_Move_Size_Start_PDU_MoveSizeType MoveSizeType
        where ValidationCheckEnumValueTooManyItems(InRange<Server_Move_Size_Start_PDU_MoveSizeType>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "MoveSizeType", "TS_RAIL_ORDER_LOCALMOVESIZE", "TS_RAIL_ORDER_LOCALMOVESIZE", "[MS-RDPERP]");
    ushort PosX;
    ushort PosY;

    override string ToString()
    {
        return "Server Move/Size Start PDU, WindowId: " + WindowId.ToString() + ", MoveSizeType: " + EnumToStringInSummary<Server_Move_Size_Start_PDU_MoveSizeType>(MoveSizeType) + 
            ", PosX: " + PosX.ToString() + ", PosY: " + PosY.ToString();
    }
}

pattern Server_Move_Size_Start_PDU_MoveSizeType = enum ushort
{
        RAIL_WMSZ_LEFT        = 0x0001,
        RAIL_WMSZ_RIGHT       = 0x0002,
        RAIL_WMSZ_TOP         = 0x0003,
        RAIL_WMSZ_TOPLEFT     = 0x0004,
        RAIL_WMSZ_TOPRIGHT    = 0x0005,
        RAIL_WMSZ_BOTTOM      = 0x0006,
        RAIL_WMSZ_BOTTOMLEFT  = 0x0007,
        RAIL_WMSZ_BOTTOMRIGHT = 0x0008,
        RAIL_WMSZ_MOVE        = 0x0009,
        RAIL_WMSZ_KEYMOVE     = 0x000A,
        RAIL_WMSZ_KEYSIZE     = 0x000B,
        ...
};

message TS_RAIL_ORDER_LOCALMOVESIZE_END : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LOCALMOVESIZE;
    uint WindowId;
    ushort IsMoveSizeStart where value == 0;
    Server_Move_Size_Start_PDU_MoveSizeType MoveSizeType
        where ValidationCheckEnumValueTooManyItems(InRange<Server_Move_Size_Start_PDU_MoveSizeType>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "MoveSizeType", "TS_RAIL_ORDER_LOCALMOVESIZE_END", "TS_RAIL_ORDER_LOCALMOVESIZE", "[MS-RDPERP]");
    ushort PosX;
    ushort PosY;

    override string ToString()
    {
        return "Server Move/Size End PDU, WindowId: " + WindowId.ToString() + ", MoveSizeType: " + EnumToStringInSummary<Server_Move_Size_Start_PDU_MoveSizeType>(MoveSizeType) + 
            ", PosX: " + PosX.ToString() + ", PosY: " + PosY.ToString();
    }
}

message TS_RAIL_ORDER_WINDOWMOVE : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_WINDOWMOVE;
    uint WindowId;
    ushort Left;
    ushort Top;
    ushort Right;
    ushort Bottom;

    override string ToString()
    {
        return "Client Window Move PDU, WindowId: " + WindowId.ToString() + ", Left: " + Left.ToString() + ", Top: " + Top.ToString() + 
            ", Right: " + Right.ToString() + ", Bottom: " + Bottom.ToString();
    }
}

message TS_RAIL_ORDER_SNAP_ARRANGE : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_SNAP_ARRANGE;
    uint WindowId;
    ushort Left;
    ushort Top;
    ushort Right;
    ushort Bottom;

    override string ToString()
    {
        return "Client Window Snap PDU, WindowId: " + WindowId.ToString() + ", Left: " + Left.ToString() + ", Top: " + Top.ToString() + 
            ", Right: " + Right.ToString() + ", Bottom: " + Bottom.ToString();
    }

}

message TS_RAIL_ORDER_GET_APPID_RESP : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_RESP;
    uint WindowId;
    string ApplicationId;

    override string ToString()
    {
        return "Server Get Application ID Response PDU, WindowId: " + WindowId.ToString() + ", ApplicationId: " + ApplicationId;
    }
}

message TS_RAIL_ORDER_GET_APPID_RESP_EX : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_GET_APPID_RESP_EX;
    uint WindowId;
    string ApplicationId;
    uint ProcessId;
    string ProcessImageName;

    override string ToString()
    {
        return "Server Get Application ID Extended Response PDU, WindowId: " + WindowId.ToString() + ", ApplicationId: " + ApplicationId;
    }
}

message TS_RAIL_ORDER_LANGBARINFO : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGBARINFO;
    TS_RAIL_ORDER_LANGBARINFO_LanguageBarStatus LanguageBarStatus
        where ValidationCheckCombinationValueTooManyItems(InRange<TS_RAIL_ORDER_LANGBARINFO_LanguageBarStatus>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "LanguageBarStatus", "TS_RAIL_ORDER_LANGBARINFO", "TS_RAIL_ORDER_LANGBARINFO", "[MS-RDPERP]");

    override string ToString()
    {
        return "Language Bar Information PDU, LanguageBarStatus: " + EnumToStringInSummary<TS_RAIL_ORDER_LANGBARINFO_LanguageBarStatus>(LanguageBarStatus);
    }
}

pattern TS_RAIL_ORDER_LANGBARINFO_LanguageBarStatus = flags uint
{
    TF_SFT_SHOWNORMAL              = 0x00000001
        with Documentation
            {Description = "Display the language bar as a floating window."},
    TF_SFT_DOCK                    = 0x00000002
        with Documentation
            {Description = "Dock the language bar in its own task pane."},
    TF_SFT_MINIMIZED               = 0x00000004
        with Documentation
            {Description = "Display the language bar as a single icon in the system tray."},
    TF_SFT_HIDDEN                  = 0x00000008
        with Documentation
            {Description = "Hide the language bar."},
    TF_SFT_NOTRANSPARENCY          = 0x00000010
        with Documentation
            {Description = "Make the language bar opaque."},
    TF_SFT_LOWTRANSPARENCY         = 0x00000020
        with Documentation
            {Description = "Make the language bar partially transparent."},
    TF_SFT_HIGHTRANSPARENCY        = 0x00000040
        with Documentation
            {Description = "Make the language bar highly transparent."},
    TF_SFT_LABELS                  = 0x00000080
        with Documentation
            {Description = "Display text labels next to language bar icons."},
    TF_SFT_NOLABELS                = 0x00000100
        with Documentation
            {Description = "Hide language bar icon text labels."},
    TF_SFT_EXTRAICONSONMINIMIZED   = 0x00000200
        with Documentation
            {Description = "Display text service icons on the taskbar when the language bar is minimized."},
    TF_SFT_NOEXTRAICONSONMINIMIZED = 0x00000400
        with Documentation
            {Description = "Hide text service icons on the taskbar when the language bar is minimized."},
    TF_SFT_DESKBAND                = 0x00000800
        with Documentation
            {Description = "Dock the language bar in the system task bar."},
    ...
};

message TS_RAIL_ORDER_LANGUAGEIMEINFO : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_LANGUAGEIMEINFO;
    TS_RAIL_ORDER_LANGUAGEIMEINFO_ProfileType ProfileType
        where ValidationCheckEnumValue(InRange<TS_RAIL_ORDER_LANGUAGEIMEINFO_ProfileType>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "ProfileType", "TS_RAIL_ORDER_LANGUAGEIMEINFO", "0x00000001, 0x00000002", value);
    ushort LanguageID;
    guid LanguageProfileCLSID with DisplayInfo{ToText = LanguageProfileCLSIDToText};
    guid ProfileGUID with DisplayInfo{ToText = ProfileGUIDToText};
    uint KeyboardLayout;

    override string ToString()
    {
        return "Language Profile Information PDU, LanguageID: " + LanguageID.ToString() + ", LanguageProfileCLSID: " + LanguageProfileCLSIDToText(LanguageProfileCLSID) + 
            ", ProfileGUID: " + ProfileGUIDToText(ProfileGUID);
    }
}

pattern TS_RAIL_ORDER_LANGUAGEIMEINFO_ProfileType = enum uint
{
    TF_PROFILETYPE_INPUTPROCESSOR = 0x00000001,
    TF_PROFILETYPE_KEYBOARDLAYOUT = 0x00000002,
    ...
};

const map<guid, string> LanguageProfileCLSIDToStringMap = {
    {00000000-0000-0000-0000-000000000000} -> "GUID_NULL",
    {03B5835F-F03C-411B-9CE2-AA23E1171E36} -> "GUID_MSIME_JPN",
    {A028AE76-01B1-46C2-99C4-ACD9858AE002} -> "GUID_MSIME_KOR",
    {81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E} -> "GUID_CHSIME",
    {531FDEBF-9B4C-4A43-A2AA-960E8FCDC732} -> "GUID_CHTIME",
};

const map<guid, string> ProfileGUIDToStringMap = {
    {00000000-0000-0000-0000-000000000000} -> "GUID_NULL",
    {B2F9C502-1742-11D4-9790-0080C882687E} -> "GUID_PROFILE_NEWPHONETIC",
    {4BDF9F03-C7D3-11D4-B2AB-0080C882687E} -> "GUID_PROFILE_CHANGJIE",
    {6024B45F-5C54-11D4-B921-0080C882687E} -> "GUID_PROFILE_QUICK",
    {0AEC109C-7E96-11D4-B2EF-0080C882687E} -> "GUID_PROFILE_CANTONESE",
    {F3BA9077-6C7E-11D4-97FA-0080C882687E} -> "GUID_PROFILE_PINYIN",
    {FA550B04-5AD7-411F-A5AC-CA038EC515D7} -> "GUID_PROFILE_SIMPLEFAST",
    {A76C93D9-5523-4E90-AAFA-4DB112F9AC76} -> "GUID_PROFILE_MSIME_JPN",
    {B5FE1F02-D5F2-4445-9C03-C568F23C99A1} -> "GUID_PROFILE_MSIME_KOR",
};

string LanguageProfileCLSIDToText(any input)
{
    if (input is id:guid && id in LanguageProfileCLSIDToStringMap.Keys)
    {
        return LanguageProfileCLSIDToStringMap[id];
    }
    else
    {
        return input.ToString();
    }
}

string ProfileGUIDToText(any input)
{
    if (input is id:guid && id in ProfileGUIDToStringMap.Keys)
    {
        return ProfileGUIDToStringMap[id];
    }
    else
    {
        return input.ToString();
    }
}

message TS_RAIL_ORDER_COMPARTMENTINFO_BODY : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_COMPARTMENTINFO;
    TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeState ImeState
        where ValidationCheckEnumValue(InRange<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeState>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "ImeState", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "0x00000000, 0x00000001", value);
    TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeConvMode ImeConvMode
        where ValidationCheckCombinationValueTooManyItems(InRange<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeConvMode>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "ImeConvMode", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "[MS-RDPERP]");
    TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeSentenceMode ImeSentenceMode
        where ValidationCheckCombinationValueTooManyItems(InRange<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeSentenceMode>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "ImeSentenceMode", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "[MS-RDPERP]");
    TS_RAIL_ORDER_COMPARTMENTINFO_BODY_KANAMode KANAMode
        where ValidationCheckEnumValue(InRange<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_KANAMode>(value), this, true, ReferenceType.Message, MODULE_NAME, 
            "KANAMode", "TS_RAIL_ORDER_COMPARTMENTINFO_BODY", "0x00000000, 0x00000001", value);

    override string ToString()
    {
        return "Compartment Status Information PDU, ImeState: " + EnumToStringInSummary<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeState>(ImeState) +
            ", ImeConvMode: " + EnumToStringInSummary<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeConvMode>(ImeConvMode) + 
            ", ProfileGUID: " + EnumToStringInSummary<TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeSentenceMode>(ImeSentenceMode);
    }
}

pattern TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeState = enum uint
{
    IME_STATE_CLOSED = 0x00000000,
    IME_STATE_OPEN   = 0x00000001,
    ...
};

pattern TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeConvMode = flags uint
{
    IME_CMODE_NATIVE       = 0x00000001
        with Documentation
            {Description = "The input mode is native."},
    IME_CMODE_KATAKANA     = 0x00000002
        with Documentation
            {Description = "The input mode is Katakana."},
    IME_CMODE_FULLSHAPE    = 0x00000008
        with Documentation
            {Description = "The input mode is full-width."},
    IME_CMODE_ROMAN        = 0x00000010
        with Documentation
            {Description = "The input mode is Roman."},
    IME_CMODE_CHARCODE     = 0x00000020
        with Documentation
            {Description = "Character-code input is in effect."},
    IME_CMODE_HANJACONVERT = 0x00000040
        with Documentation
            {Description = "Hanja conversion mode is in effect."},
    IME_CMODE_SOFTKBD      = 0x00000080
        with Documentation
            {Description = "A soft (on-screen) keyboard is being used."},
    IME_CMODE_NOCONVERSION = 0x00000100
        with Documentation
            {Description = "IME conversion is inactive (that is, the IME is closed)."},
    IME_CMODE_EUDC         = 0x00000200
        with Documentation
            {Description = "End-User Defined Character (EUDC) conversion mode is in effect."},
    IME_CMODE_SYMBOL       = 0x00000400
        with Documentation
            {Description = "Symbol conversion mode is in effect."},
    IME_CMODE_FIXED        = 0x00000800
        with Documentation
            {Description = "Fixed conversion mode is in effect."},
    ...
};

pattern TS_RAIL_ORDER_COMPARTMENTINFO_BODY_ImeSentenceMode = flags uint
{
    IME_SMODE_NONE          = 0x00000000
        with Documentation
            {Description = "The IME uses no information for sentence."},
    IME_SMODE_PLURALCLAUSE  = 0x00000001
        with Documentation
            {Description = "The IME uses plural clause information to carry out conversion processing."},
    IME_SMODE_SINGLECONVERT = 0x00000002
        with Documentation
            {Description = "The IME carries out conversion processing in single-character mode."},
    IME_SMODE_AUTOMATIC     = 0x00000004
        with Documentation
            {Description = "The IME carries conversion processing in automatic mode."},
    IME_SMODE_PHRASEPREDICT = 0x00000008
        with Documentation
            {Description = "The IME uses phrase information to predict the next character."},
    IME_SMODE_CONVERSATION  = 0x00000010
        with Documentation
            {Description = "The IME uses conversation mode."},
    ...
};

pattern TS_RAIL_ORDER_COMPARTMENTINFO_BODY_KANAMode = enum uint
{
    KANA_MODE_OFF = 0x00000000,
    KANA_MODE_ON  = 0x00000001,
    ...
};

message TS_RAIL_ORDER_ZORDER_SYNC : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_ZORDER_SYNC;
    uint WindowIdMarker;
    override string ToString()
    {
        return "Server Z-Order Sync Information PDU, WindowIdMarker: " + WindowIdMarker.ToString();
    }
}

// 2.2.2.12.1 Window Cloak State Change PDU 
message TS_RAIL_ORDER_CLOAK : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_CLOAK;
    uint WindowId;
    byte Cloaked;

    override string ToString()
    {
        return "Window Cloak State Change PDU , WindowId: " + WindowId.ToString();
    }
}

// 2.2.2.13.1 Power Display Request PDU (TS_RAIL_ORDER_POWER_DISPLAY_REQUEST)
message TS_RAIL_ORDER_POWER_DISPLAY_REQUEST : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_POWER_DISPLAY_REQUEST;
    POWER_DISPLAY_REQUEST_State Active;
}

pattern POWER_DISPLAY_REQUEST_State = enum uint
{
    Inactive = 0x00000000,
    Active = 0x00000001,
    ...
};


// 2.2.2.14.1 Taskbar Tab Info PDU (TS_RAIL_ORDER_TASKBARINFO)
message TS_RAIL_ORDER_TASKBARINFO : TS_RAIL_PDU_HEADER
{
    invariant orderType == TS_RAIL_PDU_HEADER_orderType.TS_RAIL_ORDER_TASKBARINFO;
    TaskbarMessage TaskbarMessage;
    uint WindowIdTab;
    TaskbarMessage Body;

    override string ToString()
    {
        return "Taskbar Tab Info PDU, TaskbarMessage: " + TaskbarMessage.ToString();
    }
}

pattern TaskbarMessage = enum uint
{
    RAIL_TASKBAR_MSG_TAB_REGISTER = 0x00000001,
    RAIL_TASKBAR_MSG_TAB_UNREGISTER = 0x00000002,
    RAIL_TASKBAR_MSG_TAB_ORDER = 0x00000003,
    RAIL_TASKBAR_MSG_TAB_ACTIVE = 0x00000004,
    RAIL_TASKBAR_MSG_TAB_PROPERTIES = 0x00000005,
    ...
};



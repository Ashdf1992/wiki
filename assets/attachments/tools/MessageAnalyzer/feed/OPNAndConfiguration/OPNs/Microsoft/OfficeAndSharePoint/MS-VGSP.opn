protocol MSVGSP with
Documentation
{
    ProtocolName = "Visio Graphics Service Protocol",
    ShortName = "MS-VGSP",
    DocumentName = "MS-VGSP",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-VGSP", Version = "3.0"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSVGSP";

const map<string, string> WsaActionsMap =
{
    "http://tempuri.org/IVisioGraphicsService/GetRasterDiagram" -> "GetRasterDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetRasterDiagramResponse" -> "GetRasterDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetRasterDiagramVisioGraphicsServiceFaultFault" -> "GetRasterDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetVectorDiagram" -> "GetVectorDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetVectorDiagramResponse" -> "GetVectorDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetVectorDiagramVisioGraphicsServiceFaultFault" -> "GetVectorDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPage" -> "GetRasterPage",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageResponse" -> "GetRasterPage",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageVisioGraphicsServiceFaultFault" -> "GetRasterPage",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageItem" -> "GetRasterPageItem",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageItemResponse" -> "GetRasterPageItem",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageItemVisioGraphicsServiceFaultFault" -> "GetRasterPageItem",
    "http://tempuri.org/IVisioGraphicsService/SaveComments" -> "SaveComments",
    "http://tempuri.org/IVisioGraphicsService/SaveCommentsResponse" -> "SaveComments",
    "http://tempuri.org/IVisioGraphicsService/SaveCommentsVisioGraphicsServiceFaultFault" -> "SaveComments"
};

const map<string, string> SoapActionsMap = {
    "http://tempuri.org/IVisioGraphicsService/GetRasterDiagram" -> "GetRasterDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetVectorDiagram" -> "GetVectorDiagram",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPage" -> "GetRasterPage",
    "http://tempuri.org/IVisioGraphicsService/GetRasterPageItem" -> "GetRasterPageItem",
    "http://tempuri.org/IVisioGraphicsService/SaveComments" -> "SaveComments"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    optional string WsaAction;
    optional string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        if (soapMsg.WsaAction != "")
            this.WsaAction = soapMsg.WsaAction;
            
        if (soapMsg.SoapAction != "")
            this.SoapAction = soapMsg.SoapAction;
            
        this.ContainsFault = soapMsg.ContainsFault;

        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        if (this.WsaAction is wsaAcction:string)
            return WsaActionsMap[wsaAcction];
            
        if (this.SoapAction is soapAcction:string)
            return SoapActionsMap[soapAcction];
            
        return "Unknown";
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}
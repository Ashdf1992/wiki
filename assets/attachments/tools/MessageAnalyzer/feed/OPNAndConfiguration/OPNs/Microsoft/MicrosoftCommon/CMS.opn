module CMS with
Asn1EncodingDefaults{EncodingRule = Asn1EncodingRule.BER},
Documentation
{
    ProtocolName = "Cryptographic Message Syntax",
    ShortName = "CMS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 3852"},
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="369482", Date="10/15/2014"}
        ]
};

using Technologies.ASN1;
using X509;

// section 3.  General Syntax
pattern ContentType = ObjectIdentifier;

type ContentInfo
{
    ContentType contentType;
    ([|contentType == idData|] OctetString |
    [|contentType == idSignedData|] SignedData |
    [|contentType == idEnvelopedData|] EnvelopedData |
    [|contentType == idDigistedData|] DigestedData |
    [|contentType == idEncryptedData|] EncryptedData |
    [|contentType == idCtAuthData|] AuthenticatedData |
        OctetString) content with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
}

// section 5.1
const array<int> idData = [1, 2, 840, 113549, 1, 7, 1];
const array<int> idSignedData = [1, 2, 840, 113549, 1, 7, 2];
const array<int> idEnvelopedData = [1, 2, 840, 113549, 1, 7, 3];
const array<int> idDigistedData = [1, 2, 840, 113549, 1, 7, 5];
const array<int> idEncryptedData = [1, 2, 840, 113549, 1, 7, 6];
const array<int> idCtAuthData = [1, 2, 840, 113549, 1, 9, 16, 1, 2];

type SignedData
{
    CMSVersion version;
    DigestAlgorithmIdentifiers digestAlgorithms;
    EncapsulatedContentInfo encapContentInfo;
    optional CertificateSet certificates with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional RevocationInfoChoices crls with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    SignerInfos signerInfos;
}

pattern SignerInfos = set<SignerInfo>;

pattern DigestAlgorithmIdentifiers = set<DigestAlgorithmIdentifier>;

// section 5.2
type EncapsulatedContentInfo
{
    ContentType eContentType;
    optional ([|eContentType == idData|] OctetString |
        [|eContentType == idSignedData|] SignedData |
        [|eContentType == idEnvelopedData|] EnvelopedData |
        [|eContentType == idDigistedData|] DigestedData |
        [|eContentType == idEncryptedData|] EncryptedData |
        [|eContentType == idCtAuthData|] AuthenticatedData |
        OctetString) eContent with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
}

// section 5.3
type SignerInfo
{
    CMSVersion version;
    SignerIdentifier sid;
    DigestAlgorithmIdentifier digestAlgorithm;
    optional SignedAttributes signedAttrs with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    SignatureAlgorithmIdentifier signatureAlgorithm;
    SignatureValue signature;
    optional UnsignedAttributes unsignedAttrs with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern RecipientInfos = set<RecipientInfo>;

pattern SignerIdentifier = IssuerAndSerialNumber | SubjectKeyIdentifier;

pattern SignerIdentifier_SubjectKeyIdentifier = SubjectKeyIdentifier with Asn1Encoding{TagNumber = 0};

pattern SignedAttributes = set<Attribute>;

pattern UnsignedAttributes = set<Attribute>;

pattern SignatureValue = OctetString;

// section 6.1
type EnvelopedData
{
    CMSVersion version;
    optional OriginatorInfo originatorInfo with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    RecipientInfos recipientInfos;
    EncryptedContentInfo encryptedContentInfo;
    optional UnprotectedAttributes unprotectedAttrs with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

type OriginatorInfo
{
    optional CertificateSet certs with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional RevocationInfoChoices crls with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

type EncryptedContentInfo
{
    ContentType contentType;
    ContentEncryptionAlgorithmIdentifier contentEncryptionAlgorithm;
    optional EncryptedContent encryptedContent with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
}

pattern EncryptedContent = OctetString;

pattern UnprotectedAttributes = set<Attribute>;

// section 6.2
pattern RecipientInfo = KeyTransRecipientInfo | RecipientInfo_KeyAgreeRecipientInfo | RecipientInfo_KEKRecipientInfo | RecipientInfo_OtherRecipientInfo;
pattern RecipientInfo_KeyAgreeRecipientInfo = KeyAgreeRecipientInfo with Asn1Encoding{TagNumber = 1};
pattern RecipientInfo_KEKRecipientInfo = KEKRecipientInfo with Asn1Encoding{TagNumber = 2};
pattern RecipientInfo_PasswordRecipientinfo = PasswordRecipientInfo with Asn1Encoding{TagNumber = 3};
pattern RecipientInfo_OtherRecipientInfo = OtherRecipientInfo with Asn1Encoding{TagNumber = 4};
pattern EncryptedKey = OctetString;

// section 6.2.1
type KeyTransRecipientInfo
{
    CMSVersion version;
    RecipientIdentifier rid;
    KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
    EncryptedKey encryptedKey;
}

pattern RecipientIdentifier = IssuerAndSerialNumber | RecipientIdentifier_SubjectKeyIdentifier;
pattern RecipientIdentifier_SubjectKeyIdentifier = SubjectKeyIdentifier with Asn1Encoding{TagNumber = 0};

// section 6.2.2
type KeyAgreeRecipientInfo
{
    CMSVersion version;
    OriginatorIdentifierOrKey originator with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional UserKeyingMaterial ukm with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Explicit};
    KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
    RecipientEncryptedKeys recipientEncryptedKeys;
}

pattern OriginatorIdentifierOrKeyIssuerAndSerialNumber =
    IssuerAndSerialNumber;

pattern OriginatorIdentifierOrKeySubjectKeyIdentifier =
    SubjectKeyIdentifier
    with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};

pattern OriginatorIdentifierOrKeyOriginatorKey = OriginatorPublicKey
    with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};

pattern OriginatorIdentifierOrKey =
    OriginatorIdentifierOrKeyIssuerAndSerialNumber |
    OriginatorIdentifierOrKeySubjectKeyIdentifier |
    OriginatorIdentifierOrKeyOriginatorKey;

type OriginatorPublicKey
{
    AlgorithmIdentifier Algorithm;
    BitString PublicKey;
}

pattern RecipientEncryptedKeys = array<RecipientEncryptedKey>;

type RecipientEncryptedKey
{
    KeyAgreeRecipientIdentifier Rid;
    EncryptedKey EncryptedKey;
}

pattern KeyAgreeRecipientIdentifierIssuerAndSerialNumber =
    IssuerAndSerialNumber;

pattern KeyAgreeRecipientIdentifierRKeyId = RecipientKeyIdentifier
    with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};

pattern KeyAgreeRecipientIdentifier =
    KeyAgreeRecipientIdentifierIssuerAndSerialNumber |
    KeyAgreeRecipientIdentifierRKeyId;

type RecipientKeyIdentifier
{
    SubjectKeyIdentifier SubjectKeyIdentifier;
    optional DateTime Date;
    optional OtherKeyAttribute Other;
}

pattern SubjectKeyIdentifier = OctetString;

// 6.2.3
type KEKRecipientInfo
{
    CMSVersion Version;
    KEKIdentifier Kekid;
    KeyEncryptionAlgorithmIdentifier KeyEncryptionAlgorithm;
    EncryptedKey EncryptedKey;
}

type KEKIdentifier
{
    OctetString KeyIdentifier;
    optional DateTime Date;
    optional OtherKeyAttribute Other;
}

// 6.2.4
type PasswordRecipientInfo
{
    CMSVersion Version;
    optional KeyDerivationAlgorithmIdentifier KeyDerivationAlgorithm
        with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    KeyEncryptionAlgorithmIdentifier KeyEncryptionAlgorithm;
    EncryptedKey EncryptedKey;
}

// 6.2.5
type OtherRecipientInfo
{
    ObjectIdentifier OriType;
    any OriValue;
}

// 7
type DigestedData
{
    CMSVersion version;
    DigestAlgorithmIdentifier digestAlgorithm;
    EncapsulatedContentInfo encapContentInfo;
    Digest digest;
}

pattern Digest = OctetString;

// 8
type EncryptedData
{
    CMSVersion version;
    EncryptedContentInfo encryptedContentInfo;
    optional UnprotectedAttributes unprotectedAttrs with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

// 9
type AuthenticatedData
{
    CMSVersion version;
    optional OriginatorInfo originatorInfo with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    RecipientInfos recipientInfos;
    MessageAuthenticationCodeAlgorithm macAlgorithm;
    optional DigestAlgorithmIdentifier digestAlgorithm with Asn1Encoding{TagNumber = 1};
    EncapsulatedContentInfo encapContentInfo;
    optional AuthAttributes authAttrs with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
    MessageAuthenticationCode mac;
    optional UnauthAttributes unauthAttrs with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
}

pattern AuthAttributes = set<Attribute>;

pattern UnauthAttributes = set<Attribute>;

pattern MessageAuthenticationCode = OctetString;

// 10.1.1. DigestAlgorithmIdentifier
pattern DigestAlgorithmIdentifier = AlgorithmIdentifier;

// 10.1.2. SignatureAlgorithmIdentifier
pattern SignatureAlgorithmIdentifier = AlgorithmIdentifier;

// 10.1.3
pattern KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier;

// 10.1.4
pattern ContentEncryptionAlgorithmIdentifier = AlgorithmIdentifier;

// 10.1.5
pattern MessageAuthenticationCodeAlgorithm = AlgorithmIdentifier;

// 10.1.6
pattern KeyDerivationAlgorithmIdentifier = AlgorithmIdentifier;

// 10.2.1 RevocationInfoChoices
pattern RevocationInfoChoices = set<RevocationInfoChoice>;

pattern RevocationInfoChoice = CertificateList | RevocationInfoChoice_OtherRevocationInfoFormat;

pattern RevocationInfoChoice_OtherRevocationInfoFormat = OtherRevocationInfoFormat with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};

type OtherRevocationInfoFormat
{
    ObjectIdentifier otherRevInfoFormat;
    any otherRevInfo;
};

// 10.2.2. CertificateChoices
pattern CertificateChoices = X509.Certificate | CertificateChoices_AttributeCertificateV2 | CertificateChoices_OtherCertificateFormat;

// ExtendedCertificate with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit} | // obsolete 
// AtributeCertificateV1 with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit} | // obsolete
pattern CertificateChoices_AttributeCertificateV2 = AttributeCertificateV2 with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
pattern CertificateChoices_OtherCertificateFormat = OtherCertificateFormat with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};

type OtherCertificateFormat
{
    ObjectIdentifier otherCertFormat;
    OctetString otherCert;
}

pattern AttributeCertificateV2 = AttributeCertificate;

// 10.2.3. CertificateSet
pattern CertificateSet = set<CertificateChoices>;

// 10.2.4 IssuerAndSerialNumber
type IssuerAndSerialNumber
{
    Name issuer;
    CertificateSerialNumber serialNumber;
}

pattern CertificateSerialNumber = Integer;

// 10.2.5. CMSVersion
pattern CMSVersion = enum Integer {V0 = 0, V1 = 1, V2 = 2, V3 = 3, V4 = 4, V5 = 5};

// 10.2.6
pattern UserKeyingMaterial = OctetString;

// 10.2.7
type OtherKeyAttribute
{
    ObjectIdentifier KeyAttrId;
    optional any KeyAttr;
}

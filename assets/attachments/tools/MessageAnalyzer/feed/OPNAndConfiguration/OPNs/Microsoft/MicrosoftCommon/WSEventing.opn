protocol WSEventing with 
XmlEncodingDefaults{Namespace = WSEventingNamespace},
Documentation
{
    ProtocolName = "Web Service Eventing",
    ShortName = "WSEventing",
    Description = "WS-Eventing is a protocol for one Web service (called a subscriber) to register interest (called a subscription) with another Web service (called an event source) in receiving messages about events (called notifications or event messages). "
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSEventing", Link = "http://www.w3.org/Submission/WS-Eventing/"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="370732", Date="11/07/2014"}
        ]
};

using SOAP;
using Standard;
using Utility;
using XSD;
using WSA2004;
using Technologies.SOAP;

contract EventSource
{
    accepts virtual operation SubscribeOp
        with SoapMessageInfo {
                Action = WSEventingSubscribeAction,
                ReplyAction = WSEventingSubscribeResponseAction}
    {
        in EventSourceMessageContract.SubscribeRequest Request = req;
        out EventSourceMessageContract.SubscribeResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "SubscribeOp";
        }
    } 
    =
    accepts EventSourceMessageContract.SubscribeRequest{value is var req}
    issues EventSourceMessageContract.SubscribeResponse{value is var res};
           
    accepts operation SubscriptionEndOp
    {
        out SubscriptionEndType SubscriptionEnd;
        
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "SubscriptionEndOp";
        }
    } with SoapMessageInfo {
                ReplyAction = WSEventingSubsriptionEndAction}
}

// Contract: SubscriptionManager
// Description: 
contract SubscriptionManager
{
    accepts virtual operation RenewOp
        with SoapMessageInfo {
                Action = WSEventingRenewAction,
                ReplyAction = WSEventingRenewResponseAction}
    {
        in SubscriptionManagerMessageContract.RenewRequest Request;
        out SubscriptionManagerMessageContract.RenewResponse Response;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "RenewOp";
        }
    }
    =
    accepts SubscriptionManagerMessageContract.RenewRequest{value is var req}
    issues SubscriptionManagerMessageContract.RenewResponse{value is var res};
                
    accepts virtual operation GetStatusOp
        with SoapMessageInfo {
                Action = WSEventingGetStatusAction,
                ReplyAction = WSEventingGetStatusResponseAction}
    {
        in SubscriptionManagerMessageContract.GetStatusRequest Request = req;
        out SubscriptionManagerMessageContract.GetStatusResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "GetStatusOp";
        }
    } 
    =
    accepts SubscriptionManagerMessageContract.GetStatusRequest{value is var req}
    issues SubscriptionManagerMessageContract.GetStatusResponse{value is var res};
                
    accepts virtual operation UnsubscribeOp
        with SoapMessageInfo {
                Action = WSEventingUnsubscribeAction,
                ReplyAction = WSEventingUnsubscribeResponseAction}
    {
        in SubscriptionManagerMessageContract.UnsubscribeRequest Request = req;
        out SubscriptionManagerMessageContract.UnsubscribeResponse Response = res;
        
        override string ToString()
        {
            return GetExtendingSummaryFromSoapOperation(this.Origins[0], this.Origins[1]) + "UnsubscribeOp";
        }
    } 
    =
    accepts SubscriptionManagerMessageContract.UnsubscribeRequest{value is var req}
    issues SubscriptionManagerMessageContract.UnsubscribeResponse{value is var res};
}

// Intermidiate layer
endpoint EventSourceIntermidiateEndpoint 
    over SOAP.Server 
    provides mutable EventSourceMessageContract
    issues mutable EventSource.SubscriptionEndOp
    consumes mutable EventSource;
    
endpoint SubscriptionManagerIntermidiateEndpoint 
    over SOAP.Server 
    provides mutable SubscriptionManagerMessageContract
    consumes mutable SubscriptionManager;

autostart actor EventSourceIntermidiateActor (SOAP.Server node)
{
    // Subscribe request;
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEventingSubscribeAction
    {
        switch (soap.Body)
        {
            case m:EventSourceMessageContract.SubscribeRequest from XmlDecoder<EventSourceMessageContract.SubscribeRequest> =>
                dispatch (endpoint EventSourceIntermidiateEndpoint over node) accepts m;
            default =>
                ThrowDecodingException("WSEventing", "SubscribeRequest");
        }    
    } 
    
    // Subscribe response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEventingSubscribeResponseAction
    {
        switch (soap.Body)
        {
            case response:EventSourceMessageContract.SubscribeResponse from XmlDecoder<EventSourceMessageContract.SubscribeResponse> =>
                dispatch (endpoint EventSourceIntermidiateEndpoint over node) issues response;      
            default =>
                ThrowDecodingException("WSEventing", "SubscribeResponse");
        }    
    }
    
    // SubscriptionEnd, single message in this operation.
    // SubscriptionEnd is "Notification Operation", service endpoint sends "SubscriptionEnd" using HTTP post request,
    // in OPN, the "node" endpoint is server role in SOPA/HTTP accepting underlying http request.
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEventingSubsriptionEndAction
    {
        switch (soap.Body)
        {
            case m:EventSource.SubscriptionEndOp from XmlDecoder<EventSource.SubscriptionEndOp> =>
                dispatch (endpoint EventSourceIntermidiateEndpoint over node) issues m; 
            default =>
                ThrowDecodingException("WSEventing", "SubscriptionEndOp");
        }
    }
}

autostart actor SubscriptionManagerIntermidiateActor(SOAP.Server node)
{
    // Renew request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEventingRenewAction
    {
        switch (soap.Body)
        {
            case m:SubscriptionManagerMessageContract.RenewRequest from XmlDecoder<SubscriptionManagerMessageContract.RenewRequest> =>
                dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) accepts m; 
            default =>
                ThrowDecodingException("WSEventing", "RenewRequest");
        }    
    } 
    
    // Renew response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEventingRenewResponseAction
    {
        switch (soap.Body)
        {
            case m:SubscriptionManagerMessageContract.RenewResponse from XmlDecoder<SubscriptionManagerMessageContract.RenewResponse> =>
                dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) issues m; 
            default =>
                ThrowDecodingException("WSEventing", "RenewResponse");
        }    
    }
    
    // GetStatus request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEventingGetStatusAction
    {
        switch (soap.Body)
        {
            case m:SubscriptionManagerMessageContract.GetStatusRequest from XmlDecoder<SubscriptionManagerMessageContract.GetStatusRequest> =>
                dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) accepts m; 
            default =>
                ThrowDecodingException("WSEventing", "GetStatusRequest");
        }    
    } 
    
    // GetStatus response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEventingGetStatusResponseAction
    {
        switch (soap.Body)
        {
            case m:SubscriptionManagerMessageContract.GetStatusResponse from XmlDecoder<SubscriptionManagerMessageContract.GetStatusResponse> =>
                dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) issues m; 
            default =>
                ThrowDecodingException("WSEventing", "GetStatusResponse");
        }    
    }
    
    // Unsubscribe request
    process node accepts soap:SOAP.SoapMessage where soap.WsaAction == WSEventingUnsubscribeAction
    {
        switch (soap.Body)
        {
            case m:SubscriptionManagerMessageContract.UnsubscribeRequest from XmlDecoder<SubscriptionManagerMessageContract.UnsubscribeRequest> =>
                dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) accepts m; 
            default =>
                ThrowDecodingException("WSEventing", "UnsubscribeRequest");
        }
    }
    
    // Unsubscribe response
    process node issues soap:SOAP.SoapMessage where soap.WsaAction == WSEventingUnsubscribeResponseAction
    {
        SubscriptionManagerMessageContract.UnsubscribeResponse unsubscribeResponse = new SubscriptionManagerMessageContract.UnsubscribeResponse{};
        dispatch (endpoint SubscriptionManagerIntermidiateEndpoint over node) issues unsubscribeResponse; 
    }
}

// messae contract    
contract SubscriptionManagerMessageContract
{
    accepts message RenewRequest
    {
        RenewType Renew with XmlEncoding{Namespace = WSEventingNamespace};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "RenewRequest"
            + (this.Renew.Expires == nothing ? "" : ", Expires: " + (this.Renew.Expires as string));
        }
    }
    issues message RenewResponse
    {
        RenewResponseType RenewResponse with XmlEncoding{Namespace = WSEventingNamespace};
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "RenewResponse"
            + (this.RenewResponse.Expires == nothing ? "" : ", Expires: " + (this.RenewResponse.Expires as string));
        }
    }
    accepts message GetStatusRequest
    {
        GetStatusType GetStatus;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetStatusRequest";
        }     
    }
    issues message GetStatusResponse
    {
        GetStatusResponseType GetStatusResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "GetStatusResponse" 
            + (this.GetStatusResponse.Expires == nothing ? "" : ", Expires: " + (this.GetStatusResponse.Expires as string));
        } 
    }
    accepts message UnsubscribeRequest
    {
        UnsubscribeType Unsubscribe;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "UnsubscribeRequest";
        } 
    }
    issues message UnsubscribeResponse
    {
        UnsubscribeResponseType UnsubscribeResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "UnsubscribeResponse";
        }
    }
};

contract EventSourceMessageContract
{
    accepts message SubscribeRequest
    {
        SubscribeType Subscribe;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "SubscribeRequest" 
            + (this.Subscribe.Expires == nothing ? "" : ", Expires: " + (this.Subscribe.Expires as string))
            + (this.Subscribe.Filter == nothing ? "" : ", Filter: " + (this.Subscribe.Filter as string));
        } 
    }
    issues message SubscribeResponse
    {
        SubscribeResponseType SubscribeResponse;
        override string ToString()
        {
            return GetSoapExtensionPrefix(this) + "SubscribeResponse"
            + (this.SubscribeResponse.Expires == nothing ? "" : ", Expires: " + (this.SubscribeResponse.Expires as string));
        } 
    }
};

// Types and golbal elements
type DeliveryType
{
    optional NotifyTo NotifyTo with XmlEncoding{Name = "NotifyTo", Namespace = WSEventingNamespace};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Any};
    optional XSAnyURI Mode with XmlEncoding{Name = "Mode", Kind = XmlKind.Attribute, Namespace = ""};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Any};
} with XmlEncoding{Order = XmlOrderIndicator.All};

pattern NotifyTo = EndpointReferenceType
    with XmlEncoding{Name = "NotifyTo", Namespace = WSEventingNamespace};

pattern NonNegativeDurationType = XSDuration
    with XmlEncoding{Name = "NonNegativeDurationType"};
    
pattern ExpirationType = NonNegativeDurationType | XSDatatime 
    with XmlEncoding{Name = "ExpirationType"};
    
type FilterType
{
    optional XSAnyURI Dialect with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional string Text with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type LanguageSpecificStringType
{
    string Base with XmlEncoding{Kind = XmlKind.Text};
    XSLanguage Language with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

// Subscribe request
pattern Subscribe = SubscribeType
    with XmlEncoding{Name = "Subscribe"};

type SubscribeType
{
    optional EndpointReferenceType EndTo with XmlEncoding{Name = "EndTo"};
    DeliveryType Delivery with XmlEncoding{Name = "Delivery"};
    optional ExpirationType Expires with XmlEncoding{Name = "Expires"};
    optional FilterType Filter with XmlEncoding{Name = "Filter"};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

pattern Identifier = XSAnyURI   
    with XmlEncoding{Name = "Identifier"};

type SubscribeResponseType
{
    EndpointReferenceType SubscriptionManager with XmlEncoding{Kind = XmlKind.Element};
    ExpirationType Expires with XmlEncoding{Name = "Expires"};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};
    
// Used in a fault if there's an unsupported dialect
pattern SupportedDialect = XSAnyURI
    with XmlEncoding{Name = "SupportedDialect"};

// Used in a fault if there's an unsupported delivery mode
pattern SupportedDeliveryMode = XSAnyURI
    with XmlEncoding{Name = "SupportedDeliveryMode"};

type RenewType
{
    optional ExpirationType Expires with XmlEncoding{Name = "Expires"};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

type RenewResponseType
{
    optional ExpirationType Expires with XmlEncoding{Name = "Expires"};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

type GetStatusType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// GetStatus response
pattern GetStatusResponse = GetStatusResponseType
    with XmlEncoding{Name = "GetStatusResponse"};

type GetStatusResponseType
{
    optional ExpirationType Expires with XmlEncoding{Name = "Expires"};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

type UnsubscribeType
{
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

// count(/s:Envelope/s:Body/*) = 0 for Unsubscribe response 
type UnsubscribeResponseType
{
    // Empty body
}

type SubscriptionEndType
{
    EndpointReferenceType SubscriptionManager with XmlEncoding{Name = "SubscriptionManager"};
    OpenSubscriptionEndCodeType Status with XmlEncoding{Name = "Status"};
    optional array<LanguageSpecificStringType> Reason with XmlEncoding{Name = "Reason", Kind = XmlKind.Element};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
} with XmlEncoding{AnonymousType = true};

pattern SubscriptionEndCodeType = enum XSAnyURI
{
    DeliveryFailure     = "http://schemas.xmlsoap.org/ws/2004/08/eventing/DeliveryFailure",
    SourceShuttingDown  = "http://schemas.xmlsoap.org/ws/2004/08/eventing/SourceShuttingDown",
    SourceCancelling    = "http://schemas.xmlsoap.org/ws/2004/08/eventing/SourceCancelling",    
};

pattern OpenSubscriptionEndCodeType = SubscriptionEndCodeType | XSAnyURI;

pattern Eventsource = XSBoolean with XmlEncoding{Name = "EventSource"};

const string WSEventingNamespace = "http://schemas.xmlsoap.org/ws/2004/08/eventing";

// Subscribe
const string WSEventingSubscribeAction = WSEventingNamespace + "/Subscribe";
const string WSEventingSubscribeResponseAction = WSEventingNamespace + "/SubscribeResponse";

// SubscriptionEnd
const string WSEventingSubsriptionEndAction = WSEventingNamespace + "/SubscriptionEnd";

// Renew
const string WSEventingRenewAction = WSEventingNamespace + "/Renew";
const string WSEventingRenewResponseAction = WSEventingNamespace + "/RenewResponse";

// GetStatus
const string WSEventingGetStatusAction = WSEventingNamespace + "/GetStatus";
const string WSEventingGetStatusResponseAction = WSEventingNamespace + "/GetStatusResponse";

// Unsubscribe
const string WSEventingUnsubscribeAction = WSEventingNamespace + "/Unsubscribe";
const string WSEventingUnsubscribeResponseAction = WSEventingNamespace + "/UnsubscribeResponse";

module WSA2004 with
XmlEncodingDefaults{Namespace = WSAddressing2004Namespace},
Documentation
{
    ProtocolName = "Web Service Addressing 2004",
    ShortName = "WSA2004",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSA2004", Link = "http://www.w3.org/Submission/ws-addressing/"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using XSD;

const string WSAddressing2004Namespace = "http://schemas.xmlsoap.org/ws/2004/08/addressing";
const string WSAddressing200403Namespace = "http://schemas.xmlsoap.org/ws/2004/03/addressing";
const string WSAddressing2004Policy = "http://schemas.xmlsoap.org/ws/2002/12/policy";

pattern EndpointReference = EndpointReferenceType
    with XmlEncoding{Name = "EndpointReference"};

type EndpointReferenceType
{
    AttributedURI Address with XmlEncoding{Name = "Address"};
    optional xml ReferenceProperties with XmlEncoding{Name = "ReferenceProperties"};
    optional xml ReferenceParameters with XmlEncoding{Name = "ReferenceParameters"};
    optional AttributedQName PortType with XmlEncoding{Name = "PortType"};
    optional ServiceNameType ServiceName with XmlEncoding{Name = "ServiceName"};
    optional xml Policy with XmlEncoding{Name = "Policy", Namespace = WSAddressing2004Policy};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type EndpointReferenceType03
{
    AttributedURI Address with XmlEncoding{Name = "Address", Namespace = WSAddressing200403Namespace};
    optional xml ReferenceProperties with XmlEncoding{Name = "ReferenceProperties", Namespace = WSAddressing200403Namespace};
    optional AttributedQName PortType with XmlEncoding{Name = "PortType", Namespace = WSAddressing200403Namespace};
    optional ServiceNameType ServiceName with XmlEncoding{Name = "ServiceName", Namespace = WSAddressing200403Namespace};
    optional array<xml> AnyElements with XmlEncoding{IsAny = true, Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type AttributedURI
{
    //optional string MustUnderstand with XmlEncoding{Name = "mustUnderstand", Kind = XmlKind.Attribute, Namespace = "http://www.w3.org/2003/05/soap-envelope"};
    XSAnyURI URI with XmlEncoding{Kind = XmlKind.Text};
}

type AttributedQName
{
    XSQName QName with XmlEncoding{Kind = XmlKind.Text};
}

type ServiceNameType
{
    XSNCName PortName with XmlEncoding{Kind = XmlKind.Attribute};
    XSQName Name with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

pattern MessageID = AttributedURI with XmlEncoding{Name = "MessageID"};

pattern RelatesTo = Relationship with XmlEncoding{Name = "RelatesTo"};

type Relationship
{
    XSAnyURI Base with XmlEncoding{Kind =  XmlKind.Text};
    optional RelationshipType RelationshipType = RelationshipTypeValues.Reply
        with XmlEncoding{Name = "RelationshipType", Kind = XmlKind.Attribute};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

pattern RelationshipType = RelationshipTypeValues | XSQName;

pattern RelationshipTypeValues = enum XSQName
{
    Reply = "Reply",
};

pattern ReplyTo = EndpointReferenceType with XmlEncoding{Name = "ReplyTo"};
pattern ReplyTo03 = EndpointReferenceType03 with XmlEncoding{Name = "ReplyTo", Namespace = WSAddressing200403Namespace};
     
pattern From = EndpointReferenceType with XmlEncoding{Name = "From"};

pattern FaultTo = EndpointReferenceType with XmlEncoding{Name = "FaultTo"};

pattern To = AttributedURI with XmlEncoding{Name = "To"};

pattern Action = AttributedURI with XmlEncoding{Name = "Action"};

pattern ReplyAfter = ReplyAfterType with XmlEncoding{Name = "ReplyAfter"};

type ReplyAfterType
{
    XSNonNegativeInteger Base with XmlEncoding{Kind =  XmlKind.Text};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

pattern RetryAfter = RetryAfterType with XmlEncoding{Name = "RetryAfter"};

type RetryAfterType
{
    XSNonNegativeInteger Base with XmlEncoding{Kind =  XmlKind.Text};
    optional array<xml> AnyAttributes with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

pattern FaultSubcodeValues = enum XSQName
{
    InvalidMessageInformationHeader = "InvalidMessageInformationHeader",
    MessageInformationHeaderRequired = "MessageInformationHeaderRequired",
    DestinationUnreachable = "DestinationUnreachable",
    ActionNotSupported = "ActionNotSupported",
    EndpointUnavailable = "EndpointUnavailable",
};

protocol MSQoE with
Documentation
{
    ProtocolName = "Quality of Experience Monitoring Server Protocol",
    ShortName = "MS-QoE",
    DocumentName = "MS-QoE",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-QoE", Version = "4.6"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using Standard;
using SkypeforBusinessShared;

endpoint Server 
	over SIP.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;
bool IsQoeReq = false;

autostart actor ActorOverSIP(SIP.Server node)
{	
	process node accepts sipMsg:SIP.Request where IsQoeReqMsg(sipMsg)
    {   
		RequestMessage msg = new RequestMessage(sipMsg);
		IsQoeReq = true;		
		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Response where IsQoeRspMsg(sipMsg)
    {  
		ResponseMessage msg = new ResponseMessage(sipMsg);
		IsQoeReq = false;
		dispatch (endpoint Server over node) issues msg;
    }
}

bool IsQoeReqMsg(SIP.Request sipMsg)
{	
	if ((sipMsg.Method == "SERVICE") && (TryGetHeaderValue("Content-Type", sipMsg.Headers) == "application/vq-rtcpxr+xml"))			
	{
		return true;
	}	
	else
	{	
		return false;
	}
}

bool IsQoeRspMsg(SIP.Response sipMsg)
{	
	string cSeq = TryGetHeaderValue("CSeq", sipMsg.Headers);
	
	if ((cSeq == "SERVICE") && IsQoeReq) 
	{
		return true;
	}
	else
	{
		return false;
	}
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "Content-Type"], this);
	}
		
	override string ToString()
	{
		return "QoE Metrics Request";
	}
}

message ResponseMessage : SipResponseMessage
{			
	ResponseMessage(SIP.Response sipRspMsg)
	{	
		InitializeSIPRsp(sipRspMsg, ["From", "To", "Ms-Diagnostics"], this);	
	}
		
	override string ToString()
	{
		string msDiagnosticsValue =  TryGetErrorDetails("Ms-Diagnostics", this.Headers);
		
		if (msDiagnosticsValue == null)
		{
			return Format("QoE Metrics Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
		}
		else
		{
			return "QoE Metrics Response, " + msDiagnosticsValue;
		}
	}
}
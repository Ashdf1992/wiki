protocol MSRTP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Real-time Transport Protocol (RTP) Extensions",
    ShortName = "MS-RTP",
    DocumentName = "MS-RTP",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-RTP", Version = "4.4"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Standard;
using RTP;

endpoint Node over RTP.Node accepts RtpPacket;

autostart actor ActorOverRTP(RTP.Node node) 
{
    process node accepts d:RTP.Datagram where IsMsRTP(d)
    {
        RtpPacket packet = new RtpPacket(d);
		dispatch (endpoint Node over node) accepts packet;
    }
}

bool IsMsRTP(RTP.Datagram rtpDatagram)
{
	if (rtpDatagram == null)
	{
		return false;
	}
	else 
	{
		byte payloadType = rtpDatagram.PayloadType;

		if (payloadType == null)
		{
			return false;
		}
		else
		{
			foreach (byte number in PayloadTypeList)
			{
				if (payloadType == number)
				{
					return true;
				}
				else if (payloadType < number)
				{
					return false;
				}
			}
			return false;
		}
	}
}

message RtpPacket
{
	byte Version with BinaryEncoding{Width = 2};
    bool Padding with BinaryEncoding{Width = 1};
    bool Extension with BinaryEncoding{Width = 1};
    byte CSRCCount  with BinaryEncoding{Width = 4};
    bool Marker with BinaryEncoding{Width = 1};
    byte PayloadType with BinaryEncoding{Width = 7};
    ushort SequenceNumber;
    uint TimeStamp;
    uint SSRC;
    optional [|CSRCCount != 0|] array<uint> CSRCList with BinaryEncoding{Length = CSRCCount};
    optional HeaderExtension ExtensionHead with Encoding{Ignore = true};
    optional binary Payload with Encoding{Ignore = true};
    optional any Paddingload with Encoding{Ignore = true};
    
	RtpPacket(RTP.Datagram d)
	{
		this.Version = d.Version;
		this.Padding = d.Padding;
		this.Extension = d.Extension;
		this.CSRCCount = d.CSRCCount;
		this.Marker = d.Marker;
		this.PayloadType = d.PayloadType;
		this.SequenceNumber = d.SequenceNumber;
		this.TimeStamp = d.TimeStamp;
		this.SSRC = d.SSRC;
		this.CSRCList = d.CSRCList;
		this.ExtensionHead = d.ExtensionHead;
		this.Payload = d.Payload;
		this.Paddingload = d.Paddingload;
	}

    override string ToString()
    {
        return "PayloadType: " + PayloadTypeToString(PayloadType) + ", SSRC: " + (SSRC.ToString()) + ", CSRCCount: " + (CSRCCount.ToString()) + ", " + (Marker?"Mark":"NotMark");
    }
}

// Session 2.2.1 RTP Packets
string PayloadTypeToString(byte typeValue)
{
    switch (typeValue)
    {    
		// Audio payload type
        case 0   => return "Audio, Codec: G.711 µ-Law, ClockRate: 8000, P-Times: 10,20,40,60, Channels: 1";
		case 3   => return "Audio, Codec: GSM 6.10, ClockRate: 8000, P-Times: 20,40,60, Channels: 1";
        case 4   => return "Audio, Codec: G.723.1, ClockRate: 8000, P-Times: 30,60,90, Channels: 1";
        case 8   => return "Audio, Codec: G.711 A-Law, ClockRate: 8000, P-Times: 10,20,40,60, Channels: 1";
        case 9   => return "Audio, Codec: G.722, ClockRate: 8000, P-Times: 20,40,60, Channels: 1";
        case 13  => return "Audio, Codec: Comfort Noise, 8000, Channels: 1";
        case 111 => return "Audio, Codec: Siren, ClockRate: 16000, P-Times: 20, 40, 60, 100, 200, Channels: 1";
		case 112 => return "Audio, Codec: G.722.1, ClockRate: 16000, P-Times: 20,40,60, Channels: 1";
		case 114 => return "Audio, Codec: RT Audio, ClockRate: 16000, P-Times: 20,40,60, Channels: 1";
        case 115 => return "Audio, Codec: RT Audio, ClockRate: 8000, P-Times: 20,40,60, Channels: 1";
        case 116 => return "Audio, Codec: G.726, ClockRate: 8000, P-Times: 20,40,60, Channels: 1";
		case 117 => return "Audio, Codec: G.722, ClockRate: 8000, P-Times: 20,40,60, Channels: 2";
		case 118 => return "Audio, Codec: Comfort Noise, ClockRate: 16000, Channels: 1";
		
		// Vido payload type
		case 34  => return "Video, Codec: H263, ClockRate: 90000";
        case 121 => return "Video, Codec: RT Video, ClockRate: 90000";
		case 122 => return "Video, Codec: H264, ClockRate: 90000";
		case 123 => return "Video, Codec: H264 FEC, ClockRate: 90000";

		// Data payload type
		case 127 => return "Data, Codec: x-data, ClockRate: 90000";

        default => return ("Unknown RTP Type (" + (typeValue.ToString()) + ")");
    }
}

// Payload type list should be sorted from the smallest to largest
const array<byte> PayloadTypeList = [0, 3, 4, 8, 9, 13, 34, 111, 112, 114, 115, 116, 117, 118, 121, 122, 123, 127];
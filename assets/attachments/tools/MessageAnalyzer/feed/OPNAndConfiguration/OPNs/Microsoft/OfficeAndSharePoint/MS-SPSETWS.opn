protocol MSSPSETWS with
Documentation
{
    ProtocolName = "SharePoint Subscription Settings Web Service Protocol",
    ShortName = "MS-SPSETWS",
    DocumentName = "MS-SPSETWS",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-SPSETWS", Version = "2.2"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSSPSETWS";

const map<string, string> WsaActionsMap =
{
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySet" -> "GetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetResponse" -> "GetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetSPSubscriptionSettingsActionFaultFault" -> "GetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetPropertySet" -> "SetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetPropertySetResponse" -> "SetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetPropertySetSPSubscriptionSettingsActionFaultFault" -> "SetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeletePropertySet" -> "DeletePropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeletePropertySetResponse" -> "DeletePropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeletePropertySetSPSubscriptionSettingsActionFaultFault" -> "DeletePropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetIds" -> "GetPropertySetIds",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetIdsResponse" -> "GetPropertySetIds",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetIdsSPSubscriptionSettingsActionFaultFault" -> "GetPropertySetIds",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetMapping" -> "SetMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetMappingResponse" -> "SetMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetMappingSPSubscriptionSettingsActionFaultFault" -> "SetMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteMapping" -> "DeleteMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteMappingResponse" -> "DeleteMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteMappingSPSubscriptionSettingsActionFaultFault" -> "DeleteMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionPropertySet" -> "GetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionPropertySetResponse" -> "GetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionPropertySetSPSubscriptionSettingsActionFaultFault" -> "GetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetSubscriptionPropertySet" -> "SetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetSubscriptionPropertySetResponse" -> "SetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetSubscriptionPropertySetSPSubscriptionSettingsActionFaultFault" -> "SetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionMetadata" -> "GetSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionMetadataResponse" -> "GetSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionMetadataSPSubscriptionSettingsActionFaultFault" -> "GetSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/PutSubscriptionMetadata" -> "PutSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/PutSubscriptionMetadataResponse" -> "PutSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/PutSubscriptionMetadataSPSubscriptionSettingsActionFaultFault" -> "PutSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionNextAppSiteDomainId" -> "GetSubscriptionNextAppSiteDomainId",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionNextAppSiteDomainIdResponse" -> "GetSubscriptionNextAppSiteDomainId",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionNextAppSiteDomainIdSPSubscriptionSettingsActionFaultFault" -> "GetSubscriptionNextAppSiteDomainId",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteSubscriptionMetadata" -> "DeleteSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteSubscriptionMetadataResponse" -> "DeleteSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteSubscriptionMetadataSPSubscriptionSettingsActionFaultFault" -> "DeleteSubscriptionMetadata"
};

const map<string, string> SoapActionsMap = {
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySet" -> "GetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetPropertySet" -> "SetPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeletePropertySet" -> "DeletePropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetPropertySetIds" -> "GetPropertySetIds",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetMapping" -> "SetMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteMapping" -> "DeleteMapping",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionPropertySet" -> "GetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/SetSubscriptionPropertySet" -> "SetSubscriptionPropertySet",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionMetadata" -> "GetSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/PutSubscriptionMetadata" -> "PutSubscriptionMetadata",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/GetSubscriptionNextAppSiteDomainId" -> "GetSubscriptionNextAppSiteDomainId",
    "http://tempuri.org/ISubscriptionSettingsServiceApplication/DeleteSubscriptionMetadata" -> "DeleteSubscriptionMetadata"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    optional string WsaAction;
    optional string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        if (soapMsg.WsaAction != "")
            this.WsaAction = soapMsg.WsaAction;
            
        if (soapMsg.SoapAction != "")
            this.SoapAction = soapMsg.SoapAction;
            
        this.ContainsFault = soapMsg.ContainsFault;

        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        if (this.WsaAction is wsaAcction:string)
            return WsaActionsMap[wsaAcction];
            
        if (this.SoapAction is soapAcction:string)
            return SoapActionsMap[soapAcction];
            
        return "Unknown";
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}
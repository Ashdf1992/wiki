protocol MSCONFAS with
Documentation
{
    ProtocolName = "Centralized Conference Control Protocol: Instant Messaging Extensions",
    ShortName = "MS-CONFAS",
    DocumentName = "MS-CONFAS",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-CONFAS", Version = "3.3"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Standard;
using MSCONFBAS;

endpoint Server 
	over MSCONFBAS.Server
	accepts RequestMessage issues ResponseMessage;
	
client endpoint Client connected to Server;

autostart actor ActorOverConfbase(MSCONFBAS.Server node)
{	
    process node accepts confbasMsg:MSCONFBAS.RequestMessage where (confbasMsg.Body != nothing && IsConfas(confbasMsg.Body as xml))
    {       	
		RequestMessage msg = new RequestMessage(confbasMsg);
		dispatch (endpoint Server over node) accepts msg;
    }	
	
	process node issues confbasMsg:MSCONFBAS.ResponseMessage where (confbasMsg.Body != nothing && IsConfas(confbasMsg.Body as xml))
    {       	
		ResponseMessage msg = new ResponseMessage(confbasMsg);
		dispatch (endpoint Server over node) issues msg;
    }	
}

bool IsConfas(xml body)
{	
	if ((body == nothing) || (body == null))
	{
		return false;
	}
	else
	{		
		array<xml> addUserMediaLabelXmls = body select xpath{//addUser/user/endpoint/media/label};
		
		if ((addUserMediaLabelXmls == null) || (addUserMediaLabelXmls.Count != 1))
		{
			return false;
		}
		else if (addUserMediaLabelXmls[0].Value == "applicationsharing")
		{	
			return true;
		}
		else
		{
			return false;			
		}
	}	 		
}

message RequestMessage
{
	xml Body;
	
	RequestMessage(MSCONFBAS.RequestMessage confbasReqMsg)
	{
		this.Body = confbasReqMsg.Body as xml;
	}

	override string ToString()
	{	
		array<xml> addUserMediaLabelXmls = this.Body select xpath{//addUser/user/endpoint/media/label};

		if ((addUserMediaLabelXmls == null) || (addUserMediaLabelXmls.Count == 0))
		{
			return "Invalid Request Message: Missing Label Element for media Element in Message Body";
		}
		else if (addUserMediaLabelXmls.Count > 1)
		{	
			return "Invalid Request Message: More Than One Label Elements for media Element in Message Body";
		}
			
		array<xml> joiningMethodXmls = this.Body select xpath{//addUser/user/endpoint/joining-method};
		
		if (joiningMethodXmls == null || joiningMethodXmls.Count == 0)
		{
			return "Invalid Request Message: Missing joining-method Element for media Element in Message Body";
		}
		else
		{
			foreach (xml joiningMethodXml in joiningMethodXmls)
			{
				if (joiningMethodXml.Value == "dialed-in")
				{
					return "Application Sharing addUser Dial-In Request";
				}
			}
			return  "Application Sharing addUser Request";
		}		
	}		
}
	
message ResponseMessage
{
	xml Body;

	ResponseMessage(MSCONFBAS.ResponseMessage confbasRspMsg)
	{
		this.Body = confbasRspMsg.Body as xml;
	}

	override string ToString()
	{	
		array<xml> codeXmls = this.Body select xpath{//response/@code};

		if ((codeXmls == null) || (codeXmls.Count == 0))
		{
			return "Invalid Response Message: Missing code Attribute for response Element in Message Body";
		}
		else if (codeXmls.Count > 1)
		{
			return "Invalid Response Message: More Than One code Attribute for response Element in Message Body";
		}

		string code = null;	
		code = codeXmls[0].Value as string;

		if (code == null)
		{
			return "Invalid Response Message: Value of code Attribute for response Element in Message Body is Not string";
		}

		array<xml> addUserMediaLabelXmls = this.Body select xpath{//addUser/user/endpoint/media/label};

		if ((addUserMediaLabelXmls == null) || (addUserMediaLabelXmls.Count == 0))
		{
			return "Invalid Response Message: Missing Label Element for media Element in Message Body";
		}	
		else if (addUserMediaLabelXmls.Count > 1)
		{	
			return "Invalid Response Message: More Than One Label Elements for media Element in Message Body";
		}
			
		array<xml> joiningMethodXmls = this.Body select xpath{//addUser/user/endpoint/joining-method};

		if (joiningMethodXmls == null || joiningMethodXmls.Count == 0)
		{
			return "Invalid Response Message: Missing joining-method Element for endpoint Element in Message Body";
		}
		else
		{
			foreach (xml joiningMethodXml in joiningMethodXmls)
			{
				if (joiningMethodXml.Value == "dialed-in")
				{
					array<xml> errorXml = this.Body select xpath{//addUser/@reason};

					if ((errorXml == null) || (errorXml.Count == 0))
					{
						return "Application Sharing addUser Dial-In Response, " + code;
					}
					else if (errorXml.Count > 1)
					{
						return "Invalid Message: More Than One reason Attribute for addUser Element in Message Body";
					}
					else
					{
						string errorMessage = errorXml[0].Value as string;

						if (errorMessage != null)
						{
							return "Application Sharing addUser Dial-In Response, " + code + ": " + errorMessage;
						}
						else
						{
							return "Application Sharing addUser Dial-In Response, Invalid Message: reason Attribute Value Is Not String, " + code;
						}
					}
				}
			}
		}
		return "Application Sharing addUser Response";
	}
}
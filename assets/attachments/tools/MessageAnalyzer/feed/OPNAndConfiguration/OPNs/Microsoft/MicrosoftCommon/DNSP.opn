protocol DNSP
with Standard.Documentation
{
    ProtocolName = "Domain Name Service (DNS) Server Management Protocol",
    ProtocolType = "rpc",
    ShortName = "DNSP",
    DocumentName = "MS-DNSP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-DNSP", Version = "35.0", Date = "03/13/2019", ProgramName = ProgramName.WSPP}
        ],
    RevisionSummary = 
        [   
            new Revision {Class = RevisionClass.Major, Version = "381282", Date = "09/22/2015"}
        ]
};

using Technologies.IDL;
using DTYP;
using Utility;
using ERREF;
using MSRPCE;
using Diagnostics;
using MicrosoftCommonResources;

endpoint DnsServerService over MSRPCE.Server provides DnsServer;

contract DnsServer
{
    accepts operation R_DnssrvOperation
    {
        in optional handle_t hBindingHandle;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DWORD dwContext;
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcTypeId dwTypeId with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<DWORD>()};
        in DNSSRV_RPC_UNION[dwTypeId] pData
               with Technologies.IDL.IDL{Switch_Is = dwTypeId};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvOperation, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", dwTypeId: " + EnumToString(dwTypeId, "DNSP.DnssrvRpcTypeId") +
                ", pwszServerName: " + pwszServerName.ToString() +
                ", pszZone: " + pszZone.ToString() +
                ", dwContext: " + dwContext.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation R_DnssrvQuery
    {
        in optional handle_t hBindingHandle;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out DnssrvRpcTypeId pdwTypeId 
            with Technologies.IDL.IDL{IndirectionLevel = 1} 
            with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        out DNSSRV_RPC_UNION[pdwTypeId] ppData
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeId, PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvQuery, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", pdwTypeId: " + EnumToString(pdwTypeId, "DNSP.DnssrvRpcTypeId") +
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation R_DnssrvComplexOperation
    {
        in optional handle_t hBindingHandle;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcTypeId dwTypeIn with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<DWORD>()};
        in DNSSRV_RPC_UNION[dwTypeIn] pDataIn
               with Technologies.IDL.IDL{Switch_Is = dwTypeIn};
        out DnssrvRpcTypeId pdwTypeOut 
            with Technologies.IDL.IDL{IndirectionLevel = 1}
            with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        out DNSSRV_RPC_UNION[pdwTypeOut] ppDataOut
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeOut, PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvComplexOperation, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", dwTypeIn: " + EnumToString(dwTypeIn, "DNSP.DnssrvRpcTypeId") + 
                ", pdwTypeOut: " + EnumToString(pdwTypeOut, "DNSP.DnssrvRpcTypeId") + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
    
    accepts operation R_DnssrvEnumRecords
    {
        in optional handle_t hBindingHandle;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszStartChild
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DNS_RECORD_TYPE wRecordType with Encoding{Decoder = PatternDecoder<DNS_RECORD_TYPE>, SourcePattern = TypeOf<WORD>()};
        in DWORD fSelectFlag;
        in string pszFilterStart
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszFilterStop
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out IDLUlong pdwBufferLength
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<ResourceRecord> ppBuffer with IDL {Size_is = [null, pdwBufferLength], IndirectionLevel = 2},
                                     Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvEnumRecords, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszZone: " + pszZone.ToString() +
                ", pszNodeName: " + pszNodeName.ToString() +
                ", pszStartChild: " + pszStartChild.ToString() +
                ", wRecordType: " + EnumToString(wRecordType, "DNSP.DNS_RECORD_TYPE") + 
                ", pwszServerName: " + pwszServerName.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 3};
    
    accepts operation R_DnssrvUpdateRecord
    {
        in optional handle_t hBindingHandle;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL
                        {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
        in DnssrvRpcRecord pAddRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DnssrvRpcRecord pDeleteRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvUpdateRecord, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszZone: " + pszZone.ToString() +
                ", pszNodeName: " + pszNodeName.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 4};
    
    accepts operation R_DnssrvOperation2
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvOperation2", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DWORD dwContext;
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcTypeId dwTypeId with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<DWORD>()};
        in DNSSRV_RPC_UNION[dwTypeId] pData
               with Technologies.IDL.IDL{Switch_Is = dwTypeId};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvOperation2, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", dwTypeId: " + EnumToString(dwTypeId, "DNSP.DnssrvRpcTypeId") +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", dwContext: " + dwContext.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 5};
    
    accepts operation R_DnssrvQuery2
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvQuery2", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out DnssrvRpcTypeId pdwTypeId with Technologies.IDL.IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        out DNSSRV_RPC_UNION[pdwTypeId] ppData
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeId, PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvQuery2, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", pdwTypeId: " + EnumToString(pdwTypeId, "DNSP.DnssrvRpcTypeId") + 
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() +
                ", pszZone: " + pszZone.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 6};
    
    accepts operation R_DnssrvComplexOperation2
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvComplexOperation2", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcTypeId dwTypeIn with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<DWORD>()};
        in DNSSRV_RPC_UNION[dwTypeIn] pDataIn
               with Technologies.IDL.IDL{Switch_Is = dwTypeIn};
        out DnssrvRpcTypeId pdwTypeOut with Technologies.IDL.IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        out DNSSRV_RPC_UNION[pdwTypeOut] ppDataOut
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeOut, PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvComplexOperation2, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszOperation: " + pszOperation.ToString() + 
                ", dwTypeIn: " + EnumToString(dwTypeIn, "DNSP.DnssrvRpcTypeId") + 
                ", pdwTypeOut: " + EnumToString(pdwTypeOut, "DNSP.DnssrvRpcTypeId") + 
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 7};
    
    accepts operation R_DnssrvEnumRecords2
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvComplexOperation2", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszStartChild
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DNS_RECORD_TYPE wRecordType with Encoding{Decoder = PatternDecoder<DNS_RECORD_TYPE>, SourcePattern = TypeOf<WORD>()};
        in DWORD fSelectFlag;
        in string pszFilterStart
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszFilterStop
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out IDLUlong pdwBufferLength
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<ResourceRecord> ppBuffer with IDL {Size_is = [null, pdwBufferLength], IndirectionLevel = 2},
                                     Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvEnumRecords2, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", pszNodeName: " + pszNodeName.ToString() +
                ", pszStartChild: " + pszStartChild.ToString() +
                ", wRecordType: " + EnumToString(wRecordType, "DNSP.DNS_RECORD_TYPE");
        }
    }
    with Technologies.IDL.IDL{Opnum = 8};
    
    accepts operation R_DnssrvUpdateRecord2
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvUpdateRecord2", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL
                        {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
        in DnssrvRpcRecord pAddRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DnssrvRpcRecord pDeleteRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvUpdateRecord2, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", pszNodeName: " + pszNodeName.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 9};
    
    accepts operation R_DnssrvUpdateRecord3
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvUpdateRecord3", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScope
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL
                        {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
        in DnssrvRpcRecord pAddRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DnssrvRpcRecord pDeleteRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvUpdateRecord3, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", pwszZoneScope: " + pwszZoneScope.ToString() +
                ", pszNodeName: " + pszNodeName.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 10};
    
    accepts operation R_DnssrvEnumRecords3
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvEnumRecords3", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScope
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszStartChild
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DNS_RECORD_TYPE wRecordType with Encoding{Decoder = PatternDecoder<DNS_RECORD_TYPE>, SourcePattern = TypeOf<WORD>()};
        in DWORD fSelectFlag;
        in string pszFilterStart
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszFilterStop
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out IDLUlong pdwBufferLength
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out array<ResourceRecord> ppBuffer with IDL {Size_is = [null, pdwBufferLength], IndirectionLevel = 2},
                                     Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};

        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvEnumRecords3, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", pwszZoneScope: " + pwszZoneScope.ToString() +
                ", pszNodeName: " + pszNodeName.ToString() +
                ", pszStartChild: " + pszStartChild.ToString() +
                ", wRecordType: " + EnumToString(wRecordType, "DNSP.DNS_RECORD_TYPE");
        }
    }
    with Technologies.IDL.IDL{Opnum = 11};
    
    accepts operation R_DnssrvOperation3
    {
        in optional handle_t hBindingHandle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvOperation3", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScopeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in DWORD dwContext;
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcTypeId dwTypeId with Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        in DNSSRV_RPC_UNION[dwTypeId] pData
               with Technologies.IDL.IDL{Switch_Is = dwTypeId};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvOperation3, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint)+
                ", pszOperation: " + pszOperation.ToString() + 
                ", dwTypeId: " + EnumToString(dwTypeId, "DNSP.DnssrvRpcTypeId") +
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString() + 
                ", pszZone: " + pszZone.ToString() +
                ", pwszZoneScopeName: " + pwszZoneScopeName.ToString() +
                ", dwContext: " + dwContext.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 12};
    
    accepts operation R_DnssrvQuery3
    {
        in optional handle_t IDL_handle;
        in DNS_RPC_CURRENT_CLIENT_VER dwClientVersion 
            with Encoding{Decoder = ClientVersionDecoder, SourcePattern = TypeOf<DWORDPattern>()};
        in DWORD dwSettingFlags where ValidationCheckZero(0 == value, this, true, ReferenceType.Message, "DNSP", "dwSettingFlags", "R_DnssrvQuery3", value);
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszZoneScopeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out DnssrvRpcTypeId pdwTypeId with Technologies.IDL.IDL{IndirectionLevel = 1}, Encoding{Decoder = PatternDecoder<DnssrvRpcTypeId>, SourcePattern = TypeOf<IDLUlong>()};
        out DNSSRV_RPC_UNION[pdwTypeId] ppData
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeId, PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return "R_DnssrvQuery3, ReturnValue: " + Win32ErrorCodesToText(ReturnValue as uint) +
                ", pszZone: " + pszZone.ToString() +
                ", pszZoneScopeName: " + pszZoneScopeName.ToString() +
                ", pszOperation: " + pszOperation.ToString() + 
                ", pdwTypeId: " + EnumToString(pdwTypeId, "DNSP.DnssrvRpcTypeId") + 
                ", dwClientVersion: " + dwClientVersion.ToString() + 
                ", pwszServerName: " + pwszServerName.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 13};
    
    accepts operation R_DnssrvComplexOperation3
    {
        in optional handle_t IDL_handle;
        in DWORD dwClientVersion;
        in DWORD dwSettingFlags;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pwszVirtualizationInstanceID
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DWORD dwTypeIn;
        in DNSSRV_RPC_UNION[dwTypeIn] pDataIn
               with Technologies.IDL.IDL{Switch_Is = dwTypeIn};
        out IDLUlong pdwTypeOut with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DNSSRV_RPC_UNION[pdwTypeOut] ppDataOut
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeOut, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return
                "R_DnssrvComplexOperation3" + ", IDL_handle: " +
                IDL_handle.ToString() + ", dwClientVersion: " +
                dwClientVersion.ToString() + ", dwSettingFlags: " +
                dwSettingFlags.ToString() + ", pwszServerName: " +
                pwszServerName.ToString() + ", pwszVirtualizationInstanceID: " +
                pwszVirtualizationInstanceID.ToString() + ", pszZone: " +
                pszZone.ToString() + ", pszOperation: " +
                pszOperation.ToString() + ", dwTypeIn: " + dwTypeIn.ToString() +
                ", pDataIn: " + pDataIn.ToString() + ", pdwTypeOut: " +
                pdwTypeOut.ToString() + ", ppDataOut: " + ppDataOut.ToString() +
                ", ReturnValue: " + ReturnValue.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 14};
    
    accepts operation R_DnssrvOperation4
    {
        in optional handle_t hBindingHandle;
        in DWORD dwClientVersion;
        in DWORD dwSettingFlags;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pwszVirtualizationInstanceID
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScopeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in DWORD dwContext;
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DWORD dwTypeId;
        in DNSSRV_RPC_UNION[dwTypeId] pData
               with Technologies.IDL.IDL{Switch_Is = dwTypeId};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return
                "R_DnssrvOperation4" + ", hBindingHandle: " +
                hBindingHandle.ToString() + ", dwClientVersion: " +
                dwClientVersion.ToString() + ", dwSettingFlags: " +
                dwSettingFlags.ToString() + ", pwszServerName: " +
                pwszServerName.ToString() + ", pwszVirtualizationInstanceID: " +
                pwszVirtualizationInstanceID.ToString() + ", pszZone: " +
                pszZone.ToString() + ", pwszZoneScopeName: " +
                pwszZoneScopeName.ToString() + ", dwContext: " +
                dwContext.ToString() + ", pszOperation: " +
                pszOperation.ToString() + ", dwTypeId: " + dwTypeId.ToString() +
                ", pData: " + pData.ToString() + ", ReturnValue: " +
                ReturnValue.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 15};
    
    accepts operation R_DnssrvQuery4
    {
        in optional handle_t IDL_handle;
        in DWORD dwClientVersion;
        in DWORD dwSettingFlags;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pwszVirtualizationInstanceID
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszZoneScopeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszOperation
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out IDLUlong pdwTypeId with Technologies.IDL.IDL{IndirectionLevel = 1};
        out DNSSRV_RPC_UNION[pdwTypeId] ppData
                with Technologies.IDL.IDL
                         {Switch_Is = pdwTypeId, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return
                "R_DnssrvQuery4" + ", IDL_handle: " + IDL_handle.ToString() +
                ", dwClientVersion: " + dwClientVersion.ToString() +
                ", dwSettingFlags: " + dwSettingFlags.ToString() +
                ", pwszServerName: " + pwszServerName.ToString() +
                ", pwszVirtualizationInstanceID: " +
                pwszVirtualizationInstanceID.ToString() + ", pszZone: " +
                pszZone.ToString() + ", pszZoneScopeName: " +
                pszZoneScopeName.ToString() + ", pszOperation: " +
                pszOperation.ToString() + ", pdwTypeId: " + pdwTypeId.ToString() +
                ", ppData: " + ppData.ToString() + ", ReturnValue: " +
                ReturnValue.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 16};
    
    accepts operation R_DnssrvUpdateRecord4
    {
        in optional handle_t hBindingHandle;
        in DWORD dwClientVersion;
        in DWORD dwSettingFlags;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pwszVirtualizationInstanceID
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScope
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL{BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in DnssrvRpcRecord pAddRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in DnssrvRpcRecord pDeleteRecord
               with Technologies.IDL.IDL
                        {PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return
                "R_DnssrvUpdateRecord4" + ", hBindingHandle: " +
                hBindingHandle.ToString() + ", dwClientVersion: " +
                dwClientVersion.ToString() + ", dwSettingFlags: " +
                dwSettingFlags.ToString() + ", pwszServerName: " +
                pwszServerName.ToString() + ", pwszVirtualizationInstanceID: " +
                pwszVirtualizationInstanceID.ToString() + ", pszZone: " +
                pszZone.ToString() + ", pwszZoneScope: " +
                pwszZoneScope.ToString() + ", pszNodeName: " +
                pszNodeName.ToString() + ", pAddRecord: " +
                pAddRecord.ToString() + ", pDeleteRecord: " +
                pDeleteRecord.ToString() + ", ReturnValue: " +
                ReturnValue.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 17};
    
    accepts operation R_DnssrvEnumRecords4
    {
        in optional handle_t hBindingHandle;
        in DWORD dwClientVersion;
        in DWORD dwSettingFlags;
        in string pwszServerName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pwszVirtualizationInstanceID
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszZone
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pwszZoneScope
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<wchar_t>(),
                                         IndirectionLevel = 1};
        in string pszNodeName
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszStartChild
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in WORD wRecordType;
        in DWORD fSelectFlag;
        in string pszFilterStart
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        in string pszFilterStop
               with Technologies.IDL.IDL{PointerType = PointerKind.UniquePtr,
                                         BaseStringType = TypeOf<char>(),
                                         IndirectionLevel = 1};
        out IDLUlong pdwBufferLength
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        out char ppBuffer
                with Technologies.IDL.IDL
                         {Size_is = [null, pdwBufferLength], IndirectionLevel = 2};
        result LONG ReturnValue;
        
        override string ToString()
        {
            return
                "R_DnssrvEnumRecords4" + ", hBindingHandle: " +
                hBindingHandle.ToString() + ", dwClientVersion: " +
                dwClientVersion.ToString() + ", dwSettingFlags: " +
                dwSettingFlags.ToString() + ", pwszServerName: " +
                pwszServerName.ToString() + ", pwszVirtualizationInstanceID: " +
                pwszVirtualizationInstanceID.ToString() + ", pszZone: " +
                pszZone.ToString() + ", pwszZoneScope: " +
                pwszZoneScope.ToString() + ", pszNodeName: " +
                pszNodeName.ToString() + ", pszStartChild: " +
                pszStartChild.ToString() + ", wRecordType: " +
                wRecordType.ToString() + ", fSelectFlag: " +
                fSelectFlag.ToString() + ", pszFilterStart: " +
                pszFilterStart.ToString() + ", pszFilterStop: " +
                pszFilterStop.ToString() + ", pdwBufferLength: " +
                pdwBufferLength.ToString() + ", ppBuffer: " +
                ppBuffer.ToString() + ", ReturnValue: " + ReturnValue.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 18};
}
with Technologies.IDL.IDL{Uuid = {50abc2a4-574d-40b3-9d66-ee4fd5fba076},
                          Version = "5.0",
                          Pointer_default = PointerKind.UniquePtr};

typedef DNSSRV_RPC_UNION = DnssrvSrvRpcUnion;

type DnssrvSrvRpcUnion[DWORD tag]
{
    optional [|tag == 0|] char Null
        with Technologies.IDL.IDL{Case = [0], IndirectionLevel = 1};
    optional [|tag == 1|] DWORD Dword
        with Technologies.IDL.IDL{Case = [(1)]};
    optional [|tag == 2|] string String
        with Technologies.IDL.IDL{Case = [(2)],
                                  BaseStringType = TypeOf<char>(),
                                  IndirectionLevel = 1};
    optional [|tag == 3|] string WideString
        with Technologies.IDL.IDL{Case = [(3)],
                                  BaseStringType = TypeOf<wchar_t>(),
                                  IndirectionLevel = 1};
    optional [|tag == 4|] IP4_ARRAY IpArray
        with Technologies.IDL.IDL{Case = [(4)], IndirectionLevel = 1};
    optional [|tag == 5|] DnssrvRpcBuffer Buffer
        with Technologies.IDL.IDL{Case = [(5)], IndirectionLevel = 1};
    optional [|tag == 6|] DnsRpcServerInfoW2K ServerInfoW2K
        with Technologies.IDL.IDL{Case = [(6)], IndirectionLevel = 1};
    optional [|tag == 7|] DnsStat Stats
        with Technologies.IDL.IDL{Case = [(7)], IndirectionLevel = 1};
    optional [|tag == 8|] DnssrvRpcForwardersW2K ForwardersW2K
        with Technologies.IDL.IDL{Case = [(8)], IndirectionLevel = 1};
    optional [|tag == 9|] DnssrvRpcZoneW2K ZoneW2K
        with Technologies.IDL.IDL{Case = [(9)], IndirectionLevel = 1};
    optional [|tag == 10|] DnsRpcZoneInfoW2K ZoneInfoW2K
        with Technologies.IDL.IDL{Case = [(10)], IndirectionLevel = 1};
    optional [|tag == 11|] DnssrvRpcZoneSecondariesW2K SecondariesW2K
        with Technologies.IDL.IDL{Case = [(11)], IndirectionLevel = 1};
    optional [|tag == 12|] DnssrvRpcZoneDatabaseW2K DatabaseW2K
        with Technologies.IDL.IDL{Case = [(12)], IndirectionLevel = 1};
    optional [|tag == 14|] DnsRpcZoneCreateInfo ZoneCreateW2K
        with Technologies.IDL.IDL{Case = [(14)], IndirectionLevel = 1};
    optional [|tag == 15|] DnssrvRpcNameAndParam NameAndParam
        with Technologies.IDL.IDL{Case = [(15)], IndirectionLevel = 1};
    optional [|tag == 16|] DnssrvRpcZoneListW2K ZoneListW2K
        with Technologies.IDL.IDL{Case = [(16)], IndirectionLevel = 1};
    optional [|tag == 19|] DnsRpcServerInfoDotNet ServerInfoDotNet
        with Technologies.IDL.IDL{Case = [(19)], IndirectionLevel = 1};
    optional [|tag == 20|] DnssrvRpcForwardersDotNet ForwardersDotNet
        with Technologies.IDL.IDL{Case = [(20)], IndirectionLevel = 1};
    optional [|tag == 21|] DnssrvRpcZoneDotNet Zone
        with Technologies.IDL.IDL{Case = [(21)], IndirectionLevel = 1};
    optional [|tag == 22|] DnsRpcZoneInfoDotNet ZoneInfoDotNet
        with Technologies.IDL.IDL{Case = [(22)], IndirectionLevel = 1};
    optional [|tag == 23|] DnssrvRpcZoneSecondariesDotNet SecondariesDotNet
        with Technologies.IDL.IDL{Case = [(23)], IndirectionLevel = 1};
    optional [|tag == 24|] DnssrvRpcZoneDatabaseDotNet Database
        with Technologies.IDL.IDL{Case = [(24)], IndirectionLevel = 1};
    optional [|tag == 26|] DnsRpcZoneCreateInfoDotNet ZoneCreateDotNet
        with Technologies.IDL.IDL{Case = [(26)], IndirectionLevel = 1};
    optional [|tag == 27|] DnssrvRpcZoneListDotNet ZoneList
        with Technologies.IDL.IDL{Case = [(27)], IndirectionLevel = 1};
    optional [|tag == 18|] DnssrvRpcZoneExport ZoneExport
        with Technologies.IDL.IDL{Case = [(18)], IndirectionLevel = 1};
    optional [|tag == 29|] DnssrvRpcDirectoryPartition DirectoryPartition
        with Technologies.IDL.IDL{Case = [(29)], IndirectionLevel = 1};
    optional [|tag == 28|] DnssrvRpcDirectoryPartitionEnum
        DirectoryPartitionEnum
        with Technologies.IDL.IDL{Case = [(28)], IndirectionLevel = 1};
    optional [|tag == 30|] DnssrvRpcDirectoryPartitionList
        DirectoryPartitionList
        with Technologies.IDL.IDL{Case = [(30)], IndirectionLevel = 1};
    optional [|tag == 31|] DnssrvRpcEnlistDirPart EnlistDirectoryPartition
        with Technologies.IDL.IDL{Case = [(31)], IndirectionLevel = 1};
    optional [|tag == 32|] DnssrvRpcZoneChangePartition
        ZoneChangeDirectoryPartition
        with Technologies.IDL.IDL{Case = [(32)], IndirectionLevel = 1};
    optional [|tag == 33|] DnsRpcEnumZonesFilter EnumZonesFilter
        with Technologies.IDL.IDL{Case = [(33)], IndirectionLevel = 1};
    optional [|tag == 34|] DnsAddrArray AddrArray
        with Technologies.IDL.IDL{Case = [(34)], IndirectionLevel = 1};
    optional [|tag == 35|] DnsRpcServerInfoLonghorn ServerInfo
        with Technologies.IDL.IDL{Case = [(35)], IndirectionLevel = 1};
    optional [|tag == 40|] DnsRpcZoneCreateInfoLonghorn ZoneCreate
        with Technologies.IDL.IDL{Case = [(40)], IndirectionLevel = 1};
    optional [|tag == 37|] DnssrvRpcForwardersLonghorn Forwarders
        with Technologies.IDL.IDL{Case = [(37)], IndirectionLevel = 1};
    optional [|tag == 38|] DnssrvRpcZoneSecondariesLonghorn Secondaries
        with Technologies.IDL.IDL{Case = [(38)], IndirectionLevel = 1};
    optional [|tag == 41|] DnsRpcIPValidateLonghorn IpValidate
        with Technologies.IDL.IDL{Case = [(41)], IndirectionLevel = 1};
    optional [|tag == 36|] DnsRpcZoneInfoLonghorn ZoneInfo
        with Technologies.IDL.IDL{Case = [(36)], IndirectionLevel = 1};
    optional [|tag == 42|] DnsRpcAutoConfigureLonghorn AutoConfigure
        with Technologies.IDL.IDL{Case = [(42)], IndirectionLevel = 1};
    optional [|tag == 43|] DnsRpcUtf8StringList Utf8StringList
        with Technologies.IDL.IDL{Case = [(43)], IndirectionLevel = 1};
    optional [|tag == 44|] DnsRpcUnicodeStringList UnicodeStringList
        with Technologies.IDL.IDL{Case = [(44)], IndirectionLevel = 1};
    optional [|tag == 45|] DnssrvRpcSigningKeyDescriptor Skd
        with Technologies.IDL.IDL{Case = [(45)], IndirectionLevel = 1};
    optional [|tag == 46|] DnssrvRpcZoneSigningKeyList SkdList
        with Technologies.IDL.IDL{Case = [(46)], IndirectionLevel = 1};
    optional [|tag == 47|] DnsRpcSigningKeyDescriptorState SkdState
        with Technologies.IDL.IDL{Case = [(47)], IndirectionLevel = 1};
    optional [|tag == 48|] DnssrvRpcSigningValidationError
        SigningValidationError
        with Technologies.IDL.IDL{Case = [(48)], IndirectionLevel = 1};
    optional [|tag == 49|] DnssrvRpcTrustPointList TrustPointList
        with Technologies.IDL.IDL{Case = [(49)], IndirectionLevel = 1};
    optional [|tag == 50|] DnssrvRpcTrustAnchorList TrustAnchorList
        with Technologies.IDL.IDL{Case = [(50)], IndirectionLevel = 1};
    optional [|tag == 51|] DnssrvRpcZoneDnssecSettings ZoneDnsSecSettings
        with Technologies.IDL.IDL{Case = [(51)], IndirectionLevel = 1};
    optional [|tag == 52|] DnsRpcEnumZoneScopeList ZoneScopeList
        with Technologies.IDL.IDL{Case = [(52)], IndirectionLevel = 1};
    optional [|tag == 53|] DnsRpcZoneStats ZoneStats
        with Technologies.IDL.IDL{Case = [(53)], IndirectionLevel = 1};
    optional [|tag == 54|] DnsRpcScopeCreate ScopeCreate
        with Technologies.IDL.IDL{Case = [(54)], IndirectionLevel = 1};
    optional [|tag == 55|] DnsRpcZoneScopeInfo ScopeInfo
        with Technologies.IDL.IDL{Case = [(55)], IndirectionLevel = 1};
    optional [|tag == 56|] DnsRpcEnumScopeList ScopeList
        with Technologies.IDL.IDL{Case = [(56)], IndirectionLevel = 1};
    optional [|tag == 57|] ClientSubnetRecord SubnetList
        with Technologies.IDL.IDL{Case = [(57)], IndirectionLevel = 1};
    optional [|tag == 58|] DnssrvRpcPolicy pPolicy
        with Technologies.IDL.IDL{Case = [(58)], IndirectionLevel = 1};
    optional [|tag == 59|] DnsRpcPolicyType pPolicyName
        with Technologies.IDL.IDL{Case = [(59)], IndirectionLevel = 1};
    optional [|tag == 60|] DnsRpcEnumPolicyList pPolicyList
        with Technologies.IDL.IDL{Case = [(60)], IndirectionLevel = 1};
    optional [|tag == 61|] DnsRRLParams pRRLParams
        with Technologies.IDL.IDL{Case = [(61)], IndirectionLevel = 1};
    optional [|tag == 62|] DnssrvRpcVirtualizationInstance VirtualizationInstance
        with Technologies.IDL.IDL{Case = [(62)], IndirectionLevel = 1};
    optional [|tag == 63|] DnsRpcEnumVirtualizationInstanceList VirtualizationInstanceList
        with Technologies.IDL.IDL{Case = [(63)], IndirectionLevel = 1};
}
with Technologies.IDL.IDL
         {Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type IP4_ARRAY
{
    DWORD AddrCount;
    array<IPv4Address> AddrArray
        with Encoding{Decoder = IPv4Address_Decoder, SourcePattern = TypeOf<DWORDArrayPattern>()},
             Technologies.IDL.IDL{Size_is = [AddrCount], Dimensions = [null]};
}

optional array<IPv4Address> IPv4Address_Decoder(array<DWORD> addrArray)
{
    array<IPv4Address> result= [];
    foreach (DWORD dword in addrArray)
    {
        optional IPv4Address addr = BinaryDecoder<IPv4Address>(dword.ToBinary(true));
        if (addr != nothing)
            result += [addr as IPv4Address];
    }
    return result;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type DnssrvRpcBuffer
{
    DWORD dwLength;
    (array<DNSSRV_STATS> | array<DNS_RPC_NODE>) Buffer
        with Encoding{Decoder = BinaryDecoder<array<DNSSRV_STATS> | array<DNS_RPC_NODE>>, SourcePattern = TypeOf<BufferPattern>()},
             Technologies.IDL.IDL{Size_is = [dwLength], Dimensions = [null]},
             BinaryEncoding{WidthForComposedType = (dwLength as int) * 8};
}

type DnsRpcServerInfoW2K
{
    DNSSRV_VERSION dwVersion 
            with Encoding{Decoder = DNSSRV_VERSION_Decoder, SourcePattern = TypeOf<DWORDPattern>()};
    DNS_BOOT_METHODS fBootMethod where ValidationCheckEnumValue(InRange<DNS_BOOT_METHODS>(value), null, true, ReferenceType.Type, "DNSP", "fBootMethod", "DnsRpcServerInfoW2K", "0x00, 0x01, 0x02, 0x03", value)
        with Encoding{Decoder = PatternDecoder<DNS_BOOT_METHODS>, SourcePattern = TypeOf<UCHAR>()};
    BOOLEAN fAdminConfigured;
    BOOLEAN fAllowUpdate;
    BOOLEAN fDsAvailable;
    string pszServerName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDsContainer
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    IP4_ARRAY aipServerAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipListenAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
    IDLUlong pExtension1 with Technologies.IDL.IDL{IndirectionLevel = 1};
    IDLUlong pExtension2 with Technologies.IDL.IDL{IndirectionLevel = 1};
    IDLUlong pExtension3 with Technologies.IDL.IDL{IndirectionLevel = 1};
    IDLUlong pExtension4 with Technologies.IDL.IDL{IndirectionLevel = 1};
    IDLUlong pExtension5 with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_LOG_LEVELS dwLogLevel where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_LOG_LEVELS>(value), null, true, ReferenceType.Type, "DNSP", "dwLogLevel", "DnsRpcServerInfoW2K", "DNS_RPC_SERVER_INFO_W2K", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_LOG_LEVELS>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwDebugLevel;
    DWORD dwForwardTimeout;
    DNS_RPC_PROTOCOLS dwRpcProtocol where ValidationCheckCombinationValue(InRange<DNS_RPC_PROTOCOLS>(value), null, true, ReferenceType.Type, "DNSP", "dwRpcProtocol", "DnsRpcServerInfoW2K", "0x00000001, 0x00000002, 0x00000004, 0xFFFFFFFF", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_PROTOCOLS>, SourcePattern = TypeOf<DWORD>()};
    DNS_NAME_CHECK_FLAGS dwNameCheckFlag where ValidationCheckEnumValue(InRange<DNS_NAME_CHECK_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwNameCheckFlag", "DnsRpcServerInfoW2K", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_NAME_CHECK_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    DWORD cAddressAnswerLimit where ValidationCheck((0 == value) || (value >= 0x00000005 && value <= 0x0000001C), null, DiagnosisLevel.Error, () => Format(DNSP_STR_CHECK_cAddressAnswerLimit, "DnsRpcServerInfoW2K", value));
    DWORD dwRecursionRetry where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionRetry", "DnsRpcServerInfoW2K", 1, 15, value);
    DWORD dwRecursionTimeout where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionTimeout", "DnsRpcServerInfoW2K", 1, 15, value);
    DWORD dwMaxCacheTtl;
    DWORD dwDsPollingInterval where ValidationCheckValueInRange(value >= 30 && value <= 3600, null, true, ReferenceType.Type, "DNSP", "dwDsPollingInterval", "DnsRpcServerInfoW2K", 30, 3600, value);
    DWORD dwScavengingInterval where ValidationCheckValueInRange(value >= 0 && value <= 8760, null, true, ReferenceType.Type, "DNSP", "dwScavengingInterval", "DnsRpcServerInfoW2K", 0, 8760, value);
    DWORD dwDefaultRefreshInterval;
    DWORD dwDefaultNoRefreshInterval;
    array<DWORD> dwReserveArray with Technologies.IDL.IDL{Dimensions = [10]};
    BOOLEAN fAutoReverseZones;
    BOOLEAN fAutoCacheUpdate;
    BOOLEAN fRecurseAfterForwarding;
    BOOLEAN fForwardDelegations;
    BOOLEAN fNoRecursion;
    BOOLEAN fSecureResponses;
    BOOLEAN fRoundRobin;
    BOOLEAN fLocalNetPriority;
    BOOLEAN fBindSecondaries;
    BOOLEAN fWriteAuthorityNs;
    BOOLEAN fStrictFileParsing;
    BOOLEAN fLooseWildcarding;
    BOOLEAN fDefaultAgingState;
    array<BOOLEAN> fReserveArray with Technologies.IDL.IDL{Dimensions = [15]};
}

type DnsStat
{
    DNSSRV_STAT_HEADER Header;
    array<BYTE> Buffer with Technologies.IDL.IDL{Dimensions = [1]};
}

typedef DNSSRV_STAT_HEADER = DnsStatHeader;

type DnsStatHeader
{
    DNSSRV_STATID_TYPES StatId where ValidationCheckEnumValueTooManyItems(InRange<DNSSRV_STATID_TYPES>(value), null, true, ReferenceType.Type, "DNSP", "StatId", "DnsStatHeader", "DNSSRV_STAT_HEADER", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNSSRV_STATID_TYPES>, SourcePattern = TypeOf<DWORD>()};
    WORD wLength;
    BOOLEAN fClear;
    UCHAR fReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "fReserved", "DnsStatHeader", value);
}

type DnssrvRpcForwardersW2K
{
    DWORD fRecurseAfterForwarding;
    DWORD dwForwardTimeout;
    IP4_ARRAY aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnssrvRpcZoneW2K
{
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DNS_RPC_ZONE_FLAGS Flags;
    DNS_ZONE_TYPE ZoneType where ValidationCheckEnumValueTooManyItems(InRange<DNS_ZONE_TYPE>(value), null, true, ReferenceType.Type, "DNSP", "ZoneType", "DnssrvRpcZoneW2K", "DNS_RPC_ZONE_W2K", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourcePattern = TypeOf<UCHAR>()};
    UCHAR Version where ValidationCheckValue(0x32 == value, null, true, ReferenceType.Type, "DNSP", "Version", "DnssrvRpcZoneW2K", 0x32, value);
}

typedef DNS_RPC_ZONE_FLAGS = DWORD;

type DnsRpcZoneInfoW2K
{
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneInfoW2K", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DWORD fReverse;
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneInfoW2K", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fPaused;
    DWORD fShutdown;
    DWORD fAutoCreated;
    DWORD fUseDatabase;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    IP4_ARRAY aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneInfoW2K", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneInfoW2K", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD fUseWins;
    DWORD fUseNbstat;
    DWORD fAging;
    DWORD dwNoRefreshInterval;
    DWORD dwRefreshInterval;
    DWORD dwAvailForScavengeTime;
    IP4_ARRAY aipScavengeServers with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD pvReserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "pvReserved1", "DnsRpcZoneInfoW2K", value);
    DWORD pvReserved2 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "pvReserved2", "DnsRpcZoneInfoW2K", value);
    DWORD pvReserved3 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "pvReserved3", "DnsRpcZoneInfoW2K", value);
    DWORD pvReserved4 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "pvReserved4", "DnsRpcZoneInfoW2K", value);
}

type DnssrvRpcZoneSecondariesW2K
{
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnssrvRpcZoneSecondariesW2K", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnssrvRpcZoneSecondariesW2K", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnssrvRpcZoneDatabaseW2K
{
    DWORD fDsIntegrated;
    string pszFileName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnsRpcZoneCreateInfo
{
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneCreateInfo", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneCreateInfo", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fAging;
    DWORD dwFlags;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD fDsIntegrated;
    DWORD fLoadExisting;
    string pszAdmin
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    IP4_ARRAY aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneCreateInfo", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneCreateInfo", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    string pvReserved1
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved2
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved3
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved4
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved5
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved6
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved7
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pvReserved8
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD dwReserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved1", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved2 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved2", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved3 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved3", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved4 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved4", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved5 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved5", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved6 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved6", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved7 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved7", "DnsRpcZoneCreateInfo", value);
    DWORD dwReserved8 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved8", "DnsRpcZoneCreateInfo", value);
}

type DnssrvRpcNameAndParam
{
    DWORD dwParam;
    string pszNodeName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnssrvRpcZoneListW2K
{
    DWORD dwZoneCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 500000}};
    array<DnssrvRpcZoneW2K> ZoneArray
        with Technologies.IDL.IDL{Size_is = [dwZoneCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

type DnsRpcServerInfoDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcServerInfoDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcServerInfoDotNet", value);
    DNSSRV_VERSION dwVersion 
            with Encoding{Decoder = DNSSRV_VERSION_Decoder, SourcePattern = TypeOf<DWORDPattern>()};
    DNS_BOOT_METHODS fBootMethod where ValidationCheckEnumValue(InRange<DNS_BOOT_METHODS>(value), null, true, ReferenceType.Type, "DNSP", "fBootMethod", "DnsRpcServerInfoDotNet", "0x00, 0x01, 0x02, 0x03", value)
        with Encoding{Decoder = PatternDecoder<DNS_BOOT_METHODS>, SourcePattern = TypeOf<UCHAR>()};
    BOOLEAN fAdminConfigured;
    BOOLEAN fAllowUpdate;
    BOOLEAN fDsAvailable;
    string pszServerName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDsContainer
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    IP4_ARRAY aipServerAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipListenAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipLogFilter with Technologies.IDL.IDL{IndirectionLevel = 1};
    string pwszLogFilePath
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pszDomainName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszForestName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDomainDirectoryPartition
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszForestDirectoryPartition
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    /*
    array<string> pExtensions
        with Technologies.IDL.IDL{Dimensions = [6],
                            IndirectionLevel = 1,
                            BaseStringType = TypeOf<char>()};
    */
    // Codec Bug 66616:[NDR Codec] Support array of string in NDR codec
    string pExtensions
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions1
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions2
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions3
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions4
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions5
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    DNS_LOG_LEVELS dwLogLevel where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_LOG_LEVELS>(value), null, true, ReferenceType.Type, "DNSP", "dwLogLevel", "DnsRpcServerInfoDotNet", "DNS_RPC_SERVER_INFO_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_LOG_LEVELS>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwDebugLevel;
    DWORD dwForwardTimeout;
    DNS_RPC_PROTOCOLS dwRpcProtocol where ValidationCheckCombinationValue(InRange<DNS_RPC_PROTOCOLS>(value), null, true, ReferenceType.Type, "DNSP", "dwRpcProtocol", "DnsRpcServerInfoDotNet", "0x00000001, 0x00000002, 0x00000004, 0xFFFFFFFF", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_PROTOCOLS>, SourcePattern = TypeOf<DWORD>()};
    DNS_NAME_CHECK_FLAGS dwNameCheckFlag where ValidationCheckEnumValue(InRange<DNS_NAME_CHECK_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwNameCheckFlag", "DnsRpcServerInfoDotNet", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_NAME_CHECK_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    DWORD cAddressAnswerLimit where ValidationCheck((0 == value) || (value >= 0x00000005 && value <= 0x0000001C), null, DiagnosisLevel.Error, () => Format(DNSP_STR_CHECK_cAddressAnswerLimit, "DnsRpcServerInfoDotNet", value));
    DWORD dwRecursionRetry where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionRetry", "DnsRpcServerInfoDotNet", 1, 15, value);
    DWORD dwRecursionTimeout where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionTimeout", "DnsRpcServerInfoDotNet", 1, 15, value);
    DWORD dwMaxCacheTtl;
    DWORD dwDsPollingInterval where ValidationCheckValueInRange(value >= 30 && value <= 3600, null, true, ReferenceType.Type, "DNSP", "dwDsPollingInterval", "DnsRpcServerInfoDotNet", 30, 3600, value);
    DWORD dwLocalNetPriorityNetMask;
    DWORD dwScavengingInterval;
    DWORD dwDefaultRefreshInterval;
    DWORD dwDefaultNoRefreshInterval;
    DWORD dwLastScavengeTime;
    DNS_EVENTLOG_TYPES dwEventLogLevel where ValidationCheckCombinationValue(InRange<DNS_EVENTLOG_TYPES>(value), null, true, ReferenceType.Type, "DNSP", "dwEventLogLevel", "DnsRpcServerInfoDotNet", "0x00000000, 0x00000001, 0x00000002, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<DNS_EVENTLOG_TYPES>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwLogFileMaxSize;
    DWORD dwDsForestVersion;
    DWORD dwDsDomainVersion;
    DWORD dwDsDsaVersion;
    array<DWORD> dwReserveArray with Technologies.IDL.IDL{Dimensions = [4]};
    BOOLEAN fAutoReverseZones;
    BOOLEAN fAutoCacheUpdate;
    BOOLEAN fRecurseAfterForwarding;
    BOOLEAN fForwardDelegations;
    BOOLEAN fNoRecursion;
    BOOLEAN fSecureResponses;
    BOOLEAN fRoundRobin;
    BOOLEAN fLocalNetPriority;
    BOOLEAN fBindSecondaries;
    BOOLEAN fWriteAuthorityNs;
    BOOLEAN fStrictFileParsing;
    BOOLEAN fLooseWildcarding;
    BOOLEAN fDefaultAgingState;
    array<BOOLEAN> fReserveArray with Technologies.IDL.IDL{Dimensions = [15]};
}

type DnssrvRpcForwardersDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcForwardersDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcForwardersDotNet", value);
    DWORD fRecurseAfterForwarding;
    DWORD dwForwardTimeout;
    IP4_ARRAY aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnssrvRpcZoneDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneDotNet", value);
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DNS_RPC_ZONE_FLAGS Flags;
    DNS_ZONE_TYPE ZoneType where ValidationCheckEnumValueTooManyItems(InRange<DNS_ZONE_TYPE>(value), null, true, ReferenceType.Type, "DNSP", "ZoneType", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourcePattern = TypeOf<UCHAR>()};
    UCHAR Version where ValidationCheckValue(0x32 == value, null, true, ReferenceType.Type, "DNSP", "Version", "DnssrvRpcZoneDotNet", 0x32, value);
    DNS_RPC_DP_FLAGS dwDpFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwDpFlags", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnsRpcZoneInfoDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, false, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneInfoDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcZoneInfoDotNet", value);
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneInfoDotNet", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DWORD fReverse;
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneInfoDotNet", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fPaused;
    DWORD fShutdown;
    DWORD fAutoCreated;
    DWORD fUseDatabase;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    IP4_ARRAY aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneInfoDotNet", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneInfoDotNet", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD fUseWins;
    DWORD fUseNbstat;
    DWORD fAging;
    DWORD dwNoRefreshInterval;
    DWORD dwRefreshInterval;
    DWORD dwAvailForScavengeTime;
    IP4_ARRAY aipScavengeServers with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD dwForwarderTimeout;
    DWORD fForwarderSlave;
    IP4_ARRAY aipLocalMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_RPC_DP_FLAGS dwDpFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwDpFlags", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pwszZoneDn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwLastSuccessfulSoaCheck;
    DWORD dwLastSuccessfulXfr;
    DWORD dwReserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved1", "DnsRpcIPValidateLonghorn", value);
    DWORD dwReserved2 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved2", "DnsRpcIPValidateLonghorn", value);
    DWORD dwReserved3 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved3", "DnsRpcIPValidateLonghorn", value);
    DWORD dwReserved4 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved4", "DnsRpcIPValidateLonghorn", value);
    DWORD dwReserved5 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved5", "DnsRpcIPValidateLonghorn", value);
    string pReserved1
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pReserved2
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pReserved3
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pReserved4
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnssrvRpcZoneSecondariesDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneSecondariesDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneSecondariesDotNet", value);
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnssrvRpcZoneSecondariesDotNet", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnssrvRpcZoneSecondariesDotNet", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnssrvRpcZoneDatabaseDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneDatabaseDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneDatabaseDotNet", value);
    DWORD fDsIntegrated;
    string pszFileName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnsRpcZoneCreateInfoDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, false, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneCreateInfoDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcZoneCreateInfoDotNet", value);
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneCreateInfoDotNet", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneCreateInfoDotNet", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fAging;
    DWORD dwFlags;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD fDsIntegrated;
    DWORD fLoadExisting;
    string pszAdmin
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    IP4_ARRAY aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    IP4_ARRAY aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneCreateInfoDotNet", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneCreateInfoDotNet", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwTimeout;
    DWORD fRecurseAfterForwarding;
    DNS_RPC_DP_FLAGS dwDpFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwDpFlags", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    array<DWORD> dwReserved with Technologies.IDL.IDL{Dimensions = [32]};
}

type DnssrvRpcZoneListDotNet
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneListDotNet", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneListDotNet", value);
    DWORD dwZoneCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 500000}};
    array<DnssrvRpcZoneDotNet> ZoneArray
        with Technologies.IDL.IDL{Size_is = [dwZoneCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

type DnssrvRpcZoneExport
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneExport", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneExport", value);
    string pszZoneExportFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnssrvRpcDirectoryPartition
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000000 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcDirectoryPartition", 0x00000000, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcDirectoryPartition", value);
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDpDn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pszCrDn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DNS_RPC_DP_FLAGS dwFlags where ValidationCheckCombinationValue(InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwFlags", "DnssrvRpcDirectoryPartition", "0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwZoneCount;
    DnssrvRpcDirectoryPartition_dwState dwState where ValidationCheckEnumValue(InRange<DnssrvRpcDirectoryPartition_dwState>(value), null, true, ReferenceType.Type, "DNSP", "dwState", "DnssrvRpcDirectoryPartition", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DnssrvRpcDirectoryPartition_dwState>, SourcePattern = TypeOf<DWORD>()};
    array<DWORD> dwReserved with Technologies.IDL.IDL{Dimensions = [3]};
    /*
    array<string> pwszReserved
        with Technologies.IDL.IDL{Dimensions = [3],
                                  IndirectionLevel = 1,
                                  BaseStringType = TypeOf<wchar_t>()};
    */
    // Codec Bug 66616:[NDR Codec] Support array of string in NDR codec
    string pwszReserved
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<wchar_t>()};
    string pwszReserved1
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<wchar_t>()};
    string pwszReserved2
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<wchar_t>()};
    DWORD dwReplicaCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 10000}};
    array<DnssrvRpcDirectoryPartitionReplica> ReplicaArray
        with Technologies.IDL.IDL{Size_is = [dwReplicaCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

type DnssrvRpcDirectoryPartitionReplica
{
    string pszReplicaDn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

type DnssrvRpcDirectoryPartitionEnum
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000000 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcDirectoryPartitionEnum", 0x00000000, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcDirectoryPartitionEnum", value);
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD dwFlags;
    DWORD dwZoneCount;
}

type DnssrvRpcDirectoryPartitionList
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000000 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcDirectoryPartitionList", 0x00000000, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcDirectoryPartitionList", value);
    DWORD dwDpCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 5000}};
    array<DnssrvRpcDirectoryPartitionEnum> DpArray
        with Technologies.IDL.IDL
                 {Size_is = [dwDpCount], Dimensions = [null], IndirectionLevel = 1};
}

type DnssrvRpcEnlistDirPart
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcEnlistDirPart", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcEnlistDirPart", value);
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DnssrvRpcEnlistDirPart_dwOperation dwOperation where ValidationCheckEnumValue(InRange<DnssrvRpcEnlistDirPart_dwOperation>(value), null, true, ReferenceType.Type, "DNSP", "dwOperation", "DnssrvRpcEnlistDirPart", "0x00000001, 0x00000002, 0x00000003, 0x00000004, 0x00000005, 0x00000006", value)
        with Encoding{Decoder = PatternDecoder<DnssrvRpcEnlistDirPart_dwOperation>, SourcePattern = TypeOf<DWORD>()};
}

type DnssrvRpcZoneChangePartition
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneChangePartition", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneChangePartition", value);
    string pszDestPartition
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnsRpcEnumZonesFilter
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcEnumZonesFilter", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcEnumZonesFilter", value);
    ZONE_REQUEST_FILTERS dwFilter where ValidationCheckCombinationValueTooManyItems(InRange<ZONE_REQUEST_FILTERS>(value), null, true, ReferenceType.Type, "DNSP", "dwFilter", "DnsRpcEnumZonesFilter", "DNS_RPC_ENUM_ZONES_FILTER", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<ZONE_REQUEST_FILTERS>, SourcePattern = TypeOf<DWORD>()};
    string pszPartitionFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszQueryString
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    /*
    array<string> pszReserved
        with Technologies.IDL.IDL{Dimensions = [6],
                            IndirectionLevel = 1,
                            BaseStringType = TypeOf<char>()};
    */
    // Codec Bug 66616:[NDR Codec] Support array of string in NDR codec
    string pszReserved
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pszReserved1
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pszReserved2
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pszReserved3
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pszReserved4
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pszReserved5
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
}

type DnsAddrArray
{
    DWORD MaxCount;
    DWORD AddrCount where ValidationCheckValueSame(value == MaxCount, null, true, ReferenceType.Type, "DNSP", "AddrCount", "DnsAddrArray", ReferenceType.Type, "MaxCount", "DnsAddrArray", value);
    DWORD Tag where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Tag", "DnsAddrArray", value);
    WORD Family;
    WORD WordReserved where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "WordReserved", "DnsAddrArray", value);
    DWORD Flags where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Flags", "DnsAddrArray", value);
    DWORD MatchFlag where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "MatchFlag", "DnsAddrArray", value);
    DWORD Reserved1 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Reserved1", "DnsAddrArray", value);
    DWORD Reserved2 where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Reserved2", "DnsAddrArray", value);
    array<DNS_ADDR> AddrArray
        with Technologies.IDL.IDL{Size_is = [AddrCount], Dimensions = [null]};
}

typedef DNS_ADDR = DnsAddr;

type DnsAddr
{
    DNSADDR MaxSa with Encoding{Decoder = BinaryDecoder<DNSADDR>, SourcePattern = TypeOf<array<CHAR>>()},
                       Technologies.IDL.IDL{Dimensions = [32]};
    DNSADDUSER DnsAddrUserDword with Encoding{Decoder = BinaryDecoder<DNSADDUSER>, SourceConverter = DWORArrayToBinary, SourcePattern = TypeOf<DWORDArrayPattern>()},
                                     Technologies.IDL.IDL{Dimensions = [8]};
}

type DnsRpcServerInfoLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000002 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcServerInfoLonghorn", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcServerInfoLonghorn", value);
    DNSSRV_VERSION dwVersion 
            with Encoding{Decoder = DNSSRV_VERSION_Decoder, SourcePattern = TypeOf<DWORDPattern>()};
    DNS_BOOT_METHODS fBootMethod where ValidationCheckEnumValue(InRange<DNS_BOOT_METHODS>(value), null, true, ReferenceType.Type, "DNSP", "fBootMethod", "DnsRpcServerInfoLonghorn", "0x00, 0x01, 0x02, 0x03", value)
        with Encoding{Decoder = PatternDecoder<DNS_BOOT_METHODS>, SourcePattern = TypeOf<UCHAR>()};
    BOOLEAN fAdminConfigured;
    BOOLEAN fAllowUpdate;
    BOOLEAN fDsAvailable;
    string pszServerName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDsContainer
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DnsAddrArray aipServerAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipListenAddrs with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipLogFilter with Technologies.IDL.IDL{IndirectionLevel = 1};
    string pwszLogFilePath
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pszDomainName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszForestName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszDomainDirectoryPartition
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pszForestDirectoryPartition
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    /*
    array<string> pExtensions
        with Technologies.IDL.IDL{Dimensions = [6],
                            IndirectionLevel = 1,
                            BaseStringType = TypeOf<char>()};
    */
    // Codec Bug 66616:[NDR Codec] Support array of string in NDR codec
    string pExtensions
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions1
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions2
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions3
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions4
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    string pExtensions5
        with Technologies.IDL.IDL{ IndirectionLevel = 1, BaseStringType = TypeOf<char>()};
    DNS_LOG_LEVELS dwLogLevel where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_LOG_LEVELS>(value), null, true, ReferenceType.Type, "DNSP", "dwLogLevel", "DnsRpcServerInfoLonghorn", "DNS_RPC_SERVER_INFO_LONGHORN", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_LOG_LEVELS>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwDebugLevel;
    DWORD dwForwardTimeout;
    DNS_RPC_PROTOCOLS dwRpcProtocol where ValidationCheckCombinationValue(InRange<DNS_RPC_PROTOCOLS>(value), null, true, ReferenceType.Type, "DNSP", "dwRpcProtocol", "DnsRpcServerInfoLonghorn", "0x00000001, 0x00000002, 0x00000004, 0xFFFFFFFF", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_PROTOCOLS>, SourcePattern = TypeOf<DWORD>()};
    DNS_NAME_CHECK_FLAGS dwNameCheckFlag where ValidationCheckEnumValue(InRange<DNS_NAME_CHECK_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwNameCheckFlag", "DnsRpcServerInfoLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_NAME_CHECK_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    DWORD cAddressAnswerLimit where ValidationCheck((0 == value) || (value >= 0x00000005 && value <= 0x0000001C), null, DiagnosisLevel.Error, () => Format(DNSP_STR_CHECK_cAddressAnswerLimit, "DnsRpcServerInfoLonghorn", value));
    DWORD dwRecursionRetry where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionRetry", "DnsRpcServerInfoLonghorn", 1, 15, value);
    DWORD dwRecursionTimeout where ValidationCheckValueInRange(value >= 1 && value <= 15, null, true, ReferenceType.Type, "DNSP", "dwRecursionTimeout", "DnsRpcServerInfoLonghorn", 1, 15, value);
    DWORD dwMaxCacheTtl;
    DWORD dwDsPollingInterval where ValidationCheckValueInRange(value >= 30 && value <= 3600, null, true, ReferenceType.Type, "DNSP", "dwDsPollingInterval", "DnsRpcServerInfoLonghorn", 30, 3600, value);
    DWORD dwLocalNetPriorityNetMask;
    DWORD dwScavengingInterval;
    DWORD dwDefaultRefreshInterval;
    DWORD dwDefaultNoRefreshInterval;
    DWORD dwLastScavengeTime;
    DNS_EVENTLOG_TYPES dwEventLogLevel where ValidationCheckCombinationValue(InRange<DNS_EVENTLOG_TYPES>(value), null, true, ReferenceType.Type, "DNSP", "dwEventLogLevel", "DnsRpcServerInfoLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<DNS_EVENTLOG_TYPES>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwLogFileMaxSize;
    DWORD dwDsForestVersion;
    DWORD dwDsDomainVersion;
    DWORD dwDsDsaVersion;
    BOOLEAN fReadOnlyDC;
    array<DWORD> dwReserveArray with Technologies.IDL.IDL{Dimensions = [3]};
    BOOLEAN fAutoReverseZones;
    BOOLEAN fAutoCacheUpdate;
    BOOLEAN fRecurseAfterForwarding;
    BOOLEAN fForwardDelegations;
    BOOLEAN fNoRecursion;
    BOOLEAN fSecureResponses;
    BOOLEAN fRoundRobin;
    BOOLEAN fLocalNetPriority;
    BOOLEAN fBindSecondaries;
    BOOLEAN fWriteAuthorityNs;
    BOOLEAN fStrictFileParsing;
    BOOLEAN fLooseWildcarding;
    BOOLEAN fDefaultAgingState;
    array<BOOLEAN> fReserveArray with Technologies.IDL.IDL{Dimensions = [15]};
}

type DnsRpcZoneCreateInfoLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000002 == value, null, false, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneCreateInfoLonghorn", 0x00000002, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcZoneCreateInfoLonghorn", value);
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneCreateInfoLonghorn", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneCreateInfoLonghorn", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fAging;
    DWORD dwFlags;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DWORD fDsIntegrated;
    DWORD fLoadExisting;
    string pszAdmin
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DnsAddrArray aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneCreateInfoLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneCreateInfoLonghorn", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwTimeout;
    DWORD fRecurseAfterForwarding;
    DNS_RPC_DP_FLAGS dwDpFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwDpFlags", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    array<DWORD> dwReserved with Technologies.IDL.IDL{Dimensions = [32]};
}

type DnssrvRpcForwardersLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000002 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcForwardersLonghorn", 0x00000002, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcForwardersLonghorn", value);
    DWORD fRecurseAfterForwarding;
    DWORD dwForwardTimeout;
    DnsAddrArray aipForwarders with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnssrvRpcZoneSecondariesLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000002 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneSecondariesLonghorn", 0x00000002, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneSecondariesLonghorn", value);
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnssrvRpcZoneSecondariesLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnssrvRpcZoneSecondariesLonghorn", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    DnsAddrArray aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnsRpcIPValidateLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcIPValidateLonghorn", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcIPValidateLonghorn", value);
    DNS_IPVAL_CONTEXT dwContext where ValidationCheckEnumValue(InRange<DNS_IPVAL_CONTEXT>(value), null, true, ReferenceType.Type, "DNSP", "dwContext", "DnsRpcIPValidateLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000003, 0x00000004", value)
        with Encoding{Decoder = PatternDecoder<DNS_IPVAL_CONTEXT>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwReserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved1", "DnsRpcIPValidateLonghorn", value);
    string pszContextName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DnsAddrArray aipValidateAddrs
        with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnsRpcZoneInfoLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000002 == value, null, false, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneInfoLonghorn", 0x00000002, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcZoneInfoLonghorn", value);
    string pszZoneName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_ZONE_TYPE dwZoneType where ValidationCheckEnumValue(InRange<DNS_ZONE_TYPE>(value as BYTE), null, true, ReferenceType.Type, "DNSP", "dwZoneType", "DnsRpcZoneInfoLonghorn", "0x00, 0x01, 0x02, 0x03, 0x04, 0x05", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_TYPE>, SourceConverter = DWORToBYTE, SourcePattern = TypeOf<DWORD>()};
    DWORD fReverse;
    DNS_RPC_ZONE_INFO_fAllowUpdate fAllowUpdate where ValidationCheckEnumValue(InRange<DNS_RPC_ZONE_INFO_fAllowUpdate>(value), null, true, ReferenceType.Type, "DNSP", "fAllowUpdate", "DnsRpcZoneInfoLonghorn", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_RPC_ZONE_INFO_fAllowUpdate>, SourcePattern = TypeOf<DWORD>()};
    DWORD fPaused;
    DWORD fShutdown;
    DWORD fAutoCreated;
    DWORD fUseDatabase;
    string pszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DnsAddrArray aipMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_ZONE_SECONDARY_SECURITY fSecureSecondaries where ValidationCheckEnumValue(InRange<DNS_ZONE_SECONDARY_SECURITY>(value), null, true, ReferenceType.Type, "DNSP", "fSecureSecondaries", "DnsRpcZoneInfoLonghorn", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_SECONDARY_SECURITY>, SourcePattern = TypeOf<DWORD>()};
    DNS_ZONE_NOTIFY_LEVEL fNotifyLevel where ValidationCheckEnumValue(InRange<DNS_ZONE_NOTIFY_LEVEL>(value), null, true, ReferenceType.Type, "DNSP", "fNotifyLevel", "DnsRpcZoneInfoLonghorn", "0x00000000, 0x00000001, 0x00000002", value)
        with Encoding{Decoder = PatternDecoder<DNS_ZONE_NOTIFY_LEVEL>, SourcePattern = TypeOf<DWORD>()};
    DnsAddrArray aipSecondaries with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray aipNotify with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD fUseWins;
    DWORD fUseNbstat;
    DWORD fAging;
    DWORD dwNoRefreshInterval;
    DWORD dwRefreshInterval;
    DWORD dwAvailForScavengeTime;
    DnsAddrArray aipScavengeServers
        with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORD dwForwarderTimeout;
    DWORD fForwarderSlave;
    DnsAddrArray aipLocalMasters with Technologies.IDL.IDL{IndirectionLevel = 1};
    DNS_RPC_DP_FLAGS dwDpFlags where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_RPC_DP_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "dwDpFlags", "DnssrvRpcZoneDotNet", "DNS_RPC_ZONE_DOTNET", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DNS_RPC_DP_FLAGS>, SourcePattern = TypeOf<DWORD>()};
    string pszDpFqdn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    string pwszZoneDn
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwLastSuccessfulSoaCheck;
    DWORD dwLastSuccessfulXfr;
    DWORD fQueuedForBackgroundLoad;
    DWORD fBackgroundLoadInProgress;
    BOOL fReadOnlyZone;
    DWORD dwLastXfrAttempt;
    DWORD dwLastXfrResult;
}

type DnsRpcAutoConfigureLonghorn
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000000 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcAutoConfigureLonghorn", 0x00000000, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcAutoConfigureLonghorn", value);
    DNS_RPC_AUTOCONFIG dwAutoConfigFlags with Encoding{Decoder = PatternDecoder<DNS_RPC_AUTOCONFIG>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwReserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved1", "DnsRpcAutoConfigureLonghorn", value);
    string pszNewDomainName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
}

type DnsRpcUtf8StringList
{
    DWORD dwCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 10000}};
    // Codec Bug 66616: [NDR Codec] Support array of string in NDR codec
    array<string> pszStrings with Technologies.IDL.IDL{Size_is = [dwCount],
                                                Dimensions = [null],
                                                IndirectionLevel = 1,
                                                BaseStringType = TypeOf<char>()};
}

type DnsRpcUnicodeStringList
{
    DWORD dwCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 10000}};
    // Codec Bug 66616: [NDR Codec] Support array of string in NDR codec
    array<string> pwszStrings
        with Technologies.IDL.IDL{Size_is = [dwCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1,
                                  BaseStringType = TypeOf<wchar_t>()};
}

type DnssrvRpcSigningKeyDescriptor
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcSigningKeyDescriptor", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcSigningKeyDescriptor", value);
    GUID Guid;
    string pwszKeyStorageProvider
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    BOOL fStoreKeysInDirectory;
    BOOL fIsKSK;
    BYTE bSigningAlgorithm;
    DWORD dwKeyLength;
    DWORD dwInitialRolloverOffset;
    DWORD dwDNSKEYSignatureValidityPeriod;
    DWORD dwDSSignatureValidityPeriod;
    DWORD dwStandardSignatureValidityPeriod;
    ZONE_SKD_ROLLOVER_TYPE dwRolloverType where ValidationCheckEnumValue(InRange<ZONE_SKD_ROLLOVER_TYPE>(value), null, true, ReferenceType.Type, "DNSP", "dwRolloverType", "DnssrvRpcSigningKeyDescriptor", "0x00000000, 0x00000001", value)
        with Encoding{Decoder = PatternDecoder<ZONE_SKD_ROLLOVER_TYPE>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwRolloverPeriod;
    ZONE_SKD_ROLLOVER_ACTION dwNextRolloverAction where ValidationCheckEnumValue(InRange<ZONE_SKD_ROLLOVER_ACTION>(value), null, true, ReferenceType.Type, "DNSP", "dwNextRolloverAction", "DnssrvRpcSigningKeyDescriptor", "0x00000000, 0x00000001, 0x00000002, 0x00000003", value)
        with Encoding{Decoder = PatternDecoder<ZONE_SKD_ROLLOVER_ACTION>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnssrvRpcSigningKeyDescriptor", value);
}

type DnssrvRpcZoneSigningKeyList
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneSigningKeyList", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneSigningKeyList", value);
    DWORD dwCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 1000}};
    array<DnssrvRpcSigningKeyDescriptor> SkdArray
        with Technologies.IDL.IDL
                 {Size_is = [dwCount], Dimensions = [null], IndirectionLevel = 1};
}

type DnsRpcSigningKeyDescriptorState
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcSigningKeyDescriptorState", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcSigningKeyDescriptorState", value);
    GUID Guid;
    FILETIME ftLastRolloverTime;
    FILETIME ftNextRolloverTime;
    DnsRpcSigningKeyDescriptorState_dwState dwState where ValidationCheckEnumValue(InRange<DnsRpcSigningKeyDescriptorState_dwState>(value), null, true, ReferenceType.Type, "DNSP", "dwState", "DnsRpcSigningKeyDescriptorState", "0x00000000, 0x00000001", value)
        with Encoding{Decoder = PatternDecoder<DnsRpcSigningKeyDescriptorState_dwState>, SourcePattern = TypeOf<DWORD>()};
    DnsRpcSigningKeyDescriptorState_dwCurrentRolloverStatus dwCurrentRolloverStatus where ValidationCheckEnumValueTooManyItems(InRange<DnsRpcSigningKeyDescriptorState_dwCurrentRolloverStatus>(value), null, true, ReferenceType.Type, "DNSP", "dwCurrentRolloverStatus", "DnsRpcSigningKeyDescriptorState", "DNS_RPC_SKD_STATE", "MS-DNSP")
        with Encoding{Decoder = PatternDecoder<DnsRpcSigningKeyDescriptorState_dwCurrentRolloverStatus>, SourcePattern = TypeOf<DWORD>()};
    string pwszActiveKey
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszStandbyKey
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszNextKey
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnsRpcSigningKeyDescriptorState", value);
}

type DnssrvRpcSigningValidationError
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcSigningValidationError", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcSigningValidationError", value);
    GUID guidSKD;
    string pwszSigningKeyPointerString
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwExtendedError where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwExtendedError", "DnssrvRpcSigningValidationError", value);
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnssrvRpcSigningValidationError", value);
}

type DnssrvRpcTrustPointList
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcTrustPointList", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcTrustPointList", value);
    DWORD dwTrustPointCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 500000}};
    array<DnssrvRpcTrustPoint> TrustPointArray
        with Technologies.IDL.IDL{Size_is = [dwTrustPointCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

type DnssrvRpcTrustPoint
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcTrustPoint", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcTrustPoint", value);
    string pszTrustPointName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    TRUSTPOINT_STATE eTrustPointState;
    __int64 i64LastActiveRefreshTime;
    __int64 i64NextActiveRefreshTime;
    __int64 i64LastSuccessfulActiveRefreshTime;
    DWORD dwLastActiveRefreshResult;
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnssrvRpcTrustPoint", value);
}

pattern TRUSTPOINT_STATE = enum 
    {
        TRUSTPOINT_STATE_INITIALIZED = 0,
        TRUSTPOINT_STATE_DSPENDING = 1,
        TRUSTPOINT_STATE_ACTIVE = 2,
        TRUSTPOINT_STATE_DELETE_PENDING = 3,
        TRUSTPOINT_STATE_DELETED = 4
    };

type DnssrvRpcTrustAnchorList
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcTrustAnchorList", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcTrustAnchorList", value);
    DWORD dwTrustAnchorCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 500000}};
    array<DnssrvRpcTrustAnchor> TrustAnchorArray
        with Technologies.IDL.IDL{Size_is = [dwTrustAnchorCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

type DnssrvRpcTrustAnchor
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcTrustAnchor", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcTrustAnchor", value);
    DnssrvRpcTrustAnchor_wTrustAnchorType wTrustAnchorType where ValidationCheckEnumValue(InRange<DnssrvRpcTrustAnchor_wTrustAnchorType>(value), null, true, ReferenceType.Type, "DNSP", "wTrustAnchorType", "DnssrvRpcTrustAnchor", "0x002B, 0x0030", value)
        with Encoding{Decoder = PatternDecoder<DnssrvRpcTrustAnchor_wTrustAnchorType>, SourcePattern = TypeOf<WORD>()};
    WORD wKeyTag;
    WORD wRRLength;
    TRUSTANCHOR_STATE eTrustAnchorState where ValidationCheckEnumValue(InRange<TRUSTANCHOR_STATE>(value), null, true, ReferenceType.Type, "DNSP", "eTrustAnchorState", "DnssrvRpcTrustAnchor", "0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006", value);
    __int64 i64EnteredStateTime;
    __int64 i64NextStateTime;
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnssrvRpcTrustAnchor", value);
    (
        [|wTrustAnchorType == DnssrvRpcTrustAnchor_wTrustAnchorType.DNS_TYPE_DNSKEY|]DNS_RPC_RECORD_DNSKEY[wRRLength] | 
        [|wTrustAnchorType == DnssrvRpcTrustAnchor_wTrustAnchorType.DNS_TYPE_DS|]DNS_RPC_RECORD_DS[wRRLength]
    )  RRData with Technologies.IDL.IDL{Size_is = [wRRLength], Dimensions = [null]},
                    Encoding{Decoder = BinaryDecoder<any>, SourcePattern = TypeOf<BufferPattern>()};
}

pattern TRUSTANCHOR_STATE = enum 
    {
        TRUSTANCHOR_STATE_INITIALIZED = 0,
        TRUSTANCHOR_STATE_DSPENDING = 1,
        TRUSTANCHOR_STATE_DSINVALID = 2,
        TRUSTANCHOR_STATE_ADDPEND = 3,
        TRUSTANCHOR_STATE_VALID = 4,
        TRUSTANCHOR_STATE_MISSING = 5,
        TRUSTANCHOR_STATE_REVOKED = 6,
        TRUSTANCHOR_STATE_DELETED = 7
    };

type DnssrvRpcZoneDnssecSettings
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneDnssecSettings", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneDnssecSettings", value);
    DWORD fIsSigned;
    DWORD fSignWithNSEC3;
    DWORD fNSEC3OptOut;
    DWORD dwMaintainTrustAnchor;
    DWORD fParentHasSecureDelegation;
    DWORD dwDSRecordAlgorithms;
    DWORD fRFC5011KeyRollovers;
    BYTE bNSEC3HashAlgorithm;
    BYTE bNSEC3RandomSaltLength;
    WORD wNSEC3IterationCount;
    string pwszNSEC3UserSalt
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwDNSKEYRecordSetTtl;
    DWORD dwDSRecordSetTtl;
    DWORD dwSignatureInceptionOffset;
    DWORD dwSecureDelegationPollingPeriod;
    DWORD dwPropagationTime;
    DWORD cbNSEC3CurrentSaltLength;
    array<BYTE> pbNSEC3CurrentSalt with Technologies.IDL.IDL{IndirectionLevel = 1, Size_is=[cbNSEC3CurrentSaltLength]};
    GUID CurrentRollingSKDGuid;
    DWORD dwBufferLength;
    array<ResourceRecord> pBuffer with Technologies.IDL.IDL{ IndirectionLevel = 1, Size_is=[dwBufferLength]},
                                Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};
    DWORD dwCount;
    array<DnssrvRpcZoneSKDSettings> pZoneSkdArray
        with Technologies.IDL.IDL{IndirectionLevel = 1, Size_is=[dwCount], Dimensions = [null]};
}

type DnssrvRpcZoneSKDSettings
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnssrvRpcZoneSKDSettings", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnssrvRpcZoneSKDSettings", value);
    DnssrvRpcSigningKeyDescriptor pSkd
        with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsRpcSigningKeyDescriptorState pSkdState
        with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsRpcSigningKeyDescriptorStateEx pSkdStateEx
        with Technologies.IDL.IDL{IndirectionLevel = 1};
}

type DnsRpcSigningKeyDescriptorStateEx
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcSigningKeyDescriptorStateEx", 0x00000001, value);
    DWORD dwReserved0 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved0", "DnsRpcSigningKeyDescriptorStateEx", value);
    GUID Guid;
    DnsRpcSigningKeyDescriptorStateEx_dwCurrentRollState dwCurrentRollState with Encoding{Decoder = PatternDecoder<DnsRpcSigningKeyDescriptorStateEx_dwCurrentRollState>, SourcePattern = TypeOf<DWORD>()};
    DWORD fManualTrigger;
    DWORD dwPreRollEventFired;
    FILETIME ftNextKeyGenerationTime;
    DWORD dwRevokedOrSwappedDnskeysLength;
    array<ResourceRecord> pRevokedOrSwappedDnskeysBuffer with Technologies.IDL.IDL{ IndirectionLevel = 1, Size_is=[dwRevokedOrSwappedDnskeysLength]},
                                Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};
    DWORD dwFinalDnskeysLength;
    array<ResourceRecord> pFinalDnskeys with Technologies.IDL.IDL{ IndirectionLevel = 1, Size_is=[dwFinalDnskeysLength]},
                                Encoding{Decoder = BinaryDecoder<array<ResourceRecord>>, SourcePattern = TypeOf<BufferPattern>()};
    KeySignScope eActiveKeyScope;
    KeySignScope eStandByKeyScope;
    KeySignScope eNextKeyScope;
}

pattern KeySignScope = enum 
                       {
                           SIGN_SCOPE_DEFAULT = 0,
                           SIGN_SCOPE_DNSKEY_ONLY = 1,
                           SIGN_SCOPE_ALL_RECORDS = 2,
                           SIGN_SCOPE_ADD_ONLY = 3,
                           SIGN_SCOPE_DO_NOT_PUBLISH = 4,
                           SIGN_SCOPE_REVOKED = 5
                       };

type DnsRpcEnumZoneScopeList
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcEnumZoneScopeList", 0x00000001, value);
    DWORD dwZoneScopeCount;
    //array<wchar_t> ZoneScopeArray
    //    with Technologies.IDL.IDL{Dimensions = [1], IndirectionLevel = 1};
    // Codec Bug 66616: [NDR Codec] Support array of string in NDR codec
    array<string> ZoneScopeArray with Technologies.IDL.IDL{Size_is = [dwZoneScopeCount],
                                                Dimensions = [null],
                                                IndirectionLevel = 1,
                                                BaseStringType = TypeOf<wchar_t>()};
}

type DnsRpcZoneStats
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneStats", 0x00000001, value);
    DNSSRV_ZONE_TIME_STATS ZoneTimeStats;
    array<DNSSRV_ZONE_QUERY_STATS> ZoneQueryStats
        with Technologies.IDL.IDL{Dimensions = [31]};
    array<DNSSRV_ZONE_TRANSFER_STATS> ZoneTransferStats
        with Technologies.IDL.IDL{Dimensions = [2]};
    DNSSRV_ZONE_UPDATE_STATS ZoneUpdateStats;
    optional DNSSRV_ZONE_RRL_STATS ZoneRRLStats;
}

typedef DNSSRV_ZONE_TIME_STATS = DnsZoneTimeStats;

type DnsZoneTimeStats
{
    DNS_SYSTEMTIME StatsCollectionStartTime;
}

typedef DNS_SYSTEMTIME = DnsSystemTime;

type DnsSystemTime
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
}

typedef DNSSRV_ZONE_QUERY_STATS = DnsZoneQueryStats;

type DnsZoneQueryStats
{
    DNS_ZONE_STATS_TYPE RecordType;
    ULONG64 QueriesResponded;
    ULONG64 QueriesReceived;
    ULONG64 QueriesFailure;
    ULONG64 QueriesNameError;
}

pattern DNS_ZONE_STATS_TYPE = enum 
                              {
                                  ZONE_STATS_TYPE_RECORD_A = 0,
                                  ZONE_STATS_TYPE_RECORD_AAAA = 1,
                                  ZONE_STATS_TYPE_RECORD_PTR = 2,
                                  ZONE_STATS_TYPE_RECORD_CNAME = 3,
                                  ZONE_STATS_TYPE_RECORD_MX = 4,
                                  ZONE_STATS_TYPE_RECORD_AFSDB = 5,
                                  ZONE_STATS_TYPE_RECORD_ATMA = 6,
                                  ZONE_STATS_TYPE_RECORD_DHCID = 7,
                                  ZONE_STATS_TYPE_RECORD_DNAME = 8,
                                  ZONE_STATS_TYPE_RECORD_HINFO = 9,
                                  ZONE_STATS_TYPE_RECORD_ISDN = 10,
                                  ZONE_STATS_TYPE_RECORD_MG = 11,
                                  ZONE_STATS_TYPE_RECORD_MB = 12,
                                  ZONE_STATS_TYPE_RECORD_MINFO = 13,
                                  ZONE_STATS_TYPE_RECORD_NAPTR = 14,
                                  ZONE_STATS_TYPE_RECORD_NXT = 15,
                                  ZONE_STATS_TYPE_RECORD_KEY = 16,
                                  ZONE_STATS_TYPE_RECORD_MR = 17,
                                  ZONE_STATS_TYPE_RECORD_RP = 18,
                                  ZONE_STATS_TYPE_RECORD_RT = 19,
                                  ZONE_STATS_TYPE_RECORD_SRV = 20,
                                  ZONE_STATS_TYPE_RECORD_SIG = 21,
                                  ZONE_STATS_TYPE_RECORD_TEXT = 22,
                                  ZONE_STATS_TYPE_RECORD_WKS = 23,
                                  ZONE_STATS_TYPE_RECORD_X25 = 24,
                                  ZONE_STATS_TYPE_RECORD_DNSKEY = 25,
                                  ZONE_STATS_TYPE_RECORD_DS = 26,
                                  ZONE_STATS_TYPE_RECORD_NS = 27,
                                  ZONE_STATS_TYPE_RECORD_SOA = 28,
                                  ZONE_STATS_TYPE_RECORD_TLSA = 29,
                                  ZONE_STATS_TYPE_RECORD_ALL = 30,
                                  ZONE_STATS_TYPE_RECORD_OTHERS = 31,
                                  ZONE_STATS_TYPE_TRANSFER_AXFR = 32,
                                  ZONE_STATS_TYPE_TRANSFER_IXFR = 33,
                                  ZONE_STATS_TYPE_UPDATE = 34,
                                  ZONE_STATS_TYPE_RRL = 35,
                                  MAX_ZONE_STATS_TYPES = 36
                              };

typedef DNSSRV_ZONE_TRANSFER_STATS = DnsZoneTransferStats;

type DnsZoneTransferStats
{
    DNS_ZONE_STATS_TYPE TransferType;
    ULONG64 RequestReceived;
    ULONG64 RequestSent;
    ULONG64 ResponseReceived;
    ULONG64 SuccessReceived;
    ULONG64 SuccessSent;
}

typedef DNSSRV_ZONE_UPDATE_STATS = DnsZoneUpdateStats;

type DnsZoneUpdateStats
{
    DNS_ZONE_STATS_TYPE Type;
    ULONG64 DynamicUpdateReceived;
    ULONG64 DynamicUpdateRejected;
}

type DnsRpcScopeCreate
{
    DWORD dwFlags;
    string pwszScopeName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

type DnsRpcZoneScopeInfo
{
    DWORD dwRpcStructureVersion where ValidationCheckValue(0x00000001 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcZoneScopeInfo", 0x00000001, value);
    string pwszScopeName
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszDataFile
        with Technologies.IDL.IDL
                 {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

type DnsRpcEnumScopeList
{
    DWORD dwRpcStructureVersion where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwRpcStructureVersion", "DnsRpcEnumScopeList", value);
    DWORD dwScopeCount;
    //array<wchar_t> ScopeArray
    //    with Technologies.IDL.IDL{Dimensions = [1], IndirectionLevel = 1};
    // Codec Bug 66616: [NDR Codec] Support array of string in NDR codec
    array<string> ScopeArray with Technologies.IDL.IDL{Size_is = [dwScopeCount],
                                                Dimensions = [null],
                                                IndirectionLevel = 1,
                                                BaseStringType = TypeOf<wchar_t>()};
}

type DnssrvRpcRecord
{
    WORD wDataLength;
    DNS_RECORD_TYPE wType with Encoding{Decoder = PatternDecoder<DNS_RECORD_TYPE>, SourcePattern = TypeOf<WORD>()};
    DnssrvRpcRecord_dwFlags dwFlags with Encoding{Decoder = PatternDecoder<DnssrvRpcRecord_dwFlags>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwSerial where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwSerial", "DnssrvRpcRecord", value);
    DWORD dwTtlSeconds;
    DWORD dwTimeStamp;
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DnssrvRpcRecord", value);
    (
        ([|DNS_RECORD_TYPE.DNS_TYPE_ZERO == wType|] DNS_RPC_RECORD_TS) |                            // 0x0000
        ([|DNS_RECORD_TYPE.DNS_TYPE_A == wType|] DNS_RPC_RECORD_A) |                                // 0x0001
        ([|DNS_RECORD_TYPE.DNS_TYPE_NS == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0002
        ([|DNS_RECORD_TYPE.DNS_TYPE_MD == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0003
        ([|DNS_RECORD_TYPE.DNS_TYPE_MF == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0004
        ([|DNS_RECORD_TYPE.DNS_TYPE_CNAME == wType|] DNS_RPC_RECORD_NODE_NAME) |                    // 0x0005
        ([|DNS_RECORD_TYPE.DNS_TYPE_SOA == wType|] DNS_RPC_RECORD_SOA) |                            // 0x0006
        ([|DNS_RECORD_TYPE.DNS_TYPE_MB == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0007
        ([|DNS_RECORD_TYPE.DNS_TYPE_MG == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0008
        ([|DNS_RECORD_TYPE.DNS_TYPE_MR == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0009
        ([|DNS_RECORD_TYPE.DNS_TYPE_NULL == wType|] DNS_RPC_RECORD_NULL[wDataLength]) |             // 0x000A
        ([|DNS_RECORD_TYPE.DNS_TYPE_WKS == wType|] DNS_RPC_RECORD_WKS) |                            // 0x000B
        ([|DNS_RECORD_TYPE.DNS_TYPE_PTR == wType|] DNS_RPC_RECORD_NODE_NAME) |                      // 0x000C
        ([|DNS_RECORD_TYPE.DNS_TYPE_HINFO == wType|] DNS_RPC_RECORD_STRING) |                       // 0x000D
        ([|DNS_RECORD_TYPE.DNS_TYPE_MINFO == wType|] DNS_RPC_RECORD_MAIL_ERROR) |                   // 0x000E
        ([|DNS_RECORD_TYPE.DNS_TYPE_MX == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |                 // 0x000F
        ([|DNS_RECORD_TYPE.DNS_TYPE_TXT == wType|] DNS_RPC_RECORD_STRING) |                         // 0x0010
        ([|DNS_RECORD_TYPE.DNS_TYPE_RP == wType|] DNS_RPC_RECORD_MAIL_ERROR) |                      // 0x0011
        ([|DNS_RECORD_TYPE.DNS_TYPE_AFSDB == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |              // 0x0012
        ([|DNS_RECORD_TYPE.DNS_TYPE_X25 == wType|] DNS_RPC_RECORD_STRING) |                         // 0x0013
        ([|DNS_RECORD_TYPE.DNS_TYPE_ISDN == wType|] DNS_RPC_RECORD_STRING) |                        // 0x0014
        ([|DNS_RECORD_TYPE.DNS_TYPE_RT == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |                 // 0x0015
        ([|DNS_RECORD_TYPE.DNS_TYPE_SIG == wType|] DNS_RPC_RECORD_SIG[wDataLength]) |               // 0x0018
        ([|DNS_RECORD_TYPE.DNS_TYPE_KEY == wType|] DNS_RPC_RECORD_KEY[wDataLength]) |               // 0x0019
        ([|DNS_RECORD_TYPE.DNS_TYPE_AAAA == wType|] DNS_RPC_RECORD_AAAA) |                          // 0x001C
        ([|DNS_RECORD_TYPE.DNS_TYPE_NXT == wType|] DNS_RPC_RECORD_NXT) |                            // 0x001E
        ([|DNS_RECORD_TYPE.DNS_TYPE_SRV == wType|] DNS_RPC_RECORD_SRV) |                            // 0x0021
        ([|DNS_RECORD_TYPE.DNS_TYPE_ATMA == wType|] DNS_RPC_RECORD_ATMA[wDataLength]) |             // 0x0022
        ([|DNS_RECORD_TYPE.DNS_TYPE_NAPTR == wType|] DNS_RPC_RECORD_NAPTR) |           // 0x0023
        ([|DNS_RECORD_TYPE.DNS_TYPE_DNAME == wType|] DNS_RPC_RECORD_NODE_NAME) |                    // 0x0027
        ([|DNS_RECORD_TYPE.DNS_TYPE_DS == wType|] DNS_RPC_RECORD_DS[wDataLength]) |                 // 0x002B
        ([|DNS_RECORD_TYPE.DNS_TYPE_RRSIG == wType|] DNS_RPC_RECORD_RRSIG[wDataLength]) |           // 0x002E
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC == wType|] DNS_RPC_RECORD_NSEC[wDataLength]) |             // 0x002F
        ([|DNS_RECORD_TYPE.DNS_TYPE_DNSKEY == wType|] DNS_RPC_RECORD_DNSKEY[wDataLength]) |         // 0x0030
        ([|DNS_RECORD_TYPE.DNS_TYPE_DHCID == wType|] DNS_RPC_RECORD_DHCID[wDataLength]) |           // 0x0031
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC3 == wType|] DNS_RPC_RECORD_NSEC3[wDataLength]) |           // 0x0032
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC3PARAM == wType|] DNS_RPC_RECORD_NSEC3PARAM) |              // 0x0033
        ([|DNS_RECORD_TYPE.DNS_TYPE_TLSA == wType|] DNS_RPC_RECORD_TLSA[wDataLength]) |             // 0x0034
        ([|DNS_RECORD_TYPE.DNS_TYPE_WINS == wType|] DNS_RPC_RECORD_WINS[wDataLength]) |             // 0xFF01
        ([|DNS_RECORD_TYPE.DNS_TYPE_WINSR == wType|] DNS_RPC_RECORD_WINSR) |                        // 0xFF02
        ([|(dwFlags & DnssrvRpcRecord_dwFlags.DNS_RPC_FLAG_RECORD_WIRE_FORMAT) != 0|] DNS_RPC_RECORD_UNKNOWN[wDataLength]) |
        array<BYTE>
    ) Buffer
        with Encoding{Decoder = BinaryDecoder<any>, SourcePattern = TypeOf<BufferPattern>()},
             Technologies.IDL.IDL{Size_is = [wDataLength], Dimensions = [null]},
             BinaryEncoding{Length = wDataLength};
};

pattern DnssrvRpcRecord_dwFlags = flags DWORD
{
    RANK_CACHE_BIT = 0x00000001,
    RANK_ROOT_HINT = 0x00000008,
    RANK_OUTSIDE_GLUE = 0x00000020,
    RANK_CACHE_NA_ADDITIONAL = 0x00000031,
    RANK_CACHE_NA_AUTHORITY = 0x00000041,
    RANK_CACHE_A_ADDITIONAL = 0x00000051,
    RANK_CACHE_NA_ANSWER = 0x00000061,
    RANK_CACHE_A_AUTHORITY = 0x00000071,
    RANK_GLUE = 0x00000080,
    RANK_NS_GLUE = 0x00000082,
    RANK_CACHE_A_ANSWER = 0x000000c1,
    RANK_ZONE = 0x000000f0,
    DNS_RPC_FLAG_ZONE_ROOT = 0x40000000,
    DNS_RPC_FLAG_AUTH_ZONE_ROOT = 0x20000000,
    DNS_RPC_FLAG_CACHE_DATA = 0x80000000,
    DNS_RPC_FLAG_RECORD_WIRE_FORMAT = 0x00100000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.1 *******************************************
// 2.2.1.1.1   DNS_RPC_TYPEID
pattern DnssrvRpcTypeId = enum DWORD
{
    DNSSRV_TYPEID_NULL = 0,
    DNSSRV_TYPEID_DWORD = 1,
    DNSSRV_TYPEID_LPSTR = 2,
    DNSSRV_TYPEID_LPWSTR = 3,
    DNSSRV_TYPEID_IPARRAY = 4,
    DNSSRV_TYPEID_BUFFER = 5,                       //  5
    DNSSRV_TYPEID_SERVER_INFO_W2K = 6,
    DNSSRV_TYPEID_STATS = 7,
    DNSSRV_TYPEID_FORWARDERS_W2K = 8,
    DNSSRV_TYPEID_ZONE_W2K = 9,
    DNSSRV_TYPEID_ZONE_INFO_W2K = 10,                //  10
    DNSSRV_TYPEID_ZONE_SECONDARIES_W2K = 11,
    DNSSRV_TYPEID_ZONE_DATABASE_W2K = 12,
    DNSSRV_TYPEID_ZONE_TYPE_RESET_W2K = 13,
    DNSSRV_TYPEID_ZONE_CREATE_W2K = 14,
    DNSSRV_TYPEID_NAME_AND_PARAM = 15,               //  15
    DNSSRV_TYPEID_ZONE_LIST_W2K = 16,
    DNSSRV_TYPEID_ZONE_RENAME = 17,
    DNSSRV_TYPEID_ZONE_EXPORT = 18,
    DNSSRV_TYPEID_SERVER_INFO_DOTNET = 19,
    DNSSRV_TYPEID_FORWARDERS_DOTNET = 20,            //  20
    DNSSRV_TYPEID_ZONE = 21,
    DNSSRV_TYPEID_ZONE_INFO_DOTNET = 22,
    DNSSRV_TYPEID_ZONE_SECONDARIES_DOTNET = 23,
    DNSSRV_TYPEID_ZONE_DATABASE = 24,
    DNSSRV_TYPEID_ZONE_TYPE_RESET_DOTNET = 25,       //  25
    DNSSRV_TYPEID_ZONE_CREATE_DOTNET = 26,
    DNSSRV_TYPEID_ZONE_LIST = 27,
    DNSSRV_TYPEID_DP_ENUM = 28,
    DNSSRV_TYPEID_DP_INFO = 29,
    DNSSRV_TYPEID_DP_LIST = 30,                      //  30
    DNSSRV_TYPEID_ENLIST_DP = 31,
    DNSSRV_TYPEID_ZONE_CHANGE_DP = 32,
    DNSSRV_TYPEID_ENUM_ZONES_FILTER = 33,
    DNSSRV_TYPEID_ADDRARRAY = 34,
    DNSSRV_TYPEID_SERVER_INFO = 35,                  //  35
    DNSSRV_TYPEID_ZONE_INFO = 36,
    DNSSRV_TYPEID_FORWARDERS = 37,
    DNSSRV_TYPEID_ZONE_SECONDARIES = 38,
    DNSSRV_TYPEID_ZONE_TYPE_RESET = 39,
    DNSSRV_TYPEID_ZONE_CREATE = 40,                  //  40
    DNSSRV_TYPEID_IP_VALIDATE = 41,
    DNSSRV_TYPEID_AUTOCONFIGURE = 42,
    DNSSRV_TYPEID_UTF8_STRING_LIST = 43,
    DNSSRV_TYPEID_UNICODE_STRING_LIST = 44,
    DNSSRV_TYPEID_SKD = 45,                          //  45
    DNSSRV_TYPEID_SKD_LIST = 46,
    DNSSRV_TYPEID_SKD_STATE = 47,
    DNSSRV_TYPEID_SIGNING_VALIDATION_ERROR = 48,
    DNSSRV_TYPEID_TRUST_POINT_LIST = 49,
    DNSSRV_TYPEID_TRUST_ANCHOR_LIST = 50,            //  50
    DNSSRV_TYPEID_ZONE_SIGNING_SETTINGS = 51,        
    DNSSRV_TYPEID_ZONE_SCOPE_ENUM = 52,
    DNSSRV_TYPEID_ZONE_STATS = 53,
    DNSSRV_TYPEID_ZONE_SCOPE_CREATE = 54,
    DNSSRV_TYPEID_ZONE_SCOPE_INFO = 55,              //  55
    DNSSRV_TYPEID_SCOPE_ENUM = 56,
    DNSSRV_TYPEID_CLIENT_SUBNET_RECORD = 57,
    DNSSRV_TYPEID_POLICY = 58,
    DNSSRV_TYPEID_POLICY_NAME = 59,
    DNSSRV_TYPEID_POLICY_ENUM = 60,                   //  60
    DNSSRV_TYPEID_RRL = 61,
    DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE = 62,
    DNSSRV_TYPEID_VIRTUALIZATION_INSTANCE_ENUM = 63,
    ...
} with Encoding{EncodingKind = EncodingKind.Binary}, Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.1.1.2   DNS_RPC_PROTOCOLS
pattern DNS_RPC_PROTOCOLS = flags DWORD 
{
    DNS_RPC_USE_TCPIP = 0x00000001,
    DNS_RPC_USE_NAMED_PIPE = 0x00000002,
    DNS_RPC_USE_LPC = 0x00000004,
    DNS_RPC_USE_ALL_PROTOCOLS = 0xFFFFFFFF,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.1.2.1   DNS_RPC_CURRENT_CLIENT_VER
pattern DWORDPattern = DWORD with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

optional DNS_RPC_CURRENT_CLIENT_VER ClientVersionDecoder(DWORD val)
{
    DNS_RPC_CURRENT_CLIENT_VER clientVersion = new DNS_RPC_CURRENT_CLIENT_VER {};
    clientVersion.DNSRPCClientMajorVersion = val as USHORT;
    clientVersion.DNSRPCClientMinorVersion = (val >> 16) as USHORT;
    return clientVersion;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type DNS_RPC_CURRENT_CLIENT_VER 
{
    DNS_RPC_CURRENT_CLIENT_VER_DNSRPCClientMajorVersion DNSRPCClientMajorVersion where ValidationCheckEnumValue(InRange<DNS_RPC_CURRENT_CLIENT_VER_DNSRPCClientMajorVersion>(value), null, true, ReferenceType.Type, "DNSP", "DNSRPCClientMajorVersion", "DNS_RPC_CURRENT_CLIENT_VER", "0x0000, 0x0006, 0x0007", value);
    // Codec Bug 66847:[Mix-encoding] ValidationCheck don't work correctly
    USHORT DNSRPCClientMinorVersion; // where ValidationCheckZero(false, null, true, ReferenceType.Type, "DNSP", "DNSRPCClientMinorVersion", "DNS_RPC_CURRENT_CLIENT_VER", value); 
    override string ToString()
    {
        return DNSRPCClientMajorVersion.ToString() + "." + DNSRPCClientMinorVersion.ToString();
    }
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

pattern DNS_RPC_CURRENT_CLIENT_VER_DNSRPCClientMajorVersion = enum WORD
{
    DoNotRequireSpecificVersionNumbers = 0x0000,
    AssociatedWithVersion6 = 0x0006,
    AssociatedWithVersion7 = 0x0007,
    ...
} with IDL{DoNotGenerate = true};

// 2.2.2 *******************************************
// 2.2.2.1.1   DNS_RECORD_TYPE
pattern DNS_RECORD_TYPE = enum WORD
{
    DNS_TYPE_ZERO = 0x0000,
    DNS_TYPE_A = 0x0001,
    DNS_TYPE_NS = 0x0002,
    DNS_TYPE_MD = 0x0003,
    DNS_TYPE_MF = 0x0004,
    DNS_TYPE_CNAME = 0x0005,
    DNS_TYPE_SOA = 0x0006,
    DNS_TYPE_MB = 0x0007,
    DNS_TYPE_MG = 0x0008,
    DNS_TYPE_MR = 0x0009,
    DNS_TYPE_NULL = 0x000A,
    DNS_TYPE_WKS = 0x000B,
    DNS_TYPE_PTR = 0x000C,
    DNS_TYPE_HINFO = 0x000D,
    DNS_TYPE_MINFO = 0x000E,
    DNS_TYPE_MX = 0x000F,
    DNS_TYPE_TXT = 0x0010,
    DNS_TYPE_RP = 0x0011,
    DNS_TYPE_AFSDB = 0x0012,
    DNS_TYPE_X25 = 0x0013,
    DNS_TYPE_ISDN = 0x0014,
    DNS_TYPE_RT = 0x0015,
    DNS_TYPE_SIG = 0x0018,
    DNS_TYPE_KEY = 0x0019,
    DNS_TYPE_AAAA = 0x001C,
    DNS_TYPE_LOC = 0x001D,
    DNS_TYPE_NXT = 0x001E,
    DNS_TYPE_SRV = 0x0021,
    DNS_TYPE_ATMA = 0x0022,
    DNS_TYPE_NAPTR = 0x0023,
    DNS_TYPE_DNAME = 0x0027,
    DNS_TYPE_DS = 0x002B,
    DNS_TYPE_RRSIG = 0x002E,
    DNS_TYPE_NSEC = 0x002F,
    DNS_TYPE_DNSKEY = 0x0030,
    DNS_TYPE_DHCID = 0x0031,
    DNS_TYPE_NSEC3 = 0x0032,
    DNS_TYPE_NSEC3PARAM = 0x0033,
    DNS_TYPE_TLSA = 0x0034,
    DNS_TYPE_ALL = 0x00FF,
    DNS_TYPE_WINS = 0xFF01,
    DNS_TYPE_WINSR = 0xFF02,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.2.1.2   DNS_RPC_NODE_FLAGS
pattern DNS_RPC_NODE_FLAGS = enum DWORD
{
    DNS_RPC_FLAG_CACHE_DATA = 0x80000000,
    DNS_RPC_FLAG_ZONE_ROOT = 0x40000000,
    DNS_RPC_FLAG_AUTH_ZONE_ROOT = 0x20000000,
    DNS_RPC_FLAG_ZONE_DELEGATION = 0x10000000,
    DNS_RPC_FLAG_RECORD_DEFAULT_TTL = 0x08000000,
    DNS_RPC_FLAG_RECORD_TTL_CHANGE = 0x04000000,
    DNS_RPC_FLAG_RECORD_CREATE_PTR = 0x02000000,
    DNS_RPC_FLAG_NODE_STICKY = 0x01000000,
    DNS_RPC_FLAG_NODE_COMPLETE = 0x00800000,
    DNS_RPC_FLAG_SUPPRESS_NOTIFY = 0x00010000,
    DNS_RPC_FLAG_AGING_ON = 0x00020000,
    DNS_RPC_FLAG_OPEN_ACL = 0x00040000,
    DNS_RPC_FLAG_RECORD_WIRE_FORMAT = 0x00100000,
    DNS_RPC_FLAG_SUPPRESS_RECORD_UPDATE_PTR = 0x00200000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.2.2.1   DNS_RPC_NAME
type DNS_RPC_NAME 
{
    BYTE cchNameLength;
    string dnsName with Encoding{Decoder = DecodeOctetStringAsUTF8, SourcePattern = TypeOf<BinaryPattern>()},
                        BinaryEncoding {Length = cchNameLength};
    // string dnsName with BinaryEncoding {TextEncoding = TextEncoding.UTF8, Length = cchNameLength};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// WORKAROUND for UTF8 decoding
pattern BinaryPattern = binary with Encoding{EncodingKind = EncodingKind.Binary},
                                    IDL{DoNotGenerate = true}, Documentation{Ignore = true};

optional string DecodeOctetStringAsUTF8(any a)
{
    assert a is binary;
    var s = BinaryDecoder<UTF8StringWrapper>(a as binary);
    return s is nothing ? a.ToString() : (s as UTF8StringWrapper).Text;
} with IDL{DoNotGenerate = true};

type UTF8StringWrapper
{
    string Text;
} with Encoding{EncodingKind = EncodingKind.Binary},
       BinaryEncodingDefaults{TextEncoding = TextEncoding.UTF8},
       IDL{DoNotGenerate = true};

// 2.2.2.2.3   DNS_RPC_NODE
type DNS_RPC_NODE
{
    USHORT wLength;
    USHORT wRecordCount;
    DNS_RPC_NODE_FLAGS dwFlags;
    DWORD dwChildCount;
    DNS_RPC_NAME dnsNodeName;
    binary Padding with BinaryEncoding{Length = (wLength - 12 - (dnsNodeName.cchNameLength + 1))};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

pattern BufferPattern = array<BYTE> with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// 2.2.2.2.5   DNS_RPC_RECORD
type DNS_RPC_RECORD
{
    WORD wDataLength;
    DNS_RECORD_TYPE wType;
    DnssrvRpcRecord_dwFlags dwFlags with Encoding{Decoder = PatternDecoder<DnssrvRpcRecord_dwFlags>, SourcePattern = TypeOf<DWORD>()};
    DWORD dwSerial where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwSerial", "DNS_RPC_RECORD", value);
    DWORD dwTtlSeconds;
    DWORD dwTimeStamp;
    DWORD dwReserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "DNSP", "dwReserved", "DNS_RPC_RECORD", value);
    (
        ([|DNS_RECORD_TYPE.DNS_TYPE_ZERO == wType|] DNS_RPC_RECORD_TS) |                            // 0x0000
        ([|DNS_RECORD_TYPE.DNS_TYPE_A == wType|] DNS_RPC_RECORD_A) |                                // 0x0001
        ([|DNS_RECORD_TYPE.DNS_TYPE_NS == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0002
        ([|DNS_RECORD_TYPE.DNS_TYPE_MD == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0003
        ([|DNS_RECORD_TYPE.DNS_TYPE_MF == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0004
        ([|DNS_RECORD_TYPE.DNS_TYPE_CNAME == wType|] DNS_RPC_RECORD_NODE_NAME) |                    // 0x0005
        ([|DNS_RECORD_TYPE.DNS_TYPE_SOA == wType|] DNS_RPC_RECORD_SOA) |                            // 0x0006
        ([|DNS_RECORD_TYPE.DNS_TYPE_MB == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0007
        ([|DNS_RECORD_TYPE.DNS_TYPE_MG == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0008
        ([|DNS_RECORD_TYPE.DNS_TYPE_MR == wType|] DNS_RPC_RECORD_NODE_NAME) |                       // 0x0009
        ([|DNS_RECORD_TYPE.DNS_TYPE_NULL == wType|] DNS_RPC_RECORD_NULL[wDataLength]) |             // 0x000A
        ([|DNS_RECORD_TYPE.DNS_TYPE_WKS == wType|] DNS_RPC_RECORD_WKS) |                            // 0x000B
        ([|DNS_RECORD_TYPE.DNS_TYPE_PTR == wType|] DNS_RPC_RECORD_NODE_NAME) |                      // 0x000C
        ([|DNS_RECORD_TYPE.DNS_TYPE_HINFO == wType|] DNS_RPC_RECORD_STRING) |                       // 0x000D
        ([|DNS_RECORD_TYPE.DNS_TYPE_MINFO == wType|] DNS_RPC_RECORD_MAIL_ERROR) |                   // 0x000E
        ([|DNS_RECORD_TYPE.DNS_TYPE_MX == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |                 // 0x000F
        ([|DNS_RECORD_TYPE.DNS_TYPE_TXT == wType|] DNS_RPC_RECORD_STRING) |                         // 0x0010
        ([|DNS_RECORD_TYPE.DNS_TYPE_RP == wType|] DNS_RPC_RECORD_MAIL_ERROR) |                      // 0x0011
        ([|DNS_RECORD_TYPE.DNS_TYPE_AFSDB == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |              // 0x0012
        ([|DNS_RECORD_TYPE.DNS_TYPE_X25 == wType|] DNS_RPC_RECORD_STRING) |                         // 0x0013
        ([|DNS_RECORD_TYPE.DNS_TYPE_ISDN == wType|] DNS_RPC_RECORD_STRING) |                        // 0x0014
        ([|DNS_RECORD_TYPE.DNS_TYPE_RT == wType|] DNS_RPC_RECORD_NAME_PREFERENCE) |                 // 0x0015
        ([|DNS_RECORD_TYPE.DNS_TYPE_SIG == wType|] DNS_RPC_RECORD_SIG[wDataLength]) |               // 0x0018
        ([|DNS_RECORD_TYPE.DNS_TYPE_KEY == wType|] DNS_RPC_RECORD_KEY[wDataLength]) |               // 0x0019
        ([|DNS_RECORD_TYPE.DNS_TYPE_AAAA == wType|] DNS_RPC_RECORD_AAAA) |                          // 0x001C
        ([|DNS_RECORD_TYPE.DNS_TYPE_NXT == wType|] DNS_RPC_RECORD_NXT) |                            // 0x001E
        ([|DNS_RECORD_TYPE.DNS_TYPE_SRV == wType|] DNS_RPC_RECORD_SRV) |                            // 0x0021
        ([|DNS_RECORD_TYPE.DNS_TYPE_ATMA == wType|] DNS_RPC_RECORD_ATMA[wDataLength]) |             // 0x0022
        ([|DNS_RECORD_TYPE.DNS_TYPE_NAPTR == wType|] DNS_RPC_RECORD_NAPTR) |           // 0x0023
        ([|DNS_RECORD_TYPE.DNS_TYPE_DNAME == wType|] DNS_RPC_RECORD_NODE_NAME) |                    // 0x0027
        ([|DNS_RECORD_TYPE.DNS_TYPE_DS == wType|] DNS_RPC_RECORD_DS[wDataLength]) |                 // 0x002B
        ([|DNS_RECORD_TYPE.DNS_TYPE_RRSIG == wType|] DNS_RPC_RECORD_RRSIG[wDataLength]) |           // 0x002E
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC == wType|] DNS_RPC_RECORD_NSEC[wDataLength]) |             // 0x002F
        ([|DNS_RECORD_TYPE.DNS_TYPE_DNSKEY == wType|] DNS_RPC_RECORD_DNSKEY[wDataLength]) |         // 0x0030
        ([|DNS_RECORD_TYPE.DNS_TYPE_DHCID == wType|] DNS_RPC_RECORD_DHCID[wDataLength]) |           // 0x0031
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC3 == wType|] DNS_RPC_RECORD_NSEC3[wDataLength]) |           // 0x0032
        ([|DNS_RECORD_TYPE.DNS_TYPE_NSEC3PARAM == wType|] DNS_RPC_RECORD_NSEC3PARAM) |              // 0x0033
        ([|DNS_RECORD_TYPE.DNS_TYPE_TLSA == wType|] DNS_RPC_RECORD_TLSA[wDataLength]) |             // 0x0034
        ([|DNS_RECORD_TYPE.DNS_TYPE_WINS == wType|] DNS_RPC_RECORD_WINS[wDataLength]) |             // 0xFF01
        ([|DNS_RECORD_TYPE.DNS_TYPE_WINSR == wType|] DNS_RPC_RECORD_WINSR) |                        // 0xFF02
        ([|(dwFlags & DnssrvRpcRecord_dwFlags.DNS_RPC_FLAG_RECORD_WIRE_FORMAT) != 0|] DNS_RPC_RECORD_UNKNOWN[wDataLength]) |
        array<BYTE>
    ) Buffer with BinaryEncoding{Length = wDataLength};
    binary Padding with BinaryEncoding{Length = ((4 - (wDataLength % 4)) % 4)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

type ResourceRecord
{
    DNS_RPC_NODE header;
    array<DNS_RPC_RECORD> records with BinaryEncoding{Length = header.wRecordCount};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.1   DNS_RPC_RECORD_A
type DNS_RPC_RECORD_A 
{
    IPv4Address IPv4Address;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.2   DNS_RPC_RECORD_NODE_NAME
type DNS_RPC_RECORD_NODE_NAME 
{
    DNS_RPC_NAME nameNode;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.3   DNS_RPC_RECORD_SOA
type DNS_RPC_RECORD_SOA 
{
    DWORD dwSerialNo;
    DWORD dwRefresh;
    DWORD dwRetry;
    DWORD dwExpire;
    DWORD dwMinimumTtl;
    DNS_RPC_NAME namePrimaryServer;
    DNS_RPC_NAME ZoneAdministratorEmail;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.4   DNS_RPC_RECORD_NULL
type DNS_RPC_RECORD_NULL[USHORT Len]
{
    array<BYTE> bData with BinaryEncoding{Length = Len};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.5   DNS_RPC_RECORD_WKS
type DNS_RPC_RECORD_WKS
{
    IPv4Address ipAddress;
    BYTE chProtocol;
    DNS_RPC_NAME bBitMask;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.6   DNS_RPC_RECORD_STRING
type DNS_RPC_RECORD_STRING
{
    DNS_RPC_NAME stringData;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.7   DNS_RPC_RECORD_MAIL_ERROR
type DNS_RPC_RECORD_MAIL_ERROR
{
    DNS_RPC_NAME nameMailBox;
    DNS_RPC_NAME ErrorMailBox;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.8   DNS_RPC_RECORD_NAME_PREFERENCE
type DNS_RPC_RECORD_NAME_PREFERENCE
{
    USHORT wPreference;
    DNS_RPC_NAME nameExchange;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.9   DNS_RPC_RECORD_SIG
type DNS_RPC_RECORD_SIG[USHORT Len]
{
    USHORT wTypeCovered;
    BYTE chAlgorithm;
    BYTE chLabelCount;
    DWORD dwOriginalTtl;
    DWORD dwSigExpiration;
    DWORD dwSigInception;
    USHORT wKeyTag;
    DNS_RPC_NAME nameSigner;
    array<byte> SignatureInfo with BinaryEncoding{Length = (Len - 18 - (nameSigner.cchNameLength + 1))};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.10   DNS_RPC_RECORD_RRSIG
type DNS_RPC_RECORD_RRSIG[USHORT Len]
{
    USHORT wTypeCovered;
    BYTE chAlgorithm;
    BYTE chLabelCount;
    DWORD dwOriginalTtl;
    DWORD dwSigExpiration;
    DWORD dwSigInception;
    USHORT wKeyTag;
    DNS_RPC_NAME nameSigner;
    array<byte> SignatureInfo with BinaryEncoding{Length = (Len - 18 - (nameSigner.cchNameLength + 1))};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.11   DNS_RPC_RECORD_NSEC
type DNS_RPC_RECORD_NSEC[USHORT Len]
{
    DNS_RPC_NAME nameSigner;
    array<byte> NSECBitmap with BinaryEncoding{Length = (Len - (nameSigner.cchNameLength + 1))};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.12   DNS_RPC_RECORD_DS
type DNS_RPC_RECORD_DS[USHORT Len]
{
    USHORT wKeyTag;
    BYTE chAlgorithm;
    BYTE chDigestType;
    array<byte> bDigest with BinaryEncoding{Length = (Len - 4)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.13   DNS_RPC_RECORD_KEY
type DNS_RPC_RECORD_KEY[USHORT Len]
{
    USHORT wFlags;
    BYTE chProtocol;
    BYTE chAlgorithm;
    array<byte> bKey with BinaryEncoding{Length = (Len - 4)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.14   DNS_RPC_RECORD_DHCID
type DNS_RPC_RECORD_DHCID[USHORT Len]
{
    DHCPInformation[Len] bDHCID;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};
       
// RFC 4701
type DHCPInformation[ushort Len]  // 49
{
    ushort IdentifierType;
    byte DigestType;
    array<byte> Digest with BinaryEncoding{Length = (Len - 3)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.15   DNS_RPC_RECORD_DNSKEY
type DNS_RPC_RECORD_DNSKEY[USHORT Len]
{
    USHORT wFlags;
    BYTE chProtocol;
    BYTE chAlgorithm;
    array<BYTE> bKey with BinaryEncoding{Length = (Len - 4)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.16   DNS_RPC_RECORD_AAAA
type DNS_RPC_RECORD_AAAA
{
    IPv6Address ipv6Address;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.17   DNS_RPC_RECORD_NXT
type DNS_RPC_RECORD_NXT
{
    USHORT wNumRecordTypes;
    array<USHORT> wTypeWords with BinaryEncoding{Length = wNumRecordTypes};
    DNS_RPC_NAME nextName;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.18   DNS_RPC_RECORD_SRV
type DNS_RPC_RECORD_SRV
{
    USHORT wPriority;
    USHORT wWeight;
    USHORT wPort;
    DNS_RPC_NAME nameTarget;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.19   DNS_RPC_RECORD_ATMA
type DNS_RPC_RECORD_ATMA[USHORT Len]
{
    BYTE chFormat;
    array<BYTE> bAddress with BinaryEncoding{Length = (Len - 1)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.20   DNS_RPC_RECORD_NAPTR
type DNS_RPC_RECORD_NAPTR
{
    USHORT wOrder;
    USHORT wPreference;
    DNS_RPC_NAME nameFlags;
    DNS_RPC_NAME nameService;
    DNS_RPC_NAME nameSubstitution;
    DNS_RPC_NAME nameReplacement;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.21   DNS_RPC_RECORD_WINS
type DNS_RPC_RECORD_WINS[USHORT Len]
{
    DNS_RPC_RECORD_WINS_dwMappingFlag dwMappingFlag where ValidationCheckCombinationValueIncludeZero((0 == value) || InRange<DNS_RPC_RECORD_WINS_dwMappingFlag>(value), null, true, ReferenceType.Type, "DNSP", "dwMappingFlag", "DNS_RPC_RECORD_WINS", "0x80000000, 0x00010000", value);
    DWORD dwLookupTimeout;
    DWORD dwCacheTimeout;
    DWORD cWinsServerCount;
    array<IPv4Address> aipWinsServers with BinaryEncoding{Length = cWinsServerCount};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

pattern DNS_RPC_RECORD_WINS_dwMappingFlag = flags DWORD 
{
    DNS_WINS_FLAG_SCOPE = 0x80000000,
    DNS_WINS_FLAG_LOCAL = 0x00010000,
    ...
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.22   DNS_RPC_RECORD_WINSR
type DNS_RPC_RECORD_WINSR
{
    DNS_RPC_RECORD_WINS_dwMappingFlag dwMappingFlag where ValidationCheckCombinationValueIncludeZero((0 == value) || InRange<DNS_RPC_RECORD_WINS_dwMappingFlag>(value), null, true, ReferenceType.Type, "DNSP", "dwMappingFlag", "DNS_RPC_RECORD_WINSR", "0x80000000, 0x00010000", value);
    DWORD dwLookupTimeout;
    DWORD dwCacheTimeout;
    DNS_RPC_NAME nameResultDomain;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.23   DNS_RPC_RECORD_TS
type DNS_RPC_RECORD_TS
{
    binary EntombedTime with BinaryEncoding{Length = 8};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.24   DNS_RPC_RECORD_NSEC3
type DNS_RPC_RECORD_NSEC3[USHORT Len]
{
    BYTE chAlgorithm;
    BYTE bFlags;
    USHORT wIterations;
    BYTE bSaltLength;
    BYTE bHashLength;
    array<byte> salt with BinaryEncoding{Length = bSaltLength};
    array<byte> nextHashedOwnerName with BinaryEncoding{Length = bHashLength};
    array<byte> bitmaps with BinaryEncoding{Length = (Len - 6 - bSaltLength - bHashLength)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.25   DNS_RPC_RECORD_NSEC3PARAM
type DNS_RPC_RECORD_NSEC3PARAM
{
    BYTE chAlgorithm;
    BYTE bFlags;
    USHORT wIterations;
    BYTE bSaltLength;
    array<byte> salt with BinaryEncoding{Length = bSaltLength};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.26   DNS_RPC_RECORD_TLSA
type DNS_RPC_RECORD_TLSA[USHORT Len]
{
    BYTE bCertUsage;
    BYTE bSelector;
    BYTE bMatchingType;
    array<byte> bCertificateAssociationData with BinaryEncoding{Length = (Len - 3)};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.2.2.4.27   DNS_RPC_RECORD_UNKNOWN
type DNS_RPC_RECORD_UNKNOWN[USHORT Len]
{
    array<byte> bData with BinaryEncoding{Length = Len};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.3 *******************************************
// 2.2.3.1.1   DNS_IPVAL_CONTEXT
pattern DNS_IPVAL_CONTEXT = enum DWORD 
{
    DNS_IPVAL_DNS_SERVERS = 0x00000000,
    DNS_IPVAL_DNS_ROOTHINTS = 0x00000001,
    DNS_IPVAL_DNS_FORWARDERS = 0x00000002,
    DNS_IPVAL_DNS_ZONE_MASTERS = 0x00000003,
    DNS_IPVAL_DNS_DELEGATIONS = 0x00000004,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.3.1.2   DNS_IP_VALIDATE_RETURN_FLAGS
pattern DNS_IP_VALIDATE_RETURN_FLAGS = flags DWORD 
{
    ERROR_SUCCESS = 0x00000000,
    DNS_IPVAL_INVALID_ADDR = 0x00000001,
    DNS_IPVAL_UNREACHABLE = 0x00000002,
    DNS_IPVAL_NO_RESPONSE = 0x00000003,
    DNS_IPVAL_NOT_AUTH_FOR_ZONE = 0x00000004,
    DNS_IPVAL_UNKNOWN_ERROR = 0x000000FF,
    DNS_IPVAL_NO_TCP = 0x80000000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

pattern DWORDArrayPattern = array<DWORD> with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

optional binary DWORArrayToBinary(array<DWORD> val)
{
    return val.Accumulate<DWORD, binary>((DWORD i, binary r) => r + i.ToBinary(true));
} with IDL{DoNotGenerate = true};

// 2.2.3.2.2.1   DNS ADDR
type DNSADDR
{
    DNSADDR_AddressFamily AddressFamily where ValidationCheckEnumValue(InRange<DNSADDR_AddressFamily>(value), null, true, ReferenceType.Type, "DNSP", "AddressFamily", "DNSADDR", "0x0002, 0x0017", value);
    WORD PortNumber where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "PortNumber", "DNSADDR", value);
    IPv4Address IPv4Address;
    IPv6Address IPv6Address;
    binary Padding with BinaryEncoding{Length = 8};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

pattern DNSADDR_AddressFamily = enum WORD 
{
    IPv4Address  = 0x0002,
    IPv6Address = 0x0017,
    ...
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.3.2.2.2   DNS ADD USER
type DNSADDUSER
{
    DWORD SockaddrLength;
    DWORD SubnetLength where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "SubnetLength", "DNSADDUSER", value);
    DNSADDUSER_Flags Flags;
    binary Padding with BinaryEncoding{Length = 20};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

type DNSADDUSER_Flags
{
    BYTE T with BinaryEncoding{Width = 1};
    BYTE Zero where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Zero", "DNSADDUSER_Flags", value)
        with BinaryEncoding{Width = 7};
    DWORD RTT with BinaryEncoding{Width = 12};
    DNS_IP_VALIDATE_RETURN_FLAGS validationStatus where ValidationCheckCombinationValueIncludeZeroTooManyItems((0 == value) || InRange<DNS_IP_VALIDATE_RETURN_FLAGS>(value), null, true, ReferenceType.Type, "DNSP", "validationStatus", "DNSADDUSER_Flags", "DNS ADD USER", "MS-DNSP")
        with BinaryEncoding{Width = 12};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.4 *******************************************
// 2.2.4.1.1   DNS_BOOT_METHODS
pattern DNS_BOOT_METHODS = enum BYTE 
{
    BOOT_METHOD_UNINITIALIZED = 0x00,
    BOOT_METHOD_FILE = 0x01,
    BOOT_METHOD_REGISTRY = 0x02,
    BOOT_METHOD_DIRECTORY = 0x03,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.4.1.2   DNS_NAME_CHECK_FLAGS
pattern DNS_NAME_CHECK_FLAGS = enum DWORD 
{
    DNS_ALLOW_RFC_NAMES_ONLY = 0x00000000,
    DNS_ALLOW_NONRFC_NAMES = 0x00000001,
    DNS_ALLOW_MULTIBYTE_NAMES = 0x00000002,
    DNS_ALLOW_ALL_NAMES = 0x00000003,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.4.2.1   DNSSRV_VERSION
optional DNSSRV_VERSION DNSSRV_VERSION_Decoder(DWORD val)
{
    DNSSRV_VERSION version = new DNSSRV_VERSION {};
    version.ServicePackVersion = val as USHORT;
    version.OSMinorVersion = (val >> 16) as BYTE;
    version.OSMajorVersion = (val >> 24) as BYTE;
    return version;
} with Technologies.IDL.IDL{DoNotGenerate = true};

type DNSSRV_VERSION 
{
    USHORT ServicePackVersion;
    BYTE OSMinorVersion;
    BYTE OSMajorVersion;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.5 *******************************************
// 2.2.5.1.1   DNS_ZONE_TYPE
pattern DNS_ZONE_TYPE = enum BYTE 
{
    DNS_ZONE_TYPE_CACHE = 0x00,
    DNS_ZONE_TYPE_PRIMARY = 0x01,
    DNS_ZONE_TYPE_SECONDARY = 0x02,
    DNS_ZONE_TYPE_STUB = 0x03,
    DNS_ZONE_TYPE_FORWARDER = 0x04,
    DNS_ZONE_TYPE_SECONDARY_CACHE = 0x05,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

optional BYTE DWORToBYTE(DWORD val)
{
    return val as BYTE;
} with IDL{DoNotGenerate = true};

// 2.2.5.1.2   DNS_ZONE_SECONDARY_SECURITY
pattern DNS_ZONE_SECONDARY_SECURITY = enum DWORD 
{
    ZONE_SECSECURE_NO_SECURITY = 0x00000000,
    ZONE_SECSECURE_NS_ONLY = 0x00000001,
    ZONE_SECSECURE_LIST_ONLY  = 0x00000002,
    ZONE_SECSECURE_NO_XFER  = 0x00000003,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.5.1.3   DNS_ZONE_NOTIFY_LEVEL
pattern DNS_ZONE_NOTIFY_LEVEL = enum DWORD 
{
    ZONE_NOTIFY_OFF = 0x00000000,
    ZONE_NOTIFY_ALL_SECONDARIES = 0x00000001,
    ZONE_NOTIFY_LIST_ONLY = 0x00000002,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.5.1.4   ZONE_REQUEST_FILTERS
pattern ZONE_REQUEST_FILTERS = flags DWORD 
{
    ZONE_REQUEST_PRIMARY = 0x00000001,
    ZONE_REQUEST_SECONDARY = 0x00000002,
    ZONE_REQUEST_CACHE = 0x00000004,
    ZONE_REQUEST_AUTO = 0x00000008,
    ZONE_REQUEST_FORWARD = 0x00000010,
    ZONE_REQUEST_REVERSE = 0x00000020,
    ZONE_REQUEST_FORWARDER = 0x00000040,
    ZONE_REQUEST_STUB = 0x00000080,
    ZONE_REQUEST_DS = 0x00000100,
    ZONE_REQUEST_NON_DS = 0x00000200,
    ZONE_REQUEST_DOMAIN_DP = 0x00000400,
    ZONE_REQUEST_FOREST_DP = 0x00000800,
    ZONE_REQUEST_CUSTOM_DP = 0x00001000,
    ZONE_REQUEST_LEGACY_DP = 0x00002000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.5.1.5   ZONE_SKD_ROLLOVER_TYPE
pattern ZONE_SKD_ROLLOVER_TYPE = enum DWORD 
{
    DNS_ROLLOVER_TYPE_PREPUBLISH = 0x00000000,
    DNS_ROLLOVER_TYPE_DOUBLE_SIGNATURE = 0x00000001,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.5.1.6   ZONE_SKD_ROLLOVER_ACTION
pattern ZONE_SKD_ROLLOVER_ACTION = enum DWORD 
{
    DNS_ROLLOVER_ACTION_DEFAULT = 0x00000000,
    DNS_ROLLOVER_ACTION_NORMAL = 0x00000001,
    DNS_ROLLOVER_ACTION_REVOKE_STANDBY = 0x00000002,
    DNS_ROLLOVER_ACTION_RETIRE = 0x00000003,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.5.2.4   DNS_RPC_ZONE_INFO
pattern DNS_RPC_ZONE_INFO_fAllowUpdate = enum DWORD 
{
    ZONE_UPDATE_OFF = 0x00000000,
    ZONE_UPDATE_UNSECURE = 0x00000001,
    ZONE_UPDATE_SECURE = 0x00000002,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.6 *******************************************
// 2.2.6.2.3   DNS_RPC_SKD_STATE
pattern DnsRpcSigningKeyDescriptorState_dwState = enum DWORD 
{
    DNS_SKD_STATE_ACTIVE = 0x00000000,
    DNS_SKD_STATE_RETIRED = 0x00000001,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

pattern DnsRpcSigningKeyDescriptorState_dwCurrentRolloverStatus = enum DWORD 
{
    DNS_SKD_STATUS_NOT_ROLLING = 0x00000000,
    DNS_SKD_STATUS_QUEUED = 0x00000001,
    DNS_SKD_STATUS_ROLL_STARTED = 0x00000002,
    DNS_SKD_STATUS_ZSK_WAITING_FOR_DNSKEY_TTL = 0x00000003,
    DNS_SKD_STATUS_ZSK_WAITING_FOR_MAXZONE_TTL = 0x00000004,
    DNS_SKD_STATUS_KSK_WAITING_FOR_DS_UPDATE = 0x00000005,
    DNS_SKD_STATUS_KSK_WAITING_FOR_DS_TTL = 0x00000006,
    DNS_SKD_STATUS_KSK_WAITING_FOR_DNSKEY_TTL = 0x00000007,
    DNS_SKD_STATUS_KSK_WAITING_FOR_5011_REMOVE_HOLD_DOWN = 0x00000008,
    DNS_SKD_STATUS_ROLL_ERROR = 0x00000009,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.6.2.6   DNS_RPC_TRUST_ANCHOR
pattern DnssrvRpcTrustAnchor_wTrustAnchorType = enum WORD 
{
    DNS_TYPE_DS = 0x002B,
    DNS_TYPE_DNSKEY = 0x0030,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.6.2.11   DNS_RPC_SKD_STATE_EX
pattern DnsRpcSigningKeyDescriptorStateEx_dwCurrentRollState = enum DWORD 
{
    DNS_SKD_ROLL_STATE_NOT_STARTED = 0x00000000,
    DNS_SKD_ROLL_STATE_ZSK_SWAP_ACTIVE_WITH_ROLLOVER = 0x00000001,
    DNS_SKD_ROLL_STATE_ZSK_FINISH = 0x00000002,
    DNS_SKD_ROLL_STATE_KSK_WAITING_FOR_DS = 0x00000003,
    DNS_SKD_ROLL_STATE_KSK_REVOKE = 0x00000004,
    DNS_SKD_ROLL_STATE_KSK_FINISH_Or_DNS_SKD_ROLL_STATE_MAX = 0x00000005,
    DNS_SKD_STATUS_ROLL_ERROR = 0x00000009,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.7 *******************************************
// 2.2.7.1.1   DNS_RPC_DP_FLAGS
pattern DNS_RPC_DP_FLAGS = flags DWORD 
{
    DNS_DP_AUTOCREATED = 0x00000001,
    DNS_DP_LEGACY = 0x00000002,
    DNS_DP_DOMAIN_DEFAULT = 0x00000004,
    DNS_DP_FOREST_DEFAULT = 0x00000008,
    DNS_DP_ENLISTED = 0x00000010,
    DNS_DP_DELETED = 0x00000020,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.7.2.1   DNS_RPC_DP_INFO
pattern DnssrvRpcDirectoryPartition_dwState = enum DWORD 
{
    DNS_DP_OKAY = 0x00000000,
    DNS_DP_STATE_REPL_INCOMING = 0x00000001,
    DNS_DP_STATE_REPL_OUTGOING = 0x00000002,
    DNS_DP_STATE_UNKNOWN = 0x00000003,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.7.2.5   DNS_RPC_ENLIST_DP
pattern DnssrvRpcEnlistDirPart_dwOperation = enum DWORD 
{
    DNS_DP_OP_CREATE = 0x00000001,
    DNS_DP_OP_DELETE = 0x00000002,
    DNS_DP_OP_ENLIST = 0x00000003,
    DNS_DP_OP_UNENLIST = 0x00000004,
    DNS_DP_OP_CREATE_DOMAIN = 0x00000005,
    DNS_DP_OP_CREATE_FOREST = 0x00000006,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.8 *******************************************
// 2.2.8.1.1   DNS_RPC_AUTOCONFIG
pattern DNS_RPC_AUTOCONFIG = flags DWORD 
{
    DNS_RPC_AUTOCONFIG_INTERNAL_ROOTHINTS = 0x00000001,
    DNS_RPC_AUTOCONFIG_INTERNAL_FORWARDERS = 0x00000002,
    DNS_RPC_AUTOCONFIG_INTERNAL_ZONES = 0x00000004,
    DNS_RPC_AUTOCONFIG_INTERNAL_SELFPOINT = 0x00000010,
    DNS_RPC_AUTOCONFIG_INTERNAL_SELFPOINT_PREPEND = 0x00000020,
    DNS_RPC_AUTOCONFIG_INTERNAL_SELFPOINT_APPEND = 0x00000040,
    DNS_RPC_AUTOCONFIG_INTERNAL_RETURN_ERRORS = 0x00008000,
    DNS_RPC_AUTOCONFIG_ALL = 0xFFFFFFFF,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.9 *******************************************
// 2.2.9.1.1   DNS_LOG_LEVELS
pattern DNS_LOG_LEVELS = flags DWORD 
{
    DNS_LOG_LEVEL_QUERY = 0x00000001,
    DNS_LOG_LEVEL_NOTIFY = 0x00000010,
    DNS_LOG_LEVEL_UPDATE = 0x00000020,
    DNS_LOG_LEVEL_QUESTIONS = 0x00000100,
    DNS_LOG_LEVEL_ANSWERS = 0x00000200,
    DNS_LOG_LEVEL_SEND = 0x00001000,
    DNS_LOG_LEVEL_RECV = 0x00002000,
    DNS_LOG_LEVEL_UDP = 0x00004000,
    DNS_LOG_LEVEL_TCP = 0x00008000,
    DNS_LOG_LEVEL_ALL_PACKETS = 0x0000FFFF,
    DNS_LOG_LEVEL_DS_WRITE = 0x00010000,
    DNS_LOG_LEVEL_DS_UPDATE = 0x00020000,
    DNS_LOG_LEVEL_FULL_PACKETS = 0x01000000,
    DNS_LOG_LEVEL_UNMATCHED_RESPONSE = 0x02000000,
    DNS_LOG_LEVEL_WRITE_THROUGH = 0x80000000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.9.1.2   DNS_EVENTLOG_TYPES
pattern DNS_EVENTLOG_TYPES = flags DWORD 
{
    EVENT_LOG_SUCCESS = 0x00000000,
    EVENT_LOG_ERROR_TYPE = 0x00000001,
    EVENT_LOG_WARNING_TYPE = 0x00000002,
    EVENT_LOG_INFORMATION_TYPE = 0x00000004,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.10 *******************************************
// 2.2.10.1.1   DNSSRV_STATID_TYPES
pattern DNSSRV_STATID_TYPES = enum DWORD 
{
    DNSSRV_STATID_TIME = 0x00000001,
    DNSSRV_STATID_QUERY = 0x00000002,
    DNSSRV_STATID_QUERY2 = 0x00000004,
    DNSSRV_STATID_RECURSE = 0x00000008,
    DNSSRV_STATID_MASTER = 0x00000010,
    DNSSRV_STATID_SECONDARY = 0x00000020,
    DNSSRV_STATID_WINS = 0x00000040,
    DNSSRV_STATID_WIRE_UPDATE = 0x00000100,
    DNSSRV_STATID_SKWANSEC = 0x00000200,
    DNSSRV_STATID_DS = 0x00000400,
    DNSSRV_STATID_NONWIRE_UPDATE = 0x00000800,
    DNSSRV_STATID_MEMORY = 0x00010000,
    DNSSRV_STATID_TIMEOUT = 0x00020000,
    DNSSRV_STATID_DBASE = 0x00040000,
    DNSSRV_STATID_RECORD = 0x00080000,
    DNSSRV_STATID_PACKET = 0x00100000,
    DNSSRV_STATID_NBSTAT = 0x00200000,
    DNSSRV_STATID_ERRORS = 0x00400000,
    DNSSRV_STATID_CACHE = 0x00800000,
    DNSSRV_STATID_DNSSEC = 0x01000000,
    DNSSRV_STATID_PRIVATE = 0x10000000,
    DNSSRV_STATID_RRL = 0x20000000,
    ...
} with Technologies.IDL.IDL{DoNotGenerate = true};

// 2.2.10.2.2   DNSSRV_STATS
type DNSSRV_STATS 
{
    DNSSRV_STAT_HEADER Header;
    (
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_TIME == Header.StatId|] DNSSRV_TIME_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_QUERY == Header.StatId|] DNSSRV_QUERY_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_QUERY2 == Header.StatId|] DNSSRV_QUERY2_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_RECURSE == Header.StatId|] DNSSRV_RECURSE_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_MASTER == Header.StatId|] DNSSRV_MASTER_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_SECONDARY == Header.StatId|] DNSSRV_SECONDARY_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_WINS == Header.StatId|] DNSSRV_WINS_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_WIRE_UPDATE == Header.StatId|] DNSSRV_UPDATE_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_SKWANSEC == Header.StatId|] DNSSRV_SKWANSEC_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_DS == Header.StatId|] DNSSRV_DS_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_NONWIRE_UPDATE == Header.StatId|] DNSSRV_UPDATE_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_MEMORY == Header.StatId|] DNSSRV_MEMORY_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_TIMEOUT == Header.StatId|] DNSSRV_TIMEOUT_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_DBASE == Header.StatId|] DNSSRV_DBASE_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_RECORD == Header.StatId|] DNSSRV_RECORD_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_PACKET == Header.StatId|] DNSSRV_PACKET_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_NBSTAT == Header.StatId|] DNSSRV_NBSTAT_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_ERRORS == Header.StatId|] DNSSRV_ERROR_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_CACHE == Header.StatId|] DNSSRV_CACHE_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_DNSSEC == Header.StatId|] DNSSRV_DNSSEC_STATS[Header.wLength] | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_PRIVATE == Header.StatId|] DNSSRV_PRIVATE_STATS | 
        [|DNSP.DNSSRV_STATID_TYPES.DNSSRV_STATID_RRL == Header.StatId|] DNSSRV_RRL_STATS | 
        array<BYTE>
    ) Buffer with BinaryEncoding{Length = Header.wLength};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.4   DNSSRV_TIME_STATS
type DNSSRV_TIME_STATS 
{
    DWORD ServerStartTimeSeconds;
    DWORD LastClearTimeSeconds;
    DWORD SecondsSinceServerStart;
    DWORD SecondsSinceLastClear;
    DNS_SYSTEMTIME ServerStartTime;
    DNS_SYSTEMTIME LastClearTime;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.5   DNSSRV_QUERY_STATS
type DNSSRV_QUERY_STATS 
{
    DWORD UdpQueries;
    DWORD UdpResponses;
    DWORD UdpQueriesSent;
    DWORD UdpResponsesReceived;
    DWORD TcpClientConnections;
    DWORD TcpQueries;
    DWORD TcpResponses;
    DWORD TcpQueriesSent;
    DWORD TcpResponsesReceived;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.6   DNSSRV_QUERY2_STATS
type DNSSRV_QUERY2_STATS[WORD Len]
{
    DWORD TotalQueries;
    DWORD Standard;
    DWORD Notify;
    DWORD Update;
    optional [|60 == Len|] DWORD TKeyNego;
    DWORD TypeA;
    DWORD TypeNs;
    DWORD TypeSoa;
    DWORD TypeMx;
    DWORD TypePtr;
    DWORD TypeSrv;
    DWORD TypeAll;
    DWORD TypeIxfr;
    DWORD TypeAxfr;
    DWORD TypeOther;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.7   DNSSRV_RECURSE_STATS
type DNSSRV_RECURSE_STATS[WORD Len]
{
    DWORD ReferralPasses;
    DWORD QueriesRecursed;
    DWORD OriginalQuestionRecursed;
    DWORD AdditionalRecursed;
    DWORD TotalQuestionsRecursed;
    DWORD Retries;
    DWORD LookupPasses;
    DWORD Forwards;
    DWORD Sends;
    DWORD Responses;
    DWORD ResponseUnmatched;
    optional [|(244 == Len) || (240 == Len)|] DWORD ResponseMismatched;
    DWORD ResponseFromForwarder;
    DWORD ResponseAuthoritative;
    DWORD ResponseNotAuth;
    DWORD ResponseAnswer;
    DWORD ResponseNameError;
    DWORD ResponseRcode;
    DWORD ResponseEmpty;
    DWORD ResponseDelegation;
    DWORD ResponseNonZoneData;
    DWORD ResponseUnsecure;
    DWORD ResponseBadPacket;
    DWORD SendResponseDirect;
    DWORD ContinueCurrentRecursion;
    DWORD ContinueCurrentLookup;
    DWORD ContinueNextLookup;
    DWORD RootNsQuery;
    DWORD RootNsResponse;
    DWORD CacheUpdateAlloc;
    DWORD CacheUpdateResponse;
    DWORD CacheUpdateFree;
    DWORD CacheUpdateRetry;
    DWORD SuspendedQuery;
    DWORD ResumeSuspendedQuery;
    DWORD PacketTimeout;
    DWORD FinalTimeoutQueued;
    DWORD FinalTimeoutExpired;
    DWORD Failures where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Failures", "DNSSRV_RECURSE_STATS", value);
    DWORD RecursionFailure;
    DWORD ServerFailure;
    DWORD PartialFailure;
    DWORD CacheUpdateFailure;
    DWORD RecursePassFailure;
    DWORD FailureReachAuthority;
    DWORD FailureReachPreviousResponse;
    DWORD FailureRetryCount where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "FailureRetryCount", "DNSSRV_RECURSE_STATS", value);
    DWORD TcpTry;
    DWORD TcpConnectFailure where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "TcpConnectFailure", "DNSSRV_RECURSE_STATS", value);
    DWORD TcpConnect;
    DWORD TcpQuery;
    DWORD TcpResponse;
    DWORD TcpDisconnect;
    optional [|(244 == Len) || (240 == Len)|] DWORD DiscardedDuplicateQueries;
    optional [|(244 == Len) || (240 == Len)|] DWORD DuplicateCoalesedQueries;
    optional [|(244 == Len) || (240 == Len)|] DWORD GnzLocalQuery;
    optional [|(244 == Len) || (240 == Len)|] DWORD GnzRemoteQuery;
    optional [|(244 == Len) || (240 == Len)|] DWORD GnzRemoteResponse;
    optional [|(244 == Len) || (240 == Len)|] DWORD GnzRemoteResponseCacheSuccess;
    optional [|(244 == Len) || (240 == Len)|] DWORD GnzRemoteResponseCacheFailure;
    optional [|(244 == Len) || (212 == Len)|] DWORD CacheLockingDiscards;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.8   DNSSRV_DNSSEC_STATS
type DNSSRV_DNSSEC_STATS[WORD Len]
{
    DWORD SuccessfulValidations;
    DWORD FailedValidations;
    optional [|12 == Len|] DWORD RecursionFailures;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.9   DNSSRV_MASTER_STATS
type DNSSRV_MASTER_STATS[WORD Len]
{
    DWORD NotifySent;
    DWORD Request;
    DWORD NameError;
    DWORD FormError;
    DWORD AxfrLimit;
    DWORD Refused;
    DWORD RefuseSecurity;
    DWORD RefuseShutdown;
    optional [|(108 == Len) || (104 == Len)|] DWORD RefuseLoading;
    DWORD RefuseZoneLocked;
    DWORD RefuseServerFailure;
    optional [|(108 == Len) || (104 == Len)|] DWORD RefuseNotAuth;
    optional [|(108 == Len) || (104 == Len)|] DWORD RefuseReadOnly;
    DWORD Failure;
    DWORD AxfrRequest;
    DWORD AxfrSuccess;
    optional [|(108 == Len) || (96 == Len)|] DWORD StubAxfrRequest;
    DWORD IxfrRequest;
    DWORD IxfrNoVersion;
    DWORD IxfrUpdateSuccess;
    DWORD IxfrTcpRequest;
    DWORD IxfrTcpSuccess;
    DWORD IxfrAxfr;
    DWORD IxfrUdpRequest;
    DWORD IxfrUdpSuccess;
    DWORD IxfrUdpForceTcp;
    DWORD IxfrUdpForceAxfr;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.10   DNSSRV_SECONDARY_STATS
type DNSSRV_SECONDARY_STATS[WORD Len]
{
    DWORD NotifyReceived;
    DWORD NotifyInvalid;
    DWORD NotifyPrimary;
    optional [|164 == Len|] DWORD NotifyNonPrimary;
    DWORD NotifyNoVersion;
    DWORD NotifyNewVersion;
    DWORD NotifyCurrentVersion;
    DWORD NotifyOldVersion;
    DWORD NotifyMasterUnknown;
    DWORD SoaRequest;
    DWORD SoaResponse;
    DWORD SoaResponseInvalid;
    DWORD SoaResponseNameError;
    DWORD AxfrRequest;
    DWORD AxfrResponse;
    DWORD AxfrSuccess;
    DWORD AxfrRefused;
    DWORD AxfrInvalid;
    optional [|164 == Len|] DWORD StubAxfrRequest;
    optional [|164 == Len|] DWORD StubAxfrResponse;
    optional [|164 == Len|] DWORD StubAxfrSuccess;
    optional [|164 == Len|] DWORD StubAxfrRefused;
    optional [|164 == Len|] DWORD StubAxfrInvalid;
    DWORD IxfrUdpRequest;
    DWORD IxfrUdpResponse;
    DWORD IxfrUdpSuccess;
    DWORD IxfrUdpUseTcp;
    DWORD IxfrUdpUseAxfr;
    DWORD IxfrUdpWrongServer;
    DWORD IxfrUdpNoUpdate;
    DWORD IxfrUdpNewPrimary;
    DWORD IxfrUdpFormerr;
    DWORD IxfrUdpRefused;
    DWORD IxfrUdpInvalid;
    DWORD IxfrTcpRequest;
    DWORD IxfrTcpResponse;
    DWORD IxfrTcpSuccess;
    DWORD IxfrTcpAxfr;
    DWORD IxfrTcpFormerr;
    DWORD IxfrTcpRefused;
    DWORD IxfrTcpInvalid;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.11   DNSSRV_WINS_STATS
type DNSSRV_WINS_STATS
{
    DWORD WinsLookups;
    DWORD WinsResponses;
    DWORD WinsReverseLookups;
    DWORD WinsReverseResponses;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.12   DNSSRV_UPDATE_STATS
type DNSSRV_UPDATE_STATS
{
    DWORD Received;
    DWORD Empty;
    DWORD NoOps;
    DWORD Completed;
    DWORD Rejected;
    DWORD FormErr;
    DWORD NxDomain;
    DWORD NotImpl;
    DWORD Refused;
    DWORD YxDomain;
    DWORD YxRrset;
    DWORD NxRrset;
    DWORD NotAuth;
    DWORD NotZone;
    DWORD RefusedNonSecure;
    DWORD RefusedAccessDenied;
    DWORD SecureSuccess;
    DWORD SecureContinue where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "SecureContinue", "DNSSRV_UPDATE_STATS", value);
    DWORD SecureFailure;
    DWORD SecureDsWriteFailure;
    DWORD DsSuccess;
    DWORD DsWriteFailure;
    DWORD unused_was_Collisions where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "unused_was_Collisions", "DNSSRV_UPDATE_STATS", value);
    DWORD unused_was_CollisionsRead where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "unused_was_CollisionsRead", "DNSSRV_UPDATE_STATS", value);
    DWORD unused_was_CollisionsWrite where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "unused_was_CollisionsWrite", "DNSSRV_UPDATE_STATS", value);
    DWORD unused_was_CollisionsDsWrite where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "unused_was_CollisionsDsWrite", "DNSSRV_UPDATE_STATS", value);
    DWORD Queued;
    DWORD Retry where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "Retry", "DNSSRV_UPDATE_STATS", value);
    DWORD Timeout;
    DWORD InQueue;
    DWORD Forwards;
    DWORD TcpForwards;
    DWORD ForwardResponses;
    DWORD ForwardTimeouts;
    DWORD ForwardInQueue;
    array<DWORD> UpdateType with BinaryEncoding{Length = 39};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.13   DNSSRV_SKWANSEC_STATS
type DNSSRV_SKWANSEC_STATS
{
    DWORD SecContextCreate;
    DWORD SecContextFree;
    DWORD SecContextQueue;
    DWORD SecContextQueueInNego;
    DWORD SecContextQueueNegoComplete;
    DWORD SecContextQueueLength;
    DWORD SecContextDequeue;
    DWORD SecContextTimeout;
    DWORD SecPackAlloc;
    DWORD SecPackFree;
    DWORD SecTkeyInvalid;
    DWORD SecTkeyBadTime;
    DWORD SecTsigFormerr;
    DWORD SecTsigEcho;
    DWORD SecTsigBadKey;
    DWORD SecTsigVerifySuccess;
    DWORD SecTsigVerifyFailed;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.14   DNSSRV_DS_STATS
type DNSSRV_DS_STATS[WORD Len]
{
    DWORD DsTotalNodesRead;
    DWORD DsTotalRecordsRead;
    DWORD DsNodesLoaded;
    DWORD DsRecordsLoaded;
    DWORD DsTombstonesRead;
    DWORD DsUpdateSearches;
    DWORD DsUpdateNodesRead;
    DWORD DsUpdateRecordsRead;
    DWORD UpdateLists;
    DWORD UpdateNodes;
    DWORD UpdateSuppressed;
    DWORD UpdateWrites;
    DWORD UpdateTombstones;
    DWORD UpdateRecordChange;
    DWORD UpdateAgingRefresh;
    DWORD UpdateAgingOn;
    DWORD UpdateAgingOff;
    DWORD UpdatePacket;
    DWORD UpdatePacketPrecon;
    DWORD UpdateAdmin;
    DWORD UpdateAutoConfig;
    DWORD UpdateScavenge;
    DWORD DsNodesAdded;
    DWORD DsNodesModified;
    DWORD DsNodesTombstoned;
    DWORD DsNodesDeleted;
    DWORD DsRecordsAdded;
    DWORD DsRecordsReplaced;
    DWORD DsWriteSuppressed;
    DWORD DsSerialWrites;
    DWORD LdapTimedWrites;
    DWORD LdapWriteTimeTotal;
    DWORD LdapWriteAverage;
    DWORD LdapWriteMax;
    DWORD LdapWriteBucket0;
    DWORD LdapWriteBucket1;
    DWORD LdapWriteBucket2;
    DWORD LdapWriteBucket3;
    DWORD LdapWriteBucket4;
    DWORD LdapWriteBucket5;
    DWORD LdapSearchTime;
    DWORD FailedDeleteDsEntries;
    DWORD FailedReadRecords;
    DWORD FailedLdapModify;
    DWORD FailedLdapAdd;
    optional [|348 == Len|] DWORD PollingPassesWithDsErrors;
    optional [|348 == Len|] DWORD LdapReconnects;
    array<DWORD> DsWriteType with BinaryEncoding{Length = 40};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.15   DNSSRV_MEMTAG_STATS
type DNSSRV_MEMTAG_STATS
{
    DWORD Alloc;
    DWORD Free;
    DWORD Memory;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.16   DNSSRV_MEMORY_STATS
type DNSSRV_MEMORY_STATS
{
    DWORD Memory;
    DWORD Alloc;
    DWORD Free;
    DWORD StdUsed;
    DWORD StdReturn;
    DWORD StdInUse;
    DWORD StdMemory;
    DWORD StdToHeapAlloc;
    DWORD StdToHeapFree;
    DWORD StdToHeapInUse;
    DWORD StdToHeapMemory;
    DWORD StdBlockAlloc;
    DWORD StdBlockUsed;
    DWORD StdBlockReturn;
    DWORD StdBlockInUse;
    DWORD StdBlockFreeList;
    DWORD StdBlockFreeListMemory;
    DWORD StdBlockMemory;
    array<DNSSRV_MEMTAG_STATS> MemTags with BinaryEncoding{Length = 52};
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.17   DNSSRV_TIMEOUT_STATS
type DNSSRV_TIMEOUT_STATS
{
    DWORD SetTotal;
    DWORD SetDirect;
    DWORD SetFromDereference;
    DWORD SetFromChildDelete;
    DWORD AlreadyInSystem;
    DWORD Checks;
    DWORD RecentAccess;
    DWORD ActiveRecord;
    DWORD CanNotDelete;
    DWORD Deleted;
    DWORD ArrayBlocksCreated;
    DWORD ArrayBlocksDeleted;
    DWORD DelayedFreesQueued;
    DWORD DelayedFreesQueuedWithFunction;
    DWORD DelayedFreesExecuted;
    DWORD DelayedFreesExecutedWithFunction;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.18   DNSSRV_DBASE_STATS
type DNSSRV_DBASE_STATS
{
    DWORD NodeMemory;
    DWORD NodeInUse;
    DWORD NodeUsed;
    DWORD NodeReturn;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.19   DNSSRV_RECORD_STATS
type DNSSRV_RECORD_STATS
{
    DWORD InUse;
    DWORD Used;
    DWORD Return;
    DWORD Memory;
    DWORD CacheTotal;
    DWORD CacheCurrent;
    DWORD CacheTimeouts;
    DWORD SlowFreeQueued;
    DWORD SlowFreeFinished;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.20   DNSSRV_PACKET_STATS
type DNSSRV_PACKET_STATS[WORD Len]
{
    DWORD UdpAlloc;
    DWORD UdpFree;
    DWORD UdpNetAllocs;
    DWORD UdpMemory;
    DWORD UdpUsed;
    DWORD UdpReturn;
    DWORD UdpResponseReturn;
    DWORD UdpQueryReturn;
    DWORD UdpInUse;
    DWORD UdpInFreeList;
    DWORD TcpAlloc;
    DWORD TcpRealloc where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "TcpRealloc", "DNSSRV_PACKET_STATS", value);
    DWORD TcpFree;
    DWORD TcpNetAllocs;
    DWORD TcpMemory;
    DWORD RecursePacketUsed;
    DWORD RecursePacketReturn;
    optional [|80 == Len|] DWORD PacketsForNsListUsed;
    optional [|80 == Len|] DWORD PacketsForNsListReturned;
    optional [|80 == Len|] DWORD PacketsForNsListInUse;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.21   DNSSRV_NBSTAT_STATS
type DNSSRV_NBSTAT_STATS
{
    DWORD NbstatAlloc;
    DWORD NbstatFree;
    DWORD NbstatNetAllocs;
    DWORD NbstatMemory;
    DWORD NbstatUsed;
    DWORD NbstatReturn;
    DWORD NbstatInUse;
    DWORD NbstatInFreeList;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.22   DNSSRV_PRIVATE_STATS
type DNSSRV_PRIVATE_STATS
{
    DWORD RecordFile where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordFile", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordFileFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordFileFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordDs where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordDs", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordDsFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordDsFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordAdmin where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordAdmin", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordAdminFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordAdminFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordDynUp where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordDynUp", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordDynUpFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordDynUpFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordAxfr where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordAxfr", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordAxfrFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordAxfrFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordIxfr where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordIxfr", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordIxfrFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordIxfrFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordCopy where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordCopy", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordCopyFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordCopyFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordCache where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordCache", "DNSSRV_PRIVATE_STATS", value);
    DWORD RecordCacheFree where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "RecordCacheFree", "DNSSRV_PRIVATE_STATS", value);
    DWORD UdpSocketPnpDelete;
    DWORD UdpRecvFailure;
    DWORD UdpErrorMessageSize;
    DWORD UdpConnResets;
    DWORD UdpConnResetRetryOverflow;
    DWORD UdpGQCSFailure;
    DWORD UdpGQCSFailureWithContext;
    DWORD UdpGQCSConnReset;
    DWORD UdpIndicateRecvFailures;
    DWORD UdpRestartRecvOnSockets;
    DWORD TcpConnectAttempt where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "TcpConnectAttempt", "DNSSRV_PRIVATE_STATS", value);
    DWORD TcpConnectFailure where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "TcpConnectFailure", "DNSSRV_PRIVATE_STATS", value);
    DWORD TcpConnect;
    DWORD TcpQuery;
    DWORD TcpDisconnect;
    DWORD SecTsigVerifyOldSig where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "SecTsigVerifyOldSig", "DNSSRV_PRIVATE_STATS", value);
    DWORD SecTsigVerifyOldFailed where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "SecTsigVerifyOldFailed", "DNSSRV_PRIVATE_STATS", value);
    DWORD SecBigTimeSkewBypass;
    DWORD ZoneLoadInit;
    DWORD ZoneLoadComplete where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "ZoneLoadComplete", "DNSSRV_PRIVATE_STATS", value);
    DWORD ZoneDbaseDelete where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "ZoneDbaseDelete", "DNSSRV_PRIVATE_STATS", value);
    DWORD ZoneDbaseDelayedDelete where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "ZoneDbaseDelayedDelete", "DNSSRV_PRIVATE_STATS", value);
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.23   DNSSRV_ERROR_STATS
type DNSSRV_ERROR_STATS
{
    DWORD NoError;
    DWORD FormError;
    DWORD ServFail;
    DWORD NxDomain;
    DWORD NotImpl;
    DWORD Refused;
    DWORD YxDomain;
    DWORD YxRRSet;
    DWORD NxRRSet;
    DWORD NotAuth;
    DWORD NotZone;
    DWORD Max;
    DWORD BadSig;
    DWORD BadKey;
    DWORD BadTime;
    DWORD UnknownError;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

// 2.2.10.2.24   DNSSRV_CACHE_STATS
type DNSSRV_CACHE_STATS
{
    DWORD CacheExceededLimitChecks where ValidationCheckZero(0 == value, null, true, ReferenceType.Type, "DNSP", "CacheExceededLimitChecks", "DNSSRV_CACHE_STATS", value);
    DWORD SuccessfulFreePasses;
    DWORD FailedFreePasses;
    DWORD PassesWithNoFrees;
    DWORD PassesRequiringAggressiveFree;
} with Encoding{EncodingKind = EncodingKind.Binary},
       IDL{DoNotGenerate = true};

pattern DNS_RPC_CRITERIA_COMPARATOR = enum 
    {
        Equals = 1,
        NotEquals = 2,
    };

pattern DNS_RPC_POLICY_CONDITION = enum 
    {
        DNS_AND = 0,
        DNS_OR = 1,
    };

pattern DNS_RPC_POLICY_LEVEL = enum 
    {
        DnsPolicyServerLevel = 0,
        DnsPolicyZoneLevel = 1,
        DnsPolicyLevelMax = 2,
    };

pattern DNS_RPC_POLICY_ACTION_TYPE = enum
    {
        DnsPolicyDeny = 0,
        DnsPolicyAllow = 1,
        DnsPolicyIgnore = 2,
        DnsPolicyActionMax = 3,
    };

pattern DNS_RPC_POLICY_TYPE = enum
    {
        DnsPolicyQueryProcessing = 0,
        DnsPolicyZoneTransfer = 1,
        DnsPolicyDynamicUpdate = 2,
        DnsPolicyRecursion = 3,
        DnsPolicyMax = 4,
    };

pattern DNS_RPC_CRITERIA_ENUM = enum
    {
         DnsPolicyCriteriaSubnet = 0,
         DnsPolicyCriteriaTransportProtocol = 1,
         DnsPolicyCriteriaNetworkProtocol = 2,
         DnsPolicyCriteriaInterface = 3,
         DnsPolicyCriteriaFqdn = 4,
         DnsPolicyCriteriaQtype = 5,
         DnsPolicyCriteriaTime = 6,
         DnsPolicyCriteriaMax = 7,
    };

typedef DNS_RPC_CLIENT_SUBNET_RECORD = ClientSubnetRecord;
type ClientSubnetRecord
{
    string pwszClientSubnetName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DnsAddrArray pIPAddr with Technologies.IDL.IDL{IndirectionLevel = 1};
    DnsAddrArray pIPv6Addr with Technologies.IDL.IDL{IndirectionLevel = 1};
}

typedef DNS_RPC_POLICY_CONTENT = DnssrvRpcPolicyActionContent;
type DnssrvRpcPolicyActionContent
{
    string pwszScopeName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD dwWeight;
}

typedef DNS_RPC_POLICY_CONTENT_LIST = DnssrvRpcPolicyAction;
type DnssrvRpcPolicyAction
{
    DWORD dwContentCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 50000}};
    array<DnssrvRpcPolicyActionContent> pContent
        with Technologies.IDL.IDL{Size_is = [dwContentCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

typedef DNS_RPC_CRITERIA = CriteriaList;
type CriteriaList
{
    DNS_RPC_CRITERIA_ENUM $"type";
    string pCriteria with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

typedef DNS_RPC_POLICY = DnssrvRpcPolicy;
type DnssrvRpcPolicy
{
    string pwszPolicyName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DNS_RPC_POLICY_LEVEL level;
    DNS_RPC_POLICY_TYPE appliesOn;
    DNS_RPC_POLICY_ACTION_TYPE action;
    DNS_RPC_POLICY_CONDITION condition;
    BOOL isEnabled;
    DWORD dwProcessingOrder;
    string pszZoneName with Technologies.IDL.IDL{BaseStringType = TypeOf<char>(), IndirectionLevel = 1};
    DNS_RPC_POLICY_CONTENT_LIST pContentList with Technologies.IDL.IDL{IndirectionLevel = 1};
    DWORDLONG $"flags";
    DWORD dwCriteriaCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 50000}};
    array<CriteriaList> pCriteriaList
        with Technologies.IDL.IDL{Size_is = [dwCriteriaCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

typedef DNS_RPC_POLICY_NAME = DnsRpcPolicyType;
type DnsRpcPolicyType
{
    string pwszPolicyName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DNS_RPC_POLICY_TYPE appliesOn;
    BOOL fEnabled;
    DWORD processingOrder;
}

typedef DNS_RPC_ENUMERATE_POLICY_LIST = DnsRpcEnumPolicyList;
type DnsRpcEnumPolicyList
{
    DWORD dwPolicyCount
        with Technologies.IDL.IDL{Range = new RangePattern{Low = 0, High = 50000}};
    array<DNS_RPC_POLICY_NAME> pPolicyArray
        with Technologies.IDL.IDL{Size_is = [dwPolicyCount],
                                  Dimensions = [null],
                                  IndirectionLevel = 1};
}

pattern DNS_RRL_MODE_ENUM = enum
    {
        DnsRRLLogOnly = 0,
        DnsRRLEnabled = 1,
        DnsRRLDisabled = 2,
    };

typedef DNS_RPC_RRL_PARAMS = DnsRRLParams;
type DnsRRLParams
{
    DWORD dwResponsesPerSecond;
    DWORD dwErrorsPerSecond;
    DWORD dwLeakRate;
    DWORD dwTCRate;
    DWORD dwTotalResponsesInWindow;
    DWORD dwWindowSize;
    DWORD dwIPv4PrefixLength;
    DWORD dwIPv6PrefixLength;
    DNS_RRL_MODE_ENUM eMode;
    DWORD dwFlags;
    BOOL fSetDefault;
}

typedef DNS_RPC_VIRTUALIZATION_INSTANCE = DnssrvRpcVirtualizationInstance;
type DnssrvRpcVirtualizationInstance
{
    DWORD dwRpcStructureVersion;
    DWORD dwReserved;
    DWORD dwFlags;
    string pwszVirtualizationID with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszFriendlyName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszDescription with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

typedef DNS_RPC_ENUM_VIRTUALIZATION_INSTANCE_LIST = DnsRpcEnumVirtualizationInstanceList;
type DnsRpcEnumVirtualizationInstanceList
{
    DWORD dwRpcStructureVersion;
    DWORD dwVirtualizationInstanceCount;
    array<DnssrvRpcVirtualizationInstanceInfo> VirtualizationInstanceArray
        with Technologies.IDL.IDL{Dimensions = [1], IndirectionLevel = 1};
}

type DnssrvRpcVirtualizationInstanceInfo
{
    string pwszVirtualizationID with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszFriendlyName with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string pwszDescription with Technologies.IDL.IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}


type DNSSRV_RRL_STATS
{
    DWORD TotalResponsesSent;
    DWORD TotalResponsesDropped;
    DWORD TotalResponsesTruncated;
    DWORD TotalResponsesLeaked;
} with Encoding{EncodingKind = EncodingKind.Binary},
        IDL{DoNotGenerate = true};

typedef DNSSRV_ZONE_RRL_STATS = DnsZoneRRLStats;
type DnsZoneRRLStats
{
    DNS_ZONE_STATS_TYPE Type;
    DWORD TotalResponsesSent;
    DWORD TotalResponsesDropped;
    DWORD TotalResponsesTruncated;
    DWORD TotalResponsesLeaked;
}

protocol MSSIPCOMP with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Session Initiation Protocol (SIP) Compression Protocol",
    ShortName = "MS-SIPCOMP",
    DocumentName = "MS-SIPCOMP",
    ProtocolType = "Block",
},
OPNAuthoring
{
    Copyright = "(c) 2015 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-SIPCOMP", Version = "3.4"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="05/19/2015"},
        ]
};

using Diagnostics;
using SIP;
using TCP;
using Standard;
using SkypeforBusinessShared;
using Utility;

endpoint Server 
	over SIP.Server | over TCP.Server
	accepts RequestMessage issues ResponseMessage
	accepts Packet issues Packet;
	
client endpoint Client connected to Server;
map<TCP.Server, string> SipCompressionMethod = {};

autostart actor ActorOverSIP(SIP.Server node)
{	
	process node accepts sipMsg:SIP.Request where (IsSipcompReq(sipMsg))
    {   
		RequestMessage msg = new RequestMessage(sipMsg);		
		dispatch (endpoint Server over node) accepts msg;
    }
	
	process node issues sipMsg:SIP.Response where (IsSipcompRsp(sipMsg))
    {       	
		ResponseMessage msg = new ResponseMessage(sipMsg);

		if (TryGetHeaderValue("Compression", sipMsg.Headers) == "LZ77-8K")
		{	
			SipCompressionMethod += {node.GetTransport<TCP.Server>() -> "LZ77-8K"};
		}
		dispatch (endpoint Server over node) issues msg;
    }
}

autostart actor ActorOverTCP(TCP.Server node)
{
	process node accepts s:TCP.Segment where (node in SipCompressionMethod)
	{
		optional Packet packet = DecodePacket(s);
		
		if ((packet != nothing) && (packet != null))
		{
			dispatch (endpoint Server over node) accepts packet as Packet;
		}
		else
		{
			ThrowDecodingException("MSSIPCOMP");
		}
	}

	process node issues s:TCP.Segment where (node in SipCompressionMethod)
	{
		optional Packet packet = DecodePacket(s);
		
		if ((packet != nothing) && (packet != null))
		{
			dispatch (endpoint Server over node) issues packet as Packet;
		}
		else
		{
			ThrowDecodingException("MSSIPCOMP");
		}
	}
}

bool IsSipcompReq(SIP.Request sipMsg)
{	
	if ((sipMsg.Method == "NEGOTIATE") && ContainsHeaders(["CSeq", "Via", "Call-ID", "From", "To", "Compression"], sipMsg.Headers))
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool IsSipcompRsp(SIP.Response sipMsg)
{	
	string cSeq = TryGetHeaderValue("CSeq", sipMsg.Headers);
	
	if (cSeq == "NEGOTIATE") 
	{
		return true;
	}
	else
	{
		return false;
	}
}

optional Packet DecodePacket(TCP.Segment s)
{
	optional Packet packet;
	
	if (s.Payload != null)
	{
		packet = BinaryDecoder<Packet>(s.Payload);
	}
	else
	{
		ThrowDecodingException("MSSIPCOMP", "The TCP.Segment of this frame is null.", null);
	}
	return packet;
}

message RequestMessage : SipRequestMessage
{
	RequestMessage(SIP.Request sipReqMsg)
	{	
		InitializeSIPReq(sipReqMsg, ["From", "To", "CSeq", "Via", "Call-ID"], this);
	}
		
	override string ToString()
	{
		return "Compression NEGOTIATE Request";
	}
}

message ResponseMessage : SipResponseMessage
{			
	ResponseMessage(SIP.Response sipRspMsg)
	{	
		InitializeSIPRsp(sipRspMsg, ["From", "To", "CSeq"], this);	
	}
		
	override string ToString()
	{
		return Format("Compression NEGOTIATE Response, {0} {1}", this.StatusCode, this.ReasonPhrase);
	}
}

message Packet
{
	CompressionPacketHeader Header;
	binary Data;
	optional binary Payload with Encoding{Ignore = true}; 
    
    override string ToString()
    {
        return "Compression Packet";
    }
}

message CompressionPacketHeader
{
	Flags Flags with BinaryEncoding{Width = 4};
	byte Type with BinaryEncoding{Width = 4};
	uint Reserved with BinaryEncoding{Width = 24};
	ushort UncompressedSize with BinaryEncoding{Width = 16}; 
}

type Flags
{
	bool PACKET_FLUSHED with BinaryEncoding{Width = 1};
    bool PACKET_AT_FRONT with BinaryEncoding{Width = 1};
    bool PACKET_COMPRESSED with BinaryEncoding{Width = 1};
	bool Undefined with BinaryEncoding{Width = 1};
}
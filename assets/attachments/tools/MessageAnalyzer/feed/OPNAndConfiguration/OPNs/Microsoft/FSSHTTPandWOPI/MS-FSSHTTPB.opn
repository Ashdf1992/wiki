module MSFSSHTTPB with
Documentation
{
    ProtocolName = "Binary Requests for File Synchronization via SOAP Protocol",
    ShortName = "MS-FSSHTTPB",
    DocumentName = "MS-FSSHTTPB",
    ProtocolType = "block",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-FSSHTTPB", Version = "6.1"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="11/02/2014"},
        ]
};

using Utility;
using Diagnostics;
using ERREF;
using FileSyncBasicType;
using MSFSSHTTPD;

// Section 2.2.1.12   Data Element Package
type DataElementPackage
{
    StreamObjectStart16BitHeader DataElementPackageStart where ValidationCheckHeader(value, 0x15);
    byte Reserved where ValidationCheck(value == 0x0, null, "MS-FSSHTTPB: The Reserved field in type DataElementPackage MUST be zero.");
    optional array<([|ContainsStreamObjectHeader(stream, 0x01)|] 
                    ([|PreReadDataElementPackageType(stream) == 0x01|] StorageIndexDataElement         |
                     [|PreReadDataElementPackageType(stream) == 0x02|] StorageManifestDataElement      |
                     [|PreReadDataElementPackageType(stream) == 0x03|] CellManifestDataElement         |
                     [|PreReadDataElementPackageType(stream) == 0x04|] RevisionManifestDataElements    |
                     [|PreReadDataElementPackageType(stream) == 0x05|] ObjectGroupDataElements         |
                     [|PreReadDataElementPackageType(stream) == 0x06|] DataElementFragmentDataElements |
                     [|PreReadDataElementPackageType(stream) == 0x0A|] ObjectDataBLOBDataElements))> DataElements;
    StreamObjectEnd8BitHeader DataElementPackageEnd where ValidationCheckHeader(value, 0x15);
}

// Section 2.2.1.12.1   Data Element Types
pattern DataElementType = enum byte
{
    $"Storage Index"         = 0x01,
    $"Storage Manifest"      = 0x02,
    $"Cell Manifest"         = 0x03,
    $"Revision Manifest"     = 0x04,
    $"Object Group"          = 0x05,
    $"Data Element Fragment" = 0x06,
    $"Object Data BLOB"      = 0x0A,
    ...
};

// Section 2.2.1.12.2   Storage Index Data Element
type StorageIndexDataElement
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Storage Index";
    optional array<([|(CurrentByte(stream) & 0x03) as byte == 0x0|]
                   ([|(CurrentByte(stream) >> 3 & 0x3F) as byte == 0x11|] StorageIndexManifestMappingValues | 
                    [|(CurrentByte(stream) >> 3 & 0x3F) as byte == 0x0E|] StorageIndexCellMappingValues     | 
                    [|(CurrentByte(stream) >> 3 & 0x3F) as byte == 0x0D|] StorageIndexRevisionMappingValues))> StorageIndexDataElementData;
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

type StorageIndexManifestMappingValues
{
    StreamObjectStart16BitHeader StorageIndexManifestMapping where ValidationCheckHeader(value, 0x11);
    ExtendedGUID ManifestMappingExtendedGUID;
    SerialNumber ManifestMappingSerialNumber;
}

type StorageIndexCellMappingValues
{
    StreamObjectStart16BitHeader StorageIndexCellMapping where ValidationCheckHeader(value, 0x0E);
    CellID CellID;
    ExtendedGUID CellMappingExtendedGUID;
    SerialNumber CellMappingSerialNumber;
}

type StorageIndexRevisionMappingValues
{
    StreamObjectStart16BitHeader StorageIndexRevisionMapping where ValidationCheckHeader(value, 0x0D);
    ExtendedGUID RevisionExtendedGUID;
    ExtendedGUID RevisionMappingExtendedGUID;
    SerialNumber RevisionMappingSerialNumber;
}

// Section 2.2.1.12.3   Storage Manifest Data Element
type StorageManifestDataElement
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Storage Manifest";
    StreamObjectStart16BitHeader StorageManifestSchemaGUID where ValidationCheckHeader(value, 0x0C);
    guid GUID;
    array<([|(CurrentByte(stream) & 0x03) as byte == 0x0|] StorageManifestRootDeclareValues)> StorageManifestDataElementData;
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

type StorageManifestRootDeclareValues
{
    StreamObjectStart16BitHeader StorageManifestRootDeclare where ValidationCheckHeader(value, 0x07); 
    ExtendedGUID RootExtendedGUID;
    CellID CellID;
}

// Section 2.2.1.12.4   Cell Manifest Data Element
type CellManifestDataElement
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Cell Manifest";
    StreamObjectStart16BitHeader CellManifestCurrentRevision where ValidationCheckHeader(value, 0x0B);
    ExtendedGUID CellManifestCurrentRevisionExtendedGUID;
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

// Section 2.2.1.12.5   Revision Manifest Data Elements
type RevisionManifestDataElements
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Revision Manifest";
    StreamObjectStart16BitHeader RevisionManifest where ValidationCheckHeader(value, 0x1A);
    ExtendedGUID RevisionID;
    ExtendedGUID BaseRevisionID;
    optional array<([|(CurrentByte(stream) & 0x03) as byte == 0x0|] 
                      ([|(CurrentByte(stream) >> 3 & 0x3F) as byte == 0x0A|] RevisionManifestRootDeclareValues | 
                       [|(CurrentByte(stream) >> 3 & 0x3F) as byte == 0x19|] RevisionManifestObjectGroupReferencesValues))> RevisionManifestDataElementsData;
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

type RevisionManifestRootDeclareValues
{
    StreamObjectStart16BitHeader RevisionManifestRootDeclare where ValidationCheckHeader(value, 0x0A);
    ExtendedGUID RootExtendedGUID;
    ExtendedGUID ObjectExtendedGUID;
}

type RevisionManifestObjectGroupReferencesValues
{
    StreamObjectStart16BitHeader RevisionManifestObjectGroupReferences where ValidationCheckHeader(value, 0x19);
    ExtendedGUID ObjectGroupExtendedGUID;
}

// Section 2.2.1.12.6   Object Group Data Elements
type ObjectGroupDataElements
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Object Group";
    optional [|ContainsStreamObjectHeader(stream, 0x06)|] DataElementHash DataElementHash;
    StreamObjectHeader ObjectGroupDeclarationsStart;
    optional array<([|ContainsStreamObjectHeader(stream, 0x18)|] ObjectDeclaration | 
                    [|ContainsStreamObjectHeader(stream, 0x05)|] ObjectDataBLOBDeclaration)> ObjectDeclarationOrObjectDataBLOBDeclaration;
    StreamObjectEnd8BitHeader ObjectGroupDeclarationsEnd where ValidationCheckHeader(value, 0x1D);  
    optional [|ContainsStreamObjectHeader(stream, 0x79)|] ObjectMetadataDeclaration ObjectMetadataDeclaration;
    StreamObjectHeader ObjectGroupDataStart;
    optional array<([|ContainsStreamObjectStart16BitHeader(stream, 0x16)|] ObjectData | 
                    [|ContainsStreamObjectStart32BitHeader(stream, 0x16)|] ObjectExcludedData |
                    [|ContainsStreamObjectHeader(stream, 0x1C)|] ObjectDataBLOBReference)> ObjectDataOrObjectDataBLOBReference;
    StreamObjectEnd8BitHeader ObjectGroupDataEnd where ValidationCheckHeader(value, 0x1E);
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

// Section 2.2.1.12.6.1   Object Declaration
type ObjectDeclaration
{
    StreamObjectHeader ObjectGroupObjectDeclaration;
    ExtendedGUID ObjectExtendedGUID;
    CompactUnsigned64bitInteger ObjectPartitionID;
    CompactUnsigned64bitInteger ObjectDataSize;
    CompactUnsigned64bitInteger ObjectReferencesCount;
    CompactUnsigned64bitInteger CellReferencesCount;
}

// Section 2.2.1.12.6.2   Object Data BLOB Declaration
type ObjectDataBLOBDeclaration
{
    StreamObjectHeader ObjectGroupObjectDataBLOBDeclaration;
    ExtendedGUID ObjectExtendedGUID;
    ExtendedGUID ObjectDataBLOBEXGUID;
    CompactUnsigned64bitInteger ObjectPartitionID;
    CompactUnsigned64bitInteger ObjectReferencesCount;
    CompactUnsigned64bitInteger CellReferencesCount;
}

// Section 2.2.1.12.6.3   Object Metadata Declaration
type ObjectMetadataDeclaration
{
    StreamObjectStart32BitHeader ObjectGroupMetadataDeclarations where ValidationCheckHeader(value, 0x79);
    array<([|ContainsStreamObjectHeader(stream, 0x78)|] ObjectMetadata)> ObjectMetadata;
    StreamObjectEnd16BitHeader ObjectGroupMetadataDeclarationsEnd where ValidationCheckHeader(value, 0x79);
}

// Section 2.2.1.12.6.3.1   Object Metadata
type ObjectMetadata
{
    StreamObjectStart32BitHeader ObjectGroupMetadata where ValidationCheckHeader(value, 0x78);
    CompactUnsigned64bitInteger ObjectChangeFrequency;
}

// Section 2.2.1.12.6.4   Object Data
type ObjectData
{
    StreamObjectStart16BitHeader ObjectGroupObjectData where ValidationCheckHeader(value, 0x16);
    ExtendedGUIDArray ObjectExtendedGUIDArray;
    CellIDArray CellIDArray;
    CompactUnsigned64bitInteger Length;
    ( [|ContainsStreamObjectHeader(stream, 0x20)|] RootNodeObjectData | 
      [|ContainsStreamObjectHeader(stream, 0x1F)|] IntermediateNodeObjectData | 
      binary) Data with BinaryEncoding{WidthForComposedType = Length.Uint * 8};
   
    override string ToString()
    {
        if (Data is RootNodeObjectData)
            return "Root Node Object Data";
        else if (Data is IntermediateNodeObjectData)
            return "Intermediate Node Object Data";
        else
            return "Data Node Object Data";
    }
}

type ObjectExcludedData
{
    StreamObjectStart32BitHeader ObjectGroupExcludedData where ValidationCheckHeader(value, 0x16);
    ExtendedGUIDArray ObjectExtendedGUIDArray;
    CellIDArray CellIDArray;
    CompactUnsigned64bitInteger DataCount;
    ( [|ContainsStreamObjectHeader(stream, 0x20)|] RootNodeObjectData | 
      [|ContainsStreamObjectHeader(stream, 0x1F)|] IntermediateNodeObjectData | 
      binary) Data with BinaryEncoding{WidthForComposedType = DataCount.Uint * 8};
}

// Section 2.2.1.12.6.5   Object Data BLOB Reference
type ObjectDataBLOBReference
{
    StreamObjectHeader ObjectGroupObjectDataBLOBReference;
    ExtendedGUIDArray ObjectExtendedGUIDArray;
    CellIDArray CellIDArray;
    ExtendedGUID BLOBExtendedGUID;
}

// Section 2.2.1.12.6.6   Data Element Hash
type DataElementHash
{
    StreamObjectHeader DataElementHashDeclaration;
    CompactUnsigned64bitInteger DataElementHashScheme where ValidationCheck(value.Uint == 0x1, null, "MS-FSSHTTPB: The DataElementHashScheme field in type DataElementHash MUST be 1.");
    BinaryItem DataElementHashData;
}

// Section 2.2.1.12.7   Data Element Fragment Data Elements
type DataElementFragmentDataElements
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Data Element Fragment";
    
    StreamObjectStart32BitHeader DataElementFragment where ValidationCheckHeader(value, 0x06A); 
    ExtendedGUID FragmentExtendedGUID;
    CompactUnsigned64bitInteger FragmentDataElementSize;
    FileChunkReference FragmentFileChunkReference;
    BinaryItem FragmentData;  // TODO: NOT SURE if should use BinaryItem type.
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

// Section 2.2.1.12.8   Object Data BLOB Data Elements
type ObjectDataBLOBDataElements
{
    StreamObjectStart16BitHeader DataElementStart where ValidationCheckHeader(value, 0x01);
    ExtendedGUID DataElementExtendedGUID;
    SerialNumber SerialNumber;
    CompactUnsigned64bitInteger DataElementType where (value.Uint as byte) is DataElementType.$"Object Data BLOB";
    StreamObjectHeader ObjectDataBLOB;
    binary Data with BinaryEncoding{Length = ObjectDataBLOB.DataLength};
    StreamObjectEnd8BitHeader DataElementEnd where ValidationCheckHeader(value, 0x01);
}

// Section 2.2.1.13   Knowledge
type Knowledge
{
    StreamObjectStart16BitHeader KnowledgeStart where ValidationCheckHeader(value, 0x10);
    optional array<([|ContainsStreamObjectHeader(stream, 0x44)|] SpecializedKnowledge)> SpecializedKnowledge;
    StreamObjectEnd8BitHeader KnowledgeEnd where ValidationCheckHeader(value, 0x10);
}

// Section 2.2.1.13.1   Specialized Knowledge
type SpecializedKnowledge
{
    StreamObjectStart32BitHeader SpecializedKnowledgeStart where ValidationCheckHeader(value, 0x44);
    guid GUID;
    ([|GUID == {327A35F6-0761-4414-9686-51E900667A4D}|] CellKnowledge      |
     [|GUID == {3A76E90E-8032-4D0C-B9DD-F3C65029433E}|] WaterlineKnowledge |
     [|GUID == {0ABE4F35-01DF-4134-A24A-7C79F0859844}|] FragmentKnowledge  |
     [|GUID == {10091F13-C882-40FB-9886-6533F934C21D}|] ContentTagKnowledge) SpecializedKnowledgeData;
    StreamObjectEnd16BitHeader SpecializedKnowledgeEnd where ValidationCheckHeader(value, 0x44);
}

// Section 2.2.1.13.2   Cell Knowledge
type CellKnowledge
{
    StreamObjectStart16BitHeader CellKnowledgeStart where ValidationCheckHeader(value, 0x14);
    array<([|ContainsStreamObjectHeader(stream, 0x0F)|] CellKnowledgeRange | 
           [|ContainsStreamObjectHeader(stream, 0x17)|] CellKnowledgeEntry)> CellKnowledgeData;
    StreamObjectEnd8BitHeader CellKnowledgeEnd where ValidationCheckHeader(value, 0x14);
}

// Section 2.2.1.13.2.1   Cell Knowledge Range
type CellKnowledgeRange
{
    StreamObjectStart16BitHeader CellKnowledgeRange where ValidationCheckHeader(value, 0x0F);
    guid GUID;
    CompactUnsigned64bitInteger From;
    CompactUnsigned64bitInteger To;
}

// Section 2.2.1.13.2.2   Cell Knowledge Entry
type CellKnowledgeEntry
{
    StreamObjectStart16BitHeader CellKnowledgeEntry where ValidationCheckHeader(value, 0x17);
    SerialNumber SerialNumber;
}

// Section 2.2.1.13.3   Fragment Knowledge
type FragmentKnowledge
{
    StreamObjectStart32BitHeader FragmentKnowledgeStart where ValidationCheckHeader(value, 0x06B); 
    array<([|ContainsStreamObjectHeader(stream, 0x06C)|] FragmentKnowledgeEntry)> FragmentKnowledgeEntries; 
    StreamObjectEnd16BitHeader FragmentKnowledgeEnd where ValidationCheckHeader(value, 0x06B); 
}

// Section 2.2.1.13.3.1   Fragment Knowledge Entry
type FragmentKnowledgeEntry
{
    StreamObjectStart32BitHeader FragmentDescriptor where ValidationCheckHeader(value, 0x06C);
    ExtendedGUID ExtendedGUID;
    CompactUnsigned64bitInteger DataElementSize;
    FileChunkReference DataElementChunkReference;
}

// Section 2.2.1.13.4   Waterline Knowledge
type WaterlineKnowledge
{
    StreamObjectStart16BitHeader WaterlineKnowledgeStart where ValidationCheckHeader(value, 0x29);
    array<([|ContainsStreamObjectHeader(stream, 0x04)|] WaterlineKnowledgeEntry)> WaterlineKnowledgeData; 
    StreamObjectEnd8BitHeader WaterlineKnowledgeEnd where ValidationCheckHeader(value, 0x29);
}

// Section 2.2.1.13.4.1   Waterline Knowledge Entry
type WaterlineKnowledgeEntry
{
    StreamObjectStart16BitHeader WaterlineKnowledgeEntry where ValidationCheckHeader(value, 0x04);
    ExtendedGUID CellStorageExtendedGUID;
    CompactUnsigned64bitInteger Waterline;
    CompactUnsigned64bitInteger Reserved; 
}

// Section 2.2.1.13.5   Content Tag Knowledge
type ContentTagKnowledge
{
    StreamObjectStart16BitHeader ContentTagKnowledgeStart where ValidationCheckHeader(value, 0x2D);
    optional array<([|ContainsStreamObjectHeader(stream, 0x2E)|] ContentTagKnowledgeEntry)> ContentTagKnowledgeEntryArray;
    StreamObjectEnd8BitHeader ContentTagKnowledgeEnd where ValidationCheckHeader(value, 0x2D);
}

// Section 2.2.1.13.5.1   Content Tag Knowledge Entry
type ContentTagKnowledgeEntry
{
    StreamObjectStart16BitHeader ContentTagKnowledgeEntryStart  where ValidationCheckHeader(value, 0x2E);
    ExtendedGUID BLOBHeapExtendedGUID;
    BinaryItem ClockData;
}

// Section 2.2.2   Request Message Syntax
type RequestMessage
{
    ushort ProtocolVersion where ValidationCheck(value == 0xC, null, 
            "MS-FSSHTTPB: The ProtocolVersion field in type RequestMessage MUST be 12.");
    ushort MinimumVersion where ValidationCheck(value == 0xB, null, 
            "MS-FSSHTTPB: The MinimumVersion field in type RequestMessage MUST be 11.");
    ulong Signature where ValidationCheck(value == 0x9B069439F329CF9C, null, 
            "MS-FSSHTTPB: The Signature field in type RequestMessage MUST be 0x9B069439F329CF9D.");
    StreamObjectStart32BitHeader RequestStart where ValidationCheckHeader(value, 0x040);
    StreamObjectStart32BitHeader UserAgentStart where ValidationCheckHeader(value, 0x05D);
    optional [|ContainsStreamObjectHeader(stream, 0x055)|] StreamObjectStart32BitHeader UserAgentGUID
            with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|UserAgentGUID != nothing|] guid GUID;
    optional [|ContainsStreamObjectHeader(stream, 0x8B)|] StreamObjectStart32BitHeader UserAgentClientAndPlatform
            with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|UserAgentClientAndPlatform != nothing|] CompactUnsigned64bitInteger ClientCount 
            with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};
    optional [|UserAgentClientAndPlatform != nothing|] array<byte> ClientByteArray 
            with BinaryEncoding{Length = (ClientCount as CompactUnsigned64bitInteger).Uint};
    optional [|UserAgentClientAndPlatform != nothing|] CompactUnsigned64bitInteger PlatformCount 
            with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};
    optional [|UserAgentClientAndPlatform != nothing|] array<byte> PlatformByteArray 
            with BinaryEncoding{Length = (PlatformCount as CompactUnsigned64bitInteger).Uint};
    StreamObjectStart32BitHeader UserAgentVersion where ValidationCheckHeader(value, 0x04F);
    uint Version where ValidationCheck(value >= 0xFA12994, null, 
            "MS-FSSHTTPB: The Version field in type RequestMessage MUST be greater than or equal to 0xFA12994.");
    StreamObjectEnd16BitHeader UserAgentEnd where ValidationCheckHeader(value, 0x05D);
    optional [|ContainsStreamObjectHeader(stream, 0x88)|] StreamObjectStart32BitHeader RequestHashingOptionsDeclaration 
            with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|RequestHashingOptionsDeclaration != nothing|] CompactUnsigned64bitInteger RequestHashingSchema 
            with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};
    optional [|RequestHashingOptionsDeclaration != nothing|] byte E with BinaryEncoding{Width = 4}, 
            DisplayInfo{ToText = (any x) => ("A 4-bit reserved field")};
    optional [|RequestHashingOptionsDeclaration != nothing|] byte D with BinaryEncoding{Width = 1},
            DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Request Data Element Hashes")};
    optional [|RequestHashingOptionsDeclaration != nothing|] byte C with BinaryEncoding{Width = 1},
            DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Request Data Element Hashes Instead of Data")};
    optional [|RequestHashingOptionsDeclaration != nothing|] byte B with BinaryEncoding{Width = 1},
            DisplayInfo{ToText = (any x) => ("Reserved")};
    optional [|RequestHashingOptionsDeclaration != nothing|] byte A with BinaryEncoding{Width = 1},
            DisplayInfo{ToText = (any x) => ("Reserved")};
    optional array<([|ContainsStreamObjectHeader(stream, 0x042)|] SubRequest)> SubRequests;
    optional [|ContainsStreamObjectHeader(stream, 0x15)|] DataElementPackage DataElementPackage;
    StreamObjectEnd16BitHeader CellRequestEnd where ValidationCheckHeader(value, 0x040);
}

// Section 2.2.2.1   sub-requests
type SubRequest
{
    StreamObjectStart32BitHeader SubRequestStart where ValidationCheckHeader(value, 0x042);
    CompactUnsigned64bitInteger RequestID;
    CompactUnsigned64bitInteger RequestType;
    CompactUnsigned64bitInteger Priority;
    optional [|ContainsStreamObjectHeader(stream, 0x83)|] TargetPartitionId TargetPartitionId;

    ([|RequestType.Uint == 0x1|] QueryAccessRequest  |
     [|RequestType.Uint == 0x2|] QueryChangesRequest |
     [|RequestType.Uint == 0x5|] PutChangesRequest   |
     [|RequestType.Uint == 0xB|] AllocateExtendedGUIDRangeRequest) SubRequestData;
     
    StreamObjectEnd16BitHeader SubRequestEnd where ValidationCheckHeader(value, 0x042);
    
    override string ToString()
    {
        switch (RequestType.Uint)
        {
            case 0x1 => return "Query Access sub-request";
            case 0x2 => return "Query Changes sub-request";
            case 0x5 => return "Put Changes sub-request";
            case 0xB => return "Allocate Extended GUID Range sub-request";
            default => return "Unknown type sub-request";
        }
    }
}

// Section 2.2.2.1.1   Target Partition Id
type TargetPartitionId
{
    StreamObjectStart32BitHeader TargetPartitionIdStart where ValidationCheckHeader(value, 0x83);
    guid PartitionIdGUID;
    StreamObjectEnd16BitHeader TargetPartitionIdEnd where ValidationCheckHeader(value, 0x083);
}

// Section 2.2.2.1.2   Query Access
type QueryAccessRequest
{
    // Query access does not have any sub-request data.
}

// Section 2.2.2.1.3   Query Changes
type QueryChangesRequest
{
    StreamObjectStart32BitHeader QueryChangesRequest where ValidationCheckHeader(value, 0x051);
    byte E with BinaryEncoding{Width = 4}, DisplayInfo{ToText = (any x) => ("A 4-bit reserved field")};
    byte D with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Include Filtered Out Data Elements In Knowledge")};
    byte C with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Exclude Object Data")};
    byte B with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Allow Fragments")};
    byte A with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => ("Reserved")};
    StreamObjectStart32BitHeader QueryChangesRequestArguments where ValidationCheckHeader(value, 0x05B);
    byte H with BinaryEncoding{Width = 6}, DisplayInfo{ToText = (any x) => ("A 6-bit reserved field")};
    byte G with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Include Cell Changes")};
    byte F with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Include Storage Manifest")};
    CellID CellID;
    optional [|ContainsStreamObjectHeader(stream, 0x059)|] StreamObjectStart32BitHeader QueryChangesDataConstraints 
            with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|QueryChangesDataConstraints != nothing|] CompactUnsigned64bitInteger MaxDataElements 
            with Encoding{Decoder = CompactUnsigned64bitIntegerDecoder};
    optional array<([|ContainsStreamObjectHeader(stream, 0x47)|] Filters)> QueryChangesFilters;
    optional [|ContainsStreamObjectHeader(stream, 0x10)|] Knowledge Knowledge;
}

// Section 2.2.2.1.3.1   Filters
type Filters
{
    StreamObjectStart32BitHeader QueryChangesFilterStart where ValidationCheckHeader(value, 0x47);
    FilterType FilterType;
    byte FilterOperation;

    ([|FilterType == 0x1|] AllFilter                                |
     [|FilterType == 0x2|] DataElementTypeFilter                    |
     [|FilterType == 0x3|] StorageIndexReferencedDataElementsFilter |
     [|FilterType == 0x4|] CellIDFilter                             |
     [|FilterType == 0x5|] CustomFilter                             |
     [|FilterType == 0x6|] DataElementIDsFilter                     |
     [|FilterType == 0x7|] HierarchyFilter )    QueryChangesFilterData;

    StreamObjectEnd16BitHeader QueryChangesFilterEnd  where ValidationCheckHeader(value, 0x47);
    optional [|ContainsStreamObjectStart32BitHeader(stream, 0x87)|] StreamObjectStart32BitHeader QueryChangesFilterFlags 
            with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|QueryChangesFilterFlags != nothing|] byte F with BinaryEncoding{Width = 1},
            DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Fail if Unsupported")};
    optional [|QueryChangesFilterFlags != nothing|] byte Reserved with BinaryEncoding{Width = 7};
}

pattern FilterType = enum byte
{
    $"All filter"                                    = 1,
    $"Data element type filter"                      = 2,
    $"Storage index referenced data elements filter" = 3,
    $"Cell ID filter"                                = 4,
    $"Custom filter"                                 = 5,
    $"Data element IDs filter"                       = 6,
    $"Hierarchy filter"                              = 7,
    ...
};

// Section 2.2.2.1.3.1.1   All Filter
type AllFilter
{
    // This filter does not contain any data.
}

// Section 2.2.2.1.3.1.2   Data Element Type Filter
type DataElementTypeFilter
{
     StreamObjectStart32BitHeader QueryChangesFilterDataElementType where ValidationCheckHeader(value, 0x57);
     CompactUnsigned64bitInteger DataElementType;
}

// Section 2.2.2.1.3.1.3   Storage Index Referenced Data Elements Filter
type StorageIndexReferencedDataElementsFilter
{
     // This filter is not currently supported by the server.
}

// Section 2.2.2.1.3.1.4   Cell ID Filter
type CellIDFilter
{
    StreamObjectStart32BitHeader QueryChangesFilterCellID where ValidationCheckHeader(value, 0x05C);
    CellID CellID;
}

// Section 2.2.2.1.3.1.5   Custom Filter
type CustomFilter
{
    StreamObjectStart32BitHeader QueryChangesFilterSchemaSpecific where ValidationCheckHeader(value, 0x050);
    guid SchemaGUID;
    array<byte> SchemaFilterData with BinaryEncoding{Length = QueryChangesFilterSchemaSpecific.DataLength};
}

// Section 2.2.2.1.3.1.6   Data Element IDs Filter
type DataElementIDsFilter
{
    StreamObjectStart32BitHeader QueryChangesFilterDataElementIDs where ValidationCheckHeader(value, 0x054);
    ExtendedGUIDArray DataElementIDs;
}

// Section 2.2.2.1.3.1.7   Hierarchy Filter
type HierarchyFilter
{
    StreamObjectStart32BitHeader QueryChangesFilterHierarchy where ValidationCheckHeader(value, 0x060);
    HierarchyFilterDepth Depth;
    CompactUnsigned64bitInteger Count;
    array<byte> RootIndexKeyByteArray with BinaryEncoding{Length = Count.Uint};
}

type CellManifestidentifier
{
    ExtendedGUID RevisionManifestIdentifier;
    ExtendedGUID RootStorageManifest;
}

pattern HierarchyFilterDepth = enum byte
{
    // Index values corresponding to the specified keys only.
    IndexOnly = 0,
    // First data elements referenced by the storage index values corresponding to the specified keys only.
    FirstDataElement = 1,
    // Single level. All data elements under the sub-graphs rooted by the specified keys stopping at any storage index entries.
    SingleLevel = 2,
    // Deep. All data elements and storage index entries under the sub-graphs rooted by the specified keys.
    Deep = 3
};

// Section 2.2.2.1.4   Put Changes
type PutChangesRequest
{
    StreamObjectStart32BitHeader PutChangesRequest where ValidationCheckHeader(value, 0x05A);
    ExtendedGUID StorageIndexExtendedGUID;
    ExtendedGUID ExpectedStorageIndexExtendedGUID;
    
    byte H with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Last Writer Wins On Next Change")};
    byte G with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Return Complete Knowledge If Possible")};
    byte F with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Multi-Request Put Hint")};
    byte E with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Abort Remaining Put Changes on Failure")};
    byte D with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Favor Coherency Failure Over Not Found")};
    byte C with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Partial Last")};
    byte B with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Partial")};
    byte A with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Imply Null Expected if No Mapping")};
    
    optional [|ContainsStreamObjectHeader(stream, 0x86)|] AdditionalFlags AdditionalFlags;
    optional [|ContainsStreamObjectHeader(stream, 0x85)|] LockId LockId;
    optional [|ContainsStreamObjectHeader(stream, 0x10)|] Knowledge ClientKnowledge;
    optional [|ContainsStreamObjectStart32BitHeader(stream, 0x8A)|] DiagnosticRequestOptionInput DiagnosticRequestOptionInput;
}

// Section 2.2.2.1.4.1   Additional Flags
type AdditionalFlags
{
    StreamObjectStart32BitHeader AdditionalFlagsHeader where ValidationCheckHeader(value, 0x86);
    AdditionalFlagsData Flags;
}

type AdditionalFlagsData
{
    ushort Reserved with BinaryEncoding{Width = 10, Endian = Endian.Big};
    byte F with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Require Storage Mappings Rooted")};
    byte E with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Full File Replace Put")};
    byte D with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Coherency Check Only Applied Index Entries")};
    byte C with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Check for Id Reuse")};
    byte B with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Return Data Elements Added")};
    byte A with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Return Applied Storage Index Id Entries")};
} with BinaryEncoding{WidthForComposedType = 16, DecodeAsUnit = true};

// Section 2.2.2.1.4.2   Lock Id
type LockId
{
    StreamObjectStart32BitHeader LockIdHeader where ValidationCheckHeader(value, 0x85);
    guid LockIdGuid;
}

// Section 2.2.2.1.4.3   Diagnostic Request Option Input
type DiagnosticRequestOptionInput
{
    StreamObjectStart32BitHeader DiagnosticRequestOptionInputHeader where ValidationCheckHeader(value, 0x08A); 
    byte Reserved with BinaryEncoding{Width = 7};
    byte A with BinaryEncoding{Width = 1};
}

// Section 2.2.2.1.5   Allocate Extended GUID Range
type AllocateExtendedGUIDRangeRequest
{
    StreamObjectStart32BitHeader AllocateExtendedGUIDRangeRequest where ValidationCheckHeader(value, 0x080);
    CompactUnsigned64bitInteger RequestIdCount;
    byte A;
}

// Section 2.2.3   Response Message Syntax
type ResponseMessage
{
    ushort ProtocolVersion where ValidationCheck(value == 0xC, null, 
           "MS-FSSHTTPB: The ProtocolVersion field in type ResponseMessage MUST be 12.");
    ushort MinimumVersion where ValidationCheck(value == 0xB, null, 
           "MS-FSSHTTPB: The MinimumVersion field in type ResponseMessage MUST be 11.");
    ulong Signature where ValidationCheck(value == 0x9B069439F329CF9D, null, 
           "MS-FSSHTTPB: The Signature field in type ResponseMessage MUST be 0x9B069439F329CF9D.");
    StreamObjectStart32BitHeader ResponseStart where ValidationCheckHeader(value, 0x062);
    byte Reserved where ValidationCheck(value == 0x0, null, 
           "MS-FSSHTTPB: The Reserved field in type ResponseMessage MUST be zero.") with BinaryEncoding{Width = 7};
    byte A with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Response error")};
    
    ([|A == 0x1|] ResponseError | ResponseDataType) ResponseData;
    StreamObjectEnd16BitHeader ResponseEnd where ValidationCheckHeader(value, 0x062);
}

type ResponseDataType
{
    optional [|ContainsStreamObjectHeader(stream, 0x15)|] DataElementPackage DataElementPackage;
    optional array<([|ContainsStreamObjectHeader(stream, 0x041)|] SubResponse)> SubResponses;
}

// Section 2.2.3.1   Sub-Responses
type SubResponse
{
    StreamObjectStart32BitHeader SubResponseStart where ValidationCheckHeader(value, 0x041);
    CompactUnsigned64bitInteger RequestID;
    CompactUnsigned64bitInteger RequestType;
    byte Reserved where ValidationCheck(value == 0x0, null, 
         "MS-FSSHTTPB: The Reserved field in type SubResponse MUST be zero.") with BinaryEncoding{Width = 7};
    byte A with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Response error")};
    ([|A == 0x1|]                ResponseError        | 
     [|RequestType.Uint == 0x1|] QueryAccessResponse  |
     [|RequestType.Uint == 0x2|] QueryChangesResponse |
     [|RequestType.Uint == 0x5|] PutChangesResponse   |
     [|RequestType.Uint == 0xB|] AllocateExtendedGuidRangeResponse) SubResponseData;
    StreamObjectEnd16BitHeader SubResponseEnd where ValidationCheckHeader(value, 0x041);
    
    override string ToString()
    {
        if (A == 0x1)
            return "Response Error";

        switch (RequestType.Uint)
        {
            case 0x1 => return "Query Access sub-response";
            case 0x2 => return "Query Changes sub-response";
            case 0x5 => return "Put Changes sub-response";
            case 0xB => return "Allocate ExtendedGuid Range sub-response";
            default => return "Unknown type sub-response";
        }
    }
}

// Section 2.2.3.1.1   Query Access
type QueryAccessResponse
{
    StreamObjectStart32BitHeader ReadAccessResponseStart where ValidationCheckHeader(value, 0x043); 
    ResponseError ReadAccessResponseError;
    StreamObjectEnd16BitHeader ReadAccessResponseEnd where ValidationCheckHeader(value, 0x043);
    StreamObjectStart32BitHeader WriteAccessResponseStart where ValidationCheckHeader(value, 0x046);
    ResponseError WriteAccessResponseError;
    StreamObjectEnd16BitHeader WriteAccessResponseEnd where ValidationCheckHeader(value, 0x046);
}

// Section 2.2.3.1.2   Query Changes
type QueryChangesResponse
{
    StreamObjectStart32BitHeader QueryChangesResponse where ValidationCheckHeader(value, 0x05F);
    ExtendedGUID  StorageIndexExtendedGUID; 
    byte Reserved with BinaryEncoding{Width = 7};
    byte P with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Partial result")};
    Knowledge Knowledge;
}

// Section 2.2.3.1.3   Put Changes
type PutChangesResponse
{
    optional [|ContainsStreamObjectHeader(stream, 0x87)|] StreamObjectStart32BitHeader PutChangesResponse with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|PutChangesResponse != nothing|] ExtendedGUID AppliedStorageIndexId with Encoding{Decoder = ExtendedGUIDDecoder};
    optional [|PutChangesResponse != nothing|] ExtendedGUIDArray DataElementsAdded;
    Knowledge ResultantKnowledge;
    optional [|ContainsStreamObjectStart32BitHeader(stream, 0x89)|] DiagnosticRequestOptionOutput DiagnosticRequestOptionOutput;
}

// Section 2.2.3.1.3.1   Diagnostic Request Option Output
type DiagnosticRequestOptionOutput
{
    StreamObjectStart32BitHeader DiagnosticRequestOptionOutputHeader where ValidationCheckHeader(value, 0x089); 
    byte Reserved with BinaryEncoding{Width = 7};
    byte F with BinaryEncoding{Width = 1}, DisplayInfo{ToText = (any x) => FlagMeaningToText(x, "Force Revision Chain optimization")};
}

// Section 2.2.3.1.4   Allocate ExtendedGuid Range
type AllocateExtendedGuidRangeResponse
{
   StreamObjectStart32BitHeader AllocateExtendedGuidRangeResponse where ValidationCheckHeader(value, 0x081); 
   guid GUIDComponent;
   CompactUnsigned64bitInteger IntegerRangeMin;
   CompactUnsigned64bitInteger IntegerRangeMax;
}

// Section 2.2.3.2   Response Error
type ResponseError
{
    StreamObjectStart32BitHeader ErrorStart where ValidationCheckHeader(value, 0x04D);
    guid ErrorTypeGUID;
    ([|ErrorTypeGUID == {5A66A756-87CE-4290-A38B-C61C5BA05A67}|] CellError     |
     [|ErrorTypeGUID == {7AFEAEBF-033D-4828-9C31-3977AFE58249}|] ProtocolError |
     [|ErrorTypeGUID == {32C39011-6E39-46C4-AB78-DB41929D679E}|] Win32Error    |
     [|ErrorTypeGUID == {8454C8F2-E401-405A-A198-A10B6991B56E}|] HRESULTError) ErrorData;
    optional [|ContainsStreamObjectHeader(stream, 0x04E)|] StreamObjectStart32BitHeader ErrorStringSupplementalInfoStart
         with Encoding{Decoder = StreamObjectStart32BitHeaderDecoder};
    optional [|ErrorStringSupplementalInfoStart != nothing|] StringItem ErrorStringSupplementalInfo;
    optional [|ContainsStreamObjectStart32BitHeader(stream,  0x04D)|] ResponseError ChainedError;
    StreamObjectEnd16BitHeader ErrorEnd where ValidationCheckHeader(value, 0x04D);
}

// Section 2.2.3.2.1   Cell Error
type CellError
{
    StreamObjectStart32BitHeader ErrorCell where ValidationCheckHeader(value, 0x066);
    CellErrorEnum ErrorCode;
}

pattern CellErrorEnum = enum uint
{
    $"Unknown error"                                              = 1,
    $"Invalid object"                                             = 2,
    $"Invalid partition"                                          = 3,
    $"Request not supported"                                      = 4,
    $"Storage read only"                                          = 5,
    $"Revision ID not found"                                      = 6,
    $"Bad token"                                                  = 7,
    $"Request not finished"                                       = 8,
    $"Incompatible token"                                         = 9,
    $"Scoped cell storage"                                        = 11,
    $"Coherency failure"                                          = 12,
    $"Cell storage state de-serialization failure"                = 13,
    $"Incompatible protocol version"                              = 15,
    $"Referenced data element not found"                          = 16,
    $"Request stream schema error"                                = 18,
    $"Response stream schema error"                               = 19,
    $"Unknown request"                                            = 20,
    $"Storage failure"                                            = 21,
    $"Storage write only"                                         = 22,
    $"Invalid serialization"                                      = 23,
    $"Data element not found"                                     = 24,
    $"Invalid implementation"                                     = 25,
    $"Incompatible old storage"                                   = 26,
    $"Incompatible new storage"                                   = 27,
    $"Incorrect context for data element ID"                      = 28,
    $"Object group duplicate objects"                             = 29,
    $"Object reference not found in revision"                     = 31,
    $"Merge cell storage state conflict"                          = 32,
    $"Unknown Query Changes filter"                               = 33,
    $"Unsupported Query Changes filter"                           = 34,
    $"Unable to provide knowledge"                                = 35,
    $"Data element missing ID"                                    = 36,
    $"Data element missing serial number"                         = 37,
    $"Request argument invalid"                                   = 38,
    $"Partial changes not supported"                              = 39,
    $"Store busy, retry later"                                    = 40,
    $"GUID identifier table not supported"                        = 41,
    $"Data element cycle"                                         = 42,
    $"Fragment knowledge error"                                   = 43,
    $"Fragment size mismatch"                                     = 44,
    $"Fragments incomplete"                                       = 45,
    $"Fragment invalid"                                           = 46,
    $"Aborted after failed Put Changes"                           = 47,
    $"Upgrade failed because there are no upgradeable contents"   = 79,
    $"Unable to allocate additional extended GUIDs"               = 106,
    $"Site is in read-only mode"                                  = 108,
    $"Multi-Request partition reached quota"                      = 111,
    $"Extended GUID collision"                                    = 112,
    $"Upgrade failed because of insufficient permissions"         = 113,
    $"Upgrade failed because of server throttling"                = 114,
    $"Upgrade failed because the upgraded file is too large"      = 115,
    ...
};

// Section 2.2.3.2.2   Protocol Error
type ProtocolError
{
    StreamObjectStart32BitHeader ErrorProtocol where ValidationCheckHeader(value, 0x04B);
    uint ErrorCode with DisplayInfo{ToText = ErrorCodeToText};
    
    string ErrorCodeToText(any data)
    {
        uint code = data as uint;
        
        switch (code)
        {
            case 1   => return "Unknown error";
            case 50  => return "Request format error, incomplete request";
            case 61  => return "Unknown internal error";
            case 108 => return "Request format error, invalid request";
            case 142 => return "Request format error, stream object invalid";
            case 143 => return "Request format error, stream object unexpected";
            case 144 => return "Request format error, stream object compound nesting error";
            case 145 => return "Request format error, invalid request";
            default  => return "Unspecified server error";
        }
    }
}

// Section 2.2.3.2.3   Win32 Error
type Win32Error
{
    StreamObjectStart32BitHeader ErrorWin32 where ValidationCheckHeader(value, 0x049);
    uint ErrorCode with DisplayInfo{ToText = (any x) => ERREF.Win32ErrorCodesToText(x as uint)};
}

// Section 2.2.3.2.4   HRESULT Error
type HRESULTError
{
    StreamObjectStart32BitHeader ErrorHRESULT where ValidationCheckHeader(value, 0x052);
    uint ErrorCode with DisplayInfo{ToText = (any x) => ERREF.HResultValuesToText(x as uint)};
}
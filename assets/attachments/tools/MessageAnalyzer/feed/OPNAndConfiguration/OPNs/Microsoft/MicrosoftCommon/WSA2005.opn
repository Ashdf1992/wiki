module WSA2005 with 
XmlEncodingDefaults{Namespace = WSAddressing2005Namespace},
Documentation
{
    ProtocolName = "Web Service Addressing 2005",
    ShortName = "WSA2005",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSA2005", Link = "http://www.w3.org/TR/ws-addr-core/"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using XSD;

const string WSAddressing2005Namespace = "http://www.w3.org/2005/08/addressing";

pattern EndpointReference = EndpointReferenceType
    with XmlEncoding{Name = "EndpointReference"};

type EndpointReferenceType
{
    XSAnyURI Address with XmlEncoding{Name = "Address"};
    optional ReferenceParameters ReferenceParameters;
    optional Metadata Metadata;
    optional array<xml> AnyElements with XmlEncoding{Kind = XmlKind.Element, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttributes with XmlEncoding{Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

pattern ReferenceParameters = xml
    with XmlEncoding{Name = "ReferenceParameters"};

pattern Metadata = xml
    with XmlEncoding{Name = "Metadata"};

pattern MessageID = AttributedURIType
    with XmlEncoding{Name = "MessageID", Namespace = WSAddressing2005Namespace};

pattern RelatesTo = RelatesToType
    with XmlEncoding{Name = "RelatesTo", Namespace = WSAddressing2005Namespace};

type RelatesToType
{
    XSAnyURI Base with XmlEncoding{Kind =  XmlKind.Text};
    optional RelationshipTypeOpenEnum RelationshipType = RelationshipTypeEnum.EnumValue0
        with XmlEncoding{Name = "RelationshipType", Kind = XmlKind.Attribute};
}

pattern RelationshipTypeOpenEnum = RelationshipTypeEnum | XSAnyURI;

pattern RelationshipTypeEnum = enum XSAnyURI
{
    EnumValue0 = "http://www.w3.org/2005/08/addressing/reply",
};

pattern ReplyTo = EndpointReferenceType | AttributedURIType
    with XmlEncoding{Name = "ReplyTo", Namespace = WSAddressing2005Namespace};
    
pattern ReplyTo1 = EndpointReferenceType
    with XmlEncoding{Name = "ReplyTo", Namespace = WSAddressing2005Namespace};
pattern ReplyTo2 = AttributedURIType
    with XmlEncoding{Name = "ReplyTo", Namespace = WSAddressing2005Namespace};        

pattern From = EndpointReferenceType
    with XmlEncoding{Name = "From", Namespace = WSAddressing2005Namespace};

pattern FaultTo = EndpointReferenceType
    with XmlEncoding{Name = "FaultTo", Namespace = WSAddressing2005Namespace};

pattern To = AttributedURIType
    with XmlEncoding{Name = "To", Namespace = WSAddressing2005Namespace};

pattern Action = AttributedURIType
    with XmlEncoding{Name = "Action", Namespace = WSAddressing2005Namespace};

//pattern AttributedURIType = XSAnyURI;
type AttributedURIType
{
    XSAnyURI URI with XmlEncoding{Kind = XmlKind.Text};
}

//
// Constructs from the WS-Addressing SOAP binding
//
pattern IsReferenceParameter = bool
    with XmlEncoding{Name = "IsReferenceParameter", Kind = XmlKind.Attribute};

pattern FaultCodesOpenEnumType = FaultCodesType | XSQName;

pattern FaultCodesType = enum XSQName
{
    InvalidAddressingHeader = "InvalidAddressingHeader",
    InvalidAddress = "InvalidAddress",
    InvalidEPR = "InvalidEPR",
    InvalidCardinality = "InvalidCardinality",
    MissingAddressInEPR = "MissingAddressInEPR",
    DuplicateMessageID = "DuplicateMessageID",
    ActionMismatch = "ActionMismatch",
    MessageAddressingHeaderRequired = "MessageAddressingHeaderRequired",
    DestinationUnreachable = "DestinationUnreachable",
    ActionNotSupported = "ActionNotSupported",
    EndpointUnavailable = "EndpointUnavailable",
};

pattern RetryAfter = AttributedUnsignedLongType
    with XmlEncoding{Name = "RetryAfter"};

type AttributedUnsignedLongType
{
    uint Base with XmlEncoding{Kind =  XmlKind.Text};
    any AnyAttribute with XmlEncoding{Kind = XmlKind.Attribute};
}
    
pattern ProblemHeaderQName = AttributedQNameType
    with XmlEncoding{Name = "ProblemHeaderQName"};

type AttributedQNameType
{
    XSQName Base with XmlEncoding{Kind =  XmlKind.Text};
    any AnyAttribute with XmlEncoding{Kind = XmlKind.Attribute};
}
    
pattern ProblemIRI = AttributedURIType
    with XmlEncoding{Name = "ProblemIRI"};
        
pattern ProblemAction = ProblemActionType
    with XmlEncoding{Name = "ProblemAction"};
    
type ProblemActionType
{
    optional Action Action;
    optional XSAnyURI SoapAction with XmlEncoding{Name = "SoapAction"};
    any AnyAttribute with XmlEncoding{Kind = XmlKind.Attribute};
}

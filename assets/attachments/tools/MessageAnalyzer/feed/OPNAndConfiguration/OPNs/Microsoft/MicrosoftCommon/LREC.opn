protocol LREC
with Documentation
{
    ProtocolName = "Live Remote Event Capture (LREC) Protocol",
    ProtocolType = "rpc",
    ShortName = "LREC",
    DocumentName = "MS-LREC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference {Name = "LREC", Version = "1.0", Date = "02/13/2014", ProgramName = ProgramName.WSPP}
        ],
    RevisionSummary = 
        [
            new Revision {Class = RevisionClass.Major, Version = "", Date = "03/26/2014"}
        ]
};

using Technologies.IDL;
using DTYP;
using Utility;
using ERREF;
using MSRPCE;

endpoint NetEventForwarderService over MSRPCE.Server provides NetEventForwarder;

contract NetEventForwarder
{
    accepts operation RpcNetEventOpenSession
    {
        in optional handle_t BindingHandle;
        in string LoggerName
               with Technologies.IDL.IDL
                        {BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        out PSESSION_HANDLE SessionHandle
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "RpcNetEventOpenSession, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) + 
                ", LoggerName: " + LoggerName.ToString() + 
                ", SessionHandle: " + SessionHandle.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 0};
    
    accepts operation RpcNetEventReceiveData
    {
        in PSESSION_HANDLE SessionHandle;
        out EVENT_BUFFER EventBuffer
                with Technologies.IDL.IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "RpcNetEventReceiveData, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) + 
                ", SessionHandle: " + SessionHandle.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 1};
    
    accepts operation RpcNetEventCloseSession
    {
        in out PSESSION_HANDLE SessionHandle
                   with Technologies.IDL.IDL{IndirectionLevel = 1};
        
        override string ToString()
        {
            return "RpcNetEventCloseSession, SessionHandle: " + SessionHandle.ToString();
        }
    }
    with Technologies.IDL.IDL{Opnum = 2};
}
with Technologies.IDL.IDL
         {Uuid = {22e5386d-8b12-4bf0-b0ec-6a1ea419e366}, Version = "1.0"};

typedef PSESSION_HANDLE = ContextHandle;

type EVENT_BUFFER
{
    IDLUlong BufferLength;
    array<Event> Buffer with Technologies.IDL.IDL{Size_is = [BufferLength], IndirectionLevel = 1},
                                     Encoding{Decoder = BinaryDecoder<array<Event>>, SourcePattern = TypeOf<array<BYTE>>()};
}

type Event
{
    NET_EVENT_DATA_HEADER Header;// Header's size is 8 bytes
    ([|Header.DataType == NET_EVENT_DATA_HEADER_DataType.NetEventDataEventRecord|] EventRecord[Header.DataSize - 8] | 
     [|Header.DataType == NET_EVENT_DATA_HEADER_DataType.NetEventDataLost|] NET_EVENT_LOST) EventPayload;
} with Encoding{EncodingKind = EncodingKind.Binary},
    IDL{DoNotGenerate = true};

// 2.3.2.1   EventRecord Structure
type EventRecord[uint EventRecordLength]
{
    EVENT_HEADER Header;
    BYTE ProcessorId;
    BYTE Reserved where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "LREC", "Reserved", "EventRecord", value);
    USHORT SessionId;
    USHORT ExtendedDataCount where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "LREC", "ExtendedDataCount", "EventRecord", value);
    USHORT UserDataLength;
    USHORT ExtendedDataOffset where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "LREC", "ExtendedDataOffset", "EventRecord", value);
    USHORT UserDataOffset where ValidationCheckValue(0x0060 == value, null, true, ReferenceType.Type, "LREC", "UserDataOffset", "EventRecord", 0x0060, value);
    binary UserData with BinaryEncoding{Length = EventRecordLength - 92};
} with Encoding{EncodingKind = EncodingKind.Binary},
    IDL{DoNotGenerate = true};

// 2.3.2.2   NET_EVENT_DATA_HEADER Structure
type NET_EVENT_DATA_HEADER
{
    UINT DataSize where ValidationCheckValueInRange(value >= 6 && value <= 65535, null, true, ReferenceType.Type, "LREC", "DataSize", "NET_EVENT_DATA_HEADER", 6, 65535, value);
    NET_EVENT_DATA_HEADER_DataType DataType where ValidationCheckEnumValue(InRange<NET_EVENT_DATA_HEADER_DataType>(value), null, true, ReferenceType.Type, "LREC", "DataType", "NET_EVENT_DATA_HEADER", "0x0001, 0x0002", value);
    BYTE Reserved1 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "LREC", "Reserved1", "NET_EVENT_DATA_HEADER", value)
        with BinaryEncoding{Width = 7};
    BYTE A with BinaryEncoding{Width = 1};
    BYTE Reserved2 where ValidationCheckReservedZero(0 == value, null, true, ReferenceType.Type, "LREC", "Reserved2", "NET_EVENT_DATA_HEADER", value);
} with Encoding{EncodingKind = EncodingKind.Binary},
    IDL{DoNotGenerate = true};

pattern NET_EVENT_DATA_HEADER_DataType = enum USHORT
                                         {
                                             NetEventDataEventRecord  = 0x0001,
                                             NetEventDataLost         = 0x0002,
                                             ...
                                         } with Encoding{EncodingKind = EncodingKind.Binary},
                                             IDL{DoNotGenerate = true};

// 2.3.2.3   NET_EVENT_LOST Structure
type NET_EVENT_LOST
{
    UINT LostEventCount;
} with Encoding{EncodingKind = EncodingKind.Binary},
    IDL{DoNotGenerate = true};

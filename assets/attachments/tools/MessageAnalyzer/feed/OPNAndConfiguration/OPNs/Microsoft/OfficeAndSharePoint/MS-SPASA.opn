protocol MSSPASA with
Documentation
{
    ProtocolName = "SharePoint Analytics Service Application Protocol",
    ShortName = "MS-SPASA",
    DocumentName = "MS-SPASA",
    ProtocolType = "SOAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = 
        [
            new Reference {Name = "MS-SPASA", Version = "1.0"},
        ],
    RevisionSummary =    
        [
            new Revision {Class=RevisionClass.Major, Version="1.0.0", Date="06/01/2013"},
        ]
};

using DSAD;
using SOAP;

const string ModuleName = "MSSPASA";

const map<string, string> WsaActionsMap =
{
    "http://tempuri.org/IAnalyticsServiceApplication/SendAnalyticsUsageEvents" -> "SendAnalyticsUsageEvents",
    "http://tempuri.org/IAnalyticsServiceApplication/SendAnalyticsUsageEventsResponse" -> "SendAnalyticsUsageEvents",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemData" -> "GetAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemDataResponse" -> "GetAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemsData" -> "GetAnalyticsItemsData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemsDataResponse" -> "GetAnalyticsItemsData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetGlobalAnalyticsItemDataBatch" -> "GetGlobalAnalyticsItemDataBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetGlobalAnalyticsItemDataBatchResponse" -> "GetGlobalAnalyticsItemDataBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRollupAnalyticsItemData" -> "GetRollupAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRollupAnalyticsItemDataResponse" -> "GetRollupAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetTenantAnalyticsItemData" -> "GetTenantAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetTenantAnalyticsItemDataResponse" -> "GetTenantAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetSearchReport" -> "GetSearchReport",
    "http://tempuri.org/IAnalyticsServiceApplication/GetSearchReportResponse" -> "GetSearchReport",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnayticsTenantSettings" -> "GetRawAnayticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnayticsTenantSettingsResponse" -> "GetRawAnayticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/UpsertRawAnalyticsTenantSettings" -> "UpsertRawAnalyticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/UpsertRawAnalyticsTenantSettingsResponse" -> "UpsertRawAnalyticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnalyticsTenantSettingsBatch" -> "GetRawAnalyticsTenantSettingsBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnalyticsTenantSettingsBatchResponse" -> "GetRawAnalyticsTenantSettingsBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsTenantConfiguration" -> "GetAnalyticsTenantConfiguration",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsTenantConfigurationResponse" -> "GetAnalyticsTenantConfiguration",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinition" -> "GetAnalyticsEventTypeDefinition",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinitionResponse" -> "GetAnalyticsEventTypeDefinition",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinitions" -> "GetAnalyticsEventTypeDefinitions",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinitionsResponse" -> "GetAnalyticsEventTypeDefinitions",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteAllUsageDataForTenant" -> "DeleteAllUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteAllUsageDataForTenantResponse" -> "DeleteAllUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteRecommendationsDataForTenant" -> "DeleteRecommendationsDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteRecommendationsDataForTenantResponse" -> "DeleteRecommendationsDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForTenant" -> "DeleteStandardEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForTenantResponse" -> "DeleteStandardEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForTenant" -> "DeleteCustomEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForTenantResponse" -> "DeleteCustomEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForSite" -> "DeleteStandardEventUsageDataForSite",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForSiteResponse" -> "DeleteStandardEventUsageDataForSite",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForSite" -> "DeleteCustomEventUsageDataForSite",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForSiteResponse" -> "DeleteCustomEventUsageDataForSite"
};

const map<string, string> SoapActionsMap = {
    "http://tempuri.org/IAnalyticsServiceApplication/SendAnalyticsUsageEvents" -> "SendAnalyticsUsageEvents",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemData" -> "GetAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsItemsData" -> "GetAnalyticsItemsData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetGlobalAnalyticsItemDataBatch" -> "GetGlobalAnalyticsItemDataBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRollupAnalyticsItemData" -> "GetRollupAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetTenantAnalyticsItemData" -> "GetTenantAnalyticsItemData",
    "http://tempuri.org/IAnalyticsServiceApplication/GetSearchReport" -> "GetSearchReport",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnayticsTenantSettings" -> "GetRawAnayticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/UpsertRawAnalyticsTenantSettings" -> "UpsertRawAnalyticsTenantSettings",
    "http://tempuri.org/IAnalyticsServiceApplication/GetRawAnalyticsTenantSettingsBatch" -> "GetRawAnalyticsTenantSettingsBatch",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsTenantConfiguration" -> "GetAnalyticsTenantConfiguration",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinition" -> "GetAnalyticsEventTypeDefinition",
    "http://tempuri.org/IAnalyticsServiceApplication/GetAnalyticsEventTypeDefinitions" -> "GetAnalyticsEventTypeDefinitions",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteAllUsageDataForTenant" -> "DeleteAllUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteRecommendationsDataForTenant" -> "DeleteRecommendationsDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForTenant" -> "DeleteStandardEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForTenant" -> "DeleteCustomEventUsageDataForTenant",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteStandardEventUsageDataForSite" -> "DeleteStandardEventUsageDataForSite",
    "http://tempuri.org/IAnalyticsServiceApplication/DeleteCustomEventUsageDataForSite" -> "DeleteCustomEventUsageDataForSite"
};

endpoint Server over SOAP.Server accepts RequestMessage issues ResponseMessage;
client endpoint Client connected to Server;

autostart actor ActorOverSOAP(SOAP.Server soapServer) follows DSAD.ActorOverSOAP
{
    process soapServer accepts soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            RequestMessage msg = new RequestMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) accepts msg;
        }
    }
    
    process soapServer issues soapMsg:SOAP.SoapMessage where (soapMsg.WsaAction in WsaActionsMap || soapMsg.SoapAction in SoapActionsMap)
    {
        if (soapMsg#EndpointName != nothing && (soapMsg#EndpointName as string != ModuleName))
            reject;
        else
        {
            ResponseMessage msg = new ResponseMessage();
            msg.Initialize(soapMsg);
            dispatch (endpoint Server over soapServer) issues msg;
        }
    }
}

message MessageBase
{
    optional string WsaAction;
    optional string SoapAction;
    xml Body;
    bool ContainsFault;
    
    void Initialize(SOAP.SoapMessage soapMsg)
    {
        if (soapMsg.WsaAction != "")
            this.WsaAction = soapMsg.WsaAction;
            
        if (soapMsg.SoapAction != "")
            this.SoapAction = soapMsg.SoapAction;
            
        this.ContainsFault = soapMsg.ContainsFault;

        if (soapMsg.Body.ChildCount > 0)
        {
            this.Body = soapMsg.Body.Children[0];
        }
        else
        {
            this.Body = null;
        }
    }

    string GetOperationName()
    {
        if (this.WsaAction is wsaAcction:string)
            return WsaActionsMap[wsaAcction];
            
        if (this.SoapAction is soapAcction:string)
            return SoapActionsMap[soapAcction];
            
        return "Unknown";
    }
}

message RequestMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Request";
        }
        
        return this.GetOperationName() + " Request";
    }
}

message ResponseMessage : MessageBase
{
    override string ToString()
    {
        if (this.ContainsFault)
        {
            return this.GetOperationName() + " Fault Response";
        }
        
        return this.GetOperationName() + " Response";
    }
}
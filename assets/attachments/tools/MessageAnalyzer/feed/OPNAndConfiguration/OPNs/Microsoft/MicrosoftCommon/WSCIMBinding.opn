protocol WSCIMBinding with 
XmlEncodingDefaults{Namespace = WSCIMBindingNamespace},
Documentation
{
    ProtocolName = "Web Services for Management(WS-Management) CIM Binding Specification",
    ShortName = "WSCIMBinding",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSCIMBinding", Version = "1.2.0", Link = "http://www.dmtf.org/sites/default/files/standards/documents/DSP0227_1.2.0.pdf"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="1.0.0", Date="09/28/2011"}
        ]
};

using Utility;
using XSD;
using WSA2004;
using Standard;
using WSManagement;
using WSEnumeration;
using Utility;

// Constant declaration: namespace for WSCIMBinding
const string WSCIMBindingNamespace = "http://schemas.dmtf.org/wbem/wsman/1/cimbinding.xsd";

autostart actor WSCIMBindingExtendingWSMan(WSEnumeration.IntermediateServer server) follows WSManagement.WSManExtendingWSEnumeration
{
    observe server accepts m:MessageContract.Enumerate 
    {
        bool needUpdateSummaryline = false;
        bool hasWsmbExtension = false;
        array<xml> leftElements = [];
        if (m.Enumerate is enumerate:EnumerateTypeEx && enumerate.Filter is filter:WSManagement.Filter && 
                filter.AnyElements is arr:array<xml> && arr.Count > 0)
        {
            FilterEx filterEx = new FilterEx{};
            for (int i = 0; i < arr.Count; i++)
            {
                xml x = arr[i];
                // due to bug#72685, below code doesn't work now.
                //if (x.Name is xmlName:XmlName && x.NamespaceUri == WSCIMBindingNamespace)
                XmlName xmlName = x.Name as XmlName; 
                if (x.NamespaceUri == WSCIMBindingNamespace)
                {
                    switch (xmlName.LocalName)
                    {
                        case "AssociatedInstances" =>
                            filterEx.AssociatedInstances = DecodeElementAndValidationCheck<AssociatedInstances>(m, x, "WSCIMBinding", "AssociatedInstances", ref hasWsmbExtension, ref leftElements);
                        case "AssociationInstances" =>
                            filterEx.AssociationInstances = DecodeElementAndValidationCheck<AssociationInstances>(m, x, "WSCIMBinding", "AssociationInstances", ref hasWsmbExtension, ref leftElements);
                        default =>;
                            leftElements += [x];
                    }
                }
                else
                {
                    leftElements += [x];
                }
            }
            if (hasWsmbExtension)
            {
                filterEx.Dialect = filter.Dialect;
                filterEx.AnyElements = leftElements.Count == 0 ? nothing : leftElements;
                filterEx.AnyAttributes = filter.AnyAttributes;
                // asign back
                enumerate.Filter = filterEx;
                needUpdateSummaryline = true;
            }
        }
        // Extends PolymorphismMode
        if (m.Enumerate.AnyElements is arr2:array<xml> && arr2.Count > 0)
        {
            EnumerateTypeCimBindingEx enumEx = new EnumerateTypeCimBindingEx{};
            leftElements = [];
            hasWsmbExtension = false;
            
            for (int i = 0; i < arr2.Count; i++)
            {
                xml x = arr2[i];
                // due to bug#72685, below code doesn't work now.
                //if (x.Name is xmlName:XmlName && x.NamespaceUri == WSCIMBindingNamespace)
                XmlName xmlName2 = x.Name as XmlName;
                if (x.NamespaceUri == WSCIMBindingNamespace && xmlName2.LocalName == "PolymorphismMode")
                {
                    if (XmlDecoder<PolymorphismMode>(x) is mode:PolymorphismMode)
                    {
                        enumEx.PolymorphismMode = mode;
                        hasWsmbExtension = true;
                        // There at most one "PolymorphismMode" element.
                        break;
                    }
                    else
                    {
                        ValidationCheckDecodingFailure(m, "WSCIMBinding", "PolymorphismMode");
                    }
                }
                else
                {
                    leftElements += [x];
                }
            }
            if (hasWsmbExtension)
            {
                enumEx.EndTo = m.Enumerate.EndTo;
                enumEx.Expires = m.Enumerate.Expires;
                enumEx.Filter = m.Enumerate.Filter;
                enumEx.AnyElements = leftElements.Count == 0 ? nothing : leftElements;
                enumEx.AnyAttributes = m.Enumerate.AnyAttributes;
                // Assign back extended type.
                m.Enumerate = enumEx;
                needUpdateSummaryline = true;
            }
        }
        if (needUpdateSummaryline)
        {
            if (m#SummaryPrefix is pre:string && pre.Count > 0)
            {
                m#SummaryPrefix = pre + ", WSCIMBinding";
            }
            else
            {
                m#SummaryPrefix = "WSCIMBinding";
            }
        }
    }
}

type EnumerateTypeCimBindingEx : WSManagement.EnumerateTypeEx
{
    optional PolymorphismMode PolymorphismMode;
}

type FilterEx : WSManagement.Filter
{
    optional AssociatedInstances AssociatedInstances;
    optional AssociationInstances AssociationInstances;
}

// 8.2.1 Associated Instances
// wsen:Enumerate/wsman:Filter/wsmb:AssociatedInstances
pattern AssociatedInstances = AssociatedInstancesType with XmlEncoding{Name = "AssociatedInstances"};

type AssociatedInstancesType
{
    xml Object with XmlEncoding{IsAny = true, Name = "Object", Namespace = XmlNamespaceIndicator.Any};
    optional XSNCName AssociationClassName with XmlEncoding{Name = "AssociationClassName", Kind = XmlKind.Element};
    optional XSNCName Role with XmlEncoding{Name = "Role", Kind = XmlKind.Element};
    optional XSNCName ResultClassName with XmlEncoding{Name = "ResultClassName", Kind = XmlKind.Element};
    optional XSNCName ResultRole with XmlEncoding{Name = "ResultRole", Kind = XmlKind.Element};
    optional array<XSNCName> IncludeResultProperty with XmlEncoding{Name = "ResultRole", Kind = XmlKind.Element};
}

// 8.2.2 Association Instances
// wsen:Enumerate/wsman:Filter/wsmb:AssociationInstances
pattern AssociationInstances = AssociationInstancesType with XmlEncoding{Name = "AssociationInstances"};

type AssociationInstancesType
{
    xml Object with XmlEncoding{IsAny = true, Name = "Object", Namespace = XmlNamespaceIndicator.Any};
    optional XSNCName ResultClassName with XmlEncoding{Name = "ResultClassName", Kind = XmlKind.Element};
    optional XSNCName Role with XmlEncoding{Name = "Role", Kind = XmlKind.Element};
    optional array<XSNCName> IncludeResultProperty with XmlEncoding{Name = "ResultRole", Kind = XmlKind.Element};
}

// 9.3 Polymorphism
// wsen:Enumerate/wsmb:PolymorphismMode
pattern PolymorphismMode = PolymorphismModeType with XmlEncoding{Name = "PolymorphismMode"};

type PolymorphismModeType
{
    enum Token
    {
        IncludeSubClassProperties = "IncludeSubClassProperties",
        ExcludeSubClassProperties = "ExcludeSubClassProperties",
        None                      = "None",
        ...
    } Mode with XmlEncoding{Kind = XmlKind.Text};
}


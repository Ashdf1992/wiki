protocol NBTNS with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation 
{ 
    ProtocolName = "NetBIOS Name Service Protocol", 
    ShortName = "NBTNS", 
    Description = "" 
}, 
OPNAuthoring 
{ 
    Copyright = "(c) Microsoft Corporation", 
    References = 
        [
            new Reference{Name = "RFC 1002"},
            new Reference{Name = "RFC 883"},
            new Reference{Name = "MS-NBTE", Version = "14.0", Date = "02/13/2014", ProgramName = ProgramName.WSPP},
        ], 
    RevisionSummary = 
        [ 
            new Revision{Class = RevisionClass.Major, Version = "370484", Date = "11/06/2014"}
        ] 
};

using Standard;
using UDP;
using Utility;
using TCP;
using InfrastructureResources;
using IANA;

// In [MS-NBTE] 2.1, "The transport is unchanged from [RFC1002] except that name resolution is supported only over UDP and not TCP." 
endpoint Server over UDP.Host| over NBTNS.SocketServer accepts NameService issues NameService
{
    observe this accepts m:NameService
    {
        QuestionSection question = null;
        ResourceRecord additionalResourceRecord = null;
        ResourceRecord authorityResourceRecord = null;
        ResourceRecord answerResourceRecord = null;
        if(m.Questions.Count > 0)
        {
            question = m.Questions[0];
        }
        if(m.AdditionalResourceRecord.Count > 0)
        {
            additionalResourceRecord = m.AdditionalResourceRecord[0];
        }
        if(m.AuthorityResourceRecord.Count > 0)
        {
            authorityResourceRecord = m.AuthorityResourceRecord[0];
        }
        if(m.AnswerResourceRecord.Count > 0)
        {
            answerResourceRecord = m.AnswerResourceRecord[0];
        }
        
        // 4.2.2.  NAME REGISTRATION REQUEST
        // 4.2.3.  NAME OVERWRITE REQUEST & DEMAND
        // 4.2.4.  NAME REFRESH REQUEST
        if(!m.Header.Flags.R && (m.Header.Flags.Opcode == 5 || m.Header.Flags.Opcode == 9))
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", 1, m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0020", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", 6, additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.5.  POSITIVE NAME REGISTRATION RESPONSE
        // 4.2.6.  NEGATIVE NAME REGISTRATION RESPONSE
        // 4.2.7.  END-NODE CHALLENGE REGISTRATION RESPONSE
        // 4.2.8.  NAME CONFLICT DEMAND
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 5)
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is " + RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", 6, answerResourceRecord.RDLength);
            }
            if(m.Header.Flags.Rcode == 7)
            {
                if(answerResourceRecord != null)
                {
                    var data = answerResourceRecord.RData as NetBIOSGeneralNameServiceResourceRecord;
                    if (data != null && data.AddrEnty.Count > 0) 
                    {
                        ValidationCheckZero(data.AddrEnty[0].NBAddress.Octets == $[0000], m, true, ReferenceType.Type, "NBTNS", "AddrEnty[0].NBAddress", "NetBIOSGeneralNameServiceResourceRecord", data.AddrEnty[0].NBAddress.Octets);
                    }
                }
            }
        }
        
        // 4.2.9.  NAME RELEASE REQUEST & DEMAND
        if(!m.Header.Flags.R && m.Header.Flags.Opcode == 6)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", 1, m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0020", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", 6, additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.10.  POSITIVE NAME RELEASE RESPONSE
        // 4.2.11.  NEGATIVE NAME RELEASE RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 6)
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is " + RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", 6, answerResourceRecord.RDLength);
            }
        }
        
        // 4.2.12.  NAME QUERY REQUEST
        if(!m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
        }
        
        // 4.2.13.  POSITIVE NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode == 0 && m.Header.Flags.AA && m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
            }
        }
        
        // 4.2.14.  NEGATIVE NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode != 0 && m.Header.Flags.AA)
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is " + RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            var data = m.NegativeNameQueryResponse as ResourceRecord;
            ValidationCheckValue(data.Type == 10, m, true, ReferenceType.Type, "NBTNS", "Type", "ResourceRecord", "0x000A", data.Type);
            ValidationCheckValue(data.Class == 1, m, true, ReferenceType.Type, "NBTNS", "Class", "ResourceRecord", "0x0001", data.Class);
        }
        
        // 4.2.15.  REDIRECT NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode != 0 && !m.Header.Flags.AA)
        {
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckValue(m.Header.AuthorityResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", 1, m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", 1, m.Header.AuthorityResourceRecordCount);
            if(authorityResourceRecord != null)
            {
                ValidationCheckValue(authorityResourceRecord.Type == 2, m, true, ReferenceType.Message, "NBTNS", "AuthorityResourceRecord[0].Type", "NameService", "0x0002", authorityResourceRecord.Type);
                ValidationCheckValue(authorityResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AuthorityResourceRecord[0].Class", "NameService", "0x0001", authorityResourceRecord.Class);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0001", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 4, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", "0x0004", additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.16.  WAIT FOR ACKNOWLEDGEMENT (WACK) RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 7)
        {
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 2, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", "0x0002", answerResourceRecord.RDLength);
            }
        }
        
        // 4.2.17.  NODE STATUS REQUEST
        if(m.Header.Flags.R == false && m.Header.Flags.Opcode == 0 && !m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 33, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0021", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
        }
        
        // 4.2.18.  NODE STATUS RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode == 0 && m.Header.Flags.AA && !m.Header.Flags.RD)
        {         
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 33, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0021", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
            }
        }
    }
};

client endpoint Client connected to Server;

endpoint SocketServer over TCP.Server accepts MessageOverTCP issues MessageOverTCP
{
    process this accepts msg:NBTNS.MessageOverTCP
    {
        switch (msg.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                dispatch (endpoint NBTNS.Server over this) accepts m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
    process this issues msg:NBTNS.MessageOverTCP
    {
        switch (msg.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                dispatch (endpoint NBTNS.Server over this) issues m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
}

client endpoint SocketClient connected to SocketServer;

autostart actor NBTNSOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram{DestinationPort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                dispatch (endpoint NBTNS.Server over host) accepts m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
    
    process host accepts d:UDP.Datagram{SourcePort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                dispatch (endpoint NBTNS.Server over host) issues m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
}

autostart actor SocketOverTCP(TCP.Server server)
{
    TCPDecodingHelper decodingHelper = null;
    process server accepts s:TCP.Segment where s.DestinationPort == Port.NBTNS
    {
        if (decodingHelper == null)
        {
            decodingHelper = new TCPDecodingHelper();
            decodingHelper.Initialize(new TCPDecodingCache(), new TCPDecodingCache(),
                                    "NBTNS", endpoint SocketServer over server, 
                                    IsNBTNS, IsCompleteNBTNS, 
                                    (stream s) => BinaryDecoder<MessageOverTCP>(s) as optional any message, 
                                    (binary b) => BinaryDecoder<MessageOverTCP>(b) as optional any message);
        }
        decodingHelper.TryDecode(s, MessageDirection.Accepts);
    }
    
    process server issues s:TCP.Segment where s.SourcePort == Port.NBTNS
    {
        if (decodingHelper == null)
        {
            decodingHelper = new TCPDecodingHelper();
            decodingHelper.Initialize(new TCPDecodingCache(), new TCPDecodingCache(),
                                    "NBTNS", endpoint SocketServer over server, 
                                    IsNBTNS, IsCompleteNBTNS, 
                                    (stream s) => BinaryDecoder<MessageOverTCP>(s) as optional any message, 
                                    (binary b) => BinaryDecoder<MessageOverTCP>(b) as optional any message);
        }
        decodingHelper.TryDecode(s, MessageDirection.Issues);
    }
    ~endpoint(TCP.Server server)
    {
        if (decodingHelper != null)
        {
            decodingHelper.ClearInDestructor();
            decodingHelper = null;
        }
    }
}

bool? IsNBTNS(binary b)
{
    if (b.Count < 5)
    {
        return null;
    }
    if ((((b[4] & 0x7F) >> 3) as byte) is NBTNS.OperationCode)
    {
        return true;
    }
    else
    {
        return false;
    }
}

uint? IsCompleteNBTNS(binary b)
{
    if (b.Count < 2)
    {
        return null; // never hit because IsNBTNS has checked whether b.Count >= 5 
    }
    var len = ((b[0] as ushort) << 8) + b[1] + 2;
    return len <= b.Count ? 0 : len as uint;
}

// RFC 1002 4.2.1: If Name Service packets are sent over a TCP connection they are preceded by 
// a 16 bit unsigned integer representing the length of the Name Service packet.
message MessageOverTCP
{
    ushort TCPLength;
    binary Payload with BinaryEncoding{MaxLength = TCPLength};
    
    override string ToString()
    {
        return "Message Over TCP, " + "Length: " + (TCPLength as string);
    }
}

message NameService
{
    Header Header;
    array<QuestionSection> Questions with BinaryEncoding{Length = Header.QuestionCount};
    array<ResourceRecord> AnswerResourceRecord with BinaryEncoding{Length = Header.AnswerResourceRecordCount};
    array<ResourceRecord> AuthorityResourceRecord with BinaryEncoding{Length = Header.AuthorityResourceRecordCount};
    array<ResourceRecord> AdditionalResourceRecord with BinaryEncoding{Length = Header.AdditionalResourceRecordCount};
    // Future Reference: check 4.2.14  NEGATIVE NAME QUERY RESPONSE
    optional [|Header.Flags.R == true && Header.QuestionCount == 0 && Header.AnswerResourceRecordCount == 0 && Header.AuthorityResourceRecordCount == 0 && Header.AdditionalResourceRecordCount == 0|] ResourceRecord NegativeNameQueryResponse;
    
    override string ToString()
    {
        string summary = "";
        if (Header.Flags.R == true)
        {
            summary = OperationCodeToSting(Header.Flags.Opcode) + " Response, Rcode: " + RcodeToString(Header.Flags.Rcode);
            foreach (ResourceRecord arr in AnswerResourceRecord)
            {
                if (arr.RRName is nbtStr:NbtString)
                {
                    summary += ", RRName: " + nbtStr.Chars;
                }
                if (arr.Type == ResourceRecordType.NB && arr.RDLength >= 6)
                {
                    summary += ", NBAddress: [" + arr.GetNBAddrString() + "]";
                }
            }
        }
        else if (Header.Flags.R == false)
        {
            if (Header.QuestionCount != 0)
            {
                summary += OperationCodeToSting(Header.Flags.Opcode) + " Request, QuestionName: ";
                foreach (QuestionSection qs in Questions)
                {
                    summary += qs.QuestionName.Chars;
                }
            }
            foreach (ResourceRecord rr in AdditionalResourceRecord)
            {
                if (rr.Type == ResourceRecordType.NB && rr.RDLength >= 6)
                {
                    summary += ", NBAddress: [" + rr.GetNBAddrString() + "]";
                }
            }
        }
        return summary;
    }
}

type Header
{
    ushort NameTransactionID;
    Flags Flags;
    ushort QuestionCount;
    ushort AnswerResourceRecordCount;
    ushort AuthorityResourceRecordCount;
    ushort AdditionalResourceRecordCount;
}

type Flags
{
    bool R with BinaryEncoding{Width = 1};
    OperationCode Opcode where ValidationCheckEnumValue(InRange<OperationCode>(value), null, false, ReferenceType.Type, "NBTNS", "Opcode", "Flags", INFRASTRUCTURE_STR_ZERO + ", 5, 6, 7, 8", value) with BinaryEncoding{Width = 4};
    bool AA with BinaryEncoding{Width = 1};
    bool TC with BinaryEncoding{Width = 1};
    bool RD with BinaryEncoding{Width = 1};
    bool RA with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 2};
    bool B with BinaryEncoding{Width = 1};
    RCode Rcode with BinaryEncoding{Width = 4};
}

pattern OperationCode = enum byte
{
    Query           = 0,
    Registration    = 5,
    Release         = 6,
    WACK            = 7,
    Refresh         = 8,
    ...
};

string OperationCodeToSting(byte opcode)
{
    switch (opcode)
    {
        case 0 => return "Query";
        case 5 => return "Registration";
        case 6 => return "Release";
        case 7 => return "WACK";
        case 8 => return  "Refresh";
        default => return "Unkown Operation Code";
    } 
}

pattern Ont = enum byte
{
    BNode = 0,
    PNode = 1,
    MNode = 2,
    Reserved = 3
};

pattern ResourceRecordType = enum ushort
{
    A      = 1,
    NS     = 2,
    NULL   = 10,
    NB     = 32,
    NBSTAT = 33
};

pattern ResourceRecordClass = enum ushort
{
    IN = 1
};

pattern RCode = enum byte
{
    Success = 0,
    FmtErr  = 1,
    SrvErr  = 2,
    NamErr  = 3,
    ImpErr  = 4,
    RfsErr  = 5,
    ActErr  = 6,
    CftErr  = 7
};

string RcodeToString(RCode rcode)
{
    switch (rcode)
    {
        case RCode.Success => return "Success";
        case RCode.FmtErr => return "Format Error";
        case RCode.SrvErr => return "Server failure";
        case RCode.NamErr => return "Name Error";
        case RCode.ImpErr => return "Unsupported request error";
        case RCode.RfsErr => return "Refused error";
        case RCode.ActErr => return "Active error";
        case RCode.CftErr => return "Name in conflict error";
        default => return "Unknown type error";
    }
}

pattern QuestionType = enum ushort
{
    NB = 32,
    NBSTAT = 33
};

pattern  QuestionClass = ResourceRecordClass;

type QuestionSection
{
    NbtString QuestionName;
    QuestionType QuestionType;
    QuestionClass QuestionClass;
}

type ResourceRecord
{
    NetBiosNameString RRName;
    ResourceRecordType Type;
    ResourceRecordClass Class;
    uint TTL;
    ushort RDLength;
    ([|Type == ResourceRecordType.A|] IPAddressResourceRecord                                                       |
     [|Type == ResourceRecordType.NS|] NameServerResourceRecord                                                     |
     [|Type == ResourceRecordType.NULL|] Empty                                                                      |
     [|Type == ResourceRecordType.NB && RDLength >= 6|] NetBIOSGeneralNameServiceResourceRecord[RDLength as uint]   |
     [|Type == ResourceRecordType.NB && RDLength == 2|] Flags                                                       |
     [|Type == ResourceRecordType.NBSTAT|] NetBIOSNodeStatusResourceRecord) RData;
     
    string GetNBAddrString()
    {
        if (Type == ResourceRecordType.NB && RDLength >= 6)
        {
            return (RData as NetBIOSGeneralNameServiceResourceRecord).ToString();
        }
        else 
        {
            return "";
        }
    }
}

type NBFlags
{
    bool G with BinaryEncoding{Width = 1};
    Ont ONT with BinaryEncoding{Width = 2};
    ushort reserved where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "NBTNS", "reserved", "NBFlags", value) with BinaryEncoding{Width = 13};
}

type IPAddressResourceRecord
{
    IPv4Address NSDIPAddr;
}

type NameServerResourceRecord
{
    NetBiosNameString NSDName;
}

type NetBIOSGeneralNameServiceResourceRecord[uint Length]
{
    array<Addr> AddrEnty with BinaryEncoding{Length = Length / 6};
    override string ToString()
    {
        string ipAddrs = "";
        if (AddrEnty.Count > 0)
        {
            ipAddrs = AddrEnty[0].ToString();
        }
        if (AddrEnty.Count > 1)
        {
            ipAddrs += ", " + AddrEnty[1].ToString();
        }
        if (AddrEnty.Count > 2)
        {
            ipAddrs += " ...";
        }
        return ipAddrs;
    }
}

type Addr
{
    NBFlags Flags;
    IPv4Address NBAddress;
    
    override string ToString()
    {
        return NBAddress.ToString();
    }
}

type NetBIOSNodeStatusResourceRecord 
{
    byte NumName;
    array<NodeName> Name with BinaryEncoding{Length = NumName};
    Statistics Statistics;
}

type NodeName
{
    string name with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = 16};
    NameFlags NameFlags;
}

type NameFlags
{
    bool G with BinaryEncoding{Width = 1};
    byte ONT with BinaryEncoding{Width = 2};
    bool DRG with BinaryEncoding{Width = 1};
    bool CNF with BinaryEncoding{Width = 1};
    bool ACT with BinaryEncoding{Width = 1};
    bool PRM with BinaryEncoding{Width = 1};
    ushort RESERVED with BinaryEncoding{Width = 9};
}

type Statistics
{
    ulong UnitId with BinaryEncoding{Width = 48};
    byte Jumpers;
    byte TestResult;
    ushort VersionNumber;
    ushort PeriodOfStatistics;
    ushort NumberOfCrcs;
    ushort NumberAlignmentErrors;
    ushort NumberOfCollisions;
    ushort NumberSendAborts;
    uint ErGoodSends;
    uint NumberGoodReceives;
    ushort NumberRetransmits;
    ushort NumberNoResourceConditions;
    ushort NumberFreeCommandBlocks;
    ushort TotalNumberCommandBlocks;
    ushort MaxTotalNumberCommandBlocks;
    ushort NumberPendingSessions;
    ushort MaxNumberPendingSessions;
    ushort MaxTotalSessionsPossible;
    ushort SessionDataPacketSize;
}

pattern NetBiosNameString = NetBiosNameCompressed | NbtString;

type NetBiosNameCompressed
{
    (byte where value == 3) FirstByte with BinaryEncoding{Width = 2};
    ushort point with BinaryEncoding{Width = 14};
}

type NbtString
{
    string Chars with Encoding{Decoder = NbtStringDecoder, SourceConverter = NbtStringConverter, SourcePattern = TypeOf<ASCIIString>()};
    
    optional binary NbtStringConverter(ASCIIString ascStrType)
    {
        string ascStr = ascStrType.Value;
        if (ascStr[0] != 0x20)
        {
            return nothing;
        }
        array<byte> binBytes = [];
        // Each byte is divided into two nibbles (4 bits each, unsigned).
        // The ASCII value of the letter 'A' (65, or 0x41) is added to each nibble and the result is taken as a character.
        for (int i = 1; i < ascStr.Count - 1; i++)
        {        
            var data = ((ascStr[i] - 0x41) << 4);
            i++; // Furture Reference: Cannot apply ++ inscope of [ ]
            data += (ascStr[i] - 0x41);
        
            if (data != 0x20 || i == ascStr.Count - 1) // We should always save the last byte
            {
                binBytes += [data as byte];
            }
        }
        return binBytes as binary;
    }
    
    optional string NbtStringDecoder(binary bin)
    {
        if (bin != null && bin.Count > 0)
        {
            // in RFCs, there is no rule for name but in MS-NBTE 2.2.1 2.2.3 LMHOSTS File Syntax
            // ServiceName entries consist of an IPv4 address and a NetBIOS service name that specifies a 16-byte name where the last byte 
            // indicates the type of the service and bytes 1 to 15 specify ComputerName, padded at the end with blanks to the 15th byte:
            // 131.107.7.30 "ComputerName \0x03" where the last byte is specified in hex.
            // http://technet.microsoft.com/en-us/library/cc779578.aspx
            byte lastByte = bin[bin.Count - 1];
            var res = BinaryDecoder<ASCIIString>(bin);

            if (res is ascStr:ASCIIString)
            {
                string name = ascStr.Value;
                switch (lastByte)
                {
                    case 0x00 =>
                        name += "   <0x00> Workstation Service";
                    case 0x01 =>
                        name += "   <0x01> Messenger Service/Master Browser";
                    case 0x03 =>
                        name += "   <0x03> Messenger Service";
                    case 0x05 =>
                        name += "   <0x05> Forwarded name";
                    case 0x06 =>
                        name += "   <0x06> RAS Server Service";
                    case 0x1B =>
                        name += "   <0x1B> Domain Master Browser";
                    case 0x1C =>
                        name += "   <0x1C> Domain Controllers";
                    case 0x1D =>
                        name += "   <0x1D> Master Browser";
                    case 0x1E =>
                        name += "   <0x1E> Browser Service Elections";
                    case 0x1F =>
                        name += "   <0x1F> NetDDE Service";
                    case 0x20 =>
                        name += "   <0x20> File Server Service";
                    case 0x21 =>
                        name += "   <0x21> RAS Client Service";
                    case 0x22 =>
                        name += "   <0x22> Microsoft Exchange Interchange(MSMail Connector)";
                    case 0x23 =>
                        name += "   <0x23> Microsoft Exchange Store";
                    case 0x24 =>
                        name += "   <0x24> Microsoft Exchange Directory";
                    case 0x2B =>
                        name += "   <0x2B> Lotus Notes Server Service";
                    case 0x2F =>
                        name += "   <0x2F> Lotus Notes";
                    case 0x30 =>
                        name += "   <0x30> Modem Sharing Server Service";
                    case 0x31 =>
                        name += "   <0x31> Modem Sharing Client Service";
                    case 0x33 =>
                        name += "   <0x33> Lotus Notes";
                    case 0x42 =>
                        name += "   <0x42> Mccaffee Anti-virus";
                    case 0x43 =>
                        name += "   <0x43> SMS Clients Remote Control";
                    case 0x44 =>
                        name += "   <0x44> SMS Administrators Remote Control Tool";
                    case 0x45 =>
                        name += "   <0x45> SMS Clients Remote Chat";
                    case 0x46 =>
                        name += "   <0x46> SMS Clients Remote Transfer";
                    case 0x4C =>
                        name += "   <0x4C> DEC Pathworks TCPIP service on Windows NT";
                    case 0x52 =>
                        name += "   <0x52> DEC Pathworks TCPIP service on Windows NT";
                    case 0x6A =>
                        name += "   <0x6A> Microsoft Exchange IMC";
                    case 0x87 =>
                        name += "   <0x87> Microsoft Exchange MTA";
                    case 0xBE =>
                        name += "   <0xBE> Network Monitor Agent";
                    case 0xBF =>
                        name += "   <0xBF> Network Monitor Application";
                    default   =>;
                }
                return name;
            }
        }
        return nothing;
    }
}

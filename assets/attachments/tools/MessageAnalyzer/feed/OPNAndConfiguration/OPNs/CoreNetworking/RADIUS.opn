protocol RADIUS
    with BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Remote Authentication Dial In User Service",
    ShortName = "RADIUS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2865"},
            new Reference{Name = "RFC 2866"},
            new Reference{Name = "RFC 2867"},
            new Reference{Name = "RFC 2868"},
            new Reference{Name = "RFC 2869"},
            new Reference{Name = "RFC 2882"},
            new Reference{Name = "RFC 3162"},
            new Reference{Name = "RFC 2548"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "380791", Date = "08/13/2015"}
        ]
};

using Standard;
using Utility;
using IANA;
using UDP;

endpoint Node over UDP.Host accepts mutable Packet;

autostart actor RADIUSOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram where (d.Payload.Count > 0 && 
        (d.DestinationPort == Port.RADIUS || d.DestinationPort == Port.RADIUSCisco || d.SourcePort == Port.RADIUS || d.SourcePort == Port.RADIUSCisco) && 
        value.Payload.Count >= 4 && value.Payload.Count == MakeWord(value.Payload[2], value.Payload[3]))
    {
        if (BinaryDecoder<Packet>(d.Payload) is req:Packet)
        {
            dispatch (endpoint Node over host) accepts req;
        }
        else
        {
            ThrowDecodingException("RADIUS");
        }
    }
}

message Packet
{
    Code Code;
    byte Identifier;
    ushort Length where ValidationCheck(value >= 20 && value <= 4096, this, "The minimum length is 20 and the maximum length is 4096.");
    binary Authenticator with BinaryEncoding{Length = 16};
    array<AttributeType> Attributes;
    
    override string ToString()
    {
        string summary;
        summary = (Code >= 250 && Code <= 253) ? "Experimental-use" : ((InRange<Code>(Code) ? "" : "Undefined: ") + EnumToString<RADIUS.Code>(Code, false));
        summary += ", Identifier: " + (Identifier.ToString());
        summary += ", Length: " + (Length.ToString());
        return summary;
    }
}

pattern Code = enum byte
{
    $"Access-Request" = 1,
    $"Access-Accept" = 2,
    $"Access-Reject" =3,
    $"Accounting-Request" = 4,
    $"Accounting-Response" = 5,
    $"Accounting-Status" = 6,
    $"Password-Request" = 7,
    $"Password-Ack" = 8,
    $"Password-Reject" = 9,
    $"Accounting-Message" = 10,
    $"Access-Challenge" = 11,
    $"Status-Server(experimental)" = 12,
    $"Status-Client(experimental)" = 13,
    $"Resource-Free-Request" = 21,
    $"Resource-Free-Response" = 22,
    $"Resource-Query-Request" = 23,
    $"Resource-Query-Response" = 24,
    $"Alternate-Resource-Reclaim-Request" = 25,
    $"NAS-Reboot-Request" = 26,
    $"NAS-Reboot-Response" = 27,
    $"Next-Passcode" = 29,
    $"New-Pin" = 30,
    $"Terminate-Session" = 31,
    $"Password-Expired" = 32,
    $"Event-Request" = 33,
    $"Event-Response" = 34,
    $"Disconnect-Request" = 40,
    $"Disconnect-ACK" = 41,
    $"Disconnect-NAK" = 42,
    $"CoA-Request" = 43,
    $"CoA-ACK" = 44,
    $"CoA-NAK" = 45,
    $"IP-Address-Allocate" = 50,
    $"IP-Address-Release" = 51,
    //$"Experimental-use" = 250,
    //$"Experimental-use" = 251,
    //$"Experimental-use" = 252,
    //$"Experimental-use" = 253,
    //$"Reserved" = 254,
    //$"Reserved" = 255,
    ...
};

type AttributeType
{
    AttributeTypePatt Type;
    ([|Type == AttributeTypePatt.UserNameAttribute|] UserNameAttribute | // RFC 2865 start
    [|Type == AttributeTypePatt.UserPasswordAttribute|] UserPasswordAttribute | 
    [|Type == AttributeTypePatt.ChapPasswordAttribute|] ChapPasswordAttribute | 
    [|Type == AttributeTypePatt.NASIPAddressAttribute|] NASIPAddressAttribute | 
    [|Type == AttributeTypePatt.NASPortAttribute|] NASPortAttribute | 
    [|Type == AttributeTypePatt.ServiceTypeAttribute|] ServiceTypeAttribute | 
    [|Type == AttributeTypePatt.FramedProtocolAttribute|] FramedProtocolAttribute | 
    [|Type == AttributeTypePatt.FramedIPAddressAttribute|] FramedIPAddressAttribute | 
    [|Type == AttributeTypePatt.FramedIPNetmaskAttribute|] FramedIPNetmaskAttribute | 
    [|Type == AttributeTypePatt.FramedRoutingAttribute|] FramedRoutingAttribute | 
    [|Type == AttributeTypePatt.FilterIdAttribute|] FilterIdAttribute | 
    [|Type == AttributeTypePatt.FramedMTUAttribute|] FramedMTUAttribute | 
    [|Type == AttributeTypePatt.FramedCompressionAttribute|] FramedCompressionAttribute | 
    [|Type == AttributeTypePatt.LoginIPHostAttribute|] LoginIPHostAttribute | 
    [|Type == AttributeTypePatt.LoginServiceAttribute|] LoginServiceAttribute | 
    [|Type == AttributeTypePatt.LoginTCPPortAttribute|] LoginTCPPortAttribute | 
    [|Type == AttributeTypePatt.ReplyMessageAttribute|] ReplyMessageAttribute | 
    [|Type == AttributeTypePatt.CallbackNumberAttribute|] CallbackNumberAttribute | 
    [|Type == AttributeTypePatt.CallbackIdAttribute|] CallbackIdAttribute | 
    [|Type == AttributeTypePatt.FramedRouteAttribute|] FramedRouteAttribute | 
    [|Type == AttributeTypePatt.FramedIPXNetworkAttribute|] FramedIPXNetworkAttribute | 
    [|Type == AttributeTypePatt.StateAttribute|] StateAttribute | 
    [|Type == AttributeTypePatt.ClassAttribute|] ClassAttribute | 
    [|Type == AttributeTypePatt.VendorSpecificAttribute|] VendorSpecificAttribute | 
    [|Type == AttributeTypePatt.SessionTimeoutAttribute|] SessionTimeoutAttribute | 
    [|Type == AttributeTypePatt.IdleTimeoutAttribute|] IdleTimeoutAttribute | 
    [|Type == AttributeTypePatt.TerminationActionAttribute|] TerminationActionAttribute | 
    [|Type == AttributeTypePatt.CalledStationIdAttribute|] CalledStationIdAttribute | 
    [|Type == AttributeTypePatt.CallingStationIdAttribute|] CallingStationIdAttribute | 
    [|Type == AttributeTypePatt.NASIdentifierAttribute|] NASIdentifierAttribute | 
    [|Type == AttributeTypePatt.ProxyStateAttribute|] ProxyStateAttribute | 
    [|Type == AttributeTypePatt.LoginLATServiceAttribute|] LoginLATServiceAttribute | 
    [|Type == AttributeTypePatt.LoginLATNodeAttribute|] LoginLATNodeAttribute | 
    [|Type == AttributeTypePatt.LoginLATGroupAttribute|] LoginLATGroupAttribute | 
    [|Type == AttributeTypePatt.FramedAppleTalkLinkAttribute|] FramedAppleTalkLinkAttribute | 
    [|Type == AttributeTypePatt.FramedAppleTalkNetworkAttribute|] FramedAppleTalkNetworkAttribute | 
    [|Type == AttributeTypePatt.FramedAppleTalkZoneAttribute|] FramedAppleTalkZoneAttribute | 
    [|Type == AttributeTypePatt.CHAPChallengeAttribute|] CHAPChallengeAttribute | 
    [|Type == AttributeTypePatt.NASPortTypeAttribute|] NASPortTypeAttribute | 
    [|Type == AttributeTypePatt.PortLimitAttribute|] PortLimitAttribute | 
    [|Type == AttributeTypePatt.LoginLATPortAttribute|] LoginLATPortAttribute | // RFC 2865 end
    [|Type == AttributeTypePatt.AcctStatusTypeAttribute|] AcctStatusTypeAttribute | // RFC 2866 start
    [|Type == AttributeTypePatt.AcctDelayTimeAttribute|] AcctDelayTimeAttribute | 
    [|Type == AttributeTypePatt.AcctInputOctetsAttribute|] AcctInputOctetsAttribute | 
    [|Type == AttributeTypePatt.AcctOutputOctetsAttribute|] AcctOutputOctetsAttribute | 
    [|Type == AttributeTypePatt.AcctSessionIdAttribute|] AcctSessionIdAttribute | 
    [|Type == AttributeTypePatt.AcctAuthenticAttribute|] AcctAuthenticAttribute | 
    [|Type == AttributeTypePatt.AcctSessionTimeAttribute|] AcctSessionTimeAttribute | 
    [|Type == AttributeTypePatt.AcctInputPacketsAttribute|] AcctInputPacketsAttribute | 
    [|Type == AttributeTypePatt.AcctOutputPacketsAttribute|] AcctOutputPacketsAttribute | 
    [|Type == AttributeTypePatt.AcctTerminateCauseAttribute|] AcctTerminateCauseAttribute | 
    [|Type == AttributeTypePatt.AcctMultiSessionIdAttribute|] AcctMultiSessionIdAttribute | 
    [|Type == AttributeTypePatt.AcctLinkCountAttribute|] AcctLinkCountAttribute | // RFC 2866 end
    [|Type == AttributeTypePatt.TunnelTypeAttribute|] TunnelTypeAttribute | // RFC 2868 start
    [|Type == AttributeTypePatt.TunnelMediumTypeAttribute|] TunnelMediumTypeAttribute | 
    [|Type == AttributeTypePatt.TunnelClientEndpointAttribute|] TunnelClientEndpointAttribute | 
    [|Type == AttributeTypePatt.TunnelServerEndpointAttribute|] TunnelServerEndpointAttribute | 
    [|Type == AttributeTypePatt.TunnelPasswordAttribute|] TunnelPasswordAttribute | 
    [|Type == AttributeTypePatt.TunnelPrivateGroupIDAttribute|] TunnelPrivateGroupIDAttribute | 
    [|Type == AttributeTypePatt.TunnelAssignmentIDAttribute|] TunnelAssignmentIDAttribute | 
    [|Type == AttributeTypePatt.TunnelPreferenceAttribute|] TunnelPreferenceAttribute | 
    [|Type == AttributeTypePatt.TunnelClientAuthIDAttribute|] TunnelClientAuthIDAttribute | 
    [|Type == AttributeTypePatt.TunnelServerAuthIDAttribute|] TunnelServerAuthIDAttribute | // RFC 2868 end
    [|Type == AttributeTypePatt.AcctInputGigawordsAttribute|] AcctInputGigawordsAttribute | // RFC 2869 start
    [|Type == AttributeTypePatt.AcctOutputGigawordsAttribute|] AcctOutputGigawordsAttribute | 
    [|Type == AttributeTypePatt.EventTimestampAttribute|] EventTimestampAttribute | 
    [|Type == AttributeTypePatt.ARAPPasswordAttribute|] ARAPPasswordAttribute | 
    [|Type == AttributeTypePatt.ARAPFeaturesAttribute|] ARAPFeaturesAttribute | 
    [|Type == AttributeTypePatt.ARAPZoneAccessAttribute|] ARAPZoneAccessAttribute | 
    [|Type == AttributeTypePatt.ARAPSecurityAttribute|] ARAPSecurityAttribute | 
    [|Type == AttributeTypePatt.ARAPSecurityDataAttribute|] ARAPSecurityDataAttribute | 
    [|Type == AttributeTypePatt.PasswordRetryAttribute|] PasswordRetryAttribute | 
    [|Type == AttributeTypePatt.PromptAttribute|] PromptAttribute | 
    [|Type == AttributeTypePatt.ConnectInfoAttribute|] ConnectInfoAttribute | 
    [|Type == AttributeTypePatt.ConfigurationTokenAttribute|] ConfigurationTokenAttribute | 
    [|Type == AttributeTypePatt.EAPMessageAttribute|] EAPMessageAttribute | 
    [|Type == AttributeTypePatt.MessageAuthenticatorAttribute|] MessageAuthenticatorAttribute | 
    [|Type == AttributeTypePatt.ARAPChallengeResponseAttribute|] ARAPChallengeResponseAttribute | 
    [|Type == AttributeTypePatt.AcctInterimIntervalAttribute|] AcctInterimIntervalAttribute | 
    [|Type == AttributeTypePatt.NASPortIdAttribute|] NASPortIdAttribute | 
    [|Type == AttributeTypePatt.FramedPoolAttribute|] FramedPoolAttribute | // RFC 2869 end
    [|Type == AttributeTypePatt.NASIPv6AddressAttribute|] NASIPv6AddressAttribute | // RFC 3162 start
    [|Type == AttributeTypePatt.FramedInterfaceIdAttribute|] FramedInterfaceIdAttribute | 
    [|Type == AttributeTypePatt.FramedIPv6PrefixAttribute|] FramedIPv6PrefixAttribute | 
    [|Type == AttributeTypePatt.LoginIPv6HostAttribute|] LoginIPv6HostAttribute | 
    [|Type == AttributeTypePatt.FramedIPv6RouteAttribute|] FramedIPv6RouteAttribute | 
    [|Type == AttributeTypePatt.FramedIPv6PoolAttribute|] FramedIPv6PoolAttribute | // RFC 3162 end
    [|Type == AttributeTypePatt.AcctTunnelConnectionAttribute|] AcctTunnelConnectionAttribute | // RFC 2867 start
    [|Type == AttributeTypePatt.AcctTunnelPacketsLostAttribute|] AcctTunnelPacketsLostAttribute | // RFC 2867 end
    CommonAttribute) Attribute;
    override string ToString()
    {
        return EnumToStringInSummary<RADIUS.AttributeTypePatt>(Type);
    }
}

pattern AttributeTypePatt = enum byte
{
    UserNameAttribute = 1,
    UserPasswordAttribute = 2,
    ChapPasswordAttribute = 3,
    NASIPAddressAttribute = 4,
    NASPortAttribute = 5,
    ServiceTypeAttribute = 6,
    FramedProtocolAttribute = 7,
    FramedIPAddressAttribute = 8,
    FramedIPNetmaskAttribute = 9,
    FramedRoutingAttribute = 10,
    FilterIdAttribute = 11,
    FramedMTUAttribute = 12,
    FramedCompressionAttribute = 13,
    LoginIPHostAttribute = 14,
    LoginServiceAttribute = 15,
    LoginTCPPortAttribute = 16,
    ReplyMessageAttribute = 18,
    CallbackNumberAttribute = 19,
    CallbackIdAttribute = 20,
    FramedRouteAttribute = 22,
    FramedIPXNetworkAttribute = 23,
    StateAttribute = 24,
    ClassAttribute = 25,
    VendorSpecificAttribute = 26,
    SessionTimeoutAttribute = 27,
    IdleTimeoutAttribute = 28,
    TerminationActionAttribute = 29,
    CalledStationIdAttribute = 30,
    CallingStationIdAttribute = 31,
    NASIdentifierAttribute = 32,
    ProxyStateAttribute = 33,
    LoginLATServiceAttribute = 34,
    LoginLATNodeAttribute = 35,
    LoginLATGroupAttribute = 36,
    FramedAppleTalkLinkAttribute = 37,
    FramedAppleTalkNetworkAttribute = 38,
    FramedAppleTalkZoneAttribute = 39,
    CHAPChallengeAttribute = 60,
    NASPortTypeAttribute = 61,
    PortLimitAttribute = 62,
    LoginLATPortAttribute = 63,
    AcctStatusTypeAttribute = 40,
    AcctDelayTimeAttribute = 41,
    AcctInputOctetsAttribute = 42,
    AcctOutputOctetsAttribute = 43,
    AcctSessionIdAttribute = 44,
    AcctAuthenticAttribute = 45,
    AcctSessionTimeAttribute = 46,
    AcctInputPacketsAttribute = 47,
    AcctOutputPacketsAttribute = 48,
    AcctTerminateCauseAttribute = 49,
    AcctMultiSessionIdAttribute = 50,
    AcctLinkCountAttribute = 51,
    TunnelTypeAttribute = 64,
    TunnelMediumTypeAttribute = 65,
    TunnelClientEndpointAttribute = 66,
    TunnelServerEndpointAttribute = 67,
    TunnelPasswordAttribute = 69,
    TunnelPrivateGroupIDAttribute = 81,
    TunnelAssignmentIDAttribute = 82,
    TunnelPreferenceAttribute = 83,
    TunnelClientAuthIDAttribute = 90,
    TunnelServerAuthIDAttribute = 91,
    AcctInputGigawordsAttribute = 52,
    AcctOutputGigawordsAttribute = 53,
    EventTimestampAttribute = 55,
    ARAPPasswordAttribute = 70,
    ARAPFeaturesAttribute = 71,
    ARAPZoneAccessAttribute = 72,
    ARAPSecurityAttribute = 73,
    ARAPSecurityDataAttribute = 74,
    PasswordRetryAttribute = 75,
    PromptAttribute = 76,
    ConnectInfoAttribute = 77,
    ConfigurationTokenAttribute = 78,
    EAPMessageAttribute = 79,
    MessageAuthenticatorAttribute = 80,
    ARAPChallengeResponseAttribute = 84,
    AcctInterimIntervalAttribute = 85,
    NASPortIdAttribute = 87,
    FramedPoolAttribute = 88,
    NASIPv6AddressAttribute = 95,
    FramedInterfaceIdAttribute = 96,
    FramedIPv6PrefixAttribute = 97,
    LoginIPv6HostAttribute = 98,
    FramedIPv6RouteAttribute = 99,
    FramedIPv6PoolAttribute = 100,
    AcctTunnelConnectionAttribute = 68,
    AcctTunnelPacketsLostAttribute = 86,
    ...
};

// *****************Attribute in RFC 2865******************************//
type UserNameAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "User-Name attribute length is at least 3.");
    string UserName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type UserPasswordAttribute
{
    byte Length where ValidationCheck(value >= 18 && value <= 130, null, "User-Password attribute length is at least 18 and no larger than 130.");
    binary UserPassword with BinaryEncoding{Length = (Length) - 2};
}

type ChapPasswordAttribute
{
    byte Length where ValidationCheck(value == 19, null, "Chap-Password attribute length is 19.");
    byte ChapIdent;
    binary ChapPassword with BinaryEncoding{Length = 16};
}

type NASIPAddressAttribute
{
    byte Length where ValidationCheck(value == 6, null, "NAS-IP-Address attribute length is 6.");
    binary NASIPAddress with BinaryEncoding{Length = 4};
}

type NASPortAttribute
{
    byte Length where ValidationCheck(value == 6, null, "NAS-Port attribute length is 6.");
    uint NASPort;
}

type ServiceTypeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Service-Type attribute length is 6.");
    uint ServiceType;
}

type FramedProtocolAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-Protocol attribute length is 6.");
    uint FramedProtocol;
}

type FramedIPAddressAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-IP-Address attribute length is 6.");
    binary FramedIPAddress with BinaryEncoding{Length = 4};
}

type FramedIPNetmaskAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-IP-Netmask attribute length is 6.");
    binary FramedIPNetmask with BinaryEncoding{Length = 4};
}

type FramedRoutingAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-Routing attribute length is 6.");
    uint FramedRouting;
}

type FilterIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Filter-Id attribute length is at least 3.");
    string FilterId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type FramedMTUAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-MTU attribute length is 6.");
    uint FramedMTU where ValidationCheck(value >= 64, null, "Framed-MTU value length is at least 64.");
}

type FramedCompressionAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-Compression attribute length is 6.");
    uint FramedCompression;
}

type LoginIPHostAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Login-IP-Host attribute length is 6.");
    binary LoginIPHost with BinaryEncoding{Length = 4};
}

type LoginServiceAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Login-Service attribute length is 6.");
    uint LoginService;
}

type LoginTCPPortAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Login-TCP-Port attribute length is 6.");
    uint LoginTCPPort;
}

type ReplyMessageAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Reply-Message attribute length is at least 3.");
    string ReplyMessage with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type CallbackNumberAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Callback-Number attribute length is at least 3.");
    binary CallbackNumber with BinaryEncoding{Length = (Length) - 2};
}

type CallbackIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Callback-Id attribute length is at least 3.");
    binary CallbackId with BinaryEncoding{Length = (Length) - 2};
}

type FramedRouteAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Framed-Route attribute length is at least 3.");
    string FramedRoute with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type FramedIPXNetworkAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-IPX-Network attribute length is 6.");
    binary FramedIPXNetwork with BinaryEncoding{Length = 4};
}

type StateAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "State attribute length is at least 3.");
    binary State with BinaryEncoding{Length = (Length) - 2};
}

type ClassAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Class attribute length is at least 3.");
    binary Class with BinaryEncoding{Length = (Length) - 2};
}

type VendorSpecificAttribute
{
    byte Length where ValidationCheck(value >= 7, null, "Vendor-Specific attribute length is at least 3.");
    uint VendorId;
    // SMI Network Management Private Enterprise Codes for Microsoft is 311.
    ([|VendorId == 311|] MicrosoftVendorSpecificRADIUSAttributes | [|VendorId != 311|] VendorSpecificData[((Length as uint) - 6)]) String;
}

type SessionTimeoutAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Session-Timeout attribute length is 6.");
    uint SessionTimeout;
}

type IdleTimeoutAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Idle-Timeout attribute length is 6.");
    uint IdleTimeout;
}

type TerminationActionAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Termination-Action attribute length is 6.");
    uint TerminationAction;
}

type CalledStationIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Called-Station-Id attribute length is at least 3.");
    binary CalledStationId with BinaryEncoding{Length = (Length) - 2};
}

type CallingStationIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Calling-Station-Id attribute length is at least 3.");
    binary CallingStationId with BinaryEncoding{Length = (Length) - 2};
}

type NASIdentifierAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "NAS-Identifier attribute length is at least 3.");
    binary NASIdentifier with BinaryEncoding{Length = (Length) - 2};
}

type ProxyStateAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Proxy-State attribute length is at least 3.");
    binary ProxyState with BinaryEncoding{Length = (Length) - 2};
}

type LoginLATServiceAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Service attribute length is at least 3.");
    binary LoginLATService with BinaryEncoding{Length = (Length) - 2};
}

type LoginLATNodeAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Node attribute length is at least 3.");
    binary LoginLATNode with BinaryEncoding{Length = (Length) - 2};
}

type LoginLATGroupAttribute
{
    byte Length where ValidationCheck(value == 34, null, "Login-LAT-Group attribute length is 34.");
    binary LoginLATGroup with BinaryEncoding{Length = 32};
}

type FramedAppleTalkLinkAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-AppleTalk-Link attribute length is 6.");
    uint FramedAppleTalkLink;
}

type FramedAppleTalkNetworkAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Framed-AppleTalk-Network attribute length is 6.");
    uint FramedAppleTalkNetwork;
}

type FramedAppleTalkZoneAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Framed-AppleTalk-Zone attribute length is at least 3.");
    binary FramedAppleTalkZone with BinaryEncoding{Length = (Length) - 2};
}

type CHAPChallengeAttribute
{
    byte Length where ValidationCheck(value >= 7, null, "CHAP-Challenge attribute length is at least 7.");
    binary CHAPChallenge with BinaryEncoding{Length = (Length) - 2};
}

type NASPortTypeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "NAS-Port-Type attribute length is 6.");
    uint NASPortType;
}

type PortLimitAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Port-Limit attribute length is 6.");
    uint PortLimit;
}

type LoginLATPortAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Port attribute length is at least 3.");
    binary LoginLATPort with BinaryEncoding{Length = (Length) - 2};
}

// *****************Attribute in RFC 2865******************************//
type AcctStatusTypeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Status-Type attribute length is 6.");
    uint AcctStatusType;
}

type AcctDelayTimeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Delay-Time attribute length is 6.");
    uint AcctDelayTime;
}

type AcctInputOctetsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Octets attribute length is 6.");
    uint AcctInputOctets;
}

type AcctOutputOctetsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Octets attribute length is 6.");
    uint AcctOutputOctets;
}

type AcctSessionIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Acct-Session-Id attribute length is at least 3.");
    string AcctSessionId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type AcctAuthenticAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Authentic attribute length is 6.");
    uint AcctAuthentic;
}

type AcctSessionTimeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Session-Time attribute length is 6.");
    uint AcctSessionTime;
}

type AcctInputPacketsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Packets attribute length is 6.");
    uint AcctInputPackets;
}

type AcctOutputPacketsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Packets attribute length is 6.");
    uint AcctOutputPackets;
}

type AcctTerminateCauseAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Terminate-Cause attribute length is 6.");
    uint AcctTerminateCause;
}

type AcctMultiSessionIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Acct-Multi-Session-Id attribute length is at least 3.");
    string AcctMultiSessionId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type AcctLinkCountAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Link-Count attribute length is 6.");
    uint AcctLinkCount;
}

// *****************Attribute in RFC 2867******************************//
type AcctTunnelConnectionAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Acct-Tunnel-Connection attribute length is at least 3.");
    binary AcctTunnelConnection with BinaryEncoding{Length = (Length) - 2};
}

type AcctTunnelPacketsLostAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Tunnel-Packets-Lost attribute length is 6.");
    uint Lost;
}

// *****************Attribute in RFC 2868******************************//
type TunnelTypeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Type attribute length is 6.");
    byte Tag;
    uint TunnelType with BinaryEncoding{Width = 24};
}

type TunnelMediumTypeAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Medium-Type attribute length is 6.");
    byte Tag;
    uint TunnelMediumType with BinaryEncoding{Width = 24};
}

type TunnelClientEndpointAttribute
{
    byte Length where ValidationCheck(value >= 7, null, "Tunnel-Client-Endpoint attribute length is at least 3.");
    byte Tag;
    binary TunnelClientEndpoint with BinaryEncoding{Length = (Length) - 3};
}

type TunnelServerEndpointAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Server-Endpoint attribute length is at least 3.");
    byte Tag;
    binary TunnelServerEndpoint with BinaryEncoding{Length = (Length) - 3};
}

type TunnelPasswordAttribute
{
    byte Length where ValidationCheck(value >= 5, null, "Tunnel-Password attribute length is at least 5.");
    byte Tag;
    ushort Salt;
    binary TunnelPassword with BinaryEncoding{Length = (Length) - 5};
}

type TunnelPrivateGroupIDAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Private-Group-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelPrivateGroupID with BinaryEncoding{Length = (Length) - 3};
}

type TunnelAssignmentIDAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Assignment-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelAssignmentID with BinaryEncoding{Length = (Length) - 3};
}

type TunnelPreferenceAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Preference attribute length is 6.");
    byte Tag;
    uint TunnelPreference with BinaryEncoding{Width = 24};
}

type TunnelClientAuthIDAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Client-Auth-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelClientAuthID with BinaryEncoding{Length = (Length) - 3};
}

type TunnelServerAuthIDAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Server-Auth-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelServerAuthID with BinaryEncoding{Length = (Length) - 3};
}

// *****************Attribute in RFC 2869******************************//
type AcctInputGigawordsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Gigawords attribute length is 6.");
    uint AcctInputGigawords;
}

type AcctOutputGigawordsAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Gigawords attribute length is 6.");
    uint AcctOutputGigawords;
}

type EventTimestampAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Event-Timestamp attribute length is 6.");
    uint EventTimestamp;
}

type ARAPPasswordAttribute
{
    byte Length where ValidationCheck(value == 18, null, "ARAP-Password attribute length is 18.");
    binary ARAPPassword with BinaryEncoding{Length = 16};
}

type ARAPFeaturesAttribute
{
    byte Length where ValidationCheck(value == 18, null, "ARAP-Features attribute length is 16.");
    byte  WhetherUserCanChangePassword;
    byte  MinimumPasswordLength;
    uint PasswordCreationDateInMacFormat;
    uint PasswordExpirationDateInMacFormat;
    uint CurrentRADIUSTimeInMacFormat;
}

type ARAPZoneAccessAttribute
{
    byte Length where ValidationCheck(value == 6, null, "ARAP-Zone-Access attribute length is 6.");
    uint ARAPZoneAccess;
}

type ARAPSecurityAttribute
{
    byte Length where ValidationCheck(value == 6, null, "ARAP-Security attribute length is 6.");
    uint ARAPSecurity;
}

type ARAPSecurityDataAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "ARAP-Security-Data attribute length is at least 3.");
    binary ARAPSecurityData with BinaryEncoding{Length = (Length) - 2};
}

type PasswordRetryAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Password-Retry attribute length is 6.");
    uint PasswordRetry;
}

type PromptAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Prompt attribute length is 6.");
    uint Prompt;
}

type ConnectInfoAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Connect-Info attribute length is at least 3.");
    string ConnectInfo with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type ConfigurationTokenAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Configuration-Token attribute length is at least 3.");
    binary ConfigurationToken with BinaryEncoding{Length = (Length) - 2};
}

type EAPMessageAttribute
//If multiple EAP-Message attributes are present in a packet their values should be concatenated;
//this allows EAP packets longer than 253 octets to be passed by RADIUS.
{
    byte Length where ValidationCheck(value >= 3, null, "EAP-Message attribute length is at least 3.");
    binary EAPMessage with BinaryEncoding{Length = (Length) - 2};
}

type MessageAuthenticatorAttribute
{
    byte Length where ValidationCheck(value == 18, null, "Message-Authenticator attribute length is 18.");
    binary MessageAuthenticator with BinaryEncoding{Length = 16};
}

type ARAPChallengeResponseAttribute
{
    byte Length where ValidationCheck(value == 10, null, "ARAP-Challenge-Response attribute length is 10.");
    binary ARAPChallengeResponse with BinaryEncoding{Length = 8};
}

type AcctInterimIntervalAttribute
{
    byte Length where ValidationCheck(value == 6, null, "Acct-Interim-Interval attribute length is 6.");
    uint AcctInterimInterval;
}

type NASPortIdAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "NAS-Port-Id attribute length is at least 3.");
    string NASPortId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type FramedPoolAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Framed-Pool attribute length is at least 3.");
    binary FramedPool with BinaryEncoding{Length = (Length) - 2};
}

// *****************Attribute in RFC 3162******************************//
type NASIPv6AddressAttribute
{
    byte Length where ValidationCheck(value == 18, null, "NAS-IPv6-Address attribute length is 18.");
    binary NASIPv6Address with BinaryEncoding{Length = 16};
}

type FramedInterfaceIdAttribute
{
    byte Length where ValidationCheck(value == 10, null, "Framed-Interface-Id attribute length is 10.");
    binary FramedInterfaceId with BinaryEncoding{Length = 8};
}

type FramedIPv6PrefixAttribute
{
    byte Length where ValidationCheck(value >= 4 && value <= 20, null, "Framed-IPv6-Prefix attribute length is at least 4 and no greater than 20.");
    byte Reserved;
    byte PrefixLength;
    binary Prefix with BinaryEncoding{Length = (Length) - 4};
}

type LoginIPv6HostAttribute
{
    byte Length where ValidationCheck(value == 18, null, "Login-IPv6-Host attribute length is 18.");
    binary LoginIPv6Host with BinaryEncoding{Length = 16};
}

type FramedIPv6RouteAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Framed-IPv6-Route attribute length is at least 3.");
    string FramedIPv6Route with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length) - 2};
}

type FramedIPv6PoolAttribute
{
    byte Length where ValidationCheck(value >= 3, null, "Framed-IPv6-Pool attribute length is at least 3.");
    binary FramedIPv6Pool with BinaryEncoding{Length = (Length) - 2};
}

// *****************Attribute Reserved******************************//
type CommonAttribute
{
    byte Length;
    binary Value with BinaryEncoding{Length = (Length) - 2};
}

// *****************Microsoft Vendor-specific RADIUS Attributes(RFC 2548)******************************//
type MSCHAPChallenge
{
    byte VendorType; // 11
    byte VendorLength where ValidationCheck(value > 2, null, "MS-CHAP-Challenge subattribute length is greater than 2.");
    binary Challenge with BinaryEncoding{Length = (VendorLength) - 2};
}

type MSCHAPResponse
{
    (byte where value == 1) VendorType;
    byte VendorLength where ValidationCheck(value == 52, null, "MS-CHAP-Response subattribute length is 52.");
    byte Ident;
    byte Flags;
    binary LMResponse with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
}

type MSCHAPDomain
{
    (byte where value == 10) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-CHAP-Domain subattribute length is greater than 3.");
    byte Ident;
    string DomainName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (VendorLength) - 3};
}

type MSCHAPError
{
    (byte where value == 2) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-CHAP-Error subattribute length is greater than 3.");
    byte Ident;
    string ErrorMessage with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (VendorLength) - 3};
}

type MSCHAPPW1
{
    (byte where value == 3) VendorType;
    byte VendorLength where ValidationCheck(value == 72, null, "MS-CHAP-PW-1 subattribute length is 72.");
    byte Code where ValidationCheck(value == 5, null, "Code value is 5.");
    byte Ident;
    binary LMOldPassword with BinaryEncoding{Length = 16};
    binary LMNewPassword with BinaryEncoding{Length = 16};
    binary NTOldPassword with BinaryEncoding{Length = 16};
    binary NTNewPassword with BinaryEncoding{Length = 16};
    ushort NewLMPasswordLength;
    ushort Flags;
}

type MSCHAPPW2
{
    (byte where value == 4) VendorType;
    byte VendorLength where ValidationCheck(value == 86, null, "MS-CHAP-PW-2 subattribute length is 86.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    binary OldNTHash with BinaryEncoding{Length = 16};
    binary OldLMHash with BinaryEncoding{Length = 16};
    binary LMResponse with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
    ushort Flags;
}

type MSCHAPLMEncPW
{
    (byte where value == 5) VendorType;
    byte VendorLength where ValidationCheck(value > 6, null, "MS-CHAP-LM-Enc-PW subattribute length is greater than 6.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    ushort SequenceNumber;
    binary EncPW with BinaryEncoding{Length = (VendorLength) - 6};
}

type MSCHAPNTEncPW
{
    (byte where value == 6) VendorType;
    byte VendorLength where ValidationCheck(value > 6, null, "MS-CHAP-NT-Enc-PW subattribute length is greater than 6.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    ushort SequenceNumber;
    binary EncPW with BinaryEncoding{Length = (VendorLength) - 6};
}

type MSCHAP2Response
{
    (byte where value == 25) VendorType;
    byte VendorLength where ValidationCheck(value == 52, null, "MS-CHAP2-Response subattribute length is 52.");
    byte Ident;
    byte Flags;
    binary PeerChallenge with BinaryEncoding{Length = 16};
    binary Reserved with BinaryEncoding{Length = 8};
    binary Response with BinaryEncoding{Length = 24};
}

type MSCHAP2Success
{
    (byte where value == 26) VendorType;
    byte VendorLength where ValidationCheck(value == 45, null, "MS-CHAP2-Success subattribute length is 45.");
    byte Ident;
    binary Authenticator with BinaryEncoding{Length = 42};
}

type MSCHAP2PW
{
    (byte where value == 27) VendorType;
    byte VendorLength where ValidationCheck(value == 70, null, "MS-CHAP2-PW subattribute length is 70.");
    byte Code where ValidationCheck(value == 7, null, "Code value is 7.");
    byte Ident;
    binary EncryptedHash with BinaryEncoding{Length = 16};
    binary PeerChallenge with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
    ushort Flags;
}

type MSCHAPMPPEKeys
{
    (byte where value == 12) VendorType;
    byte VendorLength where ValidationCheck(value == 34, null, "MS-CHAP-MPPE-Keys subattribute length is 34.");
    binary LMKey with BinaryEncoding{Length = 8};
    binary NTKey with BinaryEncoding{Length = 16};
    binary Padding with BinaryEncoding{Length = 8};
}

type MSMPPESendKey
{
    (byte where value == 16) VendorType;
    byte VendorLength where ValidationCheck(value > 4, null, "MS-MPPE-Send-Key subattribute length is greater than 4.");
    ushort Salt;
    binary EncryptedKey with BinaryEncoding{Length = (VendorLength) - 4};
}

type MSMPPERecvKey
{
    (byte where value == 17) VendorType;
    byte VendorLength where ValidationCheck(value > 4, null, "MS-MPPE-Recv-Key subattribute length is greater than 4.");
    ushort Salt;
    binary EncryptedKey with BinaryEncoding{Length = (VendorLength) - 4};
}

type MSMPPEEncryptionPolicy
{
    (byte where value == 7) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-MPPE-Encryption-Policy subattribute length is 6.");
    uint Policy;
}

type MSMPPEEncryptionTypes
{
    (byte where value == 8) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-MPPE-Encryption-Types subattribute length is 6.");
    uint Policy;
}

type MSBAPUsage
{
    (byte where value == 13) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-BAP-Usage subattribute length is 6.");
    uint Value;
}

type MSLinkUtilizationThreshold
{
    (byte where value == 14) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Link-Utilization-Threshold subattribute length is 6.");
    uint Value;
}

type MMSLinkDropTimeLimit
{
    (byte where value == 15) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Link-Drop-Time-Limit subattribute length is 6.");
    uint Value;
}

type MSOldARAPPassword
{
    (byte where value == 19) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-Old-ARAP-Password subattribute length is greater than 3.");
    binary EncryptedOldARAPPwd with BinaryEncoding{Length = (VendorLength) - 2};
}

type MSNewARAPPassword
{
    (byte where value == 20) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-New-ARAP-Password subattribute length is greater than 3.");
    binary EncryptedNewARAPPwd with BinaryEncoding{Length = (VendorLength) - 2};
}

type MSARAPPasswordChangeReason
{
    (byte where value == 21) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-ARAP-Password-Change-Reason subattribute length is 6.");
    uint Reason;
}

type MSARAPChallenge
{
    (byte where value == 33) VendorType;
    byte VendorLength where ValidationCheck(value == 10, null, "MS-ARAP-Challenge subattribute length is 10.");
    binary Challenge with BinaryEncoding{Length = 8};
}

type MSRASVendor
{
    (byte where value == 9) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-RAS-Vendor subattribute length is 6.");
    uint VendorID;
}

type MSRASVersion
{
    (byte where value == 18) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-RAS-Version subattribute length is greater than 3.");
    binary VendorSpecific with BinaryEncoding{Length = (VendorLength) - 2};
}

type MSFilter
{
    (byte where value == 22) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-Filter subattribute length is greater than 3.");
    binary Filter with BinaryEncoding{Length = (VendorLength) - 2};
}

type MSAcctAuthType
{
    (byte where value == 23) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Acct-Auth-Type subattribute length is 6.");
    uint AuthType;
}

type MSAcctEAPType
{
    (byte where value == 24) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Acct-EAP-Type subattribute length is 6.");
    uint AuthType;
}

type MSPrimaryDNSServer
{
    (byte where value == 28) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Primary-DNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSSecondaryDNSServer
{
    (byte where value == 29) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Secondary-DNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSPrimaryMBNSServer
{
    (byte where value == 30) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Primary-MBNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSSecondaryMBNSServer
{
    (byte where value == 31) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Secondary-MBNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MicrosoftVendorSpecifixAttributes
{
    byte VendorType;
    byte VendorLength;
    binary AttributeSpecificValue with BinaryEncoding{Length = VendorLength - 2};
}

pattern MicrosoftVendorSpecificRADIUSAttributes = [|RemainingBitLength(stream) >= 8|]
    ([|CurrentByte(stream) == 11|] MSCHAPChallenge |
    [|CurrentByte(stream) == 1|] MSCHAPResponse |
    [|CurrentByte(stream) == 10|] MSCHAPDomain |
    [|CurrentByte(stream) == 2|] MSCHAPError |
    [|CurrentByte(stream) == 3|] MSCHAPPW1 |
    [|CurrentByte(stream) == 4|] MSCHAPPW2 |
    [|CurrentByte(stream) == 5|] MSCHAPLMEncPW |
    [|CurrentByte(stream) == 6|] MSCHAPNTEncPW |
    [|CurrentByte(stream) == 25|] MSCHAP2Response |
    [|CurrentByte(stream) == 26|] MSCHAP2Success |
    [|CurrentByte(stream) == 27|] MSCHAP2PW |
    [|CurrentByte(stream) == 12|] MSCHAPMPPEKeys |
    [|CurrentByte(stream) == 16|] MSMPPESendKey |
    [|CurrentByte(stream) == 17|] MSMPPERecvKey |
    [|CurrentByte(stream) == 7|] MSMPPEEncryptionPolicy |
    [|CurrentByte(stream) == 8|] MSMPPEEncryptionTypes |
    [|CurrentByte(stream) == 13|] MSBAPUsage |
    [|CurrentByte(stream) == 14|] MSLinkUtilizationThreshold |
    [|CurrentByte(stream) == 15|] MMSLinkDropTimeLimit |
    [|CurrentByte(stream) == 19|] MSOldARAPPassword |
    [|CurrentByte(stream) == 20|] MSNewARAPPassword |
    [|CurrentByte(stream) == 21|] MSARAPPasswordChangeReason |
    [|CurrentByte(stream) == 33|] MSARAPChallenge |
    [|CurrentByte(stream) == 9|] MSRASVendor |
    [|CurrentByte(stream) == 18|] MSRASVersion |
    [|CurrentByte(stream) == 22|] MSFilter |
    [|CurrentByte(stream) == 23|] MSAcctAuthType |
    [|CurrentByte(stream) == 24|] MSAcctEAPType |
    [|CurrentByte(stream) == 28|] MSPrimaryDNSServer |
    [|CurrentByte(stream) == 29|] MSSecondaryDNSServer |
    [|CurrentByte(stream) == 30|] MSPrimaryMBNSServer |
    [|CurrentByte(stream) == 31|] MSSecondaryMBNSServer |
    MicrosoftVendorSpecifixAttributes);

type VendorSpecificData[uint Length]
{
    binary Data with BinaryEncoding{Length = Length};
}

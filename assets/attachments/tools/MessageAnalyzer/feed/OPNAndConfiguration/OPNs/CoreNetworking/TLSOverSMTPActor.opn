module TLSOverSMTPActor with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "366320", Date = "07/17/2014"}
        ]
};

using Utility;
using Standard;
using TCP;
using SMTP;
using TLS;

// [RFC 5746]: in the section of "1.  Introduction"
autostart actor TLSOverSMTP(SMTP.Server server)
{
    SessionContext ClientContext = null;
    SessionContext ServerContext = null;
    TLS.Server EPT;
    
    process server accepts d:SMTP.MailPacket where d.Payload != nothing && (IsTlsHeader(d.Payload as binary))
    {
        if (ClientContext == null)
        {
            EPT = endpoint TLS.Server over server;
            InitializeContextPair(ref ClientContext, ref ServerContext);
            if (d.Origins[0] is seg:TCP.Segment)
            {
                InitializeTLSServerFromTCP(seg, MessageDirection.Accepts, DispathDecrytedMessageBack, EPT);
            }
        }

        TryDecodingAndDispatchingTLSMessage(d.Payload as binary, ClientContext, EPT, MessageDirection.Accepts);
    }
    
    process server issues d:SMTP.MailPacket where d.Payload != nothing && (IsTlsHeader(d.Payload as binary))
    {
        if (ServerContext == null)
        {
            EPT = endpoint TLS.Server over server;
            InitializeContextPair(ref ClientContext, ref ServerContext);
            if (d.Origins[0] is seg:TCP.Segment)
            {
                InitializeTLSServerFromTCP(seg, MessageDirection.Issues, DispathDecrytedMessageBack, EPT);
            }
        }

        TryDecodingAndDispatchingTLSMessage(d.Payload as binary, ServerContext, EPT, MessageDirection.Issues);
    }

    void DispathDecrytedMessageBack(binary bin, RecordLayers rls, TLS.Server server, MessageDirection direction)
    {
        if (rls.Origins[0] is segfirst:TCP.Segment &&
            rls.Origins[rls.Origins.Count - 1] is seglast:TCP.Segment)
        {
            DispathBackToTCP(bin, server, direction, segfirst, seglast);
        }
    }
}

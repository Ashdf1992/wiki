protocol TRAIL with
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "TRAIL",
    ShortName = "TRAIL",
    Description = "Has no public spec, so refer to the source code in Microsoft Network Monitor 3"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/16/2011"}
        ]
};

using Standard;
using Ethernet;
using Utility;
using SNAP;
using LinuxCookedMode;

endpoint Node 
    over Ethernet.Node | over SNAP.Node | over LinuxCookedMode.Node
    accepts Datagram;

// Since Bug 36618, change all the "binding" to actor temporarily.
//binding TRAILOverEthernet: Node over node:Ethernet.Node
//{
    //rule node accepts Ethernet.Frame{LengthOrType is $0x1984, MacClientData is d:Datagram from TRAILDecoder} =>
        //Node accepts d;
//}
//
//binding TRAILOverSNAP: Node over node:SNAP.Node
//{
    //rule node accepts SNAP.Segment{EtherType is $0x1984, Payload is d:Datagram from TRAILDecoder} =>
        //Node accepts d;
//}
//
//binding TRAILOverLinuxCookedMode: Node over node:LinuxCookedMode.Node
//{
    //rule node accepts LinuxCookedMode.Datagram{EthernetType is $0x1984, Payload is d:Datagram from TRAILDecoder} =>
        //Node accepts d;
//}

autostart actor TRAILOverEthernet(Ethernet.Node node)
{
    process node accepts f:Ethernet.Frame where f.LengthOrType == 0x1984
    {
        switch (f.MacClientData)
        {
            case d:Datagram from BinaryDecoder =>
                dispatch (endpoint Node over node) accepts d;
            default => 
                ThrowDecodingException("Trail", "Datagram");
        }
    }
}

autostart actor TRAILOverSNAP(SNAP.Node node)
{
    process node accepts s:SNAP.Segment where s.EtherType == 0x1984
    {
        switch (s.Payload)
        {
            case d:Datagram from BinaryDecoder =>
                dispatch (endpoint Node over node) accepts d;
            default => 
                ThrowDecodingException("Trail", "Datagram");
        }
    }
}

autostart actor TRAILOverLinuxCookedMode(LinuxCookedMode.Node node)
{
    process node accepts s:LinuxCookedMode.Datagram where s.EthernetType == 0x1984
    {
        switch (s.Payload)
        {
            case d:Datagram from BinaryDecoder =>
                dispatch (endpoint Node over node) accepts d;
            default => 
                ThrowDecodingException("Trail", "Datagram");
        }
    }
}

message Datagram
{
    string TrailID with BinaryEncoding{Length = 4,TextEncoding = TextEncoding.ASCII};
    Flags Flags;
    uint FrameType;
    ([|FrameType == 0x67|] BlockStatistics | 
    [|FrameType == 0x6A|] TrailComment | 
    binary) Data;
    
    override string ToString()
    {
        string displayStr = "Trail: ";
        switch (FrameType)
        {
            case  0x65 => displayStr += "Generic (";
            case  0x66 => displayStr += "BookMark (";
            case  0x67 => displayStr += "Capture Statistics (";
            case  0x68 => displayStr += "MESSAGE (";
            case  0x69 => displayStr += "Comment (";
            case  0x6A => displayStr += "Trail Comment (";
            default    => displayStr += "Unknown TRAIL Frame Type (";
        }
        displayStr += (FrameType as string) + ")";
        return displayStr;
    }
}

type Flags
{
    byte Reserved with BinaryEncoding {Width = 6};
    byte FS with BinaryEncoding {Width = 1};
    byte SS with BinaryEncoding {Width = 1};
    uint Unused with BinaryEncoding {Width = 24};
}

type BlockStatistics
{
    ushort BytesLeft;
    uint Version;
    ulong ElapsedMicroSecs;
    uint FramesCaptured;
    uint BytesCaptured;
    FilteredWhileCapturing FilteredWhileCapturing;
    SeenDuringCapture SeenDuringCapture;
    uint MulticastsRecieved;
    uint BroadcastsReceived;
    uint FramesDroppedFromCapture;
    uint FramesDroppedFromBuffer;
    MAC MAC;
    binary Padding;
}

type FilteredWhileCapturing
{
    uint Frames;
    uint Bytes;
    uint Multicasts;
    uint Broadcasts;
}

type SeenDuringCapture
{
    uint Frames;
    uint Bytes;
}

type MAC
{
    uint FramesRecieved;
    uint CRCErrors;
    ulong BytesRecieved;
    uint FramesDroppedDueToNoBuffers;
    uint MultiCastsReceived;
    uint BroadCastsReceived;
    uint FramesDroppedDueToHardwareErrors;
}

type TrailComment
{
    string TrailComment with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
}

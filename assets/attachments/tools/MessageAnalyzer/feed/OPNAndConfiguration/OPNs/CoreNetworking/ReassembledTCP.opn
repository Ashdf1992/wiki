protocol ReassembledTCP with
Documentation
{
    ProtocolName = "Virtual Transport Layer for protocols over TCP",
    ShortName = "ReassembledTCP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "375023", Date = "03/21/2015"}
        ]
};

using Standard;
using IANA;

// This is the virtualized data segment for upper layer's data access
message VirtualDataSegment
{
    IANA.Port SourcePort with Visualization {AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    IANA.Port DestinationPort with Visualization {AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    uint SequenceNumber;
    uint NextSequenceNumber;
    binary Payload with MimeDescription{Format = "text/plain"};

    override string ToString()
    {
        string summary = "TCP Virtual Reassembled Segment";
        summary += ", SrcPort: " + IANA.PortToServiceNameForAlias(SourcePort as ushort);
        summary += ", DstPort: " + IANA.PortToServiceNameForAlias(DestinationPort as ushort);
        if (Payload != null)
        {
            summary += ", Len: " + (Payload.Count as string);
        }
        summary += ", Seq Range: " + SequenceNumber.ToString() + " - " + NextSequenceNumber.ToString();
        return summary;
    }
}

annotation bool VirtualDataSegment#IsIncomplete;
annotation bool VirtualDataSegment#SegmentLost;

// Keep binary format of source and destination address for segment.
annotation binary VirtualDataSegment#SourceAddrBin;
annotation binary VirtualDataSegment#DestinationAddrBin;

string get TCPDiagnosis(this VirtualDataSegment m)
{
    string diagnosis = "";
    if (m#IsIncomplete != nothing && m#IsIncomplete as bool)
    {
        diagnosis = "Incomplete ";
    }
    if (m#SegmentLost != nothing && m#SegmentLost as bool)
    {
        diagnosis += "Segment-Lost ";
    }
    return diagnosis.Trim();
}

uint get PayloadLength(this VirtualDataSegment m)
{
    return m.Payload.Count as uint;
}

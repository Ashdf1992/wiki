protocol Truncation with
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "370642", Date = "11/14/2014"}
        ]
};

using EtwEvent;
using NdisEtwProvider;
using Ethernet;
using IPv4;
using IPv6;
using ICMP;
using ICMPv6;
using ESP;
using AH;
using GRE;
using TCP;
using UDP;
using HTTP;
using IANA;
using Standard;
using Utility;
using CapFile;
using PcapFile;

endpoint CoreNetworkingTruncationEndpoint accepts any message;

// Parse truncation choke-point message of Ndis provider
autostart actor TruncationDecoderActorForNdis(NdisEtwProvider.NdisEtwNode ndis)
{
    process ndis accepts m:NdisEtwVirtualDataMessage
        where m.IsSessionTruncated
            && (m#IsNdisEtwMetaData == nothing || !(m#IsNdisEtwMetaData as bool))
            && (m#EtwKeywords != nothing && ((m#EtwKeywords as ulong) & (NdisMedium.NdisMedium802_3 | NdisMedium.NdisMediumWan)) != 0)
    {
        DecodeAndDispatchTruncationMessage(m.Payload, m);
    }
}

// Parse truncation choke-point message of cap provider
autostart actor TruncationDecoderActorForCap(CapFile.CapFileEndpoint cap)
{
    process cap accepts cf:CapFile.CapFrame 
        where cf.IsSessionTruncated && (cf.MediaType is (MediaTypes.Ethernet | MediaTypes.Ethernet0))
    {
        DecodeAndDispatchTruncationMessage(cf.Payload, cf);
    }
}

// Parse truncation choke-point message of pcap provider(pcap)
autostart actor TruncationDecoderActorForPcap(PcapFile.PcapFileEndpoint pcap)
{
    process pcap accepts m:PcapFile.Packet
        where m.IsSessionTruncated && m.Network == PcapLinkTypeCode.LINKTYPE_ETHERNET
    {
        DecodeAndDispatchTruncationMessage(m.Payload, m);
    }
}

// Parse truncation choke-point message of pcapng provider(pcapng)
autostart actor TruncationDecoderActorForPcapng(PcapFile.PcapNgFileEndpoint pcapng)
{
    process pcapng accepts m:PcapFile.PacketNg
        where m.IsSessionTruncated && m.LinkType == PcapNgLinkTypeCode.LINKTYPE_ETHERNET
    {
        DecodeAndDispatchTruncationMessage(m.Payload, m);
    }
}

void DecodeAndDispatchTruncationMessage(binary payload, any message chokepointMsg)
{
    TruncationProtocolType nextProtocol = TruncationProtocolType.Ethernet;
    any message resultMsg= chokepointMsg;
        
    bool isIPv4;
    binary sourceAddr = null;
    binary destinationAddr = null;

    while (nextProtocol != TruncationProtocolType.None)
    {
        switch (nextProtocol)
        {
            case TruncationProtocolType.Ethernet =>
                switch (payload)
                {
                    case f:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[true]> =>
                        f#IsTruncated = true;
                        f.Origins = [resultMsg];
                        resultMsg = f;
                        payload = f.MacClientData;
                        nextProtocol = GetNextProtocolOfEthernet(f.LengthOrType);
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.IPv4 =>
                switch (payload)
                {
                    case d:IPv4.Datagram from BinaryDecoder =>
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = d.Payload;
                        nextProtocol = GetNextProtocolOfIP(d.Protocol);
                        sourceAddr = d.SourceAddress.Octets;
                        destinationAddr = d.DestinationAddress.Octets;
                        isIPv4 = true;
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.IPv6 =>
                switch (payload)
                {
                    case d:IPv6.Datagram from IPv6Decoder =>
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = d.Payload;
                        nextProtocol = GetNextProtocolOfIP(d.NextProtocol);
                        sourceAddr = d.SourceAddress.Octets;
                        destinationAddr = d.DestinationAddress.Octets;
                        isIPv4 = false;
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.ICMP =>
                switch (payload)
                {
                    case m:ICMP.DatagramWrapper from BinaryDecoder =>
                        ICMP.OperationContract.MessageHeader d = m.Value as ICMP.OperationContract.MessageHeader;
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = null;
                        nextProtocol = TruncationProtocolType.None;
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.IPv6ICMP =>
                switch (payload)
                {
                    case m:ICMPv6.DatagramWrapper from BinaryDecoder =>
                        ICMPv6.ICMPv6Contract.MessageType d = m.Value as ICMPv6.ICMPv6Contract.MessageType;
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = null;
                        nextProtocol = TruncationProtocolType.None;
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.TCP =>
                switch (payload)
                {
                    case s:TCP.Segment from BinaryDecoder =>
                        s#IsTruncated = true;
                        s.Origins = [resultMsg];
                        SetInitialSeqAckNumber(s, sourceAddr, destinationAddr, s.SourcePort, s.DestinationPort);
                        resultMsg = s;
                        payload = s.Payload;
                        set<ushort> ports = {s.SourcePort, s.DestinationPort};
                        nextProtocol = GetNextProtocolOfTCPorUDP(ref ports, payload);
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.UDP =>
                switch (payload)
                {
                    case d:UDP.Datagram from BinaryDecoder =>
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = d.Payload;
                        set<ushort> ports = {d.SourcePort, d.DestinationPort};
                        nextProtocol = GetNextProtocolOfTCPorUDP(ref ports, payload);
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.ESP =>
                var p = ESPDecoder(payload);
                if (p == null)
                {
                    nextProtocol = TruncationProtocolType.None;
                }
                else if (p is ESP.EncryptedPacket)
                {
                    var ep = p as ESP.EncryptedPacket;
                    ep#IsTruncated = true;
                    ep.Origins = [resultMsg];
                    resultMsg = ep;
                    nextProtocol = TruncationProtocolType.None;
                }
                else
                {
                    var mm = p as ESP.Packet;
                    mm#IsTruncated = true;
                    mm.Origins = [resultMsg];
                    resultMsg = mm;
                    payload = mm.Payload;
                    nextProtocol = GetNextProtocolOfIP(mm.Trailer.NextHeader);
                }
            case TruncationProtocolType.AH =>
                switch (payload)
                {
                    case d:AH.Msg from BinaryDecoder =>
                        d#IsTruncated = true;
                        d.Origins = [resultMsg];
                        resultMsg = d;
                        payload = d.Payload;
                        nextProtocol = GetNextProtocolOfIP(d.NextHeader);
                    default => 
                        nextProtocol = TruncationProtocolType.None;; 
                }
            case TruncationProtocolType.GRE =>
                switch (payload)
                {
                    case p:GRE.Packet from BinaryDecoder =>
                        p#IsTruncated = true;
                        p.Origins = [resultMsg];
                        resultMsg = p;
                        payload = p.Payload;
                        nextProtocol = GetNextProtocolOfGRE(p.ProtocolType);
                    default => 
                        nextProtocol = TruncationProtocolType.None;
                }
            case TruncationProtocolType.HTTP => 
                if (HTTPRequestDecoder(payload, [resultMsg]) is req:HttpContract.Request)
                {
                    req#IsTruncated = true;
                    resultMsg = req;
                    nextProtocol = TruncationProtocolType.None;
                    payload = null;
                    req#SourceAddress = isIPv4 ? new IPv4Address{Octets = sourceAddr} : new IPv6Address{Octets = sourceAddr};
                    req#DestinationAddress = isIPv4 ? new IPv4Address{Octets = destinationAddr} : new IPv6Address{Octets = destinationAddr};
                }
                else if (HTTPResponseDecoder(payload, [resultMsg]) is res:HttpContract.Response)
                {
                    res#IsTruncated = true;
                    resultMsg = res;
                    nextProtocol = TruncationProtocolType.None;
                    payload = null;
                    res#SourceAddress = isIPv4 ? new IPv4Address{Octets = sourceAddr} : new IPv6Address{Octets = sourceAddr};
                    res#DestinationAddress = isIPv4 ? new IPv4Address{Octets = destinationAddr} : new IPv6Address{Octets = destinationAddr};
                }
                else
                {
                    nextProtocol = TruncationProtocolType.None;
                }
            default =>
                nextProtocol = TruncationProtocolType.None;
        }
    }
    dispatch endpoint CoreNetworkingTruncationEndpoint accepts resultMsg;
}

// The range of IP's ProtocolType is 0~255, it's type of byte.
// Redefine another enum pattern listing all truncation related protocol, 
// it shares entry with IP's ProtocolType.
pattern TruncationProtocolType = enum ushort
{
    ICMP        = 1,
    TCP         = 6,
    IPv4        = 4,
    UDP         = 17,
    IPv6        = 41,
    GRE         = 47,
    ESP         = 50,
    AH          = 51,
    IPv6ICMP    = 58, //ICMPv6
    Ethernet    = 0xFF01,
    IKE         = 0xFF02,
    HTTP        = 0xFF03,
    AuthIP      = 0xFF04,
    None        = 0xFFFF,
};

//   -------------------------------------------------------------
// Bellow methods are defined to convert next protocol's indication to unified presentation.
TruncationProtocolType GetNextProtocolOfEthernet(ushort etherType)
{
    switch (etherType)
    {
        case 0x0800 //EtherType.IPv4 
            => return TruncationProtocolType.IPv4;
        case 0x86DD //EtherType.IPv6
            => return TruncationProtocolType.IPv6;
        default
            => return TruncationProtocolType.None;
    }
}

TruncationProtocolType GetNextProtocolOfIP(ushort protocolType)
{
    if (protocolType is TruncationProtocolType)
    {
        return protocolType as TruncationProtocolType;
    }
    else
    {
        return TruncationProtocolType.None;
    }
}

TruncationProtocolType GetNextProtocolOfGRE(ushort greProtocolType)
{
    switch (greProtocolType)
    {
        case GREProtocolType.TransparentEthernetBridging 
            => return TruncationProtocolType.Ethernet;
        case GREProtocolType.IP
            => return TruncationProtocolType.IPv4;
        case GREProtocolType.IPv6
            => return TruncationProtocolType.IPv6;
        case GREProtocolType.TCP 
            => return TruncationProtocolType.TCP;
        case GREProtocolType.UDP
            => return TruncationProtocolType.UDP;
        case GREProtocolType.AH
            => return TruncationProtocolType.AH;
        case GREProtocolType.ESP
            => return TruncationProtocolType.ESP;
        default
            => return TruncationProtocolType.None;
    }
}

TruncationProtocolType GetNextProtocolOfTCPorUDP(ref set<ushort> ports, binary payload)
{
    if (payload.Count == 0)
    {
        return TruncationProtocolType.None;
    }
    
    if (ports[IANA.Port.HTTP] || ports[IANA.Port.HTTPAlternate])
    {
        return TruncationProtocolType.HTTP;
    }
    else if(ports[IANA.Port.NATT] && payload.Segment(0,4) != $[00000000] && payload.Count > 12)
    {
        return TruncationProtocolType.ESP;
    }
    else
    {
        return TruncationProtocolType.None;
    }
}

//   -------------------------------------------------------------
// Re-define decoder to parse HTTP
optional HttpContract.Request HTTPRequestDecoder(binary bin, array<any message> origins)
{
    stream s = bin;
    var reqHeader = RequestHeader(s);
    if (reqHeader == nothing)
    {
        return nothing;
    }
    else
    {
        var req = reqHeader as HttpContract.Request;
        req.Payload = s.PeekBytes(s.BitPosition);
        AssociateRequest(req, s.BytePosition, s.ByteLength, bin, origins);
        return req;
    }
}

optional HttpContract.Response HTTPResponseDecoder(binary bin, array<any message> origins)
{
    stream s = bin;
    var resHeader = ResponseHeader(s);
    if (resHeader == nothing)
    {
        return nothing;
    }
    else
    {
        var res = resHeader as HttpContract.Response;
        res.Payload = s.PeekBytes(s.BitPosition);
        AssociateResponseAndDecompressResponsePayload(res, s.BytePosition, s.ByteLength, bin, origins);
        return res;
    }
}

endpoint TCPEndpoint[binary Address1, binary Address2, ushort Port1, ushort Port2] accepts any message
{
    // Declare types as "optional unit", so that it is easier to assign to annotation.
    // Initial Seq/Ack number from small port/address to big one.
    optional uint SmallToBigInitialSequenceNumber = nothing;
    optional uint SmallToBigInitialAckNumber = nothing;
    // Initial Seq/Ack number from big port/address to small one.
    optional uint BigToSmallInitialSequenceNumber = nothing;
    optional uint BigToSmallInitialAckNumber = nothing;
}

void SetInitialSeqAckNumber(Segment s, binary srcAddr, binary destAddr, ushort srcPort, ushort destPort)
{
    // Indicate "s" is sent from small port/address to big port/address.
    bool isSmallToBig; 
    TCPEndpoint ep;
    // Identify endpoint instance to hold initial sequence/ack number of both directions.
    // Use small port/address prior to big one.
    if (srcPort < destPort)
    {
        ep = endpoint TCPEndpoint[srcAddr, destAddr, srcPort, destPort];
        isSmallToBig = true;
    }
    else if (srcPort > destPort)
    {
        ep = endpoint TCPEndpoint[destAddr, srcAddr, destPort, srcPort];
        isSmallToBig = false;
    }
    else  // srcPort == destPort
    {
        // Small address prior to big one if ports are equal.
        if (srcAddr < destAddr)
        {
            ep = endpoint TCPEndpoint[srcAddr, destAddr, srcPort, destPort];
            isSmallToBig = true;
        }
        else
        {
            ep = endpoint TCPEndpoint[destAddr, srcAddr, destPort, srcPort];
            isSmallToBig = false;
        }
    }
    if (isSmallToBig)
    {
        if (ep.SmallToBigInitialSequenceNumber == nothing) 
        {
            // Initialize when first segment of current direction arrives.
            ep.SmallToBigInitialSequenceNumber = s.SequenceNumber;
            ep.BigToSmallInitialAckNumber = s.SequenceNumber;
        }
        s#InitialSequenceNumber = ep.SmallToBigInitialSequenceNumber;
        s#InitialAckNumber = ep.SmallToBigInitialAckNumber;
    }
    else
    {
        if (ep.BigToSmallInitialSequenceNumber == nothing) 
        {
            // Initialize when first segment of opposite direction arrives.
            ep.BigToSmallInitialSequenceNumber = s.SequenceNumber;
            ep.SmallToBigInitialAckNumber = s.SequenceNumber;
        }
        s#InitialSequenceNumber = ep.BigToSmallInitialSequenceNumber;
        s#InitialAckNumber = ep.BigToSmallInitialAckNumber;
    }
} 

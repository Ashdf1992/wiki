protocol ICMP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Internet Control Message Protocol",
    ShortName = "ICMP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
        new Reference{Name = "RFC 777"},
        new Reference{Name = "RFC 792"},
        new Reference{Name = "RFC 950"},
        new Reference{Name = "RFC 1191"},
        new Reference{Name = "RFC 1256"},
        new Reference{Name = "RFC 1393"},
        new Reference{Name = "RFC 1475"},
        new Reference{Name = "RFC 1788"},
        new Reference{Name = "RFC 1812"},
        new Reference{Name = "RFC 2521"},
        new Reference{Name = "RFC 4065"},
    ],
    RevisionSummary = 
    [
        new Revision{Class = RevisionClass.Major, Version = "366712", Date = "07/24/2014"}
    ]
};

using IPv4;
using IPv6;
using Standard;
using IANA;
using Utility;
using WFPCapture;
using InfrastructureResources;
using Diagnostics;

endpoint Node[binary LocalAddress, binary RemoteAddress]
    consumes OperationContract provides OperationContract;

autostart actor ICMPOverIPv4(IPv4.Node node)
{
    process node accepts d:IPv4.Datagram where d.Protocol == ProtocolType.ICMP 
    {
        DecodeDatagram(d.SourceAddress.FlatAddress, d.DestinationAddress.FlatAddress, d.Payload, false);
    }
}

autostart actor ICMPOverIPv6(IPv6.Node node)
{
    optional bool isWFP = nothing;
    
    process node accepts d:IPv6.Datagram where d.NextProtocol == ProtocolType.ICMP 
    {
        // Whether the data is from the firewall provider.
        if (isWFP == nothing)
        {
            isWFP = node.GetTransport<WFPCapture.WFPFrame>() != null;
        }
        DecodeDatagram(d.SourceAddress.FlatAddress, d.DestinationAddress.FlatAddress, d.Payload, isWFP as bool);
    }
}

contract OperationContract
{
    // RFC 777 and 792
    accepts EchoRequestMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        binary Data;
        invariant Type == 8 && ValidationCheck(Code == 0, null, Diagnostics.Format(INFRASTRUCTURE_STR_CHECK_VALUE, 
            ["ICMP", "Code", INFRASTRUCTURE_STR_MESSAGE, "EchoRequestMessage", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, Code]));
    }

    // RFC 777 and 792
    accepts EchoReplyMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        binary Data;
        invariant Type == 0 && ValidationCheck(Code == 0, null, Diagnostics.Format(INFRASTRUCTURE_STR_CHECK_VALUE, 
            ["ICMP", "Code", INFRASTRUCTURE_STR_MESSAGE, "EchoReplyMessage", INFRASTRUCTURE_STR_MUST, INFRASTRUCTURE_STR_ZERO, Code]));
    }

    issues virtual operation EchoOp
    {
        in ushort ReqIdentifier = identifier;
        in ushort ReqSequenceNumber = sequenceNumber;
        in binary ReqData = data;
        out ushort ResIdentifier = identifier;
        out ushort ResSequenceNumber = sequenceNumber;
        out binary ResData = resData;
        
        override string ToString()
        {
            return "Echo Operation";
        }
    } =
    backtrack(OperationContract.EchoRequestMessage{})
    accepts OperationContract.EchoRequestMessage{Identifier is identifier:ushort, SequenceNumber is sequenceNumber:ushort, Data is data:binary}
    later
    accepts OperationContract.EchoReplyMessage{Identifier == identifier, SequenceNumber == sequenceNumber, Data is resData:binary};

    // RFC 777 and 792
    accepts TimestampMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        uint OriginateTimestamp;
        uint ReceiveTimestamp;
        uint TransmitTimestamp;
        invariant Type == 13 && Code == 0;
    }

    // RFC 777 and 792
    accepts TimestampReplyMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        uint OriginateTimestamp;
        uint ReceiveTimestamp;
        uint TransmitTimestamp;
        invariant Type == 14 && Code == 0;
    }

    issues virtual operation TimestampOp
    {
        in ushort ReqIdentifier = identifier;
        in ushort ReqSequenceNumber = sequenceNumber;
        in uint ReqOriginateTimestamp = reqOriginateTimestamp;
        in uint ReqReceiveTimestamp = reqReceiveTimestamp;
        in uint ReqTransmitTimestamp = reqTransmitTimestamp;
        out ushort ResIdentifier = identifier;
        out ushort ResSequenceNumber = sequenceNumber;
        out uint ResOriginateTimestamp = resOriginateTimestamp;
        out uint ResReceiveTimestamp = resReceiveTimestamp;
        out uint ResTransmitTimestamp = resTransmitTimestamp;
        
        override string ToString()
        {
            return "TimeStamp Operation";
        }
    } =
    backtrack(OperationContract.TimestampMessage{})
    accepts OperationContract.TimestampMessage{Identifier is identifier:ushort, SequenceNumber is sequenceNumber:ushort, OriginateTimestamp is reqOriginateTimestamp:uint,
        ReceiveTimestamp is reqReceiveTimestamp:uint, TransmitTimestamp is reqTransmitTimestamp:uint}
    later
    accepts OperationContract.TimestampReplyMessage{Identifier == identifier, SequenceNumber == sequenceNumber, OriginateTimestamp is resOriginateTimestamp:uint,
        ReceiveTimestamp is resReceiveTimestamp:uint, TransmitTimestamp is resTransmitTimestamp:uint};

    // RFC 792
    accepts InformationRequestMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        invariant Type == 15 && Code == 0;
    }

    // RFC 792
    accepts InformationReplyMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        invariant Type == 16 && Code == 0;
    }

    issues virtual operation InformationOp
    {
        in ushort ReqIdentifier = identifier;
        in ushort ReqSequenceNumber = sequenceNumber;
        out ushort ResIdentifier = identifier;
        out ushort ResSequenceNumber = sequenceNumber;
        
        override string ToString()
        {
            return "Information Operation";
        }
    } =
    backtrack(OperationContract.InformationRequestMessage{})
    accepts OperationContract.InformationRequestMessage{Identifier is identifier:ushort, SequenceNumber is sequenceNumber:ushort}
    later
    accepts OperationContract.InformationReplyMessage{Identifier == identifier, SequenceNumber == sequenceNumber};

    // RFC 950
    accepts AddressMaskRequestMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        IPv4Address AddressMask;
        invariant Type == 17 && Code == 0;
    }

    // RFC 950
    accepts AddressMaskReplyMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        IPv4Address AddressMask;
        invariant Type == 18 && Code == 0;
    }

    issues virtual operation AddressMaskOp
    {
        in ushort ReqIdentifier = identifier;
        in ushort ReqSequenceNumber = sequenceNumber;
        in IPv4Address ReqAddressMask = reqAddressMask;
        out ushort ResIdentifier = identifier;
        out ushort ResSequenceNumber = sequenceNumber;
        out IPv4Address ResAddressMask = resAddressMask;
        
        override string ToString()
        {
            return "AddressMask Operation";
        }
    } =
    backtrack(OperationContract.AddressMaskRequestMessage{})
    accepts OperationContract.AddressMaskRequestMessage{Identifier is identifier:ushort, SequenceNumber is sequenceNumber:ushort, AddressMask is reqAddressMask:IPv4Address}
    later
    accepts OperationContract.AddressMaskReplyMessage{Identifier == identifier, SequenceNumber == sequenceNumber, AddressMask is resAddressMask:IPv4Address};

    // RFC 777 and 792
    message DestinationUnreachableMessage : MessageHeader
    {
        uint Unused;
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 3 && Code in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; // RFC 1812, section 5.2.7.1
    }

    // RFC 777 and 792
    message SourceQuenchMessage : MessageHeader
    {
        uint Unused;
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 4 && Code == 0;
    }

    // RFC 777 and 792
    message RedirectMessage : MessageHeader
    {
        IPv4Address GatewayInternetAddress;
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 5 && Code in {0, 1, 2, 3};
    }

    // RFC 1256
    message RouterAdvertisementMessage : MessageHeader
    {
        byte NumAddrs;
        byte AddrEntrySize where ValidationCheck(value == 2, null, "ICMP: The AddrEntrySize in message RouterAdvertisementMessage should be set to 2.");
        ushort Lifetime;
        array<Array> RouterAddressandPreferenceLevel with BinaryEncoding{Length = NumAddrs};
        invariant Type == 9 && Code == 0;
    }

    // RFC 1256
    message RouterSolicitationMessage : MessageHeader
    {
        uint Reserved;
        invariant Type == 10 && Code == 0;
    }

    // RFC 777 and 792
    message TimeExceededMessage : MessageHeader
    {
        uint Unused;
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 11 && Code in {0, 1};
    }

    // RFC 777 and 792
    message ParameterProblemMessage : MessageHeader
    {
        byte Pointer;
        array<byte> Unused with BinaryEncoding{Length = 3};
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 12 && Code == 0;
    }

    // RFC 1393
    message TracerouteMessage : MessageHeader
    {
        ushort IDNumber;
        ushort Unused;
        ushort OutboundHopCount;
        ushort ReturnHopCount;
        uint OutputLinkSpeed;
        uint OutputLinkMTU;
        invariant Type == 30 && Code in {0, 1};
    }

    // RFC 1475
    message ConversionFailedMessage : MessageHeader
    {
        uint PointerToProblemArea;
        binary Data;
        invariant Type == 31 && Code in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
    }

    // RFC 1788
    message DomainNameRequestMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        invariant Type == 37 && Code == 0;
    }

    // RFC 1788
    message DomainNameReplyMessage : MessageHeader
    {
        ushort Identifier;
        ushort SequenceNumber;
        uint TimeToLive;
        optional array<DomainNameReplyMessageNames | binary> Names; // The length of this field is determined from the total length of the datagram.
        invariant Type == 38 && Code == 0;
    }

    // RFC 2521
    message SecurityFailuresMessage : MessageHeader
    {
        ushort Reserved;
        ushort Pointer;
        optional InternetHeaderFormat InternetHeader;
        optional [|InternetHeader == nothing|] binary Data;
        invariant Type == 40 && Code in {0, 1, 2, 3, 4, 5};
    }

    // RFC 4065
    message ExperimentalMobilitySubtypeFormatandRegistryMessage : MessageHeader
    {
        byte Subtype;
        array<byte> Reserved with BinaryEncoding{Length = 3};
        binary Options;
        invariant Type == 41 || Type == 150;
    }

    message ReservedMessage : MessageHeader
    {
        binary Data;
        invariant (Type > 41 && Type < 150) || (Type > 150 && Type <= 255);
    }
    
    message MessageHeader
    {
        byte Type;
        byte Code where ErrorCodeIf(Type in {MessageType.DestinationUnreachable, MessageType.Redirect, MessageType.RouterAdvertisement, MessageType.TimeExceeded, 
            MessageType.ParameterProblem, MessageType.Traceroute, MessageType.ConversionError, MessageType.SecurityFailures}, this, MessageNaming(Type, value));
        ushort Checksum;

        override string ToString()
        {
            return MessageNaming(Type, Code);
        }
    }
}

// RFC 1256
type Array
{
    IPv4Address RouterAddress;
    IPv4Address PreferenceLevel;
}

// RFC 1475
type InternetHeaderFormat
{
    (byte where value == 4) Version with BinaryEncoding{Width = 4};
    byte IHL with BinaryEncoding{Width = 4};
    DifferentiatedServicesField TypeofService;
    ushort TotalLength where ValidationCheck(value >= 20, null, "ICMP: The TotalLength in type InternetHeaderFormat should be at least 20.");
    ushort Identification;
    byte Reserved with BinaryEncoding{Width = 1};
    byte DF with BinaryEncoding{Width = 1};
    byte MF with BinaryEncoding{Width = 1};
    ushort FragmentOffset with BinaryEncoding{Width = 13};
    byte TimeToLive;
    ProtocolType Protocol;
    ushort HeaderChecksum;
    IPv4Address SourceAddress;
    IPv4Address DestinationAddress;
    optional [| IHL > 5 |] array<IPv4Option> Options with BinaryEncoding{ WidthForComposedType = (IHL * 4 - 20) * 8};
    optional [|stream.RemainingBitLength > 0|] 
        ([|Protocol == ProtocolType.TCP|] TCPHeader
        | [|Protocol == ProtocolType.UDP|] UDPHeader
        | binary) OriginalIPPayload;
}

// RFC 777 and 792
pattern MessageType = enum byte
{
    EchoReply = 0,
    DestinationUnreachable = 3,
    SourceQuench = 4,
    Redirect = 5,
    Echo = 8,
    RouterAdvertisement = 9,
    RouterSolicitation = 10,
    TimeExceeded = 11,
    ParameterProblem = 12,
    Timestamp = 13,
    TimestampReply = 14,
    InformationRequest = 15,
    InformationReply = 16,
    AddressMaskRequest = 17,
    AddressMaskReply = 18,
    Traceroute = 30,
    ConversionError = 31,
    DomainNameRequest = 37,
    DomainNameReply = 38,
    SecurityFailures = 40,
    ExperimentalMobilitySubtypeFormatandRegistry = 41
};

pattern DomainNameReplyMessageNames = [|RemainingBitLength(stream) >= 8|]
    ([|((CurrentByte(stream) & 0xC0) == 0x00)|] DomainNameType |
    [|((CurrentByte(stream) & 0xC0) == 0xC0)|] PointerType);
        
type DomainNameType
{
    byte Length;
    binary Value with BinaryEncoding{Length = Length};
}

type PointerType
{
    byte Flag with BinaryEncoding{Width = 2};
    ushort Offset with BinaryEncoding{Width = 14};
}

// ICMP outbound message type observed on source host.
const set<byte> OutBoundMessageType = {MessageType.Echo,
                        MessageType.Timestamp,
                        MessageType.InformationRequest,
                        MessageType.AddressMaskRequest,
                        MessageType.DomainNameRequest};

pattern Datagram = [|RemainingBitLength(stream) >= 8|]
    (
        [|CurrentByte(stream) == 0|] OperationContract.EchoReplyMessage |
        [|CurrentByte(stream) == 3|] OperationContract.DestinationUnreachableMessage |
        [|CurrentByte(stream) == 4|] OperationContract.SourceQuenchMessage |
        [|CurrentByte(stream) == 5|] OperationContract.RedirectMessage |
        [|CurrentByte(stream) == 8|] OperationContract.EchoRequestMessage |
        [|CurrentByte(stream) == 9|] OperationContract.RouterAdvertisementMessage |
        [|CurrentByte(stream) == 10|] OperationContract.RouterSolicitationMessage |
        [|CurrentByte(stream) == 11|] OperationContract.TimeExceededMessage |
        [|CurrentByte(stream) == 12|] OperationContract.ParameterProblemMessage |
        [|CurrentByte(stream) == 13|] OperationContract.TimestampMessage |
        [|CurrentByte(stream) == 14|] OperationContract.TimestampReplyMessage |
        [|CurrentByte(stream) == 15|] OperationContract.InformationRequestMessage |
        [|CurrentByte(stream) == 16|] OperationContract.InformationReplyMessage |
        [|CurrentByte(stream) == 17|] OperationContract.AddressMaskRequestMessage |
        [|CurrentByte(stream) == 18|] OperationContract.AddressMaskReplyMessage |
        [|CurrentByte(stream) == 30|] OperationContract.TracerouteMessage |
        [|CurrentByte(stream) == 31|] OperationContract.ConversionFailedMessage |
        [|CurrentByte(stream) == 37|] OperationContract.DomainNameRequestMessage |
        [|CurrentByte(stream) == 38|] OperationContract.DomainNameReplyMessage |
        [|CurrentByte(stream) == 40|] OperationContract.SecurityFailuresMessage |
        [|CurrentByte(stream) == 41 || CurrentByte(stream) == 150|] OperationContract.ExperimentalMobilitySubtypeFormatandRegistryMessage | 
        [|((CurrentByte(stream)  > 41 && CurrentByte(stream) < 150) || (CurrentByte(stream)  > 150 && CurrentByte(stream) <= 255))|] OperationContract.ReservedMessage
    );

type DatagramWrapper
{
    Datagram Value;
}

// Decode ICMP segment and dispatch to ICMP layer
void DecodeDatagram(binary sourceAddress, binary destinationAddress, stream s, bool isWFP)
{
    if (BinaryDecoder<ICMP.DatagramWrapper>(s) is d:ICMP.DatagramWrapper)
    {
        OperationContract.MessageHeader m = d.Value as OperationContract.MessageHeader;
        // It need to disable the checksum validation for outbound message
        if (!(isWFP && OutBoundMessageType[m.Type]))
        {
            ValidationCheck(Utility.ValidateCheckSum(s.PeekBytes(0), m.Checksum), m, "ICMP: ICMP Checksum is invalid.");
        }
            
        if (sourceAddress < destinationAddress)
        {
            dispatch endpoint Node[sourceAddress, destinationAddress] accepts m;
        }
        else
        {
            dispatch endpoint Node[destinationAddress, sourceAddress] accepts m;
        }
    }
    else
    {
        s = s.PeekBytes(0);
        if (RemainingBitLength(s) >= 8)
        {
            byte currentByte = CurrentByte(s);
            if (currentByte in ICMPMessageNameMap)
                ThrowDecodingException("ICMP", ICMPMessageNameMap[currentByte]);
            else if ((currentByte > 41 && currentByte < 150) || (currentByte > 150 && currentByte <= 255))
                ThrowDecodingException("ICMP", "ReservedMessage");
            else
                ThrowDecodingException("ICMP");
        }
        else
            ThrowDecodingException("ICMP");
    }
}

const map<byte, string> ICMPMessageNameMap = 
{
    0 -> "EchoReplyMessage",
    3 -> "DestinationUnreachableMessage",
    4 -> "SourceQuenchMessage",
    5 -> "RedirectMessage",
    8 -> "EchoRequestMessage",
    9 -> "RouterAdvertisementMessage",
    10 -> "RouterSolicitationMessage",
    11 -> "TimeExceededMessage",
    12 -> "ParameterProblemMessage",
    13 -> "TimestampMessage",
    14 -> "TimestampReplyMessage",
    15 -> "InformationRequestMessage",
    16 -> "InformationReplyMessage",
    17 -> "AddressMaskRequestMessage",
    18 -> "AddressMaskReplyMessage",
    30 -> "TracerouteMessage",
    31 -> "ConversionFailedMessage",
    37 -> "DomainNameRequestMessage",
    38 -> "DomainNameReplyMessage",
    40 -> "SecurityFailuresMessage",
    41 -> "ExperimentalMobilitySubtypeFormatandRegistryMessage",
    150 -> "ExperimentalMobilitySubtypeFormatandRegistryMessage",
};

string MessageNaming(byte messageType, byte messageCode)
{
    if (messageType == MessageType.EchoReply)
    {
        return "Echo Reply";
    }
    else if (messageType == MessageType.DestinationUnreachable)
    {
        switch (messageCode)
        {
            case 0  => return "Destination Unreachable, Network unreachable error.";
            case 1  => return "Destination Unreachable, Host unreachable error.";
            case 2  => return "Destination Unreachable, Protocol unreachable error.";
            case 3  => return "Destination Unreachable, Port unreachable error.";
            case 4  => return "Destination Unreachable, The datagram is too big.";
            case 5  => return "Destination Unreachable, Source route failed error.";
            case 6  => return "Destination Unreachable, Destination network unknown error.";
            case 7  => return "Destination Unreachable, Destination host unknown error.";
            case 8  => return "Destination Unreachable, Source host isolated error.";
            case 9  => return "Destination Unreachable, The destination network is administratively prohibited.";
            case 10 => return "Destination Unreachable, The destination host is administratively prohibited.";
            case 11 => return "Destination Unreachable, The network is unreachable for Type Of Service.";
            case 12 => return "Destination Unreachable, The host is unreachable for Type Of Service.";
            case 13 => return "Destination Unreachable, Communication Administratively Prohibited.";
            case 14 => return "Destination Unreachable, Host precedence violation.";
            case 15 => return "Destination Unreachable, Precedence cutoff in effect.";
            default => return "Destination Unreachable, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.SourceQuench)
    {
        return "Source Quench";
    }
    else if (messageType == MessageType.Redirect)
    {
        switch (messageCode)
        {
            case 0  => return "Redirect, Network error.";
            case 1  => return "Redirect, Host error.";
            case 2  => return "Redirect, TOS and network error.";
            case 3  => return "Redirect, TOS and host error.";
            default => return "Redirect, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.Echo)
    {
        return "Echo Request";
    }
    else if (messageType == MessageType.RouterAdvertisement)
    {
        switch (messageCode)
        {
            case 0  => return "Router Advertisement, Normal router advertisement.";
            case 16 => return "Router Advertisement, Does not route common traffic.";
            default => return "Router Advertisement, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.RouterSolicitation)
    {
        return "Router Solicitation";
    }
    else if (messageType == MessageType.TimeExceeded)
    {
        switch (messageCode)
        {
            case 0  => return "Time Exceeded, Time to live (TTL) equals 0 during transit.";
            case 1  => return "Time Exceeded, Fragment reassembly timeout.";
            default => return "Time Exceeded, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.ParameterProblem)
    {
        switch (messageCode)
        {
            case 0  => return "Parameter Problem, Invalid IP header.";
            case 1  => return "Parameter Problem, A required option is missing.";
            default => return "Parameter Problem, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.Timestamp)
    {
        return "Timestamp";
    }
    else if (messageType == MessageType.TimestampReply)
    {
        return "Timestamp Reply";
    }
    else if (messageType == MessageType.InformationRequest)
    {
        return "Information Request";
    }
    else if (messageType == MessageType.InformationReply)
    {
        return "Information Reply";
    }
    else if (messageType == MessageType.AddressMaskRequest)
    {
        return "Address Mask Request";
    }
    else if (messageType == MessageType.AddressMaskReply)
    {
        return "Address Mask Reply";
    }
    else if (messageType == MessageType.Traceroute)
    {
        switch (messageCode)
        {
            case 0  => return "Traceroute, Outbound Packet successfully forwarded.";
            case 1  => return "Traceroute, No route for Outbound Packet. The packet was discarded.";
            default => return "Traceroute, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.ConversionError)
    {
        switch (messageCode)
        {
            case 0  => return "Conversion Error, Unknown or unspecified error.";
            case 1  => return "Conversion Error, Don't convert option present.";
            case 2  => return "Conversion Error, Unknown mandatory option present.";
            case 3  => return "Conversion Error, Known unsupported option present.";
            case 4  => return "Conversion Error, Unsupported transport protocol.";
            case 5  => return "Conversion Error, Overall length exceeded.";
            case 6  => return "Conversion Error, IP header length exceeded.";
            case 7  => return "Conversion Error, Transport protocol > 255.";
            case 8  => return "Conversion Error, Port conversion out of range.";
            case 9  => return "Conversion Error, Transport header length exceeded.";
            case 10 => return "Conversion Error, 32-bit rollover missing and ACK set.";
            case 11 => return "Conversion Error, Unknown mandatory transport option present.";
            default => return "Conversion Error, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.DomainNameRequest)
    {
        return "Domain Name Request";
    }
    else if (messageType == MessageType.DomainNameReply)
    {
        return "Domain Name Reply";
    }
    else if (messageType == MessageType.SecurityFailures)
    {
        switch (messageCode)
        {
            case 0  => return "Security Failures, Bad SPI.";
            case 1  => return "Security Failures, Authentication Failed.";
            case 2  => return "Security Failures, Decompression Failed.";
            case 3  => return "Security Failures, Decryption Failed.";
            case 4  => return "Security Failures, Need Authentication.";
            case 5  => return "Security Failures, Need Authorization.";
            default => return "Security Failures, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.ExperimentalMobilitySubtypeFormatandRegistry)
    {
        return "Experimental Mobility Subtype Formatand Registry";
    }
    else
    {
        return "Reserved";
    }
}

string ErrorCodeString(byte messageType, byte messageCode)
{
    if (messageType == MessageType.DestinationUnreachable)
    {
        switch (messageCode)
        {
            case 0  =>
                return "Destination Unreachable, Network unreachable error.";
            case 1  =>
                return "Destination Unreachable, Host unreachable error.";
            case 2  => 
                return "Destination Unreachable, Protocol unreachable error.";
            case 3  => 
                return "Destination Unreachable, Port unreachable error.";
            case 4  => 
                return "Destination Unreachable, The datagram is too big.";
            case 5  =>
                return "Destination Unreachable, Source route failed error.";
            case 6  => 
                return "Destination Unreachable, Destination network unknown error.";
            case 7  => 
                return "Destination Unreachable, Destination host unknown error.";
            case 8  => 
                return "Destination Unreachable, Source host isolated error.";
            case 9  => 
                return "Destination Unreachable, The destination network is administratively prohibited.";
            case 10 => 
                return "Destination Unreachable, The destination host is administratively prohibited.";
            case 11 => 
                return "Destination Unreachable, The network is unreachable for Type Of Service.";
            case 12 => 
                return "Destination Unreachable, The host is unreachable for Type Of Service.";
            case 13 => 
                return "Destination Unreachable, Communication Administratively Prohibited.";
            case 14 => 
                return "Destination Unreachable, Host precedence violation.";
            case 15 => 
                return "Destination Unreachable, Precedence cutoff in effect.";
            default => 
                return "Destination Unreachable, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.Redirect)
    {
        switch (messageCode)
        {
            case 0  => 
                return "Redirect, Network error.";
            case 1  => 
                return "Redirect, Host error.";
            case 2  => 
                return "Redirect, TOS and network error.";
            case 3  => 
                return "Redirect, TOS and host error.";
            default => 
                return "";
        }
    }
    else if (messageType == MessageType.TimeExceeded)
    {
        switch (messageCode)
        {
            case 0  => 
                return "Time Exceeded, Time to live (TTL) equals 0 during transit.";
            case 1  => 
                return "Time Exceeded, Fragment reassembly timeout.";
            default => 
                return "Time Exceeded, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.ParameterProblem)
    {
        switch (messageCode)
        {
            case 0  => 
                return "Parameter Problem, Invalid IP header.";
            case 1  => 
                return "Parameter Problem, A required option is missing.";
            default => 
                return "Parameter Problem, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.Traceroute)
    {
        switch (messageCode)
        {
            case 1  => 
                return "Traceroute, No route for Outbound Packet. The packet was discarded.";
            default => 
                return "";
        }
    }
    else if (messageType == MessageType.ConversionError)
    {
        switch (messageCode)
        {
            case 0  => 
                return "Conversion Error, Unknown or unspecified error.";
            case 1  => 
                return "Conversion Error, Don't convert option present.";
            case 2  => 
                return "Conversion Error, Unknown mandatory option present.";
            case 3  => 
                return "Conversion Error, Known unsupported option present.";
            case 4  => 
                return "Conversion Error, Unsupported transport protocol.";
            case 5  => 
                return "Conversion Error, Overall length exceeded.";
            case 6  => 
                return "Conversion Error, IP header length exceeded.";
            case 7  => 
                return "Conversion Error, Transport protocol > 255.";
            case 8  => 
                return "Conversion Error, Port conversion out of range.";
            case 9  => 
                return "Conversion Error, Transport header length exceeded.";
            case 10 => 
                return "Conversion Error, 32-bit rollover missing and ACK set.";
            case 11 => 
                return "Conversion Error, Unknown mandatory transport option present.";
            default => 
                return "Conversion Error, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else if (messageType == MessageType.SecurityFailures)
    {
        switch (messageCode)
        {
            case 0  => 
                return "Security Failures, Bad SPI.";
            case 1  => 
                return "Security Failures, Authentication Failed.";
            case 2  => 
                return "Security Failures, Decompression Failed.";
            case 3  => 
                return "Security Failures, Decryption Failed.";
            case 4  => 
                return "Security Failures, Need Authentication.";
            case 5  => 
                return "Security Failures, Need Authorization.";
            default => 
                return "Security Failures, Code: Unknown (" + (messageCode as string) + ")";
        }
    }
    else
        return "";
}

// ---------------------------Below is a copy from TCP.opn---------------------------------
type TCPHeader
{
    IANA.Port SourcePort with Visualization {AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    IANA.Port DestinationPort with Visualization {AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    uint SequenceNumber;
    uint AcknowledgementNumber;
    DataOffset DataOffset;
    Flags Flags;
    ushort Window;
    ushort Checksum;
    ushort UrgentPointer;
    optional binary Data;
}

// Data Offset: This indicates where the data begins.
type DataOffset
{
    byte DataOffset with BinaryEncoding{Width = 4};
    byte Reserved where ValidationCheckReservedZero(value == 0, null, true, ReferenceType.Type, "DNS", "Reserved", "DataOffset", value) with BinaryEncoding{Width = 3};
    bool NS with BinaryEncoding{Width = 1};
}

/* Control Bits
 *  URG:  Urgent Pointer field significant
 *  ACK:  Acknowledgement field significant
 *  PSH:  Push Function
 *  RST:  Reset the connection
 *  SYN:  Synchronize sequence numbers
 *  FIN:  No more data from sender
 *  ECE:  Indicates ECN-Capability
 *  CWR:  Congestion window reduced
 */
type Flags
{
    bool CWR with BinaryEncoding{Width = 1};
    bool ECE with BinaryEncoding{Width = 1};
    bool URG with BinaryEncoding{Width = 1};
    bool ACK with BinaryEncoding{Width = 1};
    bool PSH with BinaryEncoding{Width = 1};
    bool RST with BinaryEncoding{Width = 1};
    bool SYN with BinaryEncoding{Width = 1};
    bool FIN with BinaryEncoding{Width = 1};
    
    override string ToString()
    {
        string summary;
        summary += CWR ? "C" : ".";
        summary += ECE ? "E" : ".";
        summary += URG ? "U" : ".";
        summary += ACK ? "A" : ".";
        summary += PSH ? "P" : ".";
        summary += RST ? "R" : ".";
        summary += SYN ? "S" : ".";
        summary += FIN ? "F" : ".";
        return summary;
    }
}

// ---------------------------Below is a copy from UDP.opn---------------------------------
type UDPHeader
{
    IANA.Port SourcePort with Visualization{AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    IANA.Port DestinationPort with Visualization{AliasName = "Port"}, DisplayInfo{ToText = (any port) => IANA.PortToServiceNameForAlias(port as ushort)};
    ushort Length;
    ushort Checksum;
    optional binary Data;
}

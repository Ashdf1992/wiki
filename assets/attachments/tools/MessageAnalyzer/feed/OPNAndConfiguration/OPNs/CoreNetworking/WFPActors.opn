module WFPActors with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "383625", Date = "01/08/2016"}
        ]
};

using WFPCapture;
using IPv6;
using TCP;
using UDP;
using ICMPv6;
using Utility;
using ICMP;
using IANA;
using GRE;

autostart actor TCPOverWFP(WFPCapture.WFPFrame wfp)
{
    TcpEndpointHelper eptHelper = new TcpEndpointHelper{};
    
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.TCP}
    {
        TCP.DecodeAndDispatchSegment(eptHelper, fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.TCP}
    {
        TCP.DecodeAndDispatchSegment(eptHelper, fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:MessageV6{Protocol is ProtocolType.TCP}
    {
        TCP.DecodeAndDispatchSegment(eptHelper, fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:Message2V6{Protocol is ProtocolType.TCP}
    {
        TCP.DecodeAndDispatchSegment(eptHelper, fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
}

autostart actor UDPOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.UDP}
    {
        UDP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.UDP}
    {
        UDP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:MessageV6{Protocol is ProtocolType.UDP}
    {
        UDP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }

    process wfp accepts fm:Message2V6{Protocol is ProtocolType.UDP}
    {
        UDP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload);
    }
}

autostart actor IPv6OverWFPCapture(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.IPv6}
    {
        switch (fm.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d, wfp);
            default =>
                ThrowDecodingException("IPv6", "Datagram");
        }
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.IPv6}
    {
        switch (fm.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d, wfp);
            default =>
                ThrowDecodingException("IPv6", "Datagram");
        }
    }
    
    process wfp accepts fm:MessageV6{Protocol is ProtocolType.IPv6}
    {
        switch (fm.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d, wfp);
            default =>
                ThrowDecodingException("IPv6", "Datagram");
        }
    }
    
    process wfp accepts fm:Message2V6{Protocol is ProtocolType.IPv6}
    {
        switch (fm.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d, wfp);
            default =>
                ThrowDecodingException("IPv6", "Datagram");
        }
    }
}

autostart actor ICMPOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.ICMP}
    {
        ICMP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload, true);
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.ICMP}
    {
        ICMP.DecodeDatagram(fm.SourceAddress.FlatAddress, fm.DestinationAddress.FlatAddress, fm.Payload, true);
    }
}

autostart actor ICMPv6OverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts d:MessageV6{Protocol is ProtocolType.IPv6ICMP}
    {
        ICMPv6.ICMPv6DecodeAndDispatch(d.SourceAddress.FlatAddress, d.DestinationAddress.FlatAddress, d.Payload);
    }
    
    process wfp accepts d:Message2V6{Protocol is ProtocolType.IPv6ICMP}
    {
        ICMPv6.ICMPv6DecodeAndDispatch(d.SourceAddress.FlatAddress, d.DestinationAddress.FlatAddress, d.Payload);
    }
}

autostart actor GREOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.GRE}
    {
        switch (fm.Payload)
        {
            case p:GRE.Packet from BinaryDecoder<GRE.Packet> =>
                p#SourceAddress = fm.SourceAddress.FlatAddress;
                p#DestinationAddress = fm.DestinationAddress.FlatAddress;
                dispatch endpoint GRE.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("GRE");
        }
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.GRE}
    {
        switch (fm.Payload)
        {
            case p:GRE.Packet from BinaryDecoder<GRE.Packet> =>
                p#SourceAddress = fm.SourceAddress.FlatAddress;
                p#DestinationAddress = fm.DestinationAddress.FlatAddress;
                dispatch endpoint GRE.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("GRE");
        }
    }
}

protocol LinuxCookedMode with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Linux Cooked Mode",
    ShortName = "LinuxCookedMode",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "Linux Cooked Mode", Link = "http://linux.die.net/man/3/pcap"},
        ],
    RevisionSummary = 
        [
             new Revision{Class = RevisionClass.Major, Version = "370439", Date = "11/03/2014"}
        ]
};

using Standard;
using Utility;
using IANA;
using IPv4;
using IPv6;
//using ARP;
using LLC;

annotation binary LinuxCookedMode.Datagram#UnknownData;

endpoint Node
    accepts Datagram
{
    process this accepts lcm:Datagram{EthernetType is LinuxProtocolType.IPv4} 
    {
        switch (lcm.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder =>
                DispatchIPv4DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("LinuxCookedMode");
        }
    }
          
    process this accepts lcm:Datagram{EthernetType is LinuxProtocolType.IPv6}
    {
        switch (lcm.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("LinuxCookedMode");
        }
    }
            
    process this accepts lcm:Datagram{EthernetType is LinuxProtocolType.LLC}
    {
        switch (lcm.Payload)
        {
            case s:LLC.Segment from BinaryDecoder<LLC.Segment> =>
                dispatch (endpoint LLC.Node) accepts s;
            default =>
                ThrowDecodingException("LinuxCookedMode");
        }
        
    }
};

message Datagram
{
    PacketType PacketType;
    AddressType AddressType;
    ushort AddressLength;
    ([|AddressLength == 4|] IPv4Addr |
     [|AddressLength == 6|] MacAddr |
     ReserveAddress) Address;
    ushort EthernetType;
    binary Payload;
    
    override string ToString()
    {
        return "EthernetType: " + GetEtherTypeName(EthernetType) + ", PacketType: " + GetPacketTypeName(PacketType) + " (" + (PacketType as string) + "), " + 
               "AddressType: " + GetAddressName(AddressType) + ", Address: " + GetAddress(Address);
    }
}

string GetAddress(any data)
{
    if (data is IPv4Addr)
    {
        return (data as IPv4Addr).Address.ToString();
    }
    else if (data is MacAddr)
    {
        return "[" + (data as MacAddr).Address.ToString() + "]";
    }
    else 
        return "ReserveAddress";
}

type IPv4Addr
{
    IPv4Address  Address;
    array<byte> Blob with BinaryEncoding{Length = 4};
}

type MacAddr
{
    MacAddress  Address;
    array<byte> Blob with BinaryEncoding{Length = 2};
}

type ReserveAddress
{
    array<byte> ReserveAdrress with BinaryEncoding{Length = 8};
}

pattern PacketType =  enum ushort
{
    Incoming       = 0x00,
    Broadcast      = 0x01,
    Multicast      = 0x02,
    OtherTraffic   = 0x03,
    Outgoing       = 0x04
};

string GetPacketTypeName(PacketType Type)
{
    switch (Type)
    {
        case 0x00 => return "Incoming";
        case 0x01 => return "Broadcast"; 
        case 0x02 => return "Multicast"; 
        case 0x03 => return "Other Traffic";
        // The default value is 0x04.
        default => return "Outgoing";
    }
}

pattern AddressType = enum ushort
{
    Ethernet   = 0x001,
    TokenRing  = 0x006,
    ARCnet     = 0x007,
    PPP        = 0x200,
    loopback   = 0x304,
    FDDI       = 0x306,
    TokenRing1 = 0x320,
    IEEE8021   = 0x321,
    IEEE8022   = 0x322,
    IEEE8023   = 0x323
};

string GetAddressName(AddressType Type)
{
    switch (Type)
    {
        case 0x001 => return "Ethernet";
        case 0x006 => return "Token Ring";
        case 0x007 => return "ARCnet";
        case 0x200 => return "PPP";
        case 0x304 => return "loopback";
        case 0x306 => return "FDDI";
        case 0x320 => return "Token Ring";
        case 0x321 => return "IEEE 802.11";
        case 0x322 => return "IEEE 802.11";
        // The default value is 0x323.
        default => return "IEEE 802.11"; 
    }
}

pattern LinuxProtocolType = enum ushort
{
    IPv4           = 0x0800,
    IPv6           = 0x86DD,
    ARP            = 0x0806,
    LLC            = 0x0000  
};

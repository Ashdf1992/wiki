protocol SNAP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "SubNetwork Access Protocol",
    ShortName = "SNAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 1042"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "370439", Date = "11/03/2014"}
        ]
};

using Standard;
using IANA;
using LLC;
using IPv4;
using IPv6;
using Utility;
using MACOrganizationCodes;

endpoint Node accepts SNAP.Segment;

autostart actor SNAPOverLLC(LLC.Node node)
{
    process node accepts s:LLC.Segment where s.DSAPaddress == 85
    {
        if (s.InformationData != nothing)
        {
            switch ((s.InformationData as InformationData).Payload)
            {
                case m:SNAP.Segment from BinaryDecoder<SNAP.Segment> =>
                    dispatch (endpoint SNAP.Node) accepts m;
                default => 
                    ThrowDecodingException("SNAP", "Segment");
            }
        }
        else
        {
            ThrowDecodingException("SNAP", "Segment");
        }
    }
}

autostart actor IPv4OverSNAP(SNAP.Node node)
{
    process node accepts s:SNAP.Segment where s.EtherType == 2048
    {
        switch (s.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder =>
                DispatchIPv4DatagramToReassemblyNode(d, node);
            default => 
                ThrowDecodingException("SNAP", "IPv4.Datagram");
        }
    }
}

autostart actor IPv6OverSNAP(SNAP.Node node)
{
    process node accepts s:SNAP.Segment where s.EtherType == 34525
    {
        switch (s.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d, node);
            default => 
                ThrowDecodingException("SNAP", "IPv6.Datagram");
        }
    }
}

message Segment
{
    array<byte> OrganizationCode with BinaryEncoding{Length = 3};
    ushort EtherType;
    binary Payload;
    
    override string ToString()
    {
        string summary;
        uint OrgCode = ((OrganizationCode[0] as uint) << 16) + ((OrganizationCode[1] as uint) << 8) + (OrganizationCode[2] as uint);
        summary = "EtherType: " + GetEtherTypeName(EtherType) + ", OrganizationCode: ";
        if (OrgCode in OrganizationCodeMap)
        {
            summary += OrganizationCodeMap[OrgCode];
        }
        else
        {
            summary += "Unknown(" + Utility.DecToHexFormat(OrgCode) + ")";
        }
        return summary;
    }
}

module X509 with
Asn1EncodingDefaults{EncodingRule = Asn1EncodingRule.BER},
Documentation
{
    ProtocolName = "Public Key Infrastructure Certificate",
    ShortName = "X509",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 3280"},
            new Reference{Name = "RFC 3279"},
            new Reference{Name = "RFC 3709"},
            new Reference{Name = "RFC 4211"},
            new Reference{Name = "RFC 5755"},
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="369482", Date="10/15/2014"}
        ]
};
    
using Standard;
using Technologies.ASN1;
using Utility;

// rfc3280
const array<int> idAtOID = [2, 5, 4];
const array<int> idAtNameAttrType = idAtOID + [41];
const array<int> idAtCommonNameAttrType = idAtOID + [3];
const array<int> idAtLocalityNameAttrType = idAtOID + [7];
const array<int> idAtStateOrProvinceNameAttrType = idAtOID + [8];
const array<int> idAtOrganizationNameAttrType = idAtOID + [10];
const array<int> idAtOrganizationUnitNameAttrType = idAtOID + [11];
const array<int> idAtTitleAttrType = idAtOID + [12];
const array<int> idAtDnQualifierAttrType = idAtOID + [46];
const array<int> idAtCountryNameAttrType = idAtOID + [6];
const array<int> idAtSerialNumberAttrType = idAtOID + [5];
const array<int> idAtPseudonymAttrType = idAtOID + [65];
const array<int> idDomainComponentAttrType = [0, 9, 2342, 19200300, 100, 1, 25];
// rfc2985
const array<int> pkcs9OID = [1, 2, 840, 113549, 1, 9];
const array<int> pkcs9moOID = pkcs9OID + [0];
const array<int> pkcs9ocOID = pkcs9OID + [24];
const array<int> pkcs9atOID = pkcs9OID + [25];
const array<int> pkcs9sxOID = pkcs9OID + [26];
const array<int> pkcs9mrOID = pkcs9OID + [27];
// WCCE
const array<int> szOID_OS_VERSION = [1, 3, 6, 1, 4, 1, 311, 13, 2, 3];
const array<int> szOID_ENROLLMENT_CSP_PROVIDER = [1, 3, 6, 1, 4, 1, 311, 13, 2, 2];
const array<int> szOID_RENEWAL_CERTIFICATE = [1, 3, 6, 1, 4, 1, 311, 13, 1];
const array<int> szOID_REQUEST_CLIENT_INFO = [1, 3, 6, 1, 4, 1, 311, 21, 20];
const array<int> szOID_NT_PRINCIPAL_NAME = [1, 3, 6, 1, 4, 1, 311, 20, 2, 3];
const array<int> szOID_NTDS_REPLICATION = [1, 3, 6, 1, 4, 1, 311, 25, 1];
const array<int> szOID_ENROLLMENT_NAME_VALUE_PAIR = [1, 3, 6, 1, 4, 1, 311, 13, 2, 1];

// CMC
const array<int> idExtensionReq = [1, 2, 840, 113549, 1, 9, 14];

const array<int> idPkcsEntityOID = pkcs9ocOID + [1];
const array<int> idNaturalPersonOID = pkcs9ocOID + [2];

const array<int> idEmailAddressOID = pkcs9OID + [1];
const array<int> idUnstructuredNameOID = pkcs9OID + [2];
const array<int> idContentTypeOID = pkcs9OID + [3];
const array<int> idMessageDigestOID = pkcs9OID + [4];
const array<int> idSigningTimeOID = pkcs9OID + [5];
const array<int> idCounterSignatureOID = pkcs9OID + [6];
const array<int> idChallengePasswordOID = pkcs9OID + [7];
const array<int> idUnstructuredAddressOID = pkcs9OID + [8];
const array<int> idExtendedCertificateAttributesOID = pkcs9OID + [9];
const array<int> idSigningDescriptionOID = pkcs9OID + [13];
const array<int> idExtensionRequestOID = pkcs9OID + [14];
const array<int> idSmimeCapabilitiesOID = pkcs9OID + [15];
const array<int> idFriendlyNameOID = pkcs9OID + [20];
const array<int> idLocalKeyIdOID = pkcs9OID + [21];
const array<int> idUserPKCS12OID = [2, 16, 840, 1, 113730, 3, 1, 216];
const array<int> idPkcs15TokenOID = pkcs9atOID + [1];
const array<int> idEncryptedPrivateKeyInfoOID = pkcs9atOID + [2];
const array<int> idRandomNonceOID = pkcs9atOID + [3];
const array<int> idSequenceNumberOID = pkcs9atOID + [4];
const array<int> idPkcs7PDUOID = pkcs9atOID + [5];
const array<int> ietfatOID = [1, 3, 6, 1, 5, 5, 7, 9];
const array<int> idDateOfBirthOID = ietfatOID + [1];
const array<int> idPlaceOfBirthOID = ietfatOID + [2];
const array<int> idGenderOID = ietfatOID + [3];
const array<int> idCountryOfCitizenshipOID = ietfatOID + [4];
const array<int> idCountryOfResidenceOID = ietfatOID + [5];
const array<int> idsxPkcs9StringOID = pkcs9sxOID + [1];
const array<int> idsxSigningTimeOID = pkcs9sxOID + [2];
const array<int> idmrCaseIgnoreMatchOID = pkcs9mrOID + [1];
const array<int> idmrSigningTimeMatchOID = pkcs9mrOID + [2];
const array<int> idSmimeOID = pkcs9OID + [16];
const array<int> idCertTypesOID = pkcs9OID + [22];
const array<int> idCrlTypesOID = pkcs9OID + [23];
const array<int> idPseudonymOID = idAtOID + [65];

type Attribute
{
    AttributeType Type with DisplayInfo{ToText = ObjectIdentifierToString};
    // Future Reference: Decode the unknown Attribute as any
    optional set<([|Type == idAtNameAttrType|] X520Name
        | [|Type == idAtCommonNameAttrType|] X520CommonName 
        | [|Type == idAtLocalityNameAttrType|] X520LocalityName 
        | [|Type == idAtStateOrProvinceNameAttrType|] X520StateOrProvinceName 
        | [|Type == idAtOrganizationNameAttrType|] X520OrganizationName 
        | [|Type == idAtOrganizationUnitNameAttrType|] X520OrganizationalUnitName 
        | [|Type == idAtTitleAttrType|] X520Title 
        | [|Type == idAtDnQualifierAttrType|] X520DnQualifier 
        | [|Type == idAtCountryNameAttrType|] X520CountryName 
        | [|Type == idAtSerialNumberAttrType|] X520SerialNumber 
        | [|Type == idAtPseudonymAttrType|] X520Pseudonym 
        | [|Type == idDomainComponentAttrType|] DomainComponent 
        //rfc2985
        | [|Type == idEmailAddressOID|] EmailAddress
        | [|Type == idContentTypeOID|] ContentType
        // CMS
        | [|Type == idMessageDigestOID|] OctetString
        // WCCE
        | [|Type == szOID_ENROLLMENT_NAME_VALUE_PAIR|] EnrollmentNameValuePair
        | [|Type == szOID_ENROLLMENT_CSP_PROVIDER|] CSPProvider
        | [|Type == szOID_OS_VERSION|] WCCEAnyString
        | [|Type == szOID_REQUEST_CLIENT_INFO|] RequestClientInfo
        | [|Type == szOID_RENEWAL_CERTIFICATE|] X509.Certificate
        | [|Type == szOID_NT_PRINCIPAL_NAME|] UTF8String
        | [|Type == szOID_NTDS_REPLICATION|] OctetString
        // CMC
        | [|Type == idExtensionReq|] ExtensionReq
        | DirectoryString)> Value;
}

pattern AttributeType = ObjectIdentifier;
//pattern AttributeValue = ANY;

type AttributeTypeAndValue
{
    AttributeType Type with DisplayInfo{ToText = ObjectIdentifierToString};
    ([|Type == idAtNameAttrType|] X520Name
        | [|Type == idAtCommonNameAttrType|] X520CommonName 
        | [|Type == idAtLocalityNameAttrType|] X520LocalityName 
        | [|Type == idAtStateOrProvinceNameAttrType|] X520StateOrProvinceName 
        | [|Type == idAtOrganizationNameAttrType|] X520OrganizationName 
        | [|Type == idAtOrganizationUnitNameAttrType|] X520OrganizationalUnitName 
        | [|Type == idAtTitleAttrType|] X520Title 
        | [|Type == idAtDnQualifierAttrType|] X520DnQualifier 
        | [|Type == idAtCountryNameAttrType|] X520CountryName 
        | [|Type == idAtSerialNumberAttrType|] X520SerialNumber 
        | [|Type == idAtPseudonymAttrType|] X520Pseudonym 
        | [|Type == idDomainComponentAttrType|] DomainComponent 
        | [|Type == idEmailAddressOID|] EmailAddress
        | DirectoryString) Value;
}

pattern X520Name = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520CommonName = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520LocalityName = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520StateOrProvinceName = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520OrganizationName = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520OrganizationalUnitName = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520Title = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern X520DnQualifier = PrintableString;
pattern X520CountryName = PrintableString;
pattern X520SerialNumber = PrintableString;
pattern X520Pseudonym = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;
pattern DomainComponent = IA5String with Asn1Encoding{Flags = Asn1EncodingFlags.OctetStringIsString};
pattern EmailAddress = IA5String with Asn1Encoding{Flags = Asn1EncodingFlags.OctetStringIsString};
pattern Name = RdnSequence;

pattern RdnSequence = array<RelativeDistinguishedName>;
pattern DistinguishedName = RdnSequence;

pattern RelativeDistinguishedName = set<AttributeTypeAndValue>;

pattern DirectoryString = TeletexString | PrintableString | UniversalString | UTF8String | BMPString;

type Certificate
{
    TbsCertificate TbsCertificate;
    AlgorithmIdentifier SignatureAlgorithm;
    BitString Signature;
}

type TbsCertificate
{
    optional Version Version with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    CertificateSerialNumber SerialNumber;
    AlgorithmIdentifier Signature;
    Name Issuer;
    Validity Validity;
    Name Subject;
    SubjectPublicKeyInfo SubjectPublicKeyInfo;
    optional UniqueIdentifier IssuerUniqueID with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional UniqueIdentifier SubjectUniqueID with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
    optional Extensions Extensions with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Explicit};
}

pattern Version = enum Integer {V1 = 0, V2 = 1, V3 = 2};
pattern CertificateSerialNumber = BigInteger;

type Validity
{
    Time NotBefore;
    Time NotAfter;
}

pattern Time = UTCTime | GeneralizedTime;
pattern UniqueIdentifier = BitString;

type SubjectPublicKeyInfo
{
    AlgorithmIdentifier Algorithm;
    BitString SubjectPublicKey;
}

pattern Extensions = array<Extension>;

// rfc3280
const array<int> idCeOID = [2, 5, 29];
const array<int> idCeAuthorityKeyIdentifierOID = idCeOID + [35];
const array<int> idCeSubjectKeyIdentifierOID = idCeOID + [14];
const array<int> idCeKeyUsageOID = idCeOID + [15];
const array<int> idCePrivateKeyUsagePeriodOID = idCeOID + [16];
const array<int> idCeCertificatePoliciesOID = idCeOID + [32];
const array<int> idCePolicyMappingsOID = idCeOID + [33];
const array<int> idCeSubjectAltNameOID = idCeOID + [17];
const array<int> idCeIssuerAltNameOID = idCeOID + [18];
const array<int> idCeSubjectDirectoryAttributesOID = idCeOID + [9];
const array<int> idCeBasicConstraintsOID = idCeOID + [19];
const array<int> idCeNameConstraintsOID = idCeOID + [30];
const array<int> idCePolicyConstraintsOID = idCeOID + [36];
const array<int> idCeExtKeyUsageOID = idCeOID + [37];
const array<int> idCeCRLDistributionPointsOID = idCeOID + [31];
const array<int> idCeInhibitAnyPolicyOID = idCeOID + [54];
const array<int> idCeFreshestCRLOID = idCeOID + [46];
const array<int> idCeCRLNumberOID = idCeOID + [20];
const array<int> idCeDeltaCRLIndicatorOID = idCeOID + [27];
const array<int> idCeIssuingDistributionPointOID = idCeOID + [28];
const array<int> idCeCRLReasonOID = idCeOID + [21];
const array<int> idCeHoldInstructionCodeOID = idCeOID + [23];
const array<int> idCeInvalidityDataOID = idCeOID + [24];
const array<int> idCeCertificateIssuerOID = idCeOID + [29];
const array<int> idPkixOID = [1, 3, 6, 1, 5, 5, 7];
const array<int> idPeAutorityInfoAccessOID = idPkixOID + [1, 1];
const array<int> idPeSubjectInfoAccessOID = idPkixOID + [1, 11];
const array<int> idKpOID = idPkixOID + [1];

// rfc3709
const array<int> idPeLogotypeOID = idPkixOID + [1, 12];
const array<int> CertificateTemplateOID = [1, 3, 6, 1, 4, 1, 311, 21, 7];
// Application Policies extension 
const array<int> MsApplicationPoliciesOID = [1, 3, 6, 1, 4, 1, 311, 21, 10];

// RFC 2459
const array<int> idAdOID = idPkixOID + [48];
const array<int> idAdOcspOID = idAdOID + [1];
// RFC 2560
const array<int> idPkixOcspOID = idAdOcspOID;
const array<int> idPkixOcspBasicOID = idPkixOcspOID + [1];
const array<int> idPkixOcspNonceOID = idPkixOcspOID + [2];
const array<int> idPkixOcspCrlOID = idPkixOcspOID + [3];
const array<int> idPkixOcspResponseOID = idPkixOcspOID + [4];
const array<int> idPkixOcspNocheckOID = idPkixOcspOID + [5];
const array<int> idPkixOcspArchiveCutOffOID = idPkixOcspOID + [6];
const array<int> idPkixOcspServiceLocatorOID = idPkixOcspOID + [7];

type Extension
{
    ObjectIdentifier ExtnID with DisplayInfo{ToText = ObjectIdentifierToString};
    optional Boolean Critical;
    ([|ExtnID in 
        {
            idCeSubjectDirectoryAttributesOID,                 
            idCeSubjectKeyIdentifierOID,
            idCeKeyUsageOID,
            idCePrivateKeyUsagePeriodOID,
            idCeSubjectAltNameOID,
            idCeIssuerAltNameOID, 
            idCeBasicConstraintsOID,  
            idCeCRLNumberOID,                  
            idCeCRLReasonOID,                        
            idCeHoldInstructionCodeOID,
            idCeInvalidityDataOID,                
            idCeDeltaCRLIndicatorOID,                      
            idCeIssuingDistributionPointOID,           
            idCeCertificateIssuerOID,                
            idCeNameConstraintsOID,                  
            idCeCRLDistributionPointsOID,             
            idCeCertificatePoliciesOID,                 
            idCePolicyMappingsOID,                     
            idCeAuthorityKeyIdentifierOID,             
            idCePolicyConstraintsOID,                  
            idCeExtKeyUsageOID,              
            idCeFreshestCRLOID,                      
            idCeInhibitAnyPolicyOID,          
            idPeAutorityInfoAccessOID,
            idPeSubjectInfoAccessOID,
            idPeLogotypeOID,   
            idSmimeCapabilitiesOID,   
            CertificateTemplateOID,
            MsApplicationPoliciesOID
        }|] ExtnValueExtension[ExtnID] | OctetString) ExtnValue;
}

type ExtnValueExtension[ObjectIdentifier extnID]
{
    ([|extnID == idCeSubjectDirectoryAttributesOID|] SubjectDirectoryAttributes                 
        | [|extnID == idCeSubjectKeyIdentifierOID|] SubjectKeyIdentifier
        | [|extnID == idCeKeyUsageOID|] KeyUsage
        | [|extnID == idCePrivateKeyUsagePeriodOID|] PrivateKeyUsagePeriod
        | [|extnID == idCeSubjectAltNameOID|] SubjectAltName  
        | [|extnID == idCeIssuerAltNameOID|] IssuerAltName 
        | [|extnID == idCeBasicConstraintsOID|] BasicConstraints  
        | [|extnID == idCeCRLNumberOID|] CrlNumber                   
        | [|extnID == idCeCRLReasonOID|] CrlReason                        
        | [|extnID == idCeHoldInstructionCodeOID|] HoldInstructionCode  
        | [|extnID == idCeInvalidityDataOID|] InvalidityDate                  
        | [|extnID == idCeDeltaCRLIndicatorOID|] BaseCrlNumber                      
        | [|extnID == idCeIssuingDistributionPointOID|] IssuingDistributionPoint            
        | [|extnID == idCeCertificateIssuerOID|] CertificateIssuer                 
        | [|extnID == idCeNameConstraintsOID|] NameConstraints                     
        | [|extnID == idCeCRLDistributionPointsOID|] CrlDistributionPoints                
        | [|extnID == idCeCertificatePoliciesOID|] CertificatePolicies                  
        | [|extnID == idCePolicyMappingsOID|] PolicyMappings                     
        | [|extnID == idCeAuthorityKeyIdentifierOID|] AuthorityKeyIdentifier             
        | [|extnID == idCePolicyConstraintsOID|] PolicyConstraints                     
        | [|extnID == idCeExtKeyUsageOID|] ExtKeyUsageSyntax                  
        | [|extnID == idCeFreshestCRLOID|] FreshestCrl                         
        | [|extnID == idCeInhibitAnyPolicyOID|] InhibitAnyPolicy            
        | [|extnID == idPeAutorityInfoAccessOID|] AuthorityInfoAccessSyntax
        | [|extnID == idPeSubjectInfoAccessOID|] SubjectInfoAccessSyntax 
        | [|extnID == idPeLogotypeOID|] LogotypeExtn     
        | [|extnID == idSmimeCapabilitiesOID|] SmimeCapabilities     
        | [|extnID == CertificateTemplateOID|] CertificateTemplate 
        | [|extnID == MsApplicationPoliciesOID|] MSApplicationPolicies) ExtnValue;
}

type CertificateList
{
    TbsCertList TbsCertList;
    AlgorithmIdentifier SignatureAlgorithm;
    BitString Signature;
}

type TbsCertList
{
    optional Integer Version with Asn1Encoding{LowerEndValue = 1, UpperEndValue = 1};
    AlgorithmIdentifier Signature;
    Name Issuer;
    Time ThisUpdate;
    optional Time NextUpdate;
    optional RevokedCertificates RevokedCertificates;
    optional Extensions Extensions with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
}

pattern RevokedCertificates = array<RevokedCertificate>;

type RevokedCertificate
{
    CertificateSerialNumber UserCertificate;
    Time RevocationDate;
    optional Extensions CrlEntryExtensions;
}

// rfc3279
const array<int> ansiX962OID = [1, 2, 840, 10045];
const array<int> idDsaOID = [1, 2, 840, 10040, 4, 1];
const array<int> dhpublicnumberOID = [1, 2, 840, 10046, 2, 1];
const array<int> idKeyExchangeAlgorithmOID = [2, 16, 840, 1, 101, 2, 1, 1, 22];
const array<int> ecdsaWithSha1OID = ansiX962OID + [4, 1];
const array<int> idEcPublicKeyOID = ansiX962OID + [2, 1];

// RFC 3370
const array<int> idDesEde3CbcOID = [1, 2, 840, 113549, 3, 7];

// rfc3447
const array<int> pkcs1OID = [1, 2, 840, 113549, 1, 1];
const array<int> rsaEncryptionOID = pkcs1OID + [1];
const array<int> md2WithRSAEncryptionOID = pkcs1OID + [2];
const array<int> md5WithRSAEncryptionOID = pkcs1OID + [4];
const array<int> sha1WithRSAEncryptionOID = pkcs1OID + [5];
const array<int> sha256WithRSAEncryptionOID = pkcs1OID + [11];
const array<int> sha384WithRSAEncryptionOID = pkcs1OID + [12];
const array<int> sha512WithRSAEncryptionOID = pkcs1OID + [13];
const array<int> sha1WithRSAEncryptionObsoleteOID = [1, 3, 14, 3, 2, 29];

// rfc3560
const array<int> idsha1OID = [1, 3, 14, 3, 2, 26];
const array<int> idsha256OID = [2, 16, 840, 1, 101, 3, 4, 2, 1];
const array<int> idsha384OID = [2, 16, 840, 1, 101, 3, 4, 2, 2];
const array<int> idsha512OID = [2, 16, 840, 1, 101, 3, 4, 2, 3];
const array<int> idRSAESOAEPOID = pkcs1OID + [7];
const array<int> idmgf1OID = pkcs1OID + [8];
const array<int> idpSpecifiedOID = pkcs1OID + [9];
pattern nullOctetString = OctetString where value == null;

// Microsoft implementation
const array<int> szOID_NTDS_REPLICATIONOID = [1, 3, 6, 1, 4, 1, 311, 25, 1];

type RSAESOAEPparams
{
    AlgorithmIdentifier hashFunc with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    AlgorithmIdentifier maskGenFunc with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    AlgorithmIdentifier pSourceFunc with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
}

type AlgorithmIdentifier
{
    ObjectIdentifier Algorithm with DisplayInfo{ToText = ObjectIdentifierToString};
    optional (
        // rfc3447
        [|Algorithm == idDsaOID|] DssParms |
        [|Algorithm == dhpublicnumberOID|] DomainParameters |
        [|Algorithm == idKeyExchangeAlgorithmOID|] KeaParmsId |
        [|Algorithm == idEcPublicKeyOID|] EcpkParameters |
        // rfc3370
        [|Algorithm == idDesEde3CbcOID|] CbcParameter |
        // rfc3560
        [|Algorithm == idmgf1OID|] AlgorithmIdentifier |
        [|Algorithm == idpSpecifiedOID|] nullOctetString |
        [|Algorithm == idRSAESOAEPOID|] RSAESOAEPparams
        | Null) Parameters;
}

type ORAddress
{
   BuiltInStandardAttributes BuiltInStandardAttributes;
   optional BuiltInDomainDefinedAttributes BuiltInDomainDefinedAttributes;
   optional ExtensionAttributes ExtensionAttributes;
}

type BuiltInStandardAttributes
{
    optional CountryName CountryName;
    optional AdministrationDomainName AdministrationDomainName;
    optional NetworkAddress NetworkAddress with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional TerminalIdentifier TerminalIdentifier with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional PrivateDomainName PrivateDomainName with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Explicit};
    optional OrganizationName OrganizationName with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
    optional NumericUserIdentifier NumericUserIdentifier with Asn1Encoding{TagNumber = 4, Tagging = Asn1Tagging.Implicit};
    optional PersonalName PersonalName with Asn1Encoding{TagNumber = 5, Tagging = Asn1Tagging.Implicit};
    optional OrganizationalUnitNames OrganizationalUnitNames with Asn1Encoding{TagNumber = 6, Tagging = Asn1Tagging.Implicit};
}

pattern CountryName = (NumericString | PrintableString)
        with Asn1Encoding{
            TagClass = Asn1TagClass.Application,
            TagNumber = 1,
            Tagging = Asn1Tagging.Explicit};

pattern AdministrationDomainName = (NumericString | PrintableString)
        with Asn1Encoding{
            TagClass = Asn1TagClass.Application,
            TagNumber = 2,
            Tagging = Asn1Tagging.Explicit};

pattern NetworkAddress = X121Address;
pattern X121Address = NumericString;
pattern TerminalIdentifier = PrintableString;
pattern PrivateDomainName = NumericString | PrintableString;
pattern OrganizationName = PrintableString;
pattern NumericUserIdentifier = NumericString;

// WORKAROUND: using type temporarily for set definition
type PersonalName
{
    PrintableString SurName with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional PrintableString GivenName with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional PrintableString Initials with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
    optional PrintableString GenerationQualifier with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
}

pattern OrganizationalUnitNames = array<OrganizationalUnitName>;
pattern OrganizationalUnitName = PrintableString;
pattern BuiltInDomainDefinedAttributes = array<BuiltInDomainDefinedAttribute>;

type BuiltInDomainDefinedAttribute
{
    PrintableString Type;
    PrintableString Value;
}

pattern ExtensionAttributes = set<ExtensionAttribute>;

type ExtensionAttribute
{
    Integer Type with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    ([|Type == 1|] CommonName
        | [|Type == 1|] CommonName
        | [|Type == 2|] TeletexCommonName
        | [|Type == 3|] TeletexOrganizationName
        | [|Type == 4|] TeletexPersonalName
        | [|Type == 5|] TeletexOrganizationalUnitNames
        | [|Type == 6|] TeletexDomainDefinedAttributes
        | [|Type == 7|] PdsName
        | [|Type == 8|] PhysicalDeliveryCountryName
        | [|Type == 9|] PostalCode
        | [|Type == 10|] PhysicalDeliveryOfficeName
        | [|Type == 11|] PhysicalDeliveryOfficeNumber
        | [|Type == 12|] ExtensionORAddressComponents
        | [|Type == 13|] PhysicalDeliveryPersonalName
        | [|Type == 14|] PhysicalDeliveryOrganizationName
        | [|Type == 15|] ExtensionPhysicalDeliveryAddressComponents
        | [|Type == 16|] UnformattedPostalAddress
        | [|Type == 17|] StreetAddress
        | [|Type == 18|] PostOfficeBoxAddress
        | [|Type == 19|] PosteRestanteAddress
        | [|Type == 20|] UniquePostalName
        | [|Type == 21|] LocalPostalAttributes
        | [|Type == 22|] ExtendedNetworkAddress
        | [|Type == 23|] TerminalType) Value with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Explicit};
}

pattern CommonName = PrintableString;
pattern TeletexCommonName = TeletexString;
pattern TeletexOrganizationName = TeletexString;

// WORKAROUND: using type temporarily for set definition
type TeletexPersonalName
{
    TeletexString SurName with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional TeletexString GivenName with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional TeletexString Initials with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
    optional TeletexString GenerationQualifier with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
}

pattern TeletexOrganizationalUnitNames = array<TeletexOrganizationalUnitName>;
pattern TeletexOrganizationalUnitName = TeletexString;
pattern PdsName = PrintableString;
pattern PhysicalDeliveryCountryName = NumericString | PrintableString;
pattern PostalCode = NumericString | PrintableString;
pattern PhysicalDeliveryOfficeName = PdsParameter;
pattern PhysicalDeliveryOfficeNumber = PdsParameter;
pattern ExtensionORAddressComponents = PdsParameter;
pattern PhysicalDeliveryPersonalName = PdsParameter;
pattern PhysicalDeliveryOrganizationName = PdsParameter;
pattern ExtensionPhysicalDeliveryAddressComponents = PdsParameter;
pattern PrintableAddresses = array<PrintableString>;

// WORKAROUND: using type temporarily for set definition
type UnformattedPostalAddress
{
    optional PrintableAddresses PrintableAddress;
    optional TeletexString TeletexString;
}

pattern StreetAddress = PdsParameter;
pattern PostOfficeBoxAddress = PdsParameter;
pattern PosteRestanteAddress = PdsParameter;
pattern UniquePostalName = PdsParameter;
pattern LocalPostalAttributes = PdsParameter;

// WORKAROUND: using type temporarily for set definition
type PdsParameter
{
    optional PrintableString PrintableString;
    optional TeletexString TeletexString;
}

pattern ExtendedNetworkAddress = E1634Address | PresentationAddressPattern;

type E1634Address
{
    NumericString Number with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional NumericString SubAddress with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern NAddressesSets = set<OctetString>;

type PresentationAddress
{
    optional OctetString PSelector with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional OctetString SSelector with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Explicit};
    optional OctetString TSelector with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Explicit};
    NAddressesSets NAddresses with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Explicit};
}

pattern PresentationAddressPattern = PresentationAddress with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};

pattern TerminalType = enum Integer
{
    Telex = 3,
    Teletex = 4,
    G3Facsimile = 5,
    G4Facsimile = 6,
    Ia5Terminal = 7,
    Videotex = 8
};

pattern TeletexDomainDefinedAttributes = array<TeletexDomainDefinedAttribute>;

type TeletexDomainDefinedAttribute
{
    TeletexString Type;
    TeletexString Value;
}

//Implicitly Tagged Module
pattern AuthorityKeyIdentifier = AuthorityKeyIdentifierType;

type AuthorityKeyIdentifierType
{
    optional KeyIdentifier KeyIdentifier with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional GeneralNames AuthorityCertIssuer with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional CertificateSerialNumber AuthorityCertSerialNumber with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
}

pattern KeyIdentifier = OctetString;

pattern SubjectKeyIdentifier = KeyIdentifier;

pattern KeyUsage = BitString;

type PrivateKeyUsagePeriod
{
    optional GeneralizedTime NotBefore with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional GeneralizedTime NotAfter with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern CertificatePolicies = array<PolicyInformation>;

type PolicyInformation
{
    CertPolicyId PolicyIdentifier;
    optional array<PolicyQualifierInfo> PolicyQualifiers;
}

pattern CertPolicyId = ObjectIdentifier;

// rfc3280
const array<int> idQtCpsOID = idPkixOID + [2, 1];
const array<int> idQtUnoticeOID = idPkixOID + [2, 2];

type PolicyQualifierInfo
{
    PolicyQualifierId PolicyQualifierId with DisplayInfo{ToText = ObjectIdentifierToString};
    ([|PolicyQualifierId == idQtCpsOID|] CPSuri
        | [|PolicyQualifierId == idQtUnoticeOID|] UserNotice) Qualifier;
}

pattern PolicyQualifierId = ObjectIdentifier;
pattern CPSuri = IA5String;

type UserNotice
{
    optional NoticeReference NoticeRef;
    optional DisplayText ExplicitText;
}

type NoticeReference
{
    DisplayText Organization;
    array<Integer> NoticeNumbers;
}

pattern DisplayText = IA5String | VisibleString | UTF8String | BMPString;

pattern PolicyMappings = array<PolicyMapping>;

type PolicyMapping
{
    CertPolicyId IssuerDomainPolicy;
    CertPolicyId SubjectDomainPolicy;
}

pattern SubjectAltName = GeneralNames;

pattern GeneralNames = array<GeneralName>;

pattern GeneralName = AnotherName | Rfc822Name | DnsName | X400Address | DirectoryName | EdiPartyName
                    | UniformResourceIdentifier | IPAddress | RegisteredID;
                  
type AnotherName
{
    ObjectIdentifier TypeId with DisplayInfo{ToText = ObjectIdentifierToString};
    // Future Reference: any not a type in ASN
    //value      [0] EXPLICIT ANY DEFINED BY type-id
    OctetString Value with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
} with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit, IsExtensible = true};

type EdiPartyName
{
    //DirectoryString is choice type, the tag is explicit
    optional DirectoryString NameAssigner with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    DirectoryString PartyName with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Explicit};
} with Asn1Encoding{TagNumber = 5, Tagging = Asn1Tagging.Implicit};

pattern Rfc822Name = IA5String with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
pattern DnsName = IA5String with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit, Flags = Asn1EncodingFlags.OctetStringIsString};
pattern X400Address = ORAddress with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
pattern DirectoryName = Name with Asn1Encoding{TagNumber = 4, Tagging = Asn1Tagging.Explicit};//Name is choice type, the tag is explicit
pattern UniformResourceIdentifier = IA5String with Asn1Encoding{TagNumber = 6, Tagging = Asn1Tagging.Implicit};
pattern IPAddress = OctetString with Asn1Encoding{TagNumber = 7, Tagging = Asn1Tagging.Implicit};
pattern RegisteredID = ObjectIdentifier with Asn1Encoding{TagNumber = 8, Tagging = Asn1Tagging.Implicit};

pattern IssuerAltName = GeneralNames;

pattern SubjectDirectoryAttributes = array<Attribute>;

type BasicConstraints
{
    optional Boolean CA;
    optional Integer PathLenConstraint;
}

type NameConstraints
{
    optional GeneralSubtrees PermittedSubtrees with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional GeneralSubtrees ExcludedSubtrees with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern GeneralSubtrees = array<GeneralSubtree>;

type GeneralSubtree
{
    GeneralName Base;
    optional BaseDistance Minimum with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional BaseDistance Maximum with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern BaseDistance = Integer;

pattern PolicyConstraints = PolicyConstraintsType;

type PolicyConstraintsType
{
    optional SkipCerts RequireExplicitPolicy with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional SkipCerts InhibitPolicyMapping with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern SkipCerts = Integer;

pattern CrlDistributionPoints = array<DistributionPoint>;

type DistributionPoint
{
    //DistributionPointName is choice type, the tag is explicit
    optional DistributionPointName DistributionPoint with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional ReasonFlags Reasons with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional GeneralNames CrlIssuer with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
}

pattern DistributionPointName = FullName | NameRelativeToCRLIssuer;
pattern FullName = GeneralNames with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
pattern NameRelativeToCRLIssuer = RelativeDistinguishedName with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
pattern ReasonFlags = BitString;  //waiting for each bit structure

pattern ExtKeyUsageSyntax = array<KeyPurposeId>;

pattern KeyPurposeId = ObjectIdentifier;

pattern InhibitAnyPolicy = SkipCerts;

pattern FreshestCrl = CrlDistributionPoints;

pattern AuthorityInfoAccessSyntax = array<AccessDescription>;

type AccessDescription
{
    ObjectIdentifier AccessMethod;
    GeneralName AccessLocation;
}

pattern SubjectInfoAccessSyntax = array<AccessDescription>;

pattern CrlNumber = Integer;

type IssuingDistributionPoint
{
    //DistributionPointName is choice type, the tag is explicit
    optional DistributionPointName DistributionPoint with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional Boolean OnlyContainsUserCerts with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
    optional Boolean OnlyContainsCACerts with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
    optional ReasonFlags OnlySomeReasons with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
    optional Boolean IndirectCrl with Asn1Encoding{TagNumber = 4, Tagging = Asn1Tagging.Implicit};
    optional Boolean OnlyContainsAttributeCerts with Asn1Encoding{TagNumber = 5, Tagging = Asn1Tagging.Implicit};
}

pattern BaseCrlNumber = CrlNumber;
pattern CrlReason = enum Integer
{
    Unspecified = 0,
    KeyCompromise = 1,
    CACompromise = 2,
    AffiliationChanged = 3,
    Superseded = 4,
    CessationOfOperation = 5,
    CertificateHold = 6,
    RemoveFromCRL = 8,
    PrivilegeWithdrawn = 9,
    AACompromise = 10
};

pattern CertificateIssuer = GeneralNames;
pattern HoldInstructionCode = ObjectIdentifier;
pattern InvalidityDate = GeneralizedTime;

///*******************************RFC 3279*****************************/
pattern DsaPublicKey = Integer;

type DssParms
{
    Integer P;
    Integer Q;
    Integer G;
}

type DssSigValue
{
    Integer R;
    Integer S;
}

type RsaPublicKey 
{
    Integer Modulus;
    Integer PublicExponent;
}

pattern DHPublicKey = Integer;

type DomainParameters
{
    Integer P;
    Integer G;
    Integer Q;
    optional Integer J;
    optional ValidationParms ValidationParms; 
}

type ValidationParms
{
    BitString Seed;
    Integer PgenCounter;
}

pattern KeaParmsId = OctetString;

type FieldID
{
    ObjectIdentifier FieldType with DisplayInfo{ToText = ObjectIdentifierToString};
    ([|FieldType == primeFieldOID|] PrimeP
        | [|FieldType == characteristicTwoFieldOID|] CharacteristicTwo) Parameters;
}

type EcdsaSigValue
{
    Integer R;
    Integer S;
}

pattern PrimeP = Integer;

// rfc3279
const array<int> primeFieldOID                 = ansiX962OID + [1, 1];
const array<int> characteristicTwoFieldOID     = ansiX962OID + [1, 2];
const array<int> gnBasisOID                    = characteristicTwoFieldOID + [1, 1];
const array<int> tpBasisOID                    = characteristicTwoFieldOID + [1, 2];
const array<int> ppBasisOID                    = characteristicTwoFieldOID + [1, 3];

type CharacteristicTwo
{
    Integer M;
    ObjectIdentifier Basis with DisplayInfo{ToText = ObjectIdentifierToString};
    ([|Basis == gnBasisOID|] Null
        | [|Basis == tpBasisOID|] Trinomial
        | [|Basis == ppBasisOID|] Pentanomial) Parameters;
}

pattern Trinomial = Integer;

type Pentanomial
{
    Integer K1;
    Integer K2;
    Integer K3;
}

pattern FieldElement = OctetString;
pattern ECPoint = OctetString;
pattern EcpkParameters = ECParameters | ObjectIdentifier | Null;

type ECParameters
{
    EcpVer Version;
    FieldID FieldID;
    Curve Curve;
    ECPoint Base;
    Integer Order;
    optional Integer Cofactor;
}

pattern EcpVer = enum Integer{EcpVer1 = 1};

type Curve
{
    FieldElement A;
    FieldElement B;
    optional BitString Seed;
}

///*******************************RFC 3709*****************************/
///Extension: OID = {1.3.6.1.5.5.7.1.12}
type LogotypeExtn
{
    optional LogotypeInfos CommunityLogos with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Explicit};
    optional LogotypeInfo IssuerLogo with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Explicit};
    optional LogotypeInfo SubjectLogo with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Explicit};
    optional OtherLogotypeInfos OtherLogos with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Explicit};
}

pattern LogotypeInfos = array<LogotypeInfo>;

pattern LogotypeInfo = Direct | Indirect;

pattern Direct = LogotypeData with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
pattern Indirect = LogotypeReference with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};

type LogotypeData
{
    optional LogotypeImages Image;
    optional LogotypeAudios Audio with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern LogotypeImages = array<LogotypeImage>;

type LogotypeImage
{
    LogotypeDetails ImageDetails;
    optional LogotypeImageInfo ImageInfo;
}

pattern LogotypeAudios = array<LogotypeAudio>;

type LogotypeAudio
{
    LogotypeDetails AudioDetails;
    optional LogotypeAudioInfo AudioInfo;
}

type LogotypeDetails
{
    IA5String MediaType;
    HashAlgAndValues LogotypeHash;
    IA5Strings LogotypeUri;
}

type LogotypeImageInfo
{
    optional LogotypeImageType Type with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    Integer FileSize;
    Integer XSize;
    Integer YSize;
    optional LogotypeImageResolution Resolution;
    optional IA5String Language with Asn1Encoding{TagNumber = 4, Tagging = Asn1Tagging.Implicit};
}

pattern LogotypeImageType = enum Integer
{
    GrayScale = 0,
    Color = 1
};

pattern LogotypeImageResolution = NumBits | TableSize;
pattern NumBits = Integer with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
pattern TableSize = Integer with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};

type LogotypeAudioInfo
{
    Integer FileSize;
    Integer PlayTime;
    Integer Channels;
    optional Integer SampleRate with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
    optional IA5String Language with Asn1Encoding{TagNumber = 4, Tagging = Asn1Tagging.Implicit};
}

pattern OtherLogotypeInfos = array<OtherLogotypeInfo>;

type OtherLogotypeInfo
{
    ObjectIdentifier LogotypeType;
    LogotypeInfo Info;
}

type LogotypeReference
{
    HashAlgAndValues RefStructHash;
    IA5Strings RefStructUri;
}

pattern IA5Strings = array<IA5String>;
pattern HashAlgAndValues = array<HashAlgAndValue>;

type HashAlgAndValue
{
    AlgorithmIdentifier HashAlg;
    OctetString HashValue;
}

///*******************************RFC 2633*****************************/
///Extension: OID = {1.2.840.113549.1.9.15}
type SmimeCapability
{
    ObjectIdentifier CapabilityID;
    optional Integer Version;
    optional IV Iv;
    //WORKAROUND
    //optional ([|CapabilityID == [1, 2, 840, 113549, 3, 2]|] Rc2CbcParameter
        //| [|CapabilityID == [1, 2, 840, 113549, 3, 7]|] CbcParameter) Parameters;
} with Asn1Encoding{IsExtensible = true};

pattern SmimeCapabilities = array<SmimeCapability>;
pattern IV = OctetString;
pattern CbcParameter = IV;

type Rc2CbcParameter
{
    Integer Version;
    IV Iv;
}

//http://msdn.microsoft.com/en-us/library/windows/desktop/aa378274(v=vs.85).aspx
//Extension: OID = {1.3.6.1.4.1.311.21.7}
type CertificateTemplate
{
    EncodedObjectID ID;
    TemplateVersion MajorVersion;
    optional TemplateVersion MinorVersion;
}

pattern TemplateVersion = Integer;
pattern EncodedObjectID = ObjectIdentifier;

//http://msdn.microsoft.com/en-us/library/windows/desktop/aa378155(v=vs.85).aspx
//Extension: OID = {1.3.6.1.4.1.311.21.10}
pattern MSApplicationPolicies = array<PolicyInformation>;

///*******************************RFC 4211*****************************/
// 3.  CertReqMessage Syntax
type CertReqMsg
{
    CertRequest certReq;
    optional ProofOfPossession popo;
    // optional set<AttributeTypeAndValue> regInfo;
}

// 4.  Proof-of-Possession (POP)
pattern ProofOfPossession = ProofOfPossession_RaVerified | ProofOfPossession_Signature | ProofOfPossession_KeyEncipherment | ProofOfPossession_KeyAgreement;
pattern ProofOfPossession_RaVerified = Null with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
pattern ProofOfPossession_Signature = POPOSigningKey with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
pattern ProofOfPossession_KeyEncipherment = POPOPrivKey with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
pattern ProofOfPossession_KeyAgreement = POPOPrivKey with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};

// 4.1.  Signature Key POP
type POPOSigningKey
{
    optional POPOSigningKeyInput poposkInput with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    AlgorithmIdentifier algorithmIdentifier;
    BitString Signature;
}

type POPOSigningKeyInput
{
    AuthInfoChoice authInfo;
    SubjectPublicKeyInfo publicKey;
}

pattern AuthInfoChoice = AuthInfoChoice_Sender | AuthInfoChoice_PublicKeyMAC;
pattern AuthInfoChoice_Sender = GeneralName with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
pattern AuthInfoChoice_PublicKeyMAC = PKMACValue;

type PKMACValue
{
    AlgorithmIdentifier algId;
    BitString $"value";
}

// 4.2.  Key Encipherment Keys
pattern POPOPrivKey = POPOPrivKey_ThisMessage | POPOPrivKey_SubsequentMessage | POPOPrivKey_DhMac | POPOPrivKey_AgreeMAC;
pattern POPOPrivKey_ThisMessage = BitString with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
pattern POPOPrivKey_SubsequentMessage = SubsequentMessage with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
pattern POPOPrivKey_DhMac = BitString with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};
pattern POPOPrivKey_AgreeMAC = PKMACValue with Asn1Encoding{TagNumber = 3, Tagging = Asn1Tagging.Implicit};
// Partial implementation
// pattern POPOPrivKey_EncryptedKey = EnvelopedData with Asn1Encoding{TagNumber = 2, Tagging = Asn1Tagging.Implicit};

pattern SubsequentMessage = enum Integer
{
    encrCert = 0,
    challengeResp  = 1,
    ...
};

// 5.  CertRequest syntax
type CertRequest
{
    Integer certReqId;
    CertTemplate certTemplate;
    optional Controls controls;
}

type CertTemplate
{
    optional Version version;
    optional Integer serialNumber;
    optional AlgorithmIdentifier signingAlg;
    optional Name issuer;
    optional OptionalValidity validity;
    optional Name subject;
    optional SubjectPublicKeyInfo publicKey;
    optional UniqueIdentifier issuerUID;
    optional UniqueIdentifier subjectUID;
    optional Extensions extensions;
}

type OptionalValidity
{
    optional Time notBefore with Asn1Encoding{TagNumber = 0, Tagging = Asn1Tagging.Implicit};
    optional Time notAfter with Asn1Encoding{TagNumber = 1, Tagging = Asn1Tagging.Implicit};
}

pattern Controls = set<AttributeTypeAndValue>;

const map<ObjectIdentifier, string> OIDString =
{
    // Algorithm
    rsaEncryptionOID -> "rsaEncryption",
    md2WithRSAEncryptionOID -> "md2WithRSAEncryption",
    md5WithRSAEncryptionOID -> "md5WithRSAEncryption",
    sha1WithRSAEncryptionOID -> "sha1WithRSAEncryption",
    sha256WithRSAEncryptionOID -> "sha256WithRSAEncryption",
    sha384WithRSAEncryptionOID -> "sha384WithRSAEncryption",
    sha512WithRSAEncryptionOID -> "sha512WithRSAEncryption",
    sha1WithRSAEncryptionObsoleteOID -> "sha1WithRSAEncryption(Obsolete)",
    idDsaOID -> "id-dsa",
    ecdsaWithSha1OID -> "ecdsa-with-SHA1",
    dhpublicnumberOID -> "dhpublicnumber",
    idKeyExchangeAlgorithmOID -> "id-keyExchangeAlgorithm",
    idEcPublicKeyOID -> "id-ecPublicKey",
    idsha1OID -> "id-sha1",
    idsha256OID -> "id-sha256",
    idsha384OID -> "id-sha384",
    idsha512OID -> "id-sha512",
    idRSAESOAEPOID -> "id-RSAES-OAEP",
    idmgf1OID -> "id-mgf1",
    idpSpecifiedOID -> "id-pSpecified",
    // AttributeType
    idDomainComponentAttrType -> "id-domainComponent",
    idEmailAddressOID -> "id-emailAddress",
    idAtNameAttrType -> "id-at-name",
    idAtCommonNameAttrType -> "id-at-commonName",
    idAtLocalityNameAttrType -> "id-at-localityName",
    idAtStateOrProvinceNameAttrType -> "id-at-stateOrProvinceName",
    idAtOrganizationNameAttrType -> "id-at-organizationName",
    idAtOrganizationUnitNameAttrType -> "id-at-organizationUnitName",
    idAtTitleAttrType -> "id-at-title",
    idAtDnQualifierAttrType -> "id-at-dnQualifier",
    idAtCountryNameAttrType -> "id-at-countryName",
    idAtSerialNumberAttrType -> "id-at-serialNumber",
    idAtPseudonymAttrType -> "id-at-pseudonym",
    // Extension
    idCeAuthorityKeyIdentifierOID -> "id-ce-authorityKeyIdentifier",
    idCeSubjectKeyIdentifierOID -> "id-ce-subjectKeyIdentifier",
    idCeKeyUsageOID -> "id-ce-keyUsage",
    idCePrivateKeyUsagePeriodOID -> "id-ce-privateKeyUsagePeriod",
    idCeCertificatePoliciesOID -> "id-ce-certificatePolicies",
    idCePolicyMappingsOID -> "id-ce-policyMappings",
    idCeSubjectAltNameOID -> "id-ce-subjectAltName",
    idCeIssuerAltNameOID -> "id-ce-issuerAltName",
    idCeSubjectDirectoryAttributesOID -> "id-ce-subjectDirectoryAttributes",
    idCeBasicConstraintsOID -> "id-ce-basicConstraints",
    idCeNameConstraintsOID -> "id-ce-nameConstraints",
    idCePolicyConstraintsOID -> "id-ce-policyConstraints",
    idCeExtKeyUsageOID -> "id-ce-extKeyUsage",
    idCeCRLDistributionPointsOID -> "id-ce-cRLDistributionPoints",
    idCeInhibitAnyPolicyOID -> "id-ce-inhibitAnyPolicy",
    idCeFreshestCRLOID -> "id-ce-freshestCRL",
    idCeCRLNumberOID -> "id-ce-cRLNumber",
    idCeDeltaCRLIndicatorOID -> "id-ce-deltaCRLIndicator",
    idCeIssuingDistributionPointOID -> "id-ce-issuingDistributionPoint",
    idCeCRLReasonOID -> "id-ce-cRLReason",
    idCeHoldInstructionCodeOID -> "id-ce-holdInstructionCode",
    idCeInvalidityDataOID -> "id-ce-invalidityData",
    idCeCertificateIssuerOID -> "id-ce-certificateIssuer",
    idPeAutorityInfoAccessOID -> "id-pe-authorityInfoAccess",
    idPeSubjectInfoAccessOID -> "id-pe-subjectInfoAccess",
    idPeLogotypeOID -> "id-pe-logotype",
    idSmimeCapabilitiesOID -> "S/MIME Capabilities",  
    CertificateTemplateOID -> "Certificate Template",
    MsApplicationPoliciesOID -> "MS Application Policies",
    // PolicyQualifierId
    idQtCpsOID -> "id-qt-cps",
    idQtUnoticeOID -> "id-qt-unotice",
    // FieldType 
    primeFieldOID -> "prime-field",
    characteristicTwoFieldOID -> "charateristic-two-field",
    // Basis
    gnBasisOID -> "gnBasis",
    tpBasisOID -> "tpBasis",
    ppBasisOID -> "ppBasis",
    // RFC 2560 OCSP
    idPkixOcspBasicOID -> "id-pkix-ocsp-basic",
    idPkixOcspNonceOID -> "id-pkix-ocsp-nonce",
    idPkixOcspCrlOID -> "id-pkix-ocsp-crl",
    idPkixOcspResponseOID -> "id-pkix-ocsp-response",
    idPkixOcspNocheckOID -> "id-pkix-ocsp-nocheck",
    idPkixOcspArchiveCutOffOID -> "id-pkix-ocsp-archive-cutoff",
    idPkixOcspServiceLocatorOID -> "id-pkix-ocsp-service-locator",
    // Microsoft implementation
    szOID_NTDS_REPLICATIONOID -> "szOID_NTDS_REPLICATION"
};

static string ObjectIdentifierToString(any data)
{
    array<int> oid = data as array<int>;
    if (oid in OIDString)
    {
        return OIDString[oid];
    }
    else
    {
        return oid.ToString();
    }
}

///*******************************RFC 5755*****************************/
type AttributeCertificate
{
    AttributeCertificateInfo acinfo;
    AlgorithmIdentifier signatureAlgorithm;
    BitString signatureValue;
}

type AttributeCertificateInfo
{
    AttCertVersion version;
    Holder holder;
    AttCertIssuer issuer;
    AlgorithmIdentifier signature;
    CertificateSerialNumber serialNumber;
    AttCertValidityPeriod attrCertValidityPeriod;
    array<Attribute> attributes;
    optional UniqueIdentifier issuerUniqueID;
    optional Extensions extensions;
}

pattern AttCertVersion = enum Integer { v2 = 1 };

type Holder
{
    optional IssuerSerial baseCertificateID with Asn1Encoding{TagNumber = 0};
    optional GeneralNames entityName with Asn1Encoding{TagNumber = 1};
    optional ObjectDigestInfo objectDigestInfo with Asn1Encoding{TagNumber = 2};
}

type ObjectDigestInfo
{
    DigestedObjectType digestedObjectType;
    optional ObjectIdentifier otherObjectTypeID;
    AlgorithmIdentifier digestAlgorithm;
    BitString objectDigest;
}

pattern DigestedObjectType = enum Integer {publicKey = 0, publicKeyCert = 1, otherObjectTypes = 2};

pattern AttCertIssuer = GeneralNames | AttCertIssuer_V2Form;

pattern AttCertIssuer_V2Form = V2Form with Asn1Encoding{TagNumber = 0};

type V2Form
{
    optional GeneralNames issuerName;
    optional IssuerSerial baseCertificateID with Asn1Encoding{TagNumber = 0};
    optional ObjectDigestInfo objectDigestInfo with Asn1Encoding{TagNumber = 1};
}

type IssuerSerial
{
    GeneralNames issuer;
    CertificateSerialNumber serial;
    optional UniqueIdentifier issuerUID;
}

type AttCertValidityPeriod
{
    GeneralizedTime notBeforeTime;
    GeneralizedTime notAfterTime;
}

// WCCE for Attribute
type EnrollmentNameValuePair
{
    BMPString name;
    BMPString $"value";
}

pattern WCCEAnyString = NumericString | PrintableString | TeletexString | VideotexString | IA5String |
    GraphicString | VisibleString | GeneralString | UniversalString | BMPString;

type RequestClientInfo
{
    Integer clientId;
    UTF8String MachineName;
    UTF8String UserName;
    UTF8String ProcessName;
}

type CSPProvider
{
    Integer kySpec;
    BMPString cspName;
    BitString signature;
}

// RFC 2985 PKCS #9 for Attribute
pattern ContentType = ObjectIdentifier;

// CMC for Attribute
pattern ExtensionReq = array<X509.Extension>;

protocol SPANTreeBPDU with 
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Spanning Tree BPDU Protocol (IEEE 802.1w,)",
    ShortName = "SPANTreeBPDU",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "IEEE Std 802.1w,", Version = "2001 Endition", Link = "http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=946612"},
            new Reference{Name = "IEEE Std 802.1D,", Version = "1998 Endition", Link = "http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1389253"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "356548", Date = "11/16/2013"}
        ]
};
    
using Standard;
using Utility;
using LLC;
using IP1394;

endpoint Node
    over LLC.Node | over IP1394.Node
    accepts Packet;

autostart actor SPANTreeBPDUOverLLC(LLC.Node node)
{
    process node accepts s:LLC.Segment where (((s.DSAPaddress * 2 + s.IG) & 0xFE) == 0x42 && (s.InformationData != nothing))
    {
        switch ((s.InformationData as InformationData).Payload)
        {
            case p:Packet from BinaryDecoder<Packet> =>
                dispatch (endpoint Node over node) accepts p;
            default => 
                ThrowDecodingException("SPANTreeBPDU", "Packet");
        }
    }
}

autostart actor STPOverIP1394(IP1394.Node node)
{
       process node accepts f:IP1394.Frame where
        ((f.EncapsulationHeader is IP1394.UnFragment && (f.EncapsulationHeader as IP1394.UnFragment).EthernetType == 0x0777)
        || (f.EncapsulationHeader is IP1394.FirstFragment && (f.EncapsulationHeader as IP1394.FirstFragment).EthernetType == 0x0777))
       {
           switch (f.Payload)
           {
               case p:Packet from BinaryDecoder<Packet> =>
                var n = endpoint Node over node;
                  dispatch n accepts p;
            default=>
                ThrowDecodingException("SPANTreeBPDU", "Packet");
           }
       }
}

message Packet
{
    ushort ProtocolId;
    byte Version;
    byte BPDUType;
    optional ([|BPDUType == 0|] ConfigurationFlags | [|BPDUType == 2|] RSTFlags) Flags;
    optional [|BPDUType in {0,2}|] Address RootId;
    optional [|BPDUType in {0,2}|] uint RootPathCost;
    optional [|BPDUType in {0,2}|] Address BridgeId;
    optional [|BPDUType in {0,2}|] ushort PortId;
    optional [|BPDUType in {0,2}|] ushort MsgAge;
    optional [|BPDUType in {0,2}|] ushort MaxAge;
    optional [|BPDUType in {0,2}|] ushort HelloTime;
    optional [|BPDUType in {0,2}|] ushort ForwardDelay;
    optional [|BPDUType == 2|] byte Version1Length;
    
    override string ToString()
    {
        return "BPDUType: " + GetSPANTreeBPDUType(BPDUType as byte);
    }
}

// IEEE Std 802.1w-2001   -  9.3.1 Configuration BPDUs
type ConfigurationFlags
{
    byte TopologyChangeAck with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 6};
    byte TopologyChange with BinaryEncoding{Width = 1};
}

// IEEE Std 802.1w-2001   -  9.3.3 Rapid Spanning Tree BPDUs (RST BPDUs)
type RSTFlags
{
    byte TopologyChangeAck with BinaryEncoding{Width = 1};
    byte Agreement with BinaryEncoding{Width = 1};
    byte Forwarding with BinaryEncoding{Width = 1};
    byte Learning with BinaryEncoding{Width = 1};
    byte PortRole with BinaryEncoding{Width = 2};
    byte Proposal with BinaryEncoding{Width = 1};
    byte TopologyChange with BinaryEncoding{Width = 1};
}

type Address
{
    ushort Priority;
    MacAddress MacAddress;
}

string GetSPANTreeBPDUType(byte BPDUTypeValue)
{
    switch (BPDUTypeValue)
    {
        case 0x00  => return "Configuration BPDU";
        case 0x80  => return "Notification BPDU";
        case 0x02  => return "Rapid Spanning Tree BPDU";
        default    => return "Unknown BPDU Type( " + (BPDUTypeValue as string) + ")";
    }
}

module PcapFileActors with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "380832", Date = "08/14/2015"}
        ]
};

using Standard;
using PcapFile;
using Ethernet;
using SolarisIPNET;
using IP1394;
using WiFi;
using WiFiChannelInfo;
using LinuxCookedMode;
using Utility;
using WiFiChannelInfo;
using IPv4;
using IPv6;
using ERF;
using Radiotap;

autostart actor PcapFileToBasicNetworkingProtocol(PcapFile.PcapFileEndpoint pcap)
{
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_LINUX_SLL}
    {
        switch (pk.Payload)
        {
            case d:LinuxCookedMode.Datagram from BinaryDecoder<LinuxCookedMode.Datagram> =>
                dispatch (endpoint LinuxCookedMode.Node) accepts d;
            default =>
                ThrowDecodingException("PcapFile", "LinuxCookedMode");
        }
    }
}

autostart actor PcapNgFileToBasicNetworkingProtocol(PcapFile.PcapNgFileEndpoint pcapNg)
{
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_LINUX_SLL}
    {
        switch (pk.Payload)
        {
            case d:LinuxCookedMode.Datagram from BinaryDecoder<LinuxCookedMode.Datagram> =>
                dispatch (endpoint LinuxCookedMode.Node) accepts d;
            default =>
                ThrowDecodingException("PcapFile", "LinuxCookedMode");
        }
    }
}

autostart actor PcapFileToProtocol(PcapFile.PcapFileEndpoint pcap)
{
    process pcap accepts pk:PcapFile.Packet where !pk.IsSessionTruncated && pk.Network == PcapLinkTypeCode.LINKTYPE_ETHERNET
    {
        switch (pk.Payload)
        {
            case f:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[false]> =>
                dispatch (endpoint Ethernet.Node) accepts f;
            default =>
                ThrowDecodingException("PcapFile", "Ethernet");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_RAW || Network is PcapLinkTypeCode.LINKTYPE_12}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                DispatchIPv4DatagramToReassemblyNode(d);
            case d:IPv6.Datagram from BinaryDecoder<IPv6.Datagram> =>
                DispatchIPv6DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("PcapFile", "RAW");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IEEE802_11}
    {
        switch (pk.Payload)
        {
            case wifi:NetMon3WiFiChannelMessage from BinaryDecoder<NetMon3WiFiChannelMessage> =>
                dispatch endpoint WiFiChannelNode accepts wifi;
            default =>
                if (!WiFi.DecodeWiFiMessageAndDispatch(pk.Payload, true))
                {
                    ThrowDecodingException("PcapFile, WiFi");
                }
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IEEE802_11_RADIOTAP}
    {
        switch (pk.Payload)
        {
            case m:Radiotap.ieee80211_radiotap from BinaryDecoder<Radiotap.ieee80211_radiotap> =>
                dispatch endpoint Radiotap.Node accepts m;
            default =>
                ThrowDecodingException("PcapFile", "ieee80211_radiotap");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_APPLE_IP_OVER_IEEE1394}
    {
        switch (pk.Payload)
        {
            case f:IP1394.Frame from BinaryDecoder<IP1394.Frame> =>
                dispatch (endpoint IP1394.ReassemblyNode[f.DestinationAddress.FlatAddress < f.SourceAddress.FlatAddress ? f.DestinationAddress.FlatAddress: f.SourceAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapFile", "IP1394");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IPV4}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                DispatchIPv4DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("PcapFile", "IPv4");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IPV6}
    {
        switch (pk.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                DispatchIPv6DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("PcapFile", "IPv6");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_ERF}
    {
        switch (pk.Payload)
        {
            case r:ERF.ERFRecord from BinaryDecoder<ERF.ERFRecord> =>
                dispatch endpoint ERF.Node accepts r;
            default =>
                ThrowDecodingException("PcapFile", "ERF");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IPNET}
    {
        switch (pk.Payload)
        {
            case f:SolarisIPNET.Frame from BinaryDecoder<SolarisIPNET.Frame> =>
                dispatch endpoint SolarisIPNET.Node accepts f;
            default =>
                ThrowDecodingException("PcapFile", "Solaris IPNET");
        }
    }
}

autostart actor PcapNgFileToProtocol(PcapFile.PcapNgFileEndpoint pcapNg)
{
    process pcapNg accepts pk:PcapFile.PacketNg where !pk.IsSessionTruncated && pk.LinkType == PcapNgLinkTypeCode.LINKTYPE_ETHERNET
    {
        switch (pk.Payload)
        {
            case f:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[false]> =>
                dispatch (endpoint Ethernet.Node) accepts f;
            default =>
                ThrowDecodingException("PcapNgFile", "Ethernet");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_RAW || LinkType is PcapNgLinkTypeCode.LINKTYPE_12}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                DispatchIPv4DatagramToReassemblyNode(d);
            case d:IPv6.Datagram from BinaryDecoder<IPv6.Datagram> =>
                DispatchIPv6DatagramToReassemblyNode(d);
            default =>
                ThrowDecodingException("PcapNgFile", "RAW");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_IEEE802_11}
    {
        switch (pk.Payload)
        {
            case wifi:NetMon3WiFiChannelMessage from BinaryDecoder<NetMon3WiFiChannelMessage> =>
                dispatch endpoint WiFiChannelNode accepts wifi;
            default =>
                if (!WiFi.DecodeWiFiMessageAndDispatch(pk.Payload, true))
                {
                    ThrowDecodingException("PcapNgFile, WiFi");
                }
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_IEEE802_11_RADIO}
    {
        switch (pk.Payload)
        {
            case m:Radiotap.ieee80211_radiotap from BinaryDecoder<Radiotap.ieee80211_radiotap> =>
                dispatch endpoint Radiotap.Node accepts m;
            default =>
                ThrowDecodingException("PcapNgFile", "ieee80211_radiotap");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_APPLE_IP_OVER_IEEE1394}
    {
        switch (pk.Payload)
        {
            case f:IP1394.Frame from BinaryDecoder<IP1394.Frame> =>
                dispatch (endpoint IP1394.ReassemblyNode[f.DestinationAddress.FlatAddress < f.SourceAddress.FlatAddress ? f.DestinationAddress.FlatAddress: f.SourceAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapNgFile", "IP1394");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_IPNET}
    {
        switch (pk.Payload)
        {
            case f:SolarisIPNET.Frame from BinaryDecoder<SolarisIPNET.Frame> =>
                dispatch endpoint SolarisIPNET.Node accepts f;
            default =>
                ThrowDecodingException("PcapNgFile", "Solaris IPNET");
        }
    }
}

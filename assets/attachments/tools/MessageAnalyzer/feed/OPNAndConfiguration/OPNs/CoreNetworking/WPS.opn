protocol WPS
    with BinaryEncodingDefaults {Endian = Endian.Little, TextEncoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "Wi-Fi Protected Setup Protocol",
    ShortName = "WPS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "Wi-Fi Protected Setup Specification", Version = "1.0"}
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "369414", Date = "10/22/2014"}
        ]
};

using Standard;
using WiFi;
using Utility;

// ------------------------------------ Constant Value ----------------------------------------
const int WPS_ManagementFrame_ElementID = 0xDD;
const binary WPS_ManagementFrame_OUI = $[0050F2];

autostart actor WPSOverWiFiNode(WiFi.Node node)
{
    observe node accepts m:WiFiMessage where (m.Body is frame:WiFi.ProbeResponseFrame)
    {
        frame.InformationElements = ExtendAsWPS(frame.InformationElements);
    }
    
    observe node accepts m:WiFiMessage where (m.Body is frame:WiFi.BeaconFrame)
    {
        frame.InformationElements = ExtendAsWPS(frame.InformationElements);
    }
    
    array<WiFi.InformationField> ExtendAsWPS(array<WiFi.InformationField> elements)
    {
        for (int index = 0; index < elements.Count; index++)
        {
            if (elements[index] is vendorSpecificInformation:WiFi.VendorSpecificInformation &&
                vendorSpecificInformation.ElementID == WPS_ManagementFrame_ElementID && vendorSpecificInformation.OUI == WPS_ManagementFrame_OUI &&
                vendorSpecificInformation.VendorSpecificContent is bin:binary &&
                bin.Count >= 1 && bin[0] == 4)
            {
                switch (bin)
                {
                    case wpsIE:WPSInformationElement from BinaryDecoder<WPSInformationElement> =>
                        // assign field value of IE
                        wpsIE.ElementID = vendorSpecificInformation.ElementID;
                        wpsIE.Length = vendorSpecificInformation.Length;
                        wpsIE.OUI = vendorSpecificInformation.OUI;
                        wpsIE.VendorSpecificContent = nothing;

                        elements[index] = wpsIE;
                    default =>
                        // skip this VendorSpecificInformation
                        continue;
                }
            }
        }
        
        return elements;
    }
}

// ------------------------------------ Messages & Types ----------------------------------------
// 7.2 Management Frames
type WPSInformationElement : VendorSpecificInformation
{
    new byte ElementID with Encoding{Ignore = true};
    new byte Length with Encoding{Ignore = true};
    new binary OUI with Encoding{Ignore = true};
    new (binary | any) VendorSpecificContent with Encoding{Ignore = true};
    byte OUIType where ValidationCheckValue(value == 0x04, null, true, ReferenceType.Type, "WPS", "OUIType", "BeaconFrame", 0x04, value);
    array<DataElement> DataElement;
}

// 11. Data Element Definitions, partial implemented
// Just implement element for Beacon Frame and Probe Response 

const array<byte> ConfigMethods_BYTEARRAY = [0x10, 0x08];
const array<byte> DeviceName_BYTEARRAY = [0x10, 0x11];
const array<byte> DevicePasswordID_BYTEARRAY = [0x10, 0x12];
const array<byte> Manufacturer_BYTEARRAY = [0x10, 0x21];
const array<byte> ModelName_BYTEARRAY = [0x10, 0x23];
const array<byte> ModelNumber_BYTEARRAY = [0x10, 0x24];
const array<byte> ResponseType_BYTEARRAY = [0x10, 0x3B];
const array<byte> RFBands_BYTEARRAY = [0x10, 0x3C];
const array<byte> SelectedRegistrar_BYTEARRAY = [0x10, 0x41];
const array<byte> SerialNumber_BYTEARRAY = [0x10, 0x42];
const array<byte> WifiProtectedSetupState_BYTEARRAY = [0x10, 0x44];
const array<byte> UUID_E_BYTEARRAY = [0x10, 0x47];
const array<byte> VendorExtension_BYTEARRAY = [0x10, 0x49];
const array<byte> Version_BYTEARRAY = [0x10, 0x4A];
const array<byte> SelectedRegistrarConfigMethods_BYTEARRAY = [0x10, 0x53];
const array<byte> PrimaryDeviceType_BYTEARRAY = [0x10, 0x54];
const array<byte> APSetupLocked_BYTEARRAY = [0x10, 0x57];

pattern DataElement = [|RemainingBitLength(stream) >= 32|]
    ([|PeekByteCompare(stream, stream.BitPosition, ConfigMethods_BYTEARRAY)|] ConfigMethods |
    [|PeekByteCompare(stream, stream.BitPosition, DeviceName_BYTEARRAY)|] DeviceName |
    [|PeekByteCompare(stream, stream.BitPosition, DevicePasswordID_BYTEARRAY)|] DevicePasswordID |
    [|PeekByteCompare(stream, stream.BitPosition, Manufacturer_BYTEARRAY)|] Manufacturer |
    [|PeekByteCompare(stream, stream.BitPosition, ModelName_BYTEARRAY)|] ModelName |
    [|PeekByteCompare(stream, stream.BitPosition, ModelNumber_BYTEARRAY)|] ModelNumber |
    [|PeekByteCompare(stream, stream.BitPosition, ResponseType_BYTEARRAY)|] ResponseType |
    [|PeekByteCompare(stream, stream.BitPosition, RFBands_BYTEARRAY)|] RFBands |
    [|PeekByteCompare(stream, stream.BitPosition, SelectedRegistrar_BYTEARRAY)|] SelectedRegistrar |
    [|PeekByteCompare(stream, stream.BitPosition, SerialNumber_BYTEARRAY)|] SerialNumber |
    [|PeekByteCompare(stream, stream.BitPosition, WifiProtectedSetupState_BYTEARRAY)|] WifiProtectedSetupState |
    [|PeekByteCompare(stream, stream.BitPosition, UUID_E_BYTEARRAY)|] UUID_E |
    [|PeekByteCompare(stream, stream.BitPosition, VendorExtension_BYTEARRAY)|] VendorExtension |
    [|PeekByteCompare(stream, stream.BitPosition, Version_BYTEARRAY)|] Version |
    [|PeekByteCompare(stream, stream.BitPosition, SelectedRegistrarConfigMethods_BYTEARRAY)|] SelectedRegistrarConfigMethods |
    [|PeekByteCompare(stream, stream.BitPosition, PrimaryDeviceType_BYTEARRAY)|] PrimaryDeviceType |
    [|PeekByteCompare(stream, stream.BitPosition, APSetupLocked_BYTEARRAY)|] APSetupLocked |
    binary);

type DataElementBase
{
    ushort ID;
    ushort Length;
} with BinaryEncodingDefaults{Endian = Endian.Big};

type ConfigMethods : DataElementBase
{
    ConfigMethods_ConfigMethods ConfigMethods;
} with BinaryEncodingDefaults{Endian = Endian.Big};

// 802.11 section 7.3.1.4
pattern ConfigMethods_ConfigMethods = flags ushort
{
    $"USBA(Flash Drive)"     = 0x0001,
    $"Ethernet"              = 0x0002,
    $"Label"                 = 0x0004,
    $"Display"               = 0x0008,
    $"External NFC Token"    = 0x0010,
    $"Integrated NFC Token"  = 0x0020,
    $"NFC Interface"         = 0x0040,
    $"PushButton"            = 0x0080,
    $"Keypad"                = 0x0100,
    ...
};

type DeviceName : DataElementBase
{
    string DeviceName with BinaryEncoding{WidthForComposedType = Length * 8, TextEncoding = TextEncoding.UTF8};
}

type DevicePasswordID : DataElementBase
{
    ushort DevicePasswordID;
}

type Manufacturer : DataElementBase
{
    string Manufacturer with BinaryEncoding{Length = Length};
}

type ModelName : DataElementBase
{
    string ModelName with BinaryEncoding{Length = Length};
}

type ModelNumber : DataElementBase
{
    binary ModelNumber with BinaryEncoding{Length = Length};
}

type ResponseType : DataElementBase
{
    ResponseType_ResponseType ResponseType;
}

pattern ResponseType_ResponseType = enum byte
{
    $"Enrollee, Info only" = 0,
    $"Enrollee, open 802.1X" = 1,
    $"Registrar" = 2,
    $"AP" = 3,
    ...
};

type RFBands : DataElementBase
{
    RFBands_RFBands RFBands;
}

pattern RFBands_RFBands = enum byte
{
    $"2.4GHz" = 1,
    $"5.0GHz" = 2,
    ...
};

type SelectedRegistrar : DataElementBase
{
    bool SelectedRegistrar;
}

type SerialNumber : DataElementBase
{
    binary SerialNumber with BinaryEncoding{Length = Length};
}

type WifiProtectedSetupState : DataElementBase
{
    WifiProtectedSetupState_WifiProtectedSetupState WifiProtectedSetupState;
}

pattern WifiProtectedSetupState_WifiProtectedSetupState = enum byte
{
    $"Reserved" = 0,
    $"Not configured" = 1,
    $"Configured" = 2,
    ...
};

type UUID_E : DataElementBase
{
    binary UUID_E with BinaryEncoding{Length = 16};
}

type VendorExtension : DataElementBase
{
    uint VendorID with BinaryEncoding{Width = 24, Endian = Endian.Big};
    binary VendorData with BinaryEncoding{Length = Length - 3};
}

type Version : DataElementBase
{
    byte Version with DisplayInfo{ToText = (any v) => DecToHexFormat(v) };
}

type SelectedRegistrarConfigMethods : DataElementBase
{
    ConfigMethods_ConfigMethods SelectedRegistrarConfigMethods;
}

type PrimaryDeviceType : DataElementBase
{
    binary PrimaryDeviceType with BinaryEncoding{Length = 8};
}

type APSetupLocked : DataElementBase
{
    bool APSetupLocked;
}

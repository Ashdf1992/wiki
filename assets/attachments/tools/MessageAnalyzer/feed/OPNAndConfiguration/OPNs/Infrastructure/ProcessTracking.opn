protocol ProcessTracking;

using Etw;
using SazFile;
using Procmon;

optional uint get ProcessId(this any message msg)
{
	if (msg is EtwProviderMsg)
	{
		var epm = msg as EtwProviderMsg;
		return epm.EventRecord.Header.ProcessId;
	}

	if (msg is SazSession)
	{
		var sazSession = msg as SazSession;
		return SazFile.ProcessId(sazSession);
	}
	
	dynamic d = msg;
	any processId;
	if(msg.ModuleName == "Windows_Kernel_Trace")
	{
		if(HasField(d, "PID"))
		{
			processId = d.PID;
			return processId is uint ? processId as uint : nothing;
		}
		
		if(HasField(d, "ProcessId"))
		{
			processId = d.ProcessId;
			return processId is uint ? processId as uint : nothing;
		}
	}
	else
	if(msg.ModuleName == "Microsoft_Windows_TCPIP")
	{
		if(HasField(d, "Pid"))
		{
			processId = d.Pid;
			return processId is uint ? processId as uint : nothing;
		}
	}
	else
	if(msg.ModuleName == "Procmon")
	{
		if(HasField(d, "PID"))
		{
		    if ((d.PID is nothing) || (d.PID == null))
			    return nothing;

			string pid = d.PID.ToString();
			return pid.ToUInt();
		}
	}
	else
	if(msg#Process_ID != nothing)
	{
		return msg#Process_ID;
	}
		
	if(msg.Origins.Count > 0)
        return ProcessId(msg.Origins[0]);

	return nothing;
}


string get ProcessName(this any message msg)
{
	if (msg is SazSession)
	{
		var sazSession = msg as SazSession;
		return SazFile.ProcessName(sazSession);
	}

	if(msg.ModuleName == "Windows_Kernel_Trace")
	{
		dynamic d = msg;
		if(HasField(d, "ImageFileName"))
		{
			any processName = d.ImageFileName;
			return processName is string ? processName as string : null;
		}					
	}

	if(msg.ModuleName == "Procmon")
	{
		dynamic d = msg;
		if(HasField(d, "ProcessName"))
		{
			any processName = d.ProcessName;
			return processName is string ? processName as string : null;
		}					
	}

	var processId = msg.ProcessId;

	if(msg.ModuleName == "Microsoft_Windows_TCPIP")
	{
		dynamic d = msg;
		if(HasField(d, "Pid"))
		{
			processId = d.Pid;
		}
	}

	if(processId == nothing)
	    return null;

	//	Get name from table
	return msg.GetProcessName(processId as uint);
}

string get ProcessCommand(this any message msg)
{
	var processId = msg.ProcessId;
	if(processId == nothing)
		return null;

	//	Get name from table
	return msg.GetProcessCommand(processId as uint);
}

string get ProcessUserSID(this any message msg)
{
	var processId = msg.ProcessId;
	if(processId == nothing)
		return null;

	//	Get name from table
	return msg.GetProcessUserSID(processId as uint);
}

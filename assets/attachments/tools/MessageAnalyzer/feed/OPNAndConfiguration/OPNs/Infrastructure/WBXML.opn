module WBXML with
BinaryEncodingDefaults {Endian = Endian.Big, TextEncoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "WAP Binary XML Content Format",
    ShortName = "WBXML",
    Description = "This implementation is designed for Exchange ActiveSync, and only supports following features: tokens, code pages, inline strings, opaque data."
},
OPNAuthoring
{
    Copyright = "(c) 2014 Microsoft Corporation",
    References = [new Reference{Name = "WAP Binary XML Content Format", Link = "http://www.w3.org/1999/06/NOTE-wbxml-19990624/"}],
    RevisionSummary = [new Revision{Class=RevisionClass.Major, Version="362888", Date="05/09/2014"}]
};

using Standard;
using Utility;

message WBXmlMessage
{
    DocumentType WBXmlDocument;
}

// WBXML Syntax
//start = version publicid charset strtbl body
//publicid = mb_u_int32 | ( zero index )
//zero = u_int8, containing the value zero (0).
//index = mb_u_int32, integer index into string table.
//charset = mb_u_int32
//strtbl = length *byte. EAS will not use String Table.
//length = mb_u_int32, integer length.
//body = *pi element *pi. EAS will not use processing instruction.
type DocumentType
{
    // optional string XmlString with Encoding {Ignore = true};// , MimeDescription {Format = "text/xml"};
    optional xml DecodedXml with Encoding {Ignore = true}; // , MimeDescription {Format = "text/xml"};
    VersionType Version;
    optional (byte where value == 0) Zero;
    MultiByteUnsignedInteger PublicID with DisplayInfo {ToText = PublicIDToText};
    MultiByteUnsignedInteger CharSet with DisplayInfo {ToText = CharSetToText};
    MultiByteUnsignedInteger StringTableLength;
    binary StringTable with BinaryEncoding {Length = StringTableLength.GetValue()};
    ElementType Body with BinaryEncodingDefaults {TextEncoding = CharSetToTextEncoding(CharSet.GetValue())};
    
    TextEncoding GetDefaultEncoding()
    {
        TextEncoding encoding = CharSetToTextEncoding(CharSet.GetValue());
        return encoding;
    }
    override string ToString()
    {
        return "Version: " + Version.ToString() + ", PublicID: " + PublicIDToText(PublicID) +
            ", CharacterSet: " + CharSetToText(CharSet);
    }
    static string PublicIDToText(any data)
    {
        // Public Identifiers
        // 0: String table index follows; public identifier is encoded as a literal in the string table.
        // 1: Unknown or missing public identifier.
        // 2: "-//WAPFORUM//DTD WML 1.0//EN" (WML 1.0)
        // 3: "-//WAPFORUM//DTD WTA 1.0//EN" (WTA Event 1.0)
        // 4: "-//WAPFORUM//DTD WML 1.1//EN" (WML 1.1)
        // 5-7F: Reserved
        uint id = (data as MultiByteUnsignedInteger).GetValue();
        switch (id)
        {
            case 0 =>
                // assert false;
                return "Error";
            case 1 =>
                return "Unknown or missing public identifier";
            case 2 =>
                return "-//WAPFORUM//DTD WML 1.0//EN";
            case 3 =>
                return "-//WAPFORUM//DTD WTA 1.0//EN";
            case 4 =>
                return "-//WAPFORUM//DTD WML 1.1//EN";
            case 0x1201 =>
                return "-//SYNCML//DTD SyncML 1.2//EN";
            default =>
                // assert false;
                return "Reserved " + id.ToString();
        }
    }
    static string CharSetToText(any data)
    {
        // Extract some from http://www.iana.org/assignments/character-sets/character-sets.xml
        //  Name     MIBenum
        //  US-ASCII    3
        //  UNICODE-1-1-UTF-7    103
        //  UTF-8    106
        //  UNICODE-1-1    1010
        //  UTF-7    1012
        //  UTF-16BE    1013
        //  UTF-16LE    1014
        //  UTF-16    1015
        //  UTF-32    1017
        //  UTF-32BE    1018
        //  UTF-32LE    1019
        uint charset = (data as MultiByteUnsignedInteger).GetValue();
        return EnumToString(CharSetToTextEncoding(charset), "Standard.TextEncoding");
        //switch (charset)
        //{
        //    case 3 => return "US-ASCII";
        //    case 103 => return "UNICODE-1-1-UTF-7";
        //    case 106 => return "UTF-8";
        //    case 1010 => return "UNICODE-1-1";
        //    case 1012 => return "UTF-7";
        //    case 1013 => return "UTF-16BE";
        //    case 1014 => return "UTF-16LE";
        //    case 1015 => return "UTF-16";
        //    case 1017 => return "UTF-32";
        //    case 1018 => return "UTF-32BE";
        //    case 1019 => return "UTF-32LE";
        //    default => return "NotSupported_" + charset.ToString();
        //}
    }
    static TextEncoding CharSetToTextEncoding(uint charset)
    {
        // Extract some from http://www.iana.org/assignments/character-sets/character-sets.xml
        //  Name     MIBenum
        //  US-ASCII    3
        //  UNICODE-1-1-UTF-7    103
        //  UTF-8    106
        //  UNICODE-1-1    1010
        //  UTF-7    1012
        //  UTF-16BE    1013
        //  UTF-16LE    1014
        //  UTF-16    1015
        //  UTF-32    1017
        //  UTF-32BE    1018
        //  UTF-32LE    1019
        // TextEncoding: None, ASCII, UTF7, UTF8, UTF16, UTF32, BigEndianUnicode
        switch (charset)
        {
            case 3 => return TextEncoding.ASCII;
            case 103 => return TextEncoding.UTF7;
            case 106 => return TextEncoding.UTF8;
            case 1010 => return TextEncoding.UTF8;
            case 1012 => return TextEncoding.UTF7;
            case 1013 => return TextEncoding.BigEndianUnicode;
            case 1014 => return TextEncoding.UTF16;
            case 1015 => return TextEncoding.UTF16;
            //case 1017 => return TextEncoding.UTF32;
            //case 1018 => return TextEncoding.BigEndianUnicode;
            //case 1019 => return TextEncoding.UTF32;
            default => return TextEncoding.None;
        }
    }
}

// WBXML Syntax
//element = stag [ 1*attribute END ] [ *content END ]. EAS will not use attributes.
//stag = TAG | ( LITERAL index ). EAS will not use index name.
//content = element | string | extension | entity | pi | opaque. EAS will not use extension, entity, pi.
pattern Flag0x40 = byte where (value & 0x40) == 0x40;
pattern ContentType = StringType | OpaqueType | ElementType;
type ElementType
{
    optional [|CurrentByte(stream) == 0x00|] CodePageType CodePage;
    byte NameToken where !(value in GlobalTokenArray) with DisplayInfo {ToText = NameTokenToText};
    optional [|NameToken is Flag0x40|] array<ContentType> Contents;
    optional [|NameToken is Flag0x40|] END EndToken;
    
    byte GetCodePage(byte last)
    {
        if (CodePage == nothing)
            return last;
        else
            return (CodePage as CodePageType).Value;
    }
    byte GetNameToken()
    {
        return (NameToken & 0x3F) as byte;
    }
    static string NameTokenToText(any data)
    {
        byte token = data as byte;
        token = (token & 0x3F) as byte;
        return Utility.DecToHexFormat(token);
    }
}

// WBXML Syntax
//string = inline | tableref. EAS will not use index string.
//inline = STR_I termstr
//length = mb_u_int32, integer length.
//termstr = charset-dependent string with termination
//pattern AsciiString = string with BinaryEncoding {TextEncoding = TextEncoding.ASCII}; // charset: 3
//pattern Utf7String = string with BinaryEncoding {TextEncoding = TextEncoding.UTF7}; // charset: 1012
//pattern Utf8String = string with BinaryEncoding {TextEncoding = TextEncoding.UTF8}; // charset: 0, 106
//pattern Utf16String = string with BinaryEncoding {TextEncoding = TextEncoding.UTF16};
//pattern Utf32String = string with BinaryEncoding {TextEncoding = TextEncoding.UTF32};
//pattern BigEndianString = string with BinaryEncoding {TextEncoding = TextEncoding.BigEndianUnicode};
type StringType
{
    STR_I TypeToken;
    string Value;
    
    override string ToString()
    {
        return Value;
    }
}

// WBXML Syntax
//opaque = OPAQUE length *byte
type OpaqueType
{
    OPAQUE TypeToken;
    MultiByteUnsignedInteger Length;
    binary Value with BinaryEncoding {Length = Length.GetValue()};
    
    override string ToString()
    {
        return Value as string;
    }
}

// WBXML Syntax
//version = u_int8 containing WBXML version number
type VersionType
{
    byte Major with BinaryEncoding {Width = 4};
    byte Minor with BinaryEncoding {Width = 4};
    
    override string ToString()
    {
        return ((Major + 1) as string) + "." + (Minor as string);
    }
}

// WBXML Syntax, Not implementated since EAS will not support these rules.
//attribute    = attrStart *attrValue. EAS will not use attribute.
//attrStart    = ATTRSTART | ( LITERAL index ). EAS will not use attribute.
//attrValue = ATTRVALUE | string | extension | entity. EAS will not use attribute.
//extension    = ( EXT_I termstr ) | ( EXT_T index ) | EXT. EAS will not use extension.
//tableref    = STR_T index. EAS will not use index string.
//entity = ENTITY entcode. EAS will not use entity.
//entcode = mb_u_int32, UCS-4 character code. EAS will not use entity.
//pi = PI attrStart *attrValue END. EAS will not use processing instruction.

// Syntax does not defined in the protocol specification
type CodePageType
{
    SWITCH_PAGE TypeToken;
    byte Value;
    
    override string ToString()
    {
        return Value.ToString();
    }
}

// Data Type Definition
//bit: 1 bit of data
//byte: 8 bits of opaque data. Will be parsed by predefined type byte.
//u_int8: 8 bit unsigned integer. Will be parsed by predefined type byte.
//mb_u_int32: bit unsigned integer, encoded in multi-byte integer format
pattern Flag0x80 = byte where (value & 0x80) == 0x80;
type ContinueByte
{
    Flag0x80 Value;
}
type MultiByteUnsignedInteger
{
    array<ContinueByte> Bytes;
    byte FinalByte;
    
    uint GetValue()
    {
        uint x = 0;
        uint f = 0x7F;
        foreach (ContinueByte b in Bytes)
        {
            x = x + (f & b.Value);
            x = x << 7;
        }
        return x + FinalByte;
    }
    override string ToString()
    {
        return GetValue().ToString();
    }
}

// Global tokens
// SWITCH_PAGE (0): Change the code page for the current token state. Followed by a single u_int8 indicating the new code page number.
pattern SWITCH_PAGE = byte where value == 0x00;
// END (1): Indicates the end of an attribute list or the end of an element.
pattern END = byte where value == 0x01;
// ENTITY (2): A character entity. Followed by a mb_u_int32 encoding the character entity number.
pattern ENTITY = byte where value == 0x02;
// STR_I (3): Inline string. Followed by a termstr.
pattern STR_I = byte where value == 0x03;
// LITERAL (4): An unknown tag or attribute name. Followed by an mb_u_int32 that encodes an offset into the string table.
pattern LITERAL = byte where value == 0x04;
// EXT_I_0 (40): Inline string document-type-specific extension token. Token is followed by a termstr.
pattern EXT_I_0 = byte where value == 0x40;
// EXT_I_1 (41): Inline string document-type-specific extension token. Token is followed by a termstr.
pattern EXT_I_1 = byte where value == 0x41;
// EXT_I_2 (42): Inline string document-type-specific extension token. Token is followed by a termstr.
pattern EXT_I_2 = byte where value == 0x42;
// PI (43): Processing instruction.
pattern PI = byte where value == 0x43;
// LITERAL_C (44): Unknown tag, with content.
pattern LITERAL_C = byte where value == 0x44;
// EXT_T_0 (80): Inline integer document-type-specific extension token. Token is followed by a mb_uint_32.
pattern EXT_T_0 = byte where value == 0x80;
// EXT_T_1 (81): Inline integer document-type-specific extension token. Token is followed by a mb_uint_32.
pattern EXT_T_1 = byte where value == 0x81;
// EXT_T_2 (82): Inline integer document-type-specific extension token. Token is followed by a mb_uint_32.
pattern EXT_T_2 = byte where value == 0x82;
// STR_T (83): String table reference. Followed by a mb_u_int32 encoding a byte offset from the beginning of the string table.
pattern STR_T = byte where value == 0x83;
// LITERAL_A (84): Unknown tag, with attributes.
pattern LITERAL_A = byte where value == 0x84;
// EXT_0 (C0): Single-byte document-type-specific extension token.
pattern EXT_0 = byte where value == 0xC0;
// EXT_1 (C1): Single-byte document-type-specific extension token.
pattern EXT_1 = byte where value == 0xC1;
// EXT_2 (C2): Single-byte document-type-specific extension token.
pattern EXT_2 = byte where value == 0xC2;
// OPAQUE (C3): Opaque document-type-specific data.
pattern OPAQUE = byte where value == 0xC3;
// LITERAL_AC (C4): Unknown tag, with content and attributes.
pattern LITERAL_AC = byte where value == 0xC4;
// Global Token
const set<byte> GlobalTokenArray = 
{
    0x03, 0x83, 0x40, 0x41, 0x42, 0x80, 0x81, 0x82, 0xC0, 0xC1, 0xC2,
    0x02, 0x43, 0x04, 0x44, 0x84, 0xC4, 0x01, 0x00
};

type Converter
{
    byte tagCodePage;
    byte attCodePage;
    int indentLevel;
    string Tab = "  ";
    DocumentType document;
    
    string GetIndents()
    {
        string text = "";
        for (int i = 0; i < indentLevel; i++)
        {
            text = text + Tab;
        }
        return text;
    }
    virtual string ToXmlName(byte codepage, byte token)
    {
        ErrorCodeIf(true, null, "Missing Application-Specific XML Tag Mapping");
        return "UnknownNamespace" + codepage.ToString() + ":UnknownName" + token.ToString();
    }
    virtual string ToAttributeName(byte codepage, byte token)
    {
        ErrorCodeIf(true, null, "Missing Application-Specific XML Attribute Mapping");
        return "UnknownNamespace" + codepage.ToString() + ":UnknownName" + token.ToString();
    }
    virtual xml ConvertToXml(DocumentType doc)
    {
        tagCodePage = 0;
        attCodePage = 0;
        indentLevel = 0;
        document = doc;
        
        string data = "<?xml version=\"1.0\" " + ConvertToXmlString(doc.GetDefaultEncoding()) + "?>\r\n" + 
            ConvertToXmlString(doc.Body);
        return BuildXml(data);
    }
    virtual string ConvertToXmlString(ElementType element)
    {
        tagCodePage = element.GetCodePage(tagCodePage);
        
        string name = ToXmlName(tagCodePage, element.GetNameToken());
        string data = "<" + name;
        if (element.EndToken == nothing)
            return data + "/>";
        else
            data = data + ">";
            
        indentLevel = indentLevel + 1;
        bool flag = true;
        array<ContentType> contents = element.Contents == nothing ? [] : (element.Contents as array<ContentType>);
        foreach (var content in contents)
        {
            if (content is ElementType)
            {
                data = data + (flag ? "\r\n" + GetIndents() : "") + ConvertToXmlString(content as ElementType);
                flag = true;
            }
            else if (content is StringType)
            {
                data = data + ConvertToXmlString(content as StringType);
                flag = false;
            }
            else if (content is OpaqueType)
            {
                data = data + ConvertToXmlString(content as OpaqueType);
                flag = false;
            }
        }
        indentLevel = indentLevel - 1;
        return data + (flag ? "\r\n" + GetIndents() : "") + "</" + name + ">";
    }
    virtual string ConvertToXmlString(StringType text)
    {
        return text.Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace(
            "\"", "&quot;").Replace("\'", "&apos;");
    }
    virtual string ConvertToXmlString(OpaqueType cdata)
    {
        // According to protocol specification: The opaque token (OPAQUE) encodes application-specific data.
        // It might be an XML CDATA or a Base64 string according to high-level protocol.
        ErrorCodeIf(true, null, "Missing Application-Specific Opaque Data Processing");
        string text = "";
        foreach (byte b in cdata.Value)
        {
            text = text + "&#" + (b as string) + ";";
        }
        return text;
    }
    virtual string ConvertToXmlString(TextEncoding encoding)
    {
        // TextEncoding: None, ASCII, UTF7, UTF8, UTF16, UTF32, BigEndianUnicode
        string text = null;
        switch (encoding)
        {
            case TextEncoding.ASCII => text = "us-ascii";
            case TextEncoding.UTF7 => text = "utf-7";
            case TextEncoding.UTF8 => text = "utf-8";
            case TextEncoding.UTF16 => text = "utf-16";
            case TextEncoding.BigEndianUnicode => text = "utf-16be";
            default => return "";
        }
        return "encoding=\"" + text + "\"";
    }
}

// -----------------------------------------------------------------------------------------------
// WBXML Decoder
abstract type WBXmlDecoderBase
{
    internal abstract any StructConstructor();
    internal virtual void AssignField(any structValue, byte codePage, byte tokenName, any fieldValue)
    {
        // default do nothing
    }
    
    virtual any WBXmlTypeDecoder(ref byte codePage, ref map<byte, map<byte, any>> decoders, ElementType elem)
    {
        if (elem.Contents == nothing)
        {
            return StructConstructor();
        }
    
        array<ContentType> contents = elem.Contents as array<ContentType>;
    
        any t = StructConstructor();
        foreach (var content in contents)
        {
            if (content is childElem:ElementType)
            {
                codePage = childElem.GetCodePage(codePage);
                byte token = childElem.GetNameToken();
                
                if (decoders.Keys[codePage] && decoders[codePage].Keys[token])
                {
                    WBXmlDecoderBase decoder = decoders[codePage][token] as WBXmlDecoderBase;
                    var v = decoder.WBXmlTypeDecoder(ref codePage, ref decoders, childElem);
                    if (v == nothing)
                    {
                        return nothing;
                    }
                    AssignField(t, codePage, token, v);
                }
                else
                {
                    return nothing;
                }
            }
            else
            {
                // no other content type should be under SyncML
                return nothing;
            }
        }
    
        return t;
    }
}

type WBXmlStringDecoderType: WBXmlDecoderBase
{
    internal override any StructConstructor()
    {
        return nothing;
    }
    
    override any WBXmlTypeDecoder(ref byte codePage, ref map<byte, map<byte, any>> decoders, ElementType elem)
    {
        if (elem.Contents == nothing)
        {
            return nothing;
        }
    
        array<ContentType> contents = elem.Contents as array<ContentType>;
        optional string ret;
        foreach (var content in contents)
        {
            if (content is str:StringType)
            {
                ret = str.ToString();
            }
            else
            {
                // contains the content type cannot be matched
                return nothing;
            }
        }
    
        return ret;
    }
}
const WBXmlStringDecoderType WBXmlStringDecoder = new WBXmlStringDecoderType();

type WBXmlIntDecoderType: WBXmlDecoderBase
{
    internal override any StructConstructor()
    {
        return nothing;
    }
    
    override any WBXmlTypeDecoder(ref byte codePage, ref map<byte, map<byte, any>> decoders, ElementType elem)
    {
        var retStr = WBXmlStringDecoder.WBXmlTypeDecoder(ref codePage, ref decoders, elem);
        if (retStr == nothing)
        {
            return nothing;
        }
    
        return Numeric(retStr as string);
    }
}

syntax Numeric = s:regex{[0-9]+} => (s as int);

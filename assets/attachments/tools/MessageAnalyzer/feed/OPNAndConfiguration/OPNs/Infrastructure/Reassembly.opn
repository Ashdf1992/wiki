module Reassembly with
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "380827", Date = "09/22/2015"}
        ]
};

using Standard;
using Utility;
using InfrastructureResources;

// Reassembly Helper for IPv4-like reassemble scenario
// Cache for general protocol reassembly
abstract type ReassemblyHelper<MsgT>
{
    any endpoint EPT = null;
    MessageDirection Direction;

    abstract bool IsCompleteMessage(MsgT msg);
    abstract void Add(MsgT msg);
    abstract bool IsAllFragmentsArrived(MsgT msg);
    abstract array<MsgT> GetSorted(MsgT msg);
    abstract optional MsgT GetMessageFromFragments(array<MsgT> sortedMsg);
    abstract void ClearAfterSuccess(MsgT msg);
    abstract void ClearInDestructor();

    virtual void DispatchMessage(MsgT msg)
    {
        if (Direction is MessageDirection.Accepts)
        {
            dispatch EPT accepts (msg as any message);
        }
        else
        {
            dispatch EPT issues (msg as any message);
        }
    }

    virtual void Reassemble(MsgT msg)
    {
        if (IsCompleteMessage(msg))
        {
            DispatchMessage(msg);
        }
        else
        {
            Add(msg);
            if (IsAllFragmentsArrived(msg))
            {
                array<MsgT> sortedMsg = GetSorted(msg);
                if (GetMessageFromFragments(sortedMsg) is m:MsgT)
                {
                    DispatchMessage(m);
                    ClearAfterSuccess(m);
                }
                else
                {
                    ClearExceptionally();
                }
            }
        }
    }

    // Clear the cache when GetMessageFromFragments() return nothing, override this in reassemblyHelper and provide meaningful diagnosis message if needed.
    virtual void ClearExceptionally()
    {
        ValidationCheck(false, null, DiagnosisLevel.Warning, InfrastructureResources.RESSEMBLY_DECODEFAILURE_WARNING);
    }
}

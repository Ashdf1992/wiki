protocol PayloadHeader with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Payload Header for Network Monitor Reassembled Frames",
    ShortName = "PayloadHeader",
    Description = "Parses the artificial payload protocol part of the frame (for frames that were built by Reassembly.) The contained protocol field determines which protocol follows."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "356548", Date = "11/16/2013"}
        ]
};

using Standard;

endpoint Node 
    accepts ReassembledFrame;

message ReassembledFrame
{
    ushort Version;
    ushort HeaderLength;
    byte Type where ValidationCheck(value == 0x01, this, "Re-assembled");
    string ReassembledProtocol with BinaryEncoding{Endian = Endian.Little};
    uint RStatus;
    byte LowerProtocolCount;
    optional [|LowerProtocolCount > 0|] array<ProtocolBlock> LowerProtocol with BinaryEncoding{Length = LowerProtocolCount};
    ushort FrameCount;
    uint PayloadLength;
    string ContainedProtocol with BinaryEncoding{Endian = Endian.Little};
    binary Payload with BinaryEncoding{Length = PayloadLength};
    
    
    override string ToString()
    {
        return "Obsoleted PayloadHeader, Reassembled Protocol: " + (ReassembledProtocol as string)
                 + ", FrameCount: " + (FrameCount as string)
                 + ", PayloadLength: " + (PayloadLength as string);
    }
}

type ProtocolBlock
{
    string ProtocolName;
    uint ConversationKeyLength;
    optional [|ConversationKeyLength > 0|] array<byte> ConversationKey with BinaryEncoding{Length = ConversationKeyLength};
    ushort PropertyBlockLength;
    binary PropertyBlock with BinaryEncoding{Length = PropertyBlockLength};
}

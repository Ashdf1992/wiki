protocol DecryptedPayloadHeader with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Decrypted Payload Header for Network Monitor 3",
    ShortName = "DecryptedPayloadHeader",
    Description = "Decrypted Payload Header"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "370732", Date = "11/07/2014"}
        ]
};

using Standard;
using Utility;
using IANA;

endpoint Node[string Network, string Transport]
    accepts DecryptedFrame;
    
(IPv4Address | IPv6Address) get Source(this DecryptedFrame frame)
{
    if (frame.IPLayer is IPv4Layer)
    {
        IPv4Layer f = frame.IPLayer as IPv4Layer;
        return f.SourceAddress;
    }
    else
    {
        IPv6Layer f = frame.IPLayer as IPv6Layer;
        return f.SourceAddress;
    }
}

(IPv4Address | IPv6Address) get Destination(this DecryptedFrame frame)
{
    if (frame.IPLayer is IPv4Layer)
    {
        IPv4Layer f = frame.IPLayer as IPv4Layer;
        return f.DestinationAddress;
    }
    else
    {
        IPv6Layer f = frame.IPLayer as IPv6Layer;
        return f.DestinationAddress;
    }
}

string get Network(this DecryptedFrame frame)
{
    if (frame.IPLayer is IPv4Layer)
    {
        IPv4Layer f = frame.IPLayer as IPv4Layer;
        string src = GetAlias("Utility.IPv4Address", f.SourceAddress, frame) ?? f.SourceAddress.ToString();
        string dst = GetAlias("Utility.IPv4Address", f.DestinationAddress, frame) ?? f.DestinationAddress.ToString();
        return (f.SourceAddress.Octets > f.DestinationAddress.Octets ? (dst + " - " + src) : (src + " - " + dst));
    }
    else 
    {
        IPv6Layer f = frame.IPLayer as IPv6Layer;
        string src = GetAlias("Utility.IPv6Address", f.SourceAddress, frame) ?? f.SourceAddress.ToString();
        string dst = GetAlias("Utility.IPv6Address", f.DestinationAddress, frame) ?? f.DestinationAddress.ToString();
        return (f.SourceAddress.Octets > f.DestinationAddress.Octets ? (dst + " - " + src) : (src + " - " + dst)); 
    }
}

IANA.Port get SourcePort(this DecryptedFrame frame)
{
    return frame.TcpLayer.SrcPort as ushort;
}

IANA.Port get DestinationPort(this DecryptedFrame frame)
{
    return frame.TcpLayer.DstPort as ushort;
}

string get Transport(this DecryptedFrame frame)
{
    string src = IANA.PortToServiceNameForAlias(frame.TcpLayer.SrcPort as ushort);
    string dest = IANA.PortToServiceNameForAlias(frame.TcpLayer.DstPort  as ushort);
    return "DecryptedPayload: " + ((frame.TcpLayer.SrcPort > frame.TcpLayer.DstPort) ? (src + " - " + dest) : (dest + " - " + src));
}

message DecryptedFrame
{
    ushort Version;
    ushort HeaderLength;
    ushort EncryptionErrorStatus;
    ushort FrameCount;
    array<ushort> FrameSource with BinaryEncoding{Length = FrameCount};
    (IPv4Layer | IPv6Layer) IPLayer; 
    byte ESPPresent;
    TCPLayer TcpLayer;
    binary TLSSSLData;
    
    override string ToString()
    {
        return "FrameCount: " + (FrameCount as string) + ", ErrorStatus: " + (EncryptionErrorStatus == 1 ? "ERROR" : "SUCCESS");
    }
}

type IPv4Layer
{
    (byte where value == 4) IPVersion;
    IPv4Address SourceAddress;
    IPv4Address DestinationAddress;
}

type IPv6Layer
{
    (byte where value == 6) IPVersion;
    IPv6Address SourceAddress;
    IPv6Address DestinationAddress;
}

type TCPLayer
{
    ulong SrcPort;
    ulong DstPort;
    ulong SequenceNumber;
    ulong NextSequenceNumber;
}


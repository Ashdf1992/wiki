module Configurations with
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="380144", Date="09/22/2015"}
        ]
};

using Standard;

// TCP Configurations
type TCPConfiguration
{
    // Specify whether enable auto-reassemble TCP segments which fail decoding upper layer protocol into VDS.
    bool EnableAutoReassembly = true with Configurable {Description = "Enable TCP auto-reassembly"};
    // Specify whether bubble up TCP diagnosis for retransmission and dup-ACK to top-level message in MA UI.
    bool ShowVerboseDiagnosis = false with Configurable {Description = "Show verbose TCP diagnosis messages"};
} with Configurable{Category = "TCP"};

// SMB/SMB2 Configurations
type SMBAndSMB2Configuration
{
    set<ushort> Ports = {} with Configurable {Description = "Add SMB/SMB2 ports (CSV delimited)"};
} with Configurable{Category = "SMB/SMB2"};

// TURN Configurations
type TurnConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add TURN ports (CSV delimited)"};
} with Configurable{Category = "TURN"};

type VAPRConfiguration
{
    set<string> ReportingUris = {} with Configurable {Description = "Add App-V Reporting URI. For example, http://AppVReportingServer:8002/"};
} with Configurable{Category = "VAPR"};

// ---------------------------------------- Configurations for the protocol which can transmit over TLS --------------------------------------

// HTTP Configurations
type HttpConfiguration : ITLSConfiguration
{
    set<ushort> HttpPorts = {} with Configurable {Description = "Add HTTP ports (CSV delimited)"};
    set<ushort> HttpsPorts = {} with Configurable {Description = "Add HTTPS ports (CSV delimited)"};

    bool IsInTLSPorts(ushort port)
    {
        return (port in HttpsPorts);
    }
} with Configurable{Category = "HTTP"};

// LDAP Configurations
type LdapConfiguration : ITLSConfiguration
{
    set<ushort> LdapPorts = {} with Configurable {Description = "Add LDAP ports (CSV delimited)"};
    set<ushort> LdapsPorts = {} with Configurable {Description = "Add LDAPS ports (CSV delimited)"};

    bool IsInTLSPorts(ushort port)
    {
        return (port in LdapsPorts);
    }
} with Configurable{Category = "LDAP"};

// RDP Configurations
type RDPConfiguration : ITLSConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add RDP ports (CSV delimited)"};

    bool IsInTLSPorts(ushort port)
    {
        return (port in Ports);
    }
} with Configurable{Category = "RDP"};

// TDS Configurations
type TDSConfiguration : ITLSConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add TDS ports (CSV delimited)"};

    bool IsInTLSPorts(ushort port)
    {
        return (port in Ports);
    }
} with Configurable{Category = "TDS"};

type TLSConfiguration : ITLSConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add SSL/TLS ports (CSV delimited)"};

    bool IsInTLSPorts(ushort port)
    {
        return (port in Ports);
    }
} with Configurable{Category = "SSL/TLS"};

// interface for ports configuration which contains TLS ports
interface ITLSConfiguration
{
    bool IsInTLSPorts(ushort port);
}

// AllJoyn Configurations
type AllJoynConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add AllJoyn ports (CSV delimited)"};
} with Configurable{Category = "AllJoyn"};

type NetFlowAndIPFIXConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add NetFlow/IPFIX ports (CSV delimited)"};
} with Configurable{Category = "NetFlow/IPFIX"};

type WSRMConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add WSRM TCP ports (CSV delimited)"};
} with Configurable{Category = "WSRMTCPPort"};

type RTPConfiguration
{
    set<ushort> Ports = {} with Configurable {Description = "Add RTP UDP ports (CSV delimited)"};
} with Configurable{Category = "RTPTCPPort"};

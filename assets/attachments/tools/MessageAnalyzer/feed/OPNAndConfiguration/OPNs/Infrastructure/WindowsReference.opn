module WindowsReference with
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "362740", Date = "04/18/2014"}
        ]
};

using Standard;
using DTYP; // for SHORT used
using Utility;

// Link: http://msdn.microsoft.com/en-us/library/windows/desktop/aa814468(v=vs.85).aspx
pattern AddressFamily = enum SHORT
{
    AFUnspec = 0,
    AFInet = 2,
    AFInet6 = 23
    ...
};

//
// http://msdn.microsoft.com/en-us/library/windows/desktop/ms740496(v=vs.85).aspx
// WORKAROUND: Bug#18057 - DCR: [equivalent DataFramelength feature]: Support using "Width" attribtue in BinaryEncoding aspect to specify a field's size.
// Use value parameter type since there's no aspect to limit a field's size.
type SocketAddress[uint SockAddrLen]
{
    (SockAddrIn | SockAddrIn6 | SockAddr) Address;
    // Padding to the total size in bytes
    optional ([|SockAddrLen > AddressSize()|] binary) Padding with BinaryEncoding{Length = SockAddrLen - AddressSize()};
    
    // Get the size of Address field in bytes
    uint AddressSize()
    {
        switch (Address)
        {
            case SockAddrIn6 =>
                return 28;
            case SockAddrIn =>
                return 16;
            case SockAddr =>
                return 16;
        }
        return 0;
    }
    
    // Get the IPv4/IPv6 address
    (IPv4Address | IPv6Address) GetAddress()
    {
        switch (Address)
        {
            case addr:SockAddrIn =>
                return addr.Address;
            case addr:SockAddrIn6 =>
                return addr.Address;
        }
        return null;
    }

    bool IsIPv4()
    {
        return Address is SockAddrIn || Address is SockAddr;
    }
    
    bool IsIPv6()
    {
        return Address is SockAddrIn6;
    }
    
    override string ToString()
    {
        return Address.ToString();
    }
}

// sockaddr
// Link: http://msdn.microsoft.com/en-us/library/windows/desktop/aa814468(v=vs.85).aspx
type SockAddr
{
    USHORT Family where ValidationCheck(value in {2, 23}, null, "WindowsReference: The Family in type SockAddr must be 2 (AF_INET) or 23 (AF_INET6).");
    binary Data with BinaryEncoding{Length = 14};
} with BinaryEncodingDefaults{Endian = Endian.Big};

// sockaddr_in
type SockAddrIn
{
    AddressFamily Family where value == AddressFamily.AFInet
        with BinaryEncoding{Endian = Endian.Little};
    USHORT Port;
    IPv4Address Address;
    binary Zero with BinaryEncoding{Length = 8};
    
    override string ToString()
    {
        return Address.ToString() + ":" + (Port as string);
    }
} with BinaryEncodingDefaults{Endian = Endian.Big};

// sockaddr_in6
type SockAddrIn6
{
    AddressFamily Family where value == AddressFamily.AFInet6
        with BinaryEncoding{Endian = Endian.Little};
    USHORT Port;
    ULONG FlowInfo;
    IPv6Address Address;
    ULONG ScopeId;
    
    override string ToString()
    {
        return Address.ToString() + ":" + (Port as string);
    }
} with BinaryEncodingDefaults{Endian = Endian.Big};

// Link: http://msdn.microsoft.com/en-us/library/ms740504(VS.85).aspx
type SockAddrStorage
{
    AddressFamily SockAddrStorageFamily where ValidationCheck(value in {0, 2, 23}, null, "WindowsReference: The SockAddrStorageFamily in type SockAddrStorage must be 0 (AF_UNSPEC), 2 (AF_INET), or 23 (AF_INET6).");
    array<byte> SockAddrStoragePad1 with BinaryEncoding{Length = 6};
    INT64 SockAddrStorageAlign;
    array<byte> SockAddrStoragePad2 with BinaryEncoding{Length = 112}; // Length = 128 - 2 - 6 - 8
    
    override string ToString()
    {
        return "AddressFamily = " + EnumToString(SockAddrStorageFamily, "WindowsReference.AddressFamily");
    }
}

// MSDN-WindowsGDI, refers to http://msdn.microsoft.com/en-us/library/5hd12d66(v=VS.90).aspx
type RGNDATA
{
    RGNDATAHEADER rdh;
    array<RECT> Buffer with BinaryEncoding{Length = rdh.nCount};
};

// MSDN-WindowsGDI, refers to http://msdn.microsoft.com/en-us/library/dd162941(v=vs.85).aspx
type RGNDATAHEADER
{
    uint dwSize;
    uint iType where ValidationCheck(value == 0x01, null, "RDPEGT: The iType in type RGNDATAHEADER must be 0x01 (RDH_RECTANGLES).");
    uint nCount;
    uint nRgnSize;
    RECT  rcBound;
};

// MSDN-WindowsGDI, refers to http://msdn.microsoft.com/en-us/library/dd162897(v=vs.85).aspx
type RECT
{
    int left;
    int top;
    int right;
    int bottom;
};

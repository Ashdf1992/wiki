protocol WFPCaptureUM with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "370484", Date = "11/06/2014"}
        ]
};

using Etw;
using EtwEvent;
using Utility;
using DTYP;
using WfpUtility;
using InfrastructureResources;

public const guid EtwProviderIDWfpCaptureUM = {95c3e301-7837-4e66-852d-848ee5e6d941};

endpoint WFPUMFrame[binary Address]
    accepts ServiceError
    accepts FilterAdd
    accepts FilterDelete;

autostart actor WfpUMOverEtwEvent(EtwEvent.Node etw)
{
    process etw accepts etwMsg:EtwProviderMsg
        where etwMsg.EventRecord.Header.ProviderId == EtwProviderIDWfpCaptureUM
    {
        var ep = endpoint WFPUMFrame[$[]];
        switch (etwMsg.EventRecord.Header.Descriptor.Id) // event ID
        {
            case 20010 =>
                FilterAdd msg;
                DecodeBinaryWithErrorOnFail<FilterAdd>(etwMsg.Payload, "WfpCaptureUM", "FilterAdd", ref msg);
                dispatch ep accepts msg;
            case 20020 =>
                FilterDelete msg;
                DecodeBinaryWithErrorOnFail<FilterDelete>(etwMsg.Payload, "WfpCaptureUM", "FilterDelete", ref msg);
                dispatch ep accepts msg;
            case 10010 =>
                ServiceError msg;
                DecodeBinaryWithErrorOnFail<ServiceError>(etwMsg.Payload, "WfpCaptureUM", "ServiceError", ref msg);
                dispatch ep accepts msg;
            default =>
                ThrowDecodingException("WFPCaptureUM", UTILITY_INVALID_DATA, ["event ID"]);
        }
    }
}

message ServiceError
{
    string ErrorMessage;
    uint ErrorCode;
}

message FilterAdd
{
    guid ProviderGuid with DisplayInfo {ToText = DisplayProviderGuid};
    string ProviderName;
    string ProviderDescription;
    uint ProviderFlags;
    string ProviderServiceName;
    ulong FilterId;
    string FilterName;
    string FilterDescription;
    uint FilterFlags;
    guid LayerKey with DisplayInfo {ToText = DisplayLayerKey};
    guid SublayerKey with DisplayInfo {ToText = DisplaySublayerKey};
    uint ActionType;
    uint FilterConditionsByteLength;
    array<FilterCondition> FilterConditions;
}

type FilterCondition
{
    guid FieldKey with DisplayInfo {ToText = DisplayFieldKey};
    FWP_MATCH_TYPE MatchType;
    FWP_DATA_TYPE ConditionValueType;
    (
      [| ConditionValueType == FWP_DATA_TYPE.FWP_EMPTY |] EmptyValue
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_UINT8 |] byte
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_UINT16 |] ushort
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_UINT32 |] uint
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_UINT64 |] ulong
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_INT8 |] sbyte
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_INT16 |] short
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_INT32 |] int
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_INT64 |] long
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_FLOAT |] float
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_DOUBLE |] double
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_BYTE_ARRAY16_TYPE |] Blob[16]
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_BYTE_BLOB_TYPE |] ByteBlob
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_SID |] SID
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_SECURITY_DESCRIPTOR_TYPE |] SecurityDescriptorByteBlob
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_TOKEN_INFORMATION_TYPE |] TokenInformation
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_TOKEN_ACCESS_INFORMATION_TYPE |] ByteBlob
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_UNICODE_STRING_TYPE |] string
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_BYTE_ARRAY6_TYPE |] Blob[6]
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_V4_ADDR_MASK |] V4AddrAndMask
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_V6_ADDR_MASK |] V6AddrAndMask
    | [| ConditionValueType == FWP_DATA_TYPE.FWP_RANGE_TYPE |] RangeValue
    )
    ConditionValue;
}

type EmptyValue {}

type ByteBlob
{
    uint Size;
    binary Blob with BinaryEncoding {Length = Size};
}

// The WFP represents a security descriptor in a filter condition as a byte blob.
// This type allows us to parse that byte blob to get the underlying security descriptor.
type SecurityDescriptorByteBlob
{
    uint Size;
    SECURITY_DESCRIPTOR_NonRpc SecurityDescriptor with BinaryEncoding {Length = Size};
}

type TokenInformation
{
    uint SidCount;
    array<SID> Sids with BinaryEncoding {Length = SidCount};
    uint RestrictedSidCount;
    array<SID> RestrictedSids with BinaryEncoding {Length = RestrictedSidCount};
}

type V4AddrAndMask
{
    IPv4Address Addr;
    IPv4Address Mask;
}

type V6AddrAndMask
{
    IPv6Address Addr;
    byte PrefixLength;
}

type RangeValue
{
    FwpValue ValueLow;
    FwpValue ValueHigh;
}

type FwpValue
{
    FWP_DATA_TYPE Type;
    (
      [| Type == FWP_DATA_TYPE.FWP_EMPTY |] EmptyValue
    | [| Type == FWP_DATA_TYPE.FWP_UINT8 |] byte
    | [| Type == FWP_DATA_TYPE.FWP_UINT16 |] ushort
    | [| Type == FWP_DATA_TYPE.FWP_UINT32 |] uint
    | [| Type == FWP_DATA_TYPE.FWP_UINT64 |] ulong
    | [| Type == FWP_DATA_TYPE.FWP_INT8 |] sbyte
    | [| Type == FWP_DATA_TYPE.FWP_INT16 |] short
    | [| Type == FWP_DATA_TYPE.FWP_INT32 |] int
    | [| Type == FWP_DATA_TYPE.FWP_INT64 |] long
    | [| Type == FWP_DATA_TYPE.FWP_FLOAT |] float
    | [| Type == FWP_DATA_TYPE.FWP_DOUBLE |] double
    | [| Type == FWP_DATA_TYPE.FWP_BYTE_ARRAY16_TYPE |] Blob[16]
    | [| Type == FWP_DATA_TYPE.FWP_BYTE_BLOB_TYPE |] ByteBlob
    // Future Reference: Check with the WFP team. I'm not sure how there can be a "range" of any of the types below.
    | [| Type == FWP_DATA_TYPE.FWP_SID |] SID
    | [| Type == FWP_DATA_TYPE.FWP_SECURITY_DESCRIPTOR_TYPE |] SecurityDescriptorByteBlob
    | [| Type == FWP_DATA_TYPE.FWP_TOKEN_INFORMATION_TYPE |] TokenInformation
    | [| Type == FWP_DATA_TYPE.FWP_TOKEN_ACCESS_INFORMATION_TYPE |] ByteBlob
    | [| Type == FWP_DATA_TYPE.FWP_UNICODE_STRING_TYPE |] string
    | [| Type == FWP_DATA_TYPE.FWP_BYTE_ARRAY6_TYPE |] Blob[6]
    )
    Value;
}

message FilterDelete
{
    ulong FilterId;
}

using Diagnostics;

//An IIS regular log line
//Since the IIS line format is completely configurable, the whole line is taken without parsing.
//This will not be very courteous if we ever implement autodetection, since this parser is going to accept any line.
message IISEntry with 
//Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"^(?<Line>[^\\#](?!.*, )[^\[\]]*)$" } : LogEntry
{
    string Line;

    override string ToString()
    {
        return  Line;
    }
}

//A #Fields line
message FieldsEntry with 
//Regex: Pass QE Check 8/1/2013
EntryInfo { Regex = "^\\#Fields\\: (?<Fields>.*)"} : LogEntry
{
    string Fields;

    override string ToString()
    {
        return  "#Fields: " + Fields;
    }
}

//A #Software line
message SoftwareEntry with 
//Regex: Pass QE Check 8/1/2013
EntryInfo { Regex = "^\\#Software\\: (?<Software>.*)"} : LogEntry
{
    string Software;

    override string ToString()
    {
        return  "#Software: " + Software;
    }
}

//A #Version line
message VersionEntry with 
//Regex: Pass QE Check 8/1/2013
EntryInfo { Regex = "^\\#Version\\: (?<Version>.*)"} : LogEntry
{
    string Version;

    override string ToString()
    {
        return  "#Version: " + Version;
    }
}

//A #Date line
message DateEntry with 
//Regex: Pass QE Check 8/1/2013
EntryInfo { Regex = "^\\#Date\\: (?<Date>.*)"} : LogEntry
{
    string Date;

    override string ToString()
    {
        return  "#Date: " + Date;
    }
}

//Full IIS_W3C message, with parsed fields. All fields are optional and #Fields line tells which one is present
message IISLine_W3C
{
    optional string date;
    optional string time;
    optional string s_sitename;
    optional string s_computername;
    optional (IPv4Address | IPv6Address | string) c_ip;
    optional uint c_port;
    optional (IPv4Address | IPv6Address | string) s_ip;
    optional uint s_port;
    optional string cs_username;
    optional string cs_version;
    optional string cs_method;
    optional string cs_uri;
    optional string cs_uri_stem;
    optional string cs_uri_query;
    optional string csUser_agent;
    optional string csCookie;
    optional string csReferrer;
    optional string cs_host;
    optional uint sc_status where CheckStatusCode(this, value);
    optional uint sc_substatus;
    optional uint sc_win32_status;
    optional int sc_bytes;
    optional int cs_bytes;
    optional int time_taken;
    optional string s_siteid;
    optional string s_reason;
    optional string s_queuename;

    override string ToString()
    {
        string res = "";
        if (cs_method != nothing)
        {
            res += cs_method.ToString();
        }
        if (cs_uri_stem != nothing)
        {
            res += " " + (cs_uri_stem.ToString());
        }
        if (cs_uri != nothing)
        {
            res += " " + (cs_uri.ToString());
        }
        if (cs_uri_query != nothing)
        {
            res += "?" + (cs_uri_query.ToString());
        }
        if (cs_version != nothing)
        {
            res += " " + (cs_version.ToString());
        }
        return res;
    }
}

message IISLine_NCSA 
{
    (IPv4Address | IPv6Address | string) c_ip;
    string cs_remote_logname;
    string cs_username;
    string date_time;
    string cs_request;
    optional uint sc_status where CheckStatusCode(this, value);
    optional int sc_bytes;

    override string ToString()
    {
        return cs_request;
    }
}

message IISLine_IIS
{
    (IPv4Address | IPv6Address | string) c_ip;
    string cs_username;
    string date;
    string time;
    string s_sitename;
    string s_computername;
    (IPv4Address | IPv6Address | string) s_ip;
    optional int time_taken;
    optional int cs_bytes;
    optional int sc_bytes;
    optional uint sc_status where CheckStatusCode(this, value);
    optional uint sc_win32_status;
    string cs_method;
    string cs_uri_stem;
    string cs_uri_query;

    override string ToString()
    {
        return cs_method + " " + cs_uri_stem + (cs_uri_query == "-" ? "" : "?" + cs_uri_query);
    }
}

message IISLine_NCSA_Reg with 
    EntryInfo { Regex = @"^(?<c_ip>[a-zA-Z0-9\.:%-]+) (?<cs_remote_logname>[^\s]+) (?<cs_username>[^\s]+) \[(?<date_time>[0-9a-zA-Z:\+\s/-]+)\] ""(?<cs_request>[^""]+)"" (?<sc_status>[0-9-]+) (?<sc_bytes>[0-9-]+)"} : LogEntry
{
    string c_ip;
    string cs_remote_logname;
    string cs_username;
    string date_time;
    string cs_request;
    string sc_status;
    string sc_bytes;

    override string ToString()
    {
        return cs_request;
    }
}

message IISLine_IIS_Reg with
    EntryInfo { Regex = @"^(?<c_ip>[a-zA-Z0-9\.:%-]+), (?<cs_username>[^\s]+), (?<date>[0-9/-]+), (?<time>[0-9:-]+), (?<s_sitename>[^,\s]+), (?<s_computername>[^,\s]+), (?<s_ip>[a-zA-Z0-9\.:%-]+), (?<time_taken>[0-9-]+), (?<cs_bytes>[0-9-]+), (?<sc_bytes>[0-9-]+), (?<sc_status>[0-9-]+), (?<sc_win32_status>[0-9-]+), (?<cs_method>[A-Za-z0-9-]+), (?<cs_uri_stem>[^,]+), (?<cs_uri_query>[^,\s]+),"} : LogEntry
{
    string c_ip;
    string cs_username;
    string date;
    string time;
    string s_sitename;
    string s_computername;
    string s_ip;
    string time_taken;
    string cs_bytes;
    string sc_bytes;
    string sc_status;
    string sc_win32_status;
    string cs_method;
    string cs_uri_stem;
    string cs_uri_query;

    override string ToString()
    {
        return cs_method + " " + cs_uri_stem + (cs_uri_query == "-" ? "" : "?" + cs_uri_query);
    }
}

//Parsed messages arrive here
endpoint IISEndpoint[int i] accepts any message
{
    array<string> FieldsPresent = [];
}

//Parsers the fields that are present in the #Fields line, space separated.
//Regex: Not Pass QE Check 8/1/2013 Used lazy quantifiers(as-few-times-as-possible quantifiers) which SDL Regex Fuzzer does not support.
//But looks like the regular expression is safe since it passed QE check if the lazy quantifiers get removed
syntax AField = f:(regex{.*? }) => f.Trim();
//Regex: Pass QE Check 8/1/2013
pattern FinalField = regex{.*};
syntax IISFields = fields:(AField*) f:FinalField => (fields + [f]);

autostart actor SinkToIIS(LogSink s)
{
    //Bug, cannot use most specific type for pattern matching
    //Parsers which fields are present and store them in the IISEndpoint
    process s accepts m:LogEntry where m is f:FieldsEntry{}
    {
        var e = endpoint IISEndpoint[0];
        var res = IISFields(f.Fields);

        if (res != nothing)
        {
            e.FieldsPresent = res as array<string>;
        }
        else
        {
            ValidationCheck(false, f, "Unexpected format in #Fields line.");
        }

        release f;
    }

    //Parses the IIS line considering the last #Fields configuration
    process s accepts m:LogEntry where m is entry:IISEntry{}
    {
        var e = endpoint IISEndpoint[0];

        //Parses the rest of the IIS line
        var res = IISFields(entry.Line);
        if (res != nothing)
        {
            array<string> fields = res as array<string>;
            if (e.FieldsPresent == [])
            {
                release entry;
            }
            else
            {
                IISLine_W3C l = ConstructLine_W3C(e.FieldsPresent, fields);
                dispatch e accepts l;
            }
        }
        else
        {
            ValidationCheck(false, entry, "Unexpected format in IIS log line.");
            release entry;
        }
    }

    //Parses the IIS line
    process s accepts m:IISLine_IIS_Reg
    {
        var e = endpoint IISEndpoint[0];
        IISLine_IIS l = ConstructLine_IIS(m);
        dispatch e accepts l;
    }

    //Parses the NCSA line
    process s accepts m:IISLine_NCSA_Reg
    {
        var e = endpoint IISEndpoint[0];
        IISLine_NCSA l = ConstructLine_NCSA(m);
        dispatch e accepts l;
    }
}

IISLine_NCSA ConstructLine_NCSA(IISLine_NCSA_Reg reg)
{
    IISLine_NCSA l = new IISLine_NCSA();
    l.c_ip = StrToAddr(reg.c_ip);
    l.cs_remote_logname = reg.cs_remote_logname;
    l.cs_username = reg.cs_username;
    l.date_time = reg.date_time;
    l.cs_request = reg.cs_request;
    l.sc_status = reg.sc_status.ToUInt();
    l.sc_bytes = reg.sc_bytes.ToInt();
    if (DateTimeSyntax(l.date_time) is str:string && str.ToDateTime() is t:DateTime)
    {
        l#Timestamp = t;
    }
    return l;
}

IISLine_IIS ConstructLine_IIS(IISLine_IIS_Reg reg)
{
    IISLine_IIS l = new IISLine_IIS();
    l.c_ip = StrToAddr(reg.c_ip);
    l.cs_username = reg.cs_username;
    l.date = reg.date;
    l.time = reg.time;
    l.s_sitename = reg.s_sitename;
    l.s_computername = reg.s_computername;
    l.s_ip = StrToAddr(reg.s_ip);
    l.time_taken = reg.time_taken.ToInt();
    l.cs_bytes = reg.cs_bytes.ToInt();
    l.sc_bytes = reg.sc_bytes.ToInt();
    l.sc_status = reg.sc_status.ToUInt();
    l.sc_win32_status = reg.sc_win32_status.ToUInt();
    l.cs_method = reg.cs_method;
    l.cs_uri_stem = reg.cs_uri_stem;
    l.cs_uri_query = reg.cs_uri_query;
    optional DateTime t = nothing;
    if (l.date.Count != 0 && l.time.Count != 0)
    {
        t = (l.date + " " + l.time).ToDateTime();
    }
    else if (l.date.Count != 0)
    {
        t = l.date.ToDateTime();
    }
    else if (l.time.Count != 0)
    {
        t = l.time.ToDateTime();
    }
    if (t is dt:DateTime)
    {
        l#Timestamp = dt;
    }
    return l;
}

IISLine_W3C ConstructLine_W3C(array<string> fieldsPresent, array<string> Fields)
{
    IISLine_W3C l = new IISLine_W3C();

    //We don't have reflection in OPN, need to do this case by case :(
    if ("date" in fieldsPresent)
    l.date = Fields[fieldsPresent.IndexOf(["date"])];
    if ("time" in fieldsPresent) 
    l.time = Fields[fieldsPresent.IndexOf(["time"])];
    if ("s-sitename" in fieldsPresent) 
    l.s_sitename = Fields[fieldsPresent.IndexOf(["s-sitename"])];
    if ("s-computername" in fieldsPresent) 
    l.s_computername = Fields[fieldsPresent.IndexOf(["s-computername"])];
    if ("c-ip" in fieldsPresent) 
    l.c_ip = StrToAddr(Fields[fieldsPresent.IndexOf(["c-ip"])]);
    if ("c-port" in fieldsPresent) 
    l.c_port = Fields[fieldsPresent.IndexOf(["c-port"])].ToUInt();
    if ("s-ip" in fieldsPresent) 
    l.s_ip = StrToAddr(Fields[fieldsPresent.IndexOf(["s-ip"])]);
    if ("s-port" in fieldsPresent) 
    l.s_port = Fields[fieldsPresent.IndexOf(["s-port"])].ToUInt();
    if ("cs-username" in fieldsPresent) 
    l.cs_username = Fields[fieldsPresent.IndexOf(["cs-username"])];
    if ("cs-version" in fieldsPresent) 
    l.cs_version = Fields[fieldsPresent.IndexOf(["cs-version"])];
    if ("cs-method" in fieldsPresent) 
    l.cs_method = Fields[fieldsPresent.IndexOf(["cs-method"])];
    if ("cs-uri" in fieldsPresent) 
    l.cs_uri = Fields[fieldsPresent.IndexOf(["cs-uri"])];
    if ("cs-uri-stem" in fieldsPresent) 
    l.cs_uri_stem = Fields[fieldsPresent.IndexOf(["cs-uri-stem"])];
    if ("cs-uri-query" in fieldsPresent) 
    l.cs_uri_query = Fields[fieldsPresent.IndexOf(["cs-uri-query"])];
    if ("cs(User-Agent)" in fieldsPresent) 
    l.csUser_agent = Fields[fieldsPresent.IndexOf(["cs(User-Agent)"])];
    if ("cs(Cookie)" in fieldsPresent) 
    l.csCookie = Fields[fieldsPresent.IndexOf(["cs(Cookie)"])];
    if ("cs(Referrer)" in fieldsPresent) 
    l.csReferrer = Fields[fieldsPresent.IndexOf(["cs(Referrer)"])];
    if ("cs-host" in fieldsPresent) 
    l.cs_host = Fields[fieldsPresent.IndexOf(["cs-host"])];
    if ("sc-status" in fieldsPresent) 
    l.sc_status = Fields[fieldsPresent.IndexOf(["sc-status"])].ToUInt();
    if ("sc-substatus" in fieldsPresent) 
    l.sc_substatus = Fields[fieldsPresent.IndexOf(["sc-substatus"])].ToUInt();
    if ("sc-win32-status" in fieldsPresent) 
    l.sc_win32_status = Fields[fieldsPresent.IndexOf(["sc-win32-status"])].ToUInt();
    if ("sc-bytes" in fieldsPresent) 
    l.sc_bytes = Fields[fieldsPresent.IndexOf(["sc-bytes"])].ToInt();
    if ("cs-bytes" in fieldsPresent) 
    l.cs_bytes = Fields[fieldsPresent.IndexOf(["cs-bytes"])].ToInt();
    if ("time-taken" in fieldsPresent) 
    l.time_taken = Fields[fieldsPresent.IndexOf(["time-taken"])].ToInt();
    if ("s-siteid" in fieldsPresent) 
    l.s_siteid = Fields[fieldsPresent.IndexOf(["s-siteid"])];
    if ("s-reason" in fieldsPresent) 
    l.s_reason = Fields[fieldsPresent.IndexOf(["s-reason"])];
    if ("s-queuename" in fieldsPresent) 
    l.s_queuename = Fields[fieldsPresent.IndexOf(["s-queuename"])];
    
    //Populate Timestamp annotation based on date and time
    optional DateTime t = nothing;
    if (l.date != nothing && l.time != nothing)
    {
        t = ((l.date.ToString()) + " " + (l.time.ToString())).ToDateTime();
    }
    else if (l.date != nothing)
    {
        t = (l.date.ToString()).ToDateTime();
    }
    else if (l.time != nothing)
    {
        t = (l.time.ToString()).ToDateTime();
    }
    if (t is dt:DateTime)
    {
        l#Timestamp = dt;
    }
    return l;
}

bool CheckStatusCode(any message m, optional uint statusOptional)
{
    if (statusOptional is status:uint && status > 400)
    {
        string errorStr;
        if (status in StatusCodes)
        {
            errorStr = StatusCodes[status] + " (" + status.ToString() + ")";
        }
        else
        {
            errorStr = "Error code (" + status.ToString() + ")";
        }
        ErrorCodeIf(true, m, DiagnosisLevel.Error, errorStr);
    }
    return true;
}

syntax DateTimeSyntax = s1:regex{[A-Za-z0-9/]+} ":" s2:regex{[0-9:]+} => (s1 + " " + s2);

//References:http://support.microsoft.com/kb/943891/en-gb
map<uint, string> StatusCodes = 
{
    400 -> "Bad request.",
    401 -> "Access denied.",
    403 -> "Forbidden.",
    404 -> "Not found.",
    405 -> "Method Not Allowed.",
    406 -> "Client browser does not accept the MIME type of the requested page.",
    408 -> "Request timed out.",
    412 -> "Precondition failed.",
    500 -> "Internal server error.",
    501 -> "Header values specify a configuration that is not implemented.",
    502 -> "Web server received an invalid response while acting as a gateway or proxy.",
    503 -> "Service unavailable.",
};

(IPv4Address | IPv6Address | string) StrToAddr(string str)
{
    if (ReturnIfIPv4Address(str) is ipv4:IPv4Address)
    {
        return ipv4;
    }
    else if (ReturnIfIPv6Address(str) is ipv6:IPv6Address)
    {
        return ipv6;
    }
    else
    {
        return str;
    }
}

type IPv4Address with SupportsAliasing{IsValid = IsIPv4Address} : IComparable
{
    binary Octets with BinaryEncoding{Length = 4};

    override string ToString()
    {
        string ip = "";
        for (int counter = 0; counter < Octets.Count; counter++)
        {
            ip = ip + (Octets[counter] as string);
            if (counter < Octets.Count - 1)
            {
                ip = ip + ".";
            }
        }
        return ip;
    }
    
    int CompareTo(any other)
    {
        if (other != null &&
            other is ipv4:IPv4Address)
        {
            return (this.Octets > ipv4.Octets ? 1 : (this.Octets == ipv4.Octets ? 0 : -1));
        }

        return 1;
    }
}

optional IPv4Address ReturnIfIPv4Address(string address)
{
    if (address == null || address.Count == 0)
    {
        return nothing;
    }
    var arr = address.Split(['.']);
    binary bin;
    if ((arr.Count == 4) && IsArrayItemWithinRange(arr, 0, 255, false, ref bin, true) && (bin.Count == 4))
    {
        IPv4Address ipv4 = new IPv4Address
        {
            Octets = bin,
        };
        return ipv4;
    }
    else
    {
        return nothing;
    }
}

bool IsIPv4Address(string address)
{
    if (address == null || address.Count == 0)
    {
        return false;
    }

    var arr = address.Split(['.']);
    if (arr.Count != 4)
    {
        return false;
    }
    
    return IsArrayItemWithinRange(arr, 0, 255, false);
}
const binary IPv6Zero = $[0000];
optional IPv6Address ReturnIfIPv6Address(string address)
{
    if (address == null || address.Count == 0)
    {
        return nothing;
    }
    var arr0 = address.Split(["%"]); // remove the scope id after %
    if (arr0 == null || arr0.Count == 0)
    {
        return nothing;
    }
    var arr = arr0[0].Split(["::"]);
    if (arr.Count > 2)
    {
        return nothing;
    }
    else if (arr.Count == 2)
    {
        var arr1 = null;
        var arr2 = null;
        binary bin;
        if (arr[0].Count > 0)
        {
            arr1 = arr[0].Split([':']);
        }

        if (arr[1].Count > 0)
        {
            arr2 = arr[1].Split([':']);
        }

        if (arr1 != null && arr2 != null && arr1.Count + arr2.Count > 6)
        {
            return nothing;
        }
        else
        {
            int arr1Len = (arr1 == null) ? 0 : arr1.Count;
            int arr2Len = (arr2 == null) ? 0 : arr2.Count;
            if (arr1Len > 6 || ((arr1Len > 0) && (!IsArrayItemWithinRange(arr1, 0, 65535, true, ref bin, false))))
            {
                return nothing;
            }
            for (int i = 0; i < (8 - arr1Len - arr2Len); i++)
            {
                bin += IPv6Zero;
            }
            if (arr2Len > 6 || ((arr2Len > 0) && (!IsArrayItemWithinRange(arr2, 0, 65535, true, ref bin, false))))
            {
                return nothing;
            }
            if (bin.Count == 16)
            {
                IPv6Address ipv6 = new IPv6Address
                {
                    Octets = bin,
                };
                return ipv6;
            }
            else
            {
                return nothing;
            }
        }
    }
    else
    {
        arr = arr[0].Split([':']);
        binary bin;
        if ((arr.Count != 8) || !IsArrayItemWithinRange(arr, 0, 65535, true, ref bin, false))
        {
            return nothing;
        }
        else if (bin.Count == 16)
        {
            IPv6Address ipv6 = new IPv6Address
            {
                Octets = bin,
            };
            return ipv6;
        }
        else
        {
            return nothing;
        }
    }
}

type IPv6Address with SupportsAliasing{IsValid = IsIPv6Address} : IComparable
{
    binary Octets with BinaryEncoding {Length = 16};

    override string ToString()
    {
        string ip = "";
        for (int index = 0; index < Octets.Count; index += 2)
        {
            int b = (Octets[index] << 8) + Octets[index + 1];
            ip += (b == 0) ? "0:" : (Format("{0:X}", b) + ":");
        }    
        return ip.Segment(0, ip.Count - 1);
    }
    
    int CompareTo(any other)
    {
        if (other != null &&
            other is ipv6:IPv6Address)
        {
            return (this.Octets > ipv6.Octets ? 1 : (this.Octets == ipv6.Octets ? 0 : -1));
        }

        return 1;
    }
}

bool IsIPv6Address(string address)
{
    if (address == null || address.Count == 0)
    {
        return false;
    }

    var arr = address.Split(["::"]);
    if (arr.Count > 2)
    {
        return false;
    }
    else if (arr.Count == 2)
    {
        var arr1 = null;
        var arr2 = null;
        
        if (arr[0].Count > 0)
        {
            arr1 = arr[0].Split([':']);
        }

        if (arr[1].Count > 0)
        {
            arr2 = arr[1].Split([':']);
        }

        if (arr1 != null && arr2 != null && arr1.Count + arr2.Count > 6)
        {
            return false;
        }
        else
        {
            if (arr1 != null)
            {
                if (arr1.Count > 6)
                {
                    return false;
                }
                
                if (!IsArrayItemWithinRange(arr1, 0, 65535, true))
                {
                    return false;
                }
            }
            
            if (arr2 != null)
            {
                if (arr2.Count > 6)
                {
                    return false;
                }
                
                if (!IsArrayItemWithinRange(arr2, 0, 65535, true))
                {
                    return false;
                }
            }
        }
    }
    else
    {
        arr = address.Split([':']);
        if (arr.Count != 8)
        {
            return false;
        }

        if (!IsArrayItemWithinRange(arr, 0, 65535, true))
        {
            return false;
        }
    }
   
    return true;
}

// check if items in array in range and convert the array to binary
bool IsArrayItemWithinRange(array<string> arr, int start, int end, bool hexDigit, ref binary bin, bool isIPv4)
{
    for (int i = 0; i < arr.Count; i++)
    {
        if (isIPv4 && (arr[i].ToByte(hexDigit) is ipv4Val:byte))
        {
            if (ipv4Val < start || ipv4Val > end)
            {
                return false;
            }
            else
            {
                bin += ipv4Val.ToBinary();
            }
        }
        else if (!isIPv4 && (arr[i].ToUShort(hexDigit) is ipv6Val:ushort))
        {
            if (ipv6Val < start || ipv6Val > end)
            {
                return false;
            }
            else
            {
                bin += ipv6Val.ToBinary();
            }
        }
        else
        {
            return false;
        }
    }
    return true;
}

bool IsArrayItemWithinRange(array<string> arr, int start, int end, bool hexDigit)
{
    foreach (var a in arr)
    {
        var i = a.ToInt(hexDigit);

        if (i == nothing)
        {
            return false;
        }

        int val = i as int;
        if (val < start || val > end)
        {
            return false;
        }
    }
    return true;
}

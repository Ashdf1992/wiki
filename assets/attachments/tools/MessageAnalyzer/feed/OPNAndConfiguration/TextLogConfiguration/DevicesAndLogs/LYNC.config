//
// Property to return date type given a message of type LyncDateTime.  Aspects for IsTimestamp allow you to replace the timestamp value.
//
DateTime get lyncCuccDateTime(this LyncDateTime msg) with EntryFieldInfo {IsTimestamp = true, IsLocalTime = true }
{
    optional DateTime theDateTime = ToDateTime(msg.Date + " " + msg.Time);
    if(theDateTime == nothing)
    {
        return ToDateTime("1970-01-01T00:00:00.0000000") as DateTime;
    }
    else 
    {
        return theDateTime as DateTime;
    }
}

message LyncDateTime : LogEntry
{
    string Date;
    string Time;
    
    override string ToString()
    {
        return "Date: " + Date + ", Time: " + Time;
    }
}

message LYNCEntry
          with EntryInfo { Regex = @"(?<Date>[^\|]*)\|(?<Time>[^\s]*)(\s)(?<Thread>[^:]*):(?<Process>[^(\s)]*)(\s)(?<Level>[^:]*)::(\s)(?<Description>.*)" , Multiline = parseMultilineContent }
          : LyncDateTime
{
    string Thread;
    string Process;
    string Level where ErrorCodeIf(@"ERROR" in Level, this, DiagnosisLevel.Warning, "Error Lync Log Record");
    string Description;
    optional SIPRequest SIPRequest;
    optional SIPResponse SIPResponse;

    bool parseMultilineContent (string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
                
        if (CanDecode<LYNCEntry>(line, context) )
        {
            //if Description has "SIP/", try to decode as SIPRequest or SIPResponse
            if (@"SIP/" in Description)
            {
                if (Response(Description) is sipResp:SIPResponse)
                {
                    SIPResponse = sipResp;
                    Description = null;
                }
                else if (Request(Description) is sipReq:SIPRequest)
                {
                    SIPRequest = sipReq;
                    Description = null;
                }
            }
            return false;
        }
        if (Description != null)
        {
            Description = Description + "\r\n" + line;
        }
        else
        {
            Description = line;
        }
        return true;
    }
    
    override string ToString()
    {
        if (Description != null)
        {
            return Description;
        }
        if (SIPRequest is siprequest:SIPRequest)
        {
            return siprequest.ToString();
        }
        if (SIPResponse is sipresponse:SIPResponse)
        {
            return sipresponse.ToString();
        }
        return "";
    }
}

type SIPRequest
{
    string Method;
    string Uri;
    string Version;
    map<string, string> Headers;
    optional string Body with MimeDescription{Format = "text/xml"};
    
    override string ToString()
    {
        return "SIPRequest, Method: " + Method +
            ", Uri: " + Uri +
            ", Version: " + Version;
    }
}

type SIPResponse
{
    string Version;
    string StatusCode;
    string ReasonPhrase;
    map<string, string> Headers;
    optional string Body with MimeDescription{Format = "text/xml"};
    
    override string ToString()
    {
        return "SIPResponse, Version: " + Version +
            ", StatusCode: " + StatusCode +
            ", ReasonPhrase: " + ReasonPhrase;
    }
}

syntax SP = regex{\s};
syntax CRLF = regex{\r\n};

syntax Digits           = d:regex{[0-9]+} => d;
syntax SipVersion       = s:regex{SIP/[0-9]+\.[0-9]+} => s;

syntax Request = method:(regex{[^\s]+}) SP+ uri:(regex{[^\s]+}) SP+ version:(regex{[^\r\n]+}) CRLF+ headerFileds:(HeaderField)* body:(regex{[\s\S]+})? =>
                                    new SIPRequest
                                    {
                                        Method = method.Trim(),
                                        Uri = uri.Trim(),
                                        Version = version.Trim(),
                                        Headers = MergeHeaders(headerFileds),
                                        Body = body.Count > 0 ? body[0].Trim() : nothing
                                    };
syntax Response = version:SipVersion SP+ statuscode:(regex{[^\s]+}) SP+ reasonphrase:(regex{[^\r\n]+}) CRLF+ headerFileds:(HeaderField)* body:(regex{[\s\S]+})? =>
                                    new SIPResponse
                                    {
                                        Version = version.Trim(),
                                        StatusCode = statuscode.Trim(),
                                        ReasonPhrase = reasonphrase.Trim(),
                                        Headers = MergeHeaders(headerFileds),
                                        Body = body.Count > 0 ? body[0].Trim() : nothing
                                    };

syntax Colon = regex{:};
syntax Key = f:(regex{[A-Za-z0-9\-]+}) => f.Trim();
syntax Value = f:(regex{[^\r\n]*}) => f.Trim();
syntax HeaderField = k:Key Colon v:Value CRLF* =>
                                    new HeaderFieldType
                                    {
                                        Key = k,
                                        Value = v,
                                    };
type HeaderFieldType
{
    string Key;
    string Value;
}

map<string, string> MergeHeaders(array<HeaderFieldType> headFields)
{
    map<string, string> headers = {}.ToOrdered();
    foreach (HeaderFieldType headerField in headFields)
    {
        if (!(headerField.Key in headers))
        {
            headers[headerField.Key] = headerField.Value;
        }
        else
        {
            headers[headerField.Key] += "\r\n" + headerField.Value;
        }
    }
    
    return headers;
}

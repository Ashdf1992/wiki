message RegistryKeyRoot : LogEntry
{
    string Path;

    bool parseMultilineComments(string line, LineContext context)
    {
        if (IsEndDashDetectedStr in context.Data &&
            context.Data[IsEndDashDetectedStr] is isEnd:bool && 
            isEnd)
        {
            return false;
        }
    
        if (context.IsInitialLine)
        {
            return true;
        }
    
        if (line.StartWith(Dashes))
        {
            context.Data[IsEndDashDetectedStr] = true;
            return true;
        }
        
        if (Path == null)
        {
            Path = line.Trim();
        }
        else
        {
            Path += " " + line.Trim();
        }
        
        return true;
    }
    
    override string ToString()
    {
        return Path;
    }
} with EntryInfo
{
    Tag = Dashes,
    Regex = @"(\-)+",
    Multiline = parseMultilineComments,
    Priority = 1
};

const string Dashes = "----";
const string IsEndDashDetectedStr = "IsEndDashDetected";

message RegistryKey : LogEntry
{
    string Key;
    array<Value> Values;
    
    bool parseMultilineValues(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        
        if (CanDecode<RegistryKey>(line, context))
        {
            return false;
        }
        
        string trimLine = line.Trim();
        var res = ConstructValue(trimLine.Split(["    ", "\t"]));
        Value val;
        if (res != nothing)
        {
            val = res as Value;
        }
        else
        {
            val = new Value
                {
                    Value = trimLine,
                };
            ValidationCheck(false, this, DiagnosisLevel.Error, () => "It is in invalid registry key format for the input string: " + trimLine);
        }
        
        if (Values == null)
        {
            Values = [val];
        }
        else
        {
            Values += [val];
        }
        
        return true;
    }
    
    override string ToString()
    {
        return Key;
    }
} with EntryInfo
{
    Regex = RegistryKeyRegex, 
    Multiline = parseMultilineValues,
    Priority = 0
};

const string RegistryRoots = @"(HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG)";
const string RegistryKeyRegex = @"(?<Key>" + RegistryRoots + @"(\\.*)?$)";

set<string> ValueTypeSet = {"REG_SZ", "REG_BINARY", "REG_DWORD", "REG_QWORD", "REG_MULTI_SZ", "REG_EXPAND_SZ"};

optional Value ConstructValue(array<string> strArr)
{
    if (strArr != null && strArr.Count > 1)
    {
        int i;
        int lastPos = strArr.Count() - 1;
        for (i = lastPos; i >= 0; i--)
        {
            if (strArr[i].Trim() in ValueTypeSet)
            {
                break;
            }
        }
        
        if (i <= 0) // ValueType string should not be first string.
        {
            return nothing;
        }

        Value val = new Value();

        val.Name = ConvertStringArrayToString(strArr.Segment(0, i)).Trim();
        val.Type = strArr[i].Trim();
        val.Value = i == lastPos ? "" : ConvertStringArrayToString(strArr.Segment(i + 1)).Trim();

        return val;
    }

    return nothing;
}

type Value
{
    string Name;
    string Type;
    string Value;

    override string ToString()
    {
        return "Name: " + Name + ", Value: " + Value + ", Type: " + Type;
    }
}

// Is x started with y
bool StartWith(this string x, string y)
{
    return x.Count >= y.Count && x.Segment(0, y.Count) == y;
}

string ConvertStringArrayToString(optional array<string> arr)
{
    if (arr is strArr:array<string> && strArr != null && strArr.Count > 0)
    {
        return strArr.Accumulate((string t, string s) => s + " " + t).Segment(1);
    }
    return "";
}

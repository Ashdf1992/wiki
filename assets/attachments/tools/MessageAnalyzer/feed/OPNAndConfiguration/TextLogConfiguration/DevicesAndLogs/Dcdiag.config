using Diagnostics;

message DCDiagHeader with
    EntryInfo{Regex=@"(?<Line>Directory Server Diagnosis)", Priority = 100}
    : LogEntry
{
    string Line;
    override string ToString()
    {
        return Line;
    }
}

message PerformingInitialSetup with 
    EntryInfo{Regex=@"(?<Line>Performing initial setup:)", Priority = 100}
    : LogEntry
{
    string Line;
    override string ToString()
    {
        return Line;
    }
}

message TryingToFindHomeServer with
    EntryInfo{Regex=@"\s*(?<Line>Trying to find home server\.\.\.)\s*", Priority = 100}
    : LogEntry
{
    string Line;
    override string ToString()
    {
        return Line;
    }
}

message VerifyingLocalMachine with
    EntryInfo{Regex = @"\s*\* Verifying that the local machine (?<Name>[\w\-]*).*", Multiline = HandleMultiline, Priority = 100}
    : LogEntry
{
    string Name;
    string Details;

    override string ToString()
    {
        return Format("* Verifying that the local machine {0}, is a Directory Server. ", Name);
    }
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (!line.StartsWith("*", true))
        {
            Details = (Details + "\r\n" + line).Trim();
            return true;
        }
        return false;
    }
}

message ConnectingToService with
    EntryInfo{Regex = @"\s*\* Connecting to directory service on server (?<ServerName>[\w\-]+)\.\s*", Priority = 100}
    : LogEntry
{
    string ServerName;
    override string ToString()
    {
        return "* Connecting to directory service on server " + ServerName + ".";
    }
} 

message IdentifiedADForest with
    EntryInfo{Regex = @"\s*(?<Line>\* Identified AD Forest\.)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;
    string Details;
    override string ToString()
    {
        return Line;
    }
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (!line.StartsWith("*", true)) 
        {
            Details = (Details + "\r\n" + line).Trim();
            return true;
        }
        return false;
    }
}

message CollectingSiteInfo with
    EntryInfo{Regex = @"\s*(?<Line>\* Collecting site info\.)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;
    string Details;
    array<SiteObject> Sites = [];

    override string ToString()
    {
        return Line;
    }
    
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (line.StartsWith("* ", true))
        {
            return false;
        }
        else
        {
            if (line.StartsWith("Looking at", true))
            {
                SiteObject obj = new SiteObject{Line = line};
                Sites += [obj];
            }
            else if (line.StartsWith("Getting", true))
            {
                if (Sites.Count == 0)
                {
                    Details = (Details + "\r\n" + line).Trim();
                }
                else
                {
                    Sites.Last().Detail = line;
                }
            }
            else
            {
                Details = (Details + "\r\n" + line).Trim();
            }
            return true;
        }
    }
}

type SiteObject
{
    string Line;
    string Detail;
    override string ToString()
    {
        int pos = Line.IndexOf(":");
        if (pos > 0 && Line.Count >= pos + 1)
        {
            return Line.Segment(pos + 2);
        }
        else
        {
            return Line;
        }
    }
}

message IdentifyingAllServers with
    EntryInfo{Regex = @"\s*(?<Line>\* Identifying all servers\.)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;
    string Details;
    array<Server> Servers = [];

    override string ToString()
    {
        return Line;
    }

    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (line.StartsWith("* ", true))
        {
            return false;
        }
        else
        {
            if (line.StartsWith("Getting information", true))
            {
                Server obj = new Server{Line = line};
                Servers += [obj];
            }
            else if (line.StartsWith("Getting", true) || line.StartsWith("objectGuid", true) || line.StartsWith("InvocationID", true) || line.StartsWith("dnsHostname", true) || line.StartsWith("site info", true) || line.StartsWith("All the info", true))
            {
                if (Servers.Count == 0)
                {
                    Details = (Details + "\r\n" + line).Trim();
                }
                else
                {
                    Server last = Servers.Last();
                    last.Details = (last.Details + "\r\n" + line).Trim();
                }
            }
            else
            {
                Details = (Details + "\r\n" + line).Trim();
            }
            return true;
        }
    }
}

type Server
{
    string Line;
    string Details;
    override string ToString()
    {
        int pos = Line.IndexOf(" server ");
        if (pos > 0 && Line.Count >= pos + 7)
        {
            return Line.Segment(pos + 8);
        }
        else
        {
            return Line;
        }
    }
}

message IdentifyingNCCrossRefs with
    EntryInfo{Regex = @"\s*(?<Line>\* Identifying all NC cross-refs\.)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;
    optional string Details;

    override string ToString()
    {
        return Line;
    }
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (line.StartsWith("* ", true))
        {
            return false;
        }
        else
        {
            if (Details is details:string)
            {
                Details = details + "\r\n" + line;
            }
            else
            {
                Details = line;
            }
            return true;
        }
    }
}

message FoundDC with
    EntryInfo{Regex = @"\s*\* Found (?<DCCount>\d+) DC\(s\)\. Testing (?<TestingCount>\d+) of them\.\s*", Priority = 100}
    : LogEntry
{
    string DCCount;
    string TestingCount;
    override string ToString()
    {
        return Format("* Found {0} DC(s). Testing {1} of them.", DCCount, TestingCount);
    }
}

message  DoneGatheringInitialInfo with
      EntryInfo{Regex = @"\s*(?<Line>Done gathering initial info\.)\s*", Priority = 100} 
    : LogEntry
{
    string Line;

    override string ToString()
    {
        return Line;
    }
}

message DoingInitialRequiredTests with
    EntryInfo{Regex = @"\s*(?<Line>Doing initial required tests)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;

    override string ToString()
    {
        return Line;
    }
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (DetectEmptyLine(line) != nothing)
        {
            return false;
        }
        return true;
    }
}

message TestingServer with
    EntryInfo{Regex = @"\s*Testing server:\s*(?<Server>.+)\s*", Priority = 100} 
    : LogEntry
{
    string Server;

    override string ToString()
    {
        return "Testing server: " + Server;
    }
}

message StartTesing with
    EntryInfo{Regex = @"\s*Starting test: (?<TestingCategory>.+)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string TestingCategory;
    string Details = "";
    string Result where ErrorCodeIf(Result != null && Result.Contains("failed test"), this, DiagnosisLevel.Error, Result);

    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (context.Data.Keys[MessageEndingTag] && context.Data[MessageEndingTag] as bool)
        {
            return false;
        }
        if (!line.StartsWith(".........................", true))
        {
            Details = (Details + "\r\n" + line).Trim();
        }
        else
        {
            Result = line.Trim().Segment(26); // 26 is the count of leading char '.' and space.
            context.Data[MessageEndingTag] = true;
        }
        return true;
    }
    override string ToString()
    {
        return "    Starting test: " + TestingCategory;
    }
}
const string MessageEndingTag = "MessageEndingTag";

message TestOmittedByUser with
    EntryInfo{Regex = @"\s*Test omitted by user request: (?<TestingCategory>.+)\s*", Priority = 100} 
    : LogEntry
{
    string TestingCategory;
    override string ToString()
    {
      return "    Test omitted by user request: " + TestingCategory;
    }
}

message DoingPrimaryTests with
    EntryInfo{Regex = @"\s*(?<Line>Doing primary tests)\s*", Multiline = HandleMultiline, Priority = 100} 
    : LogEntry
{
    string Line;
    override string ToString()
    {
      return Line;
    }
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        if (DetectEmptyLine(line) != nothing)
        {
            return false;
        }
        return true;
    }
}

message RunningPartitionTests with
    EntryInfo{Regex = @"Running partition tests on : (?<Target>.+)"}
    : LogEntry
{
    string Target;
    override string ToString()
    {
        return "Running partition tests on : " + Target;
    }
}

message RunningEnterpriseTests with
    EntryInfo{Regex = @"Running enterprise tests on : (?<Target>.+)"}
    : LogEntry
{
    string Target;
    override string ToString()
    {
        return "Running enterprise tests on : " + Target;
    }
}

// Virtual operaiton.
virtual operation GatheringInitialInfo
{
    in string DirectoryServer = directoryServer;
    in string DCCount = dcCount;
    in string TestingCount = testingCount;
    override string ToString()
    {
        return "Done gathering initial info, DirectoryServer: " + DirectoryServer + ", DCCount: " + DCCount + ", TestingCount: " + TestingCount;
    }
}
=
accepts TryingToFindHomeServer?
accepts VerifyingLocalMachine?
accepts ConnectingToService{ServerName is directoryServer:string}
accepts IdentifiedADForest
accepts CollectingSiteInfo
accepts IdentifyingAllServers
accepts IdentifyingNCCrossRefs
accepts FoundDC{DCCount is dcCount:string, TestingCount is testingCount:string}
accepts DoneGatheringInitialInfo;

virtual operation TestServerOp
{
    in string Server = server;
    override string ToString()
    {
        return "Starting test, Server: " + Server;
    }
}
= 
accepts TestingServer{Server is var server} ->
(accepts StartTesing | accepts TestOmittedByUser | accepts UnrecognizedLine)+;

virtual operation RunningPartitionTestsOp
{
    in string Target = target;
    override string ToString()
    {
        return "Running partition tests on : " + Target;
    }
}
=
accepts RunningPartitionTests{Target is target:string} ->
(accepts StartTesing | accepts TestOmittedByUser | accepts UnrecognizedLine)+;

virtual operation RunningEnterpriseTestsOp
{
    in string Target = target;
    override string ToString()
    {
        return "Running partition tests on : " + Target;
    }
}
=
accepts RunningEnterpriseTests{Target is target:string} ->
(accepts StartTesing | accepts TestOmittedByUser | accepts UnrecognizedLine)+;

message UnrecognizedLine with 
    EntryInfo{Regex = @"^(?<Line>.*)$", Priority = 3000}
    : LogEntry
{
    string Line;
    override string ToString()
    {
        return Line.Trim();
    }
}

// Function
bool StartsWith(this string str, string subStr, bool ignoringSpace)
{
    if (ignoringSpace)
    {
        str = str.Trim();
    }
    return str.IndexOf(subStr) == 0;
}

bool Contains(this string str, string subStr)
{
    return str.IndexOf(subStr) >= 0;
}

syntax DetectEmptyLine = regex{\s*[^\s]+};

T Last<T>(this array<T> arrT)
{
    if (arrT.Count == 0)
    {
        T t;
        return t;
    }
    else
    {
        return arrT[arrT.Count - 1];
    }
}


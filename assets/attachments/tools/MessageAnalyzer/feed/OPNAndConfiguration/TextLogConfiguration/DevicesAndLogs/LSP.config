// LSP config for lsa communication correlation.
// Need to set this value to today's date.

////////////////////////////////////////////////////////////////////
// Generic message that other messages are based on.  Catch all for
// any unparsed messages.

message LspBasicMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>[0-9]+)\.(?<ThreadID>[0-9]+)\>\sLspDsLookup\s-\s(?<Message>.*)"
        , Priority = 2
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Message;

    override string ToString()
    {
        return (Message);
    }
}

////////////////////////////////////////////////////////////////////
// Start messages at the top of the trace

message LspStartMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>[0-9]+)\.(?<ThreadID>[0-9]+)\>\s\s-\s(?<Message>.*)"
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Message;

    override string ToString()
    {
        return (Message);
    }
}

////////////////////////////////////////////////////////////////////
// Enter/Exit.  Function is used to tie all related messages (where known)

message LspEnteringMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>[0-9]+)\.(?<ThreadID>[0-9]+)\>\sLspDsLookup\s-\sEntering function\s(?<Function>.*)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function;

    override string ToString()
    {
        return ("Enter " + Function);
    }
}

message LspExitMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>[0-9]+)\.(?<ThreadID>[0-9]+)\>\sLspDsLookup\s-\sExiting function\s(?<Function>.*)\swith\sstatus\s0x(?<Status>[0-9A-Fa-f]+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function;
    int Status;

    override string ToString()
    {
        return ("Exit " + Function + ", Status " + Status.ToString());
    }
}

////////////////////////////////////////////////////////////////////
// LsapLookupNames Function related messages

// \[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\sLookupNames request for (?<NumberOfNames>\d+) names with level=(?<Level>\d+), mappedcount=(?<MappedCount>\d+), options=0x(?<options>[0-9a-fA-F]+), clientRevision=(?<clientRevision>\d+)
message LspLookupNamesInfoMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\sLookupNames request for (?<NumberOfNames>\d+) names with level=(?<Level>\d+), mappedcount=(?<MappedCount>\d+), options=0x(?<Options>[0-9a-fA-F]+), clientRevision=(?<ClientRevision>\d+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupNames";
    int NumberOfNames;
    int Level;
    int MappedCount;
    int Options;
    int ClientRevision;
    

    override string ToString()
    {
        return (Function + " Names Info");
    }
}

message LspLookupNamesData with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Names\[\s(?<NameArrayIndex>\d+)\s\] = ((?<Domain>[\w\s_]+)\\)?(?<User>[\w\s_]+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupNames";
    int NameArrayIndex;
    string Domain;
    string User;
    

    override string ToString()
    {
        return (Function + " [" + NameArrayIndex.ToString() + "] " + Domain + "\\" + User);
    }
}

message LspLookupNamesSatified with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+LookupNames request for (?<Domain>\w+)\\(?<User>\w+)\s(?<RemainingText>.*)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupNames";
    string Domain;
    string User;
    string RemainingText;    

    override string ToString()
    {
        return (Function + " " + Domain + "\\" + User + " " + RemainingText);
    }
}

message LspLookupNamesRemainUnmapped with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+(?<Count>\d+) names remain unmapped"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupNames";
    int Count;

    override string ToString()
    {
        return (Function + " " + Count.ToString() + " remain unmapped");
    }
}

////////////////////////////////////////////////////////////////////
// LsapLookupSids Function related messages

// \[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\sLookupNames request for (?<NumberOfNames>\d+) names with level=(?<Level>\d+), mappedcount=(?<MappedCount>\d+), options=0x(?<options>[0-9a-fA-F]+), clientRevision=(?<clientRevision>\d+)
message LspLookupSIDsInfoMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\sLookupSids request for (?<NumberOfNames>\d+) SIDs with level=(?<Level>\d+), mappedcount=(?<MappedCount>\d+), options=0x(?<Options>[0-9a-fA-F]+), clientRevision=(?<ClientRevision>\d+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    int NumberOfNames;
    int Level;
    int MappedCount;
    int Options;
    int ClientRevision;
    

    override string ToString()
    {
        return (Function + " SID Info");
    }
}

message LspLookupSIDsSidDataMessage with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Sids\[\s(?<SidArrayIndex>\d+)\s\] = (?<SID>[S\-\d]+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    int SidArrayIndex;
    string SID;

    override string ToString()
    {
        return (Function + " [" + SidArrayIndex.ToString() + "]" + SID);
    }
}

message LspLookupSidSatified with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+LookupSids request for (?<SID>[S\-\d]+)\s(?<RemainingText>.*)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    string SID;
    string RemainingText;    

    override string ToString()
    {
        return (Function + " " + SID + " " + RemainingText);
    }
}

message LspLookupSidsRemainUnmapped with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+(?<Count>\d+) sids remain unmapped"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    int Count;

    override string ToString()
    {
        return (Function + " " + Count.ToString() + " remain unmapped");
    }
}

message LspLookupSidsChainRequestNetlogon with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+LookupSids chain request \(using Netlogon\) to \\\\(?<Domain>[\w\._]+) for (?<Count>\d+) sids will be made with level=(?<Level>\w+), mappedcount=(?<MappedCount>\w+), options=0x(?<Options>\w+), serverRevision=(?<ServerRevision>\w+). Sids are;"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    string Domain;
    int Count;
    int Level;
    int MappedCount;
    int Options;
    int ServerRevision;

    override string ToString()
    {
        return (Function + "chain request (using Netlogon) to " + Domain + " for " + Count.ToString() + " sids");
    }
}

//\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Lookup request \(using Netlogon\) to \\\\(?<Domain>[\w\._]+) returned with 0x(?<Status>\w+) and mappedcount=(?<MappedCount>\w+), serverRevision=(?<ServerRevision>\w+)
message LspLookupSidsChainResponseNetlogon with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Lookup request \(using Netlogon\) to \\\\(?<Domain>[\w\._]+) returned with 0x(?<Status>\w+) and mappedcount=(?<MappedCount>\w+), serverRevision=(?<ServerRevision>\w+)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    string Domain;
    int Status;
    int MappedCount;
    int ServerRevision;

    override string ToString()
    {
        return (Function + "Lookup request (using Netlogon) to " + Domain + " returned " + Status.ToString() + " mappedcount=" + MappedCount.ToString() + " serverRevision=" + ServerRevision.ToString());
    }
}


// \[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Requestor details: (?<Machine>[\w\s]+), Process ID = (?<PIDSummary>\d+), Process Name = (?<ProcessPath>.*)
message LspLookupSidsRequestorDetails with
    EntryInfo 
    { 
        Regex = @"\[\s(?<ts>[/0-9]+\s[/:0-9]+)\]\s(?<ProcessId>\d+)\.(?<ThreadID>\d+)\>\sLspDsLookup\s-\s+Requestor details: (?<Machine>[\w\s]+), Process ID = (?<PIDSummary>\d+), Process Name = (?<ProcessPath>.*)"
        , Priority = 1
    }
    : BaseLsp
{
    int ProcessId;
    int ThreadID;
    string Function="LsapLookupSids";
    string Machine;
    int PIDSummary;
    string ProcessPath;
    
    override string ToString()
    {
        return (Function + " Requestor details=" + Machine + ", ProcessPath=" + ProcessPath);
    }
}

////////////////////////////////////////////////////////////////////
// LsapDbLookupSids Function related messages

// Base message for handling the timestamp.  Warning, since there is now date, you need to maintain the latest date, or modify if it doesn't
// match this year.

message BaseLsp : LogEntry
{
    string ts;
}

syntax CustomDateTimeFormat = month:regex{[0-9][0-9]?} "/" day:regex{[0-9][0-9]?} " " hours:regex{[0-9][0-9]?} ":" minutes:regex{[0-9][0-9]?} ":" seconds:regex{[0-9][0-9]?}  => ToDateTime(Now().ToString("yyyy-") + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds, DateTimeStyles.None);

DateTime get nltsDateTime(this BaseLsp msg) with EntryFieldInfo {IsTimestamp = true, IsLocalTime = true }
{
    optional DateTime theDateTime = CustomDateTimeFormat(msg.ts);
    
    if (theDateTime == nothing)
    {
        return CustomDateTimeFormat("01/07 12:34:56") as DateTime;
    }
    else
    {
        return theDateTime as DateTime;
    }
}

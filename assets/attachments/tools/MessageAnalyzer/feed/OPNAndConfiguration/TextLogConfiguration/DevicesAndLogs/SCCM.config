
//syntax LogEnd = regex{\]LOG]!><time=\"(?<Time>.{16})\" date=\"(?<Date>.{10})\"\scomponent=\"(?<Component>.*)\"\scontext=\"(?<Context>.*)\"\stype=\"(?<Type>.*)\"\sthread=\"(?<ThreadId>.*)\"\sfile=\"(?<File>.*):(?<LineNumber>.+)\">} => (((porthi as ushort)*(256 as ushort) + (portlo as ushort)) as ushort);
message SCCMLine with
	EntryInfo 
	{
        // Regex: Pass QE Check 8/12/2014
		Regex = @"<!\[LOG\[(?<Message>.*)\]LOG]!><time=\x22(?<Time>.{16})\x22 date=\x22(?<Date>.{10})\x22\scomponent=\x22(?<Component>.*)\x22\scontext=\x22(?<Context>.*)\x22\stype=\x22(?<Type>.*)\x22\sthread=\x22(?<ThreadId>.*)\x22\sfile=\x22(?<File>.*):(?<LineNumber>.+)\x22>" 
		, Priority = 0
	}
	: BaseNetLogon
{
	string Message;	
	string Component;
	string Context;
	string Type;
	string ThreadId;
	string File;
	string LineNumber;

	override string ToString()
    {
        return ("[" + Message + "]");
    }
}

// <![LOG[DTS job {EA211217-5A1C-4988-92B0-1B8747A10D7E} has completed:
// Elapsed time : 6 seconds]LOG]!><time="16:23:37.387+300" date="07-08-2013" component="DataTransferService" context="" type="1" thread="5744" file="util.cpp:2088">
message SCCMDTSLineMulti with
    EntryInfo {
        // Regex: Pass QE Check 8/12/2014
		Regex = @"<!\[LOG\[(?<Message>DTS.*)"
		, Multiline = parseContent 
	} 
	: BaseNetLogon
{
	string Component;
	string Context;
	string Type;
	string ThreadId;
	string File;
	string LineNumber;
	string Status;
	string StartDate;
	string StartTime;
	string CompletionDate;
	string CompletionTime;
	string Message;
	int ElapsedTime;
	optional string content;
	bool Done = false;
    
	override string ToString()
    {
        return ("[" + Message + "]");
    }

    bool parseContent(string line, LineContext context)
    {
		if (context.IsInitialLine) return true;
		
		if (CanDecode<SCCMLine>(line, context)  )
		{
			var tail = Decode<SCCMDTSLineTail>(content as string, context);
			if(tail != null)
			{
				Time = tail.Time;
				Date = tail.Date;
				Component = tail.Component;
				Context = tail.Context;
				Type = tail.Type;
				ThreadId = tail.ThreadId;
				File = tail.File;;
				LineNumber = tail.LineNumber;
				Status = tail.Status;
				StartDate = tail.StartDate;
				StartTime = tail.StartTime;
				CompletionDate = tail.CompletionDate;
				CompletionTime = tail.CompletionTime;
				ElapsedTime = tail.ElapsedTime;
			}
			
			return false;
		}
		
		 
        if (content == nothing)
        {
            content = line;
        }
        else
        {
            // Cannot attach text as multiple lines because UI shows only the first line in that case
            content = " " + (content as string) + " " + line;
        }
		
        return true;
    }
}

message SCCMDTSLineTail with
    EntryInfo 
	{ 
        // Regex: Pass QE Check 8/12/2014
		//Regex = @"\]LOG]!><time=\x22(?<Time>.{16})\x22 date=\x22(?<Date>.{10})\x22\scomponent=\x22(?<Component>.*)\x22\scontext=\x22(?<Context>.*)\x22stype=\x22(?<Type>.*)\x22\sthread=\x22(?<ThreadId>.*)\x22\sfile=\x22(?<File>.*):(?<LineNumber>.+)\x22>"
		//Regex = @"(?<rest>.*)]LOG]\!><time=\x22(?<Time>.{16})\x22 date=\x22(?<Date>.{10})\x22\scomponent=\x22(?<Component>.*)\x22\scontext=\x22(?<Context>.*)\x22\stype=\x22(?<Type>.*)\x22\sthread=\x22(?<ThreadId>.*)\x22\sfile=\x22(?<File>.*):(?<LineNumber>.+)\x22>"
		Regex = @"\s*Status : (?<Status>.*)\s+Start time : (?<StartDate>[0-9/]*)\s(?<StartTime>[0-9:]*)\s*Completion time : (?<CompletionDate>[0-9/]*)\s(?<CompletionTime>[0-9:]*)\s*Elapsed time : (?<ElapsedTime>.*) seconds]LOG]\!><time=\x22(?<Time>.{16})\x22 date=\x22(?<Date>.{10})\x22\scomponent=\x22(?<Component>.*)\x22\scontext=\x22(?<Context>.*)\x22\stype=\x22(?<Type>.*)\x22\sthread=\x22(?<ThreadId>.*)\x22\sfile=\x22(?<File>.*):(?<LineNumber>.+)\x22>"
		, Priority = 1
	} : BaseNetLogon
{
	string Component;
	string Context;
	string Type;
	string ThreadId;
	string File;
	string LineNumber;
	string Message;	
	// Data from multiline section
	string Status;
	string StartDate;
	string StartTime;
	string CompletionDate;
	string CompletionTime;
	int ElapsedTime;
}

message SCCMGenericLineMulti with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { 
		Regex = @"<!\[LOG\[(?<Message>.*)"
		, Multiline = parseContent 
	} 
	: BaseNetLogon
{
	string Component;
	string Context;
	string Type;
	string ThreadId;
	string File;
	string LineNumber;
	string MultiLine;
	string Message;
	int ElapsedTime;
	optional string content;
	bool Done = false;
    
	override string ToString()
    {
        return ("[" + Message + "]");
    }

    bool parseContent(string line, LineContext context)
    {
		if (context.IsInitialLine) return true;
		
		if (CanDecode<SCCMLine>(line, context)  )
		{
			var tail = Decode<SCCMGenericLineTail>(content as string, context);
			if(tail != null)
			{
				Time = tail.Time;
				Date = tail.Date;
				Component = tail.Component;
				Context = tail.Context;
				Type = tail.Type;
				ThreadId = tail.ThreadId;
				File = tail.File;;
				LineNumber = tail.LineNumber;
				MultiLine = tail.MultiLine;
			}
			
			return false;
		}
		
		 
        if (content == nothing)
        {
            content = line;
        }
        else
        {
            // Cannot attach text as multiple lines because UI shows only the first line in that case
            content = "\n" + (content as string) + "\n" + line;
        }
		
        return true;
    }
}

message SCCMGenericLineTail with
    EntryInfo 
	{
        // Regex: Pass QE Check 8/12/2014
		Regex = @"\s*(?<MultiLine>.*)]LOG]\!><time=\x22(?<Time>.{16})\x22 date=\x22(?<Date>.{10})\x22\scomponent=\x22(?<Component>.*)\x22\scontext=\x22(?<Context>.*)\x22\stype=\x22(?<Type>.*)\x22\sthread=\x22(?<ThreadId>.*)\x22\sfile=\x22(?<File>.*):(?<LineNumber>.+)\x22>"
		, Priority = 1
	} : BaseNetLogon
{
	string Component;
	string Context;
	string Type;
	string ThreadId;
	string File;
	string LineNumber;
	string Message;	
	// Data from multiline section
	string MultiLine;
	int ElapsedTime;
}

// Base type for all netlogon messages
//
message BaseNetLogon : LogEntry
{
	string Time;
	string Date;
}

//
// Syntax creates a type based on an regex expression
//
// syntax CustomDateTimeFormat =    month:regex{[0-9][0-9]?} "/" day:regex{[0-9][0-9]?} "/" year:regex{[0-9][0-9]]0-9][0-9]?} " " hours:regex{[0-9][0-9]?} ":" minutes:regex{[0-9][0-9]?} ":" seconds:regex{[0-9][0-9]?} "." fraction:regex{[0-9][0-9][0-9]?} => ToDateTime(year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "." + fraction);
// syntax CustomDateTimeFormatStr = month:regex{[0-9][0-9]?} "/" day:regex{[0-9][0-9]?} "/" year:regex{[0-9][0-9]]0-9][0-9]?} " " hours:regex{[0-9][0-9]?} ":" minutes:regex{[0-9][0-9]?} ":" seconds:regex{[0-9][0-9]?} "." fraction:regex{[0-9][0-9][0-9]?} => (year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "." + fraction);

//
// Property to return date type given a message of type BaseNetLogon.  Aspects for IsTimestamp allow you to replace the timestamp value.
//

DateTime get SCCMDateTime(this BaseNetLogon msg) with EntryFieldInfo {IsTimestamp = true, IsLocalTime = true }
{
    optional DateTime theDateTime = ToDateTime(msg.Date + " " + msg.Time);
    if(theDateTime == nothing)
    {
		return ToDateTime("01-07-1968 12:34:56.789+300") as DateTime;
    }
    else
    {
        return theDateTime as DateTime;
    }
}

string get SCCMDateTimeStr(this BaseNetLogon msg)
{
	return (msg.Date + " " + msg.Time);
}

using Diagnostics;

message EventHeader with 
	EntryInfo 
	{
        //Regex: Not Pass QE Check 8/1/2013 Used lazy quantifiers(as-few-times-as-possible quantifiers) and lookahead which SDL Regex Fuzzer does not support.
        //But looks like the regular expression is safe since it passed QE check if the lazy quantifiers and lookahead get removed
		Regex = @"(?<Timestamp>[^\*]*?)(?<Multiline>\*?)\t(?<Process>.*)\s\(((?<Server>[^:]+(?=:)):)?(?<ProcessID>.*?)\)\s*\t(?<TID>.*?)\t(?<Area>.*?)\s*\t(?<Category>.*?)\s*\t(?<EventID>.*?)\t(?<Level>.*?)\s*\t(?<Message>((?!Execution Time=).)*?)(Execution Time=(?<etstring>\d+.\d+))?\t(?<Correlation>.*)" 
	}
// 04/19/2012 03:23:50.68*	w3wp.exe (0x155C)                       	0x1070	SharePoint Foundation         	Database                      	tzkv	High    	...AllUserData AS t43_u WITH(NOLOCK,INDEX=AllUserData_PK) INNER JOIN Docs AS t43_d WITH(NOLOCK) ON (t43_d.DoclibRowId =t43_u.tp_ID  AND t43_u.[tp_CalculatedVersion] = 0  AND t43_u.[tp_DeleteTransactionId] = 0x  AND t43_u.[tp_IsCurrentVersion] = CONVERT(bit,1) ) AND (t43_d.SiteId=t43_u.tp_SiteId) AND (t43_d.SiteId = @SITEID) AND (t43_d.ParentId = t43_u.tp_ParentId) AND (t43_d.Id = t43_u.tp_DocId) AND ( (t43_u.tp_Level = 1 OR t43_u.tp_Level =  2 OR  t43_u.tp_Level =255) ) AND (t43_d.Level = t43_u.tp_Level) AND ((t43_u.tp_Level = 255 AND t43_d.LTCheckoutUserId =@IU OR (t43_u.tp_Level = 1 AND (t43_u.tp_DraftOwnerId IS NULL OR  (t43_u.tp_DraftOwnerId <>@IU AND t43_d.ScopeId NOT IN (SELECT CAST(val AS uniqueidentifier) AS InValues FROM dbo.fn_UnpackCsvString(@L6TXP) ))) OR t43_u.tp_Level = 2 AND (t...	6d6f5828-0604-4458-8cd1-84a9a06ad86f
  // 04/19/2012 03:23:50.68 	w3wp.exe (0x155C)                       	0x1070	SharePoint Foundation         	Monitoring                    	b4ly	Verbose 	Leaving Monitored Scope (EnsureListItemsData#99). Execution Time=259.585593835583	6d6f5828-0604-4458-8cd1-84a9a06ad86f
  // 06/11/2015 13:05:36.00	w3wp.exe (SERVER1:0x3040)	0xCA6C	SharePoint Foundation	Monitoring	b4ly	High	Leaving Monitored Scope (ExecuteWcfOperation:http://schemas.microsoft.com/sharepoint/taxonomy/soap/IMetadataWebServiceApplication/GetServiceSettings). Execution Time=10071.6746	0600a67e-f75b-4a7b-9528-40b71ca832ea
  : LogEntry
{
    DateTime Timestamp with EntryFieldInfo {IsTimestamp = true, IsLocalTime = false };
    string Process;
    string Server;
    uint ProcessID;
    uint TID;
    string Area;
    string Category;
    string EventID;
    string Level;
    string Message;
    string etstring;
    string Correlation;
    string Multiline;

    override string ToString()
    {
      return Message + (Server.Count == 0 ? "" : (" Server=" + Server)) + 
        " Process=" + Process.Trim() + ", ProcessID=" + ProcessID.ToString() + ", TID=" + TID.ToString() + ", EventID=" + EventID;
    }

}

optional float get ExecutionTime(this EventHeader e)
{
  if(e.etstring != nothing)
  {
    return e.etstring.ToFloat();
  }
  else
  {
    return nothing;
  }
}

message ULSLogHeader with
// Regex: Pass QE Check 8/12/2014
EntryInfo { Regex = "Timestamp\\s*Process\\s*TID\\s*Area\\s*Category\\s*EventID\\s*Level\\s*Message\\s*Correlation" }
: LogEntry
{

}

bool get IsMultiline(this EventHeader e)
{
  return e.Multiline == "*";
}

void set IsMultiline(this EventHeader e, bool b)
{
  if (b){	e.Multiline = "*";	}
  else {	e.Multiline = "";	}
}


//Multiline message handling.
endpoint Multiline[int i] accepts EventHeader
{
  //Candidates for a multiline message.
  array<EventHeader> MultilineMessages = [];
}

//Bug 65472. Destructors for default actors are not called
autostart actor DummyActor(Multiline m)
{
	~endpoint(Multiline m)
	{
		DispatchOrRelease(m);
	}
}

//The general logic is that we don't know if the line under evaluation is a multiline message until we see the next message.
autostart actor MultilineProcessor(LogSink l)
{
	process l accepts le:LogEntry{}
	{
		if (!(le is EventHeader))
			reject;
		
		EventHeader e = le as EventHeader;
		var m = endpoint Multiline[0];

		if (e.IsMultiline)
		{
			//A validation check is attached in case the log file is truncated and the first line is the continuation of a line that is not there
			if (m.MultilineMessages.Count == 0)
			{
				ValidationCheck(true, e, "Incomplete multi-line message");
			}

			m.MultilineMessages +=  [e];
		}
		else
		{
			DispatchOrRelease(m);
			
			m.MultilineMessages = [e];
		}
	}
}

//Releases the previous message if it is not a multiline one or dispatches a message representing the summary of a multiline message
void DispatchOrRelease(Multiline m)
{
	int count = m.MultilineMessages.Count;
	if (count == 0)
		return;
		
	//If the last message of the array is not a multiline one, then we are not building a multiline message and we can just release it.
	if (!m.MultilineMessages[count - 1].IsMultiline)
	{
		release m.MultilineMessages[count - 1];
	}
	else
	{
		EventHeader firstMessage = m.MultilineMessages[0];
		
		//Clones the first message except for the 'Message' field that is built from the multiline array
		EventHeader theMessage = new EventHeader{Timestamp = firstMessage.Timestamp,
							Process = firstMessage.Process,
							TID = firstMessage.TID,
							Area = firstMessage.Area,
							Category = firstMessage.Category,
							EventID = firstMessage.EventID,
							Level = firstMessage.Level,
							etstring = firstMessage.etstring,
							Correlation = firstMessage.Correlation};
		theMessage.IsMultiline = true;

		string msg = "";
		theMessage.Origins = [];
		
		//Builds the summarized message and sets origins
		for(int i = 0; i < m.MultilineMessages.Count; i++)
		{		
			if (i == 0)
			{
			   //Removes the last 3 dots
			   msg += m.MultilineMessages[i].Message.Segment(0, m.MultilineMessages[i].Message.Count-3);
			}
			else
			{
			   //Removes the first 3 dots
			   msg += m.MultilineMessages[i].Message.Segment(3);
			}
			theMessage.Origins += [m.MultilineMessages[i]];
		}
		
		theMessage.Message = msg;
		dispatch m accepts theMessage;
	}
}

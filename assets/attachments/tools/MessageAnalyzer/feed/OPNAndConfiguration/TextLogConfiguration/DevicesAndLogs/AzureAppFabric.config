message EventHeader with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"(?<TS>[-\d\w:\.]+),?\s*(?<EventId>\d+),?\s*(?<Code1>\d+),?\s*(?<Level>[a-zA-Z]+),?\s*(?<EventCode>0x[\da-fA-F]+)" },
    DisplayInfo { ToText = GetSummary } : LogEntry
{
    DateTime TS with UsageInfo { FrequentlyUsed = true }, EntryFieldInfo { IsTimestamp = true };
    uint EventId with UsageInfo { FrequentlyUsed = true };
    ushort Code1 with UsageInfo { FrequentlyUsed = true };
    // Need to have a special logic to handle OPN enums since they got complied just into integers
    string Level where ValidationCheck(value == null ? true : !(value == "Warning" || value == "Error"), this, "Error level is " + value) with UsageInfo { FrequentlyUsed = true };
    uint EventCode with UsageInfo { FrequentlyUsed = true };
    
    static string GetSummary(any data)
    {	
        var e = data as EventHeader;
        return e.Level + " event. No OPN parser available";
    }	
}

///////////////////////////////////////////////
// Log Message Definitions
///////////////////////////////////////////////

message NodeTraceEvent with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeTraceEvent", Regex = @"NodeTraceEvent,\s*Context:\s*(?<Context>[a-zA-Z\d]+),\s*Message:\s*(?<Message>.+?),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeTraceEventToText } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string Message where ValidationCheck(value == null ? true : (value.IndexOf("Retry") == -1 && value.IndexOf("Investigate") == -1), this, "Marked as retry.") with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };
    
    static string NodeTraceEventToText(any data)
    {
        var e = data as NodeTraceEvent;
        return e.Message;
    }
}

message NodeOperationRequestEvent with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeOperationRequestEvent", Regex = @"NodeOperationRequestEvent,\s*Operation:\s*(?<Operation>[\w\d_]*?),\s*Parameters:\s*\(\s*(?<Parameters>.*?)\s*\),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeOperationRequestEventToText } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    string Parameters with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	
    
    static string NodeOperationRequestEventToText(any data)
    {
        var e = data as NodeOperationRequestEvent;
        return e.Operation == null
            ? "Operation field is not set"
            : (e.Operation.Count == 0 ? "Non-specified operation" : e.Operation) + " initiated. " + e.OrigTS;
    }
}

message NodeOperationResponseEvent with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeOperationResponseEvent", Regex = @"NodeOperationResponseEvent,\s*Operation:\s*(?<Operation>[\w\d_]+),\s*Result:\s*(?<Result>.*?),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeOperationResponseEventToText } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    string Result with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	
    
    static string NodeOperationResponseEventToText(any data)
    {
        var e = data as NodeOperationResponseEvent;
        return e.Operation + " completed. " + e.OrigTS;
    }
}

message SLAMeasurementEvent with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "SLAMeasurementEvent", Regex = @"SLAMeasurementEvent,\s*Context:\s*(?<Context>[\w\d_]+),\s*EntityState:\s*(?<EntityState>[ \w\d\s\.\-,()~:+_]*?),\s*TenantName:\s*(?<TenantName>[-\w\d_]*),\s*TenantID:\s*(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*RoleInstanceID:\s*(?<RoleInstanceId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*RoleInstanceName:\s*(?<RoleInstanceName>.*?),\s*ContainerID:\s*(?<ContainerId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OccurredTime:\s*(?<OccurredTime>.+?),\s*NodeID:\s*(?<NodeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),.+?ResultCode:\s*(?<ResultCode>[-\d]+),.+?OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = SLAMeasurementEventToText } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string EntityState where ValidationCheck(value == null ? true : (value.IndexOf("Unhealthy") == -1), this, "State is unhealthy.") with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    guid RoleInstanceId with UsageInfo { FrequentlyUsed = true };
    string RoleInstanceName with UsageInfo { FrequentlyUsed = true };
    guid ContainerId with UsageInfo { FrequentlyUsed = true };
    string OccurredTime with UsageInfo { FrequentlyUsed = true };
    guid NodeId with UsageInfo { FrequentlyUsed = true, LogicalGroup = "BladeId" };
    int ResultCode with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	
    
    static string SLAMeasurementEventToText(any data)
    {
        var e = data as SLAMeasurementEvent;
        return e.EntityState + " at " + e.OccurredTime;
    }
}

message NodeStateChangedEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeStateChangedEvent", Regex = @"NodeStateChangedEvent,\s*OldState:\s*(?<OldState>[\d\w_]*?),\s*NewState:\s*(?<NewState>[\d\w_]*?),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeStateChangedEventToText } : EventHeader
{
    string OldState with UsageInfo { FrequentlyUsed = true };
    string NewState where ValidationCheck(value != "Dead" && value != "HumanInvestigate", this, "Blade was marked as " + this.NewState) with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string NodeStateChangedEventToText(any data)
    {
        var e = data as NodeStateChangedEvent;
        return e.OldState + " -> " + e.NewState;
    }
}

message TenantStateChangedEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TenantStateChangedEvent", Regex = @"TenantStateChangedEvent,\s*OldState:\s*(?<OldState>[\d\w_]*?),\s*NewState:\s*(?<NewState>[\d\w_]*?),\s*TenantID:\s*(?<TenantID>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*TenantName:\s*(?<TenantName>[-\w\d_]*),\s*AccountID:\s*(?<AccountID>[\w\d_]*),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = TenantStateChangedEventToText } : EventHeader
{
    string OldState with UsageInfo { FrequentlyUsed = true };
    string NewState with UsageInfo { FrequentlyUsed = true };
    guid TenantID with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    guid AccountID with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string TenantStateChangedEventToText(any data)
    {
        var e = data as TenantStateChangedEvent;
        return e.OldState + " -> " + e.NewState;
    }
}

message TenantManagementJobLogEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TenantManagementJobLogEvent", Regex = @"TenantManagementJobLogEvent,\s*Context:\s*(?<Context>[\d\w_]*?),\s*JobId:\s*(?<JobId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*TenantName:\s*(?<TenantName>[-\d\w\s]*?),\s*JobType:\s*(?<JobType>[\d\w_]*?),\s*JobStatus:\s*(?<JobStatus>[\d\w_]*?),\s*Message:\s*(?<Message>.*?),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = TenantManagementJobLogEventToText } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    guid JobId with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    string JobType with UsageInfo { FrequentlyUsed = true };
    string JobStatus with UsageInfo { FrequentlyUsed = true };
    string Message with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string TenantManagementJobLogEventToText(any data)
    {
        var e = data as TenantManagementJobLogEvent;
        return e.Message;
    }
}

message ContainerTraceEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "ContainerTraceEvent", Regex = @"ContainerTraceEvent,\s*Context:\s*(?<Context>[\w\d_]+),\s*Message:\s*(?<Message>.+?),\s*ContainerID:\s*(?<ContainerId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = ContainerTraceEventToText } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string Message where ValidationCheck(value == null ? true : (value.IndexOf("Retry") == -1), this, "Marked as retry.") with UsageInfo { FrequentlyUsed = true };
    guid ContainerId with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string ContainerTraceEventToText(any data)
    {
        var e = data as ContainerTraceEvent;
        return e.Message;
    }
}

message NodeFaultEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeFaultEvent", Regex = @"NodeFaultEvent,\s*FaultCode:\s*(?<FaultCode>\d+),.+?CurrentState:\s*(?<CurrentState>.+?)\s*recoveryAttempts:\s*(?<RecoveryAttempts>\d*),\s*recoverySuccesses:\s*(?<RecoverySuccesses>\d*),\s*MaxRecoveryAttempts:\s*(?<MaxRecoveryAttempts>\d*),.+?BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeFaultEventToText } : EventHeader
{
    ushort FaultCode with UsageInfo { FrequentlyUsed = true };
    string CurrentState with UsageInfo { FrequentlyUsed = true };
    ushort RecoveryAttempts with UsageInfo { FrequentlyUsed = true };
    ushort RecoverySuccesses with UsageInfo { FrequentlyUsed = true };
    ushort MaxRecoveryAttempts with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string NodeFaultEventToText(any data)
    {
        var e = data as NodeFaultEvent;
        return e.CurrentState;
    }
}

message NodeNotificationEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "NodeNotificationEvent", Regex = @"NodeNotificationEvent,\s*Scope:\s*(?<Scope>.*?),\s*EntityId:\s*(?<EntityId>.*?),\s*EntityStatus:\s*(?<EntityStatus>\d+),\s*EntityStatusDetail:(?<EntityStatusDetail>.*?),\s*Context:\s*(?<Context>.*?),\s*OccurredTime:\s*(?<OccurredTime>.*?),\s*BladeID:\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*InstrumentationScopeId:\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}),\s*OrigTS:\s*(?<OrigTS>.*)" },
    DisplayInfo { ToText = NodeNotificationEventToText } : EventHeader
{
    string Scope with UsageInfo { FrequentlyUsed = true };
    string EntityId with UsageInfo { FrequentlyUsed = true };
    ushort EntityStatus with UsageInfo { FrequentlyUsed = true };
    string EntityStatusDetail with UsageInfo { FrequentlyUsed = true };
    string Context with UsageInfo { FrequentlyUsed = true };
    string OccurredTime with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string OrigTS with UsageInfo { FrequentlyUsed = true };	

    static string NodeNotificationEventToText(any data)
    {
        var e = data as NodeNotificationEvent;
        var text = "Container: " + (e.EntityId as string) + " Status: " + (e.EntityStatus as string);
        if (e.EntityStatusDetail != null && e.EntityStatusDetail.Count != 0) 
        {
            text = text + ". Details: " + e.EntityStatusDetail;
        }
        
        return text;
    }
}

//////////////////////////////////////////////////////////////////////////////

message CommFxServerOperationInvoked with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "CommFxServerOperationInvoked", Regex = @"CommFxServerOperationInvoked.+?Id=(?<Id>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*RelatedActivityIdValue=(?<RelatedActivityIdValue>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TimeAtActionInvoke=(?<TimeAtActionInvoke>.+?)\s*ClientAddress=(?<ClientAddress>[\.\d]+)\s*ClientPort=(?<ClientPort>\d+)\s*ClientVersion=(?<ClientVersion>.+?)\s*Action=(?<Action>[_/0-9a-zA-Z]+)\s*To=(?<To>.*?)(\s*OriginalActivityIdValue=(?<OriginalActivityIdValue>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))?" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    guid Id with UsageInfo { FrequentlyUsed = true };
    guid RelatedActivityIdValue with UsageInfo { FrequentlyUsed = true };
    string TimeAtActionInvoke with UsageInfo { FrequentlyUsed = true };
    string ClientAddress with UsageInfo { FrequentlyUsed = true };
    int ClientPort with UsageInfo { FrequentlyUsed = true };
    string ClientVersion with UsageInfo { FrequentlyUsed = true };
    string Action with UsageInfo { FrequentlyUsed = true };
    string To with UsageInfo { FrequentlyUsed = true };
    guid OriginalActivityIdValue with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as CommFxServerOperationInvoked;
        var text = (e.Action != null && e.Action.Count == 0) ? "Non-specified operation" : e.Action;
        text = text + " initiated for " + e.ClientAddress + ":" + (e.ClientPort as string);
        return text;
    }
}

message CommFxServerOperationInvocationCompleted with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "CommFxServerOperationInvocationCompleted", Regex = @"CommFxServerOperationInvocationCompleted.+?OperationTime=(?<OperationTime>\d+)\s*ReplyAction=(?<ReplyAction>[_/0-9a-zA-Z]+)\s*TimeAtActionComplete=(?<TimeAtActionComplete>.+?)\s*Id=(?<Id>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*RelatedActivityIdValue=(?<RelatedActivityIdValue>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TimeAtActionInvoke=(?<TimeAtActionInvoke>.+?)\s*ClientAddress=(?<ClientAddress>[\.\d]+)\s*ClientPort=(?<ClientPort>\d+)\s*ClientVersion=(?<ClientVersion>.+?)\s*Action=(?<Action>[_/0-9a-zA-Z]+)\s*To=(?<To>.*)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    int OperationTime with UsageInfo { FrequentlyUsed = true };
    string ReplyAction with UsageInfo { FrequentlyUsed = true };
    string TimeAtActionComplete with UsageInfo { FrequentlyUsed = true };
    guid Id with UsageInfo { FrequentlyUsed = true };
    guid RelatedActivityIdValue with UsageInfo { FrequentlyUsed = true };
    string TimeAtActionInvoke with UsageInfo { FrequentlyUsed = true };
    string ClientAddress with UsageInfo { FrequentlyUsed = true };
    int ClientPort with UsageInfo { FrequentlyUsed = true };
    string ClientVersion with UsageInfo { FrequentlyUsed = true };
    string Action with UsageInfo { FrequentlyUsed = true };
    string To with UsageInfo { FrequentlyUsed = true };	
    
    static new string GetSummary(any data)
    {
        var e = data as CommFxServerOperationInvocationCompleted;
        var text = (e.Action != null && e.Action.Count == 0) ? "Non-specified operation" : e.Action;
        text = text + " completed for " + e.ClientAddress + (e.ClientPort as string);
        return text;
    }
}

message WatchDogInspection with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "WatchDog Inspection", Regex = @"WatchDog\s*Inspection\s*(?<Status>[a-zA-Z]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Status with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as WatchDogInspection;
        return "WatchDog inspection " + e.Status;
    }
}

message OnBeforeSchemaAdaptation with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "OnBeforeSchemaAdaptation", Regex = @"OnBeforeSchemaAdaptation.+?Repository:\s*(?<Repository>[\._0-9a-zA-Z]+)\s*,\s*Current Version:\s*(?<CurrentVersion>[\d\.]+)\s*,\s*Committed Version:\s*(?<CommittedVersion>[\d\.]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Repository with UsageInfo { FrequentlyUsed = true };
    string CurrentVersion with UsageInfo { FrequentlyUsed = true };
    string CommittedVersion with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as OnBeforeSchemaAdaptation;
        return "Changing " + e.Repository + " schema " + e.CurrentVersion + " -> " + e.CommittedVersion;
    }	
}

message OnAdaptationComplete with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "OnAdaptationComplete", Regex = @"OnAdaptationComplete.+?Repository:\s*(?<Repository>[\._0-9a-zA-Z]+)\s*,\s*Current Version:\s*(?<CurrentVersion>[\d\.]+)\s*,\s*Committed Version:\s*(?<CommittedVersion>[\d\.]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Repository with UsageInfo { FrequentlyUsed = true };
    string CurrentVersion with UsageInfo { FrequentlyUsed = true };
    string CommittedVersion with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as OnAdaptationComplete;
        return "Changed " + e.Repository + " schema " + e.CurrentVersion + " -> " + e.CommittedVersion;
    }	
}

message PostSchemaAdaptationRoutine with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "PostSchemaAdaptationRoutine", Regex = @"PostSchemaAdaptationRoutine.+?Current Version:\s*(?<Versions>[\._=;\s0-9a-zA-Z]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Versions with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as PostSchemaAdaptationRoutine;
        var repositoryCount = 0;

        return "Current repository versoin: " + e.Versions;
    }		
}

message ModifyingSettings with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "Modifing Setting", Regex = @"Modifing Setting\s*(?<Element>[^\s]+)\s*from\s*(?<OldValue>.+?)\s*to new value\s*(?<NewValue>.*)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Element with UsageInfo { FrequentlyUsed = true };
    string OldValue with UsageInfo { FrequentlyUsed = true };
    string NewValue with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as ModifyingSettings;
        return "Setting " + e.Element + " " + e.OldValue + " -> " + e.NewValue;
    }
}

message TMMgmtNodeTrace with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtNodeTrace", Regex = @"TMMgmtNodeTrace.+?Context=?\s*(?<Context>.+?)\s*Message=?\s*(?<Message>.+?)\s*BladeID=?\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID=?\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*SecondaryLevel=?\s*(?<SecondaryLevel>.+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string Message with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string SecondaryLevel with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtNodeTrace;
        return e.Message;
    }
}

message LogicalRoleInstance with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "LogicalRoleInstance", Regex = @"LogicalRoleInstance:\s*Name:\s*(?<Name>.+?)\s*ID:\s*(?<Id>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*Container:\s*(?<Container>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstanceDescription:\s*(?<InstanceDescription>.+?)\s*Service Container ID:\s*(?<ServiceContainerId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*Type:\s*(?<Type>.+?)\s*UserName:\s*(?<UserName>.+?)\s*SUD.+?ParentLogicalNode:\s*(?<ParentLogicalNode>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Name with UsageInfo { FrequentlyUsed = true };
    guid Id with UsageInfo { FrequentlyUsed = true };
    guid Container with UsageInfo { FrequentlyUsed = true };
    string InstanceDescription with UsageInfo { FrequentlyUsed = true };
    guid ServiceContainerId with UsageInfo { FrequentlyUsed = true };
    string Type with UsageInfo { FrequentlyUsed = true };
    string UserName with UsageInfo { FrequentlyUsed = true };
    guid ParentLogicalNode with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as LogicalRoleInstance;
        return "Logical role name: " + e.Name + ". User: " + e.UserName;
    }	
}

message GetTenantletStateCertificateStoreIdUntransacted with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "GetTenantletStateCertificateStoreIdUntransacted", Regex = @"GetTenantletStateCertificateStoreIdUntransacted\s*for tenant\s*(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*and tenantletstate\s*(?<TenantletStateId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    guid TenantletStateId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        return "Getting tenantlet cert store untransacted";
    }
}

message GetTenantletStateSecretContextCertStore with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "GetTenantletStateSecretContextCertStore", Regex = @"GetTenantletStateSecretContextCertStore\s*(?<TenantletStateId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*,\s*(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    guid TenantletStateId with UsageInfo { FrequentlyUsed = true };
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        return "Getting tenantlet secrete context cert store";
    }
}

message ServiceUpdateDomain with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "ServiceUpdateDomain", Regex = @"ServiceUpdateDomain\s*(?<Found>\d+)\s*found in Service\s*(?<ServiceId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*for RoleInstance\s*(?<RoleInstanceId>.+?)\s*Hud" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    int Found with UsageInfo { FrequentlyUsed = true };
    guid ServiceId with UsageInfo { FrequentlyUsed = true };
    guid RoleInstanceId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as ServiceUpdateDomain;
        return "Update service domain. Found " + (e.Found as string) + " for role " + (e.RoleInstanceId as string);
    }	
}

message TMMgmtSlaMeasurementEvent with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtSlaMeasurementEvent", Regex = @"TMMgmtSlaMeasurementEvent.+?Context.(?<Context>[\w\d_]+)\s*EntityState.(?<EntityState>[ \w\d\s\.\-,()~:+_]*?)\s*TenantName.(?<TenantName>[-\w\d_]*)\s*TenantID.(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*RoleInstanceID.(?<RoleInstanceId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*RoleInstanceName.(?<RoleInstanceName>.*?)\s*ContainerID.(?<ContainerId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*OccurredTime.(?<OccurredTime>.+?)\s*NodeID.(?<NodeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}).+?ResultCode.(?<ResultCode>[-\d]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string EntityState where ValidationCheck(value == null ? true : (value.IndexOf("Unhealthy") == -1), this, "State is unhealthy.") with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    guid RoleInstanceId with UsageInfo { FrequentlyUsed = true };
    string RoleInstanceName with UsageInfo { FrequentlyUsed = true };
    guid ContainerId with UsageInfo { FrequentlyUsed = true };
    string OccurredTime with UsageInfo { FrequentlyUsed = true };
    guid NodeId with UsageInfo { FrequentlyUsed = true, LogicalGroup = "BladeId" };
    int ResultCode with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtSlaMeasurementEvent;
        return e.EntityState == null
            ? "EntityState field is not set"
            : "Transition to " + (e.EntityState.Count == 0 ? "Non-specified" : e.EntityState) + " state at " + e.OccurredTime;
    }
}

message TMMgmtTenantStateChanged with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtTenantStateChanged", Regex = @"TMMgmtTenantStateChanged.+?OldState.(?<OldState>[\w\d_]+)\s*NewState.(?<NewState>[\w\d_]+)\s*TenantID.(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TenantName.(?<TenantName>[-\.\w\d_]*)\s*AccountID.(?<AccountId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID.(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string OldState with UsageInfo { FrequentlyUsed = true };
    string NewState with UsageInfo { FrequentlyUsed = true };
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    guid AccountId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtTenantStateChanged;
        return "Tenant " + e.TenantName + ": " + e.OldState + " -> " + e.NewState;
    }
}

message TMMgmtTenantCreated with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtTenantCreated", Regex = @"TMMgmtTenantCreated.+?ServiceHostID.(?<ServiceHostId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*FabricID.(?<FabricId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TenantID.(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TenantName.(?<TenantName>[-\.\w\d_]*)\s*AccountID.(?<AccountId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID.(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    guid ServiceHostId with UsageInfo { FrequentlyUsed = true };
    guid FabricId with UsageInfo { FrequentlyUsed = true };
    guid TenantId with UsageInfo { FrequentlyUsed = true };
    string TenantName with UsageInfo { FrequentlyUsed = true };
    guid AccountId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtTenantCreated;
        return "Tenant " + e.TenantName + ": Created";
    }
}

message TMMgmtNodeOperationFaulted with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtNodeOperationFaulted", Regex = @"TMMgmtNodeOperationFaulted.+?\s*Operation=?\s*(?<Operation>[\w\d_]*?)\s*FaultType=?\s*(?<FaultType>[-\w\d_]+)\s*FaultMessage=?\s*(?<FaultMessage>.+)\s*StackTrace=?\s*(?<StackTrace>.+)\s*BladeID=?\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID=?\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*(TenantID.(?<TenantId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*TenantName.(?<TenantName>[-\.\w\d_]*))?" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    string FaultType with UsageInfo { FrequentlyUsed = true };
    string FaultMessage with UsageInfo { FrequentlyUsed = true };
    string StackTrace with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };

    static new string GetSummary(any data)
    {
        var e = data as TMMgmtNodeOperationFaulted;
        return e.FaultMessage;
    }	
}

message TMMgmtNodeOperationRequest with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtNodeOperationRequest", Regex = @"TMMgmtNodeOperationRequest.+?\s*Operation=?\s*(?<Operation>[\w\d_]*?)\s*Parameters=?\s*(\()?\s*(?<Parameters>.*?)\s*(\))?\s*BladeID=?\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID=?\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    string Parameters with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtNodeOperationRequest;
        return e.Operation == null
            ? "Operation field is not set"
            : (e.Operation.Count == 0 ? "Non-specified" : e.Operation) + " operation initiated";
    }
}

message TMMgmtNodeOperationResponse with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtNodeOperationResponse", Regex = @"TMMgmtNodeOperationResponse.+?Operation=?\s*(?<Operation>[\w\d_]+)\s*(RequestId\s*(?<RequestId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*)?Result=?\s*(?<Result>.*?)\s*BladeID=?\s*(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID=?\s*(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    guid RequestId with UsageInfo { FrequentlyUsed = true };
    string Result with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as TMMgmtNodeOperationResponse;
        return e.Operation == null
            ? "Operation field is not set"
            : (e.Operation.Count == 0 ? "Non-specified" : e.Operation) + " operation completed";
    }
}

message TMMgmtContainerTrace with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "TMMgmtContainerTrace", Regex = @"TMMgmtContainerTrace.+?Context.(?<Context>[\w\d_]+)\s*Message.(?<Message>.+?)\s*ContainerID.(?<ContainerId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*BladeID.(?<BladeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*InstrumentationScopeID.(?<InstrumentationScopeId>[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*SecondaryLevel.(?<SecondaryLevel>.+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Context with UsageInfo { FrequentlyUsed = true };
    string Message where ValidationCheck(value == null ? true : (value.IndexOf("Retry") == -1), this, "Marked as retry") with UsageInfo { FrequentlyUsed = true };
    guid ContainerId with UsageInfo { FrequentlyUsed = true };
    guid BladeId with UsageInfo { FrequentlyUsed = true };
    guid InstrumentationScopeId with UsageInfo { FrequentlyUsed = true };
    string SecondaryLevel with UsageInfo { FrequentlyUsed = true };

    static new string GetSummary(any data)
    {
        var e = data as TMMgmtContainerTrace;
        return e.Message;
    }
}

message IStorageClusterManagement with
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = "IStorageClusterManagement/(?<Operation>[_0-9a-zA-Z]+)" },
    DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Operation with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as IStorageClusterManagement;
        return "Initiating " + e.Operation + " operation...";
    }
}

message NotParsedEvent with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = "(?<Message>.*)" }, DisplayInfo { ToText = GetSummary } : EventHeader
{
    string Message with UsageInfo { FrequentlyUsed = true };
    
    static new string GetSummary(any data)
    {
        var e = data as NotParsedEvent;
        return e.Message;
    }
}

///////////////////////////////////////////////
// Virtual Operation Definitions
///////////////////////////////////////////////

virtual operation PollHealthOperation with DisplayInfo { ToText = PollHealthOperationToText }
{
    guid BladeId = bid with UsageInfo { FrequentlyUsed = true };
    
    static string PollHealthOperationToText(any data)
    {
        var e = data as PollHealthOperation;
        return "PollHealth operation complete. Blade ID " + (e.BladeId as string) + " added back to good.";
    }
} =
issues NodeTraceEvent { Message is regex {NodePoller.IsStarted:True.*}, BladeId is var bid }
accepts NodeTraceEvent { Message is regex {Finishing PollHealth, added back to good.*}, BladeId == bid };

virtual operation NodeOperation with DisplayInfo { ToText = NodeOperationToText }
{
    string Operation = op with UsageInfo { FrequentlyUsed = true };
    guid BladeId = bid with UsageInfo { FrequentlyUsed = true };
    
    static string NodeOperationToText(any data)
    {
        var e = data as NodeOperation;
        return e.Operation + " complete on blade ID " + (e.BladeId as string);
    }
} =
issues NodeOperationRequestEvent { Operation is var op, BladeId is var bid }
accepts NodeOperationResponseEvent { Operation == op, BladeId == bid };

//////////////////////////////////////////////////////////////////////////////

virtual operation CommFxServerOperation with DisplayInfo { ToText = CommFxServerOperationToText }
{
    guid Id = id with UsageInfo { FrequentlyUsed = true };
    string Action = action with UsageInfo { FrequentlyUsed = true };
    string InvokeTime = invokeTime with UsageInfo { FrequentlyUsed = true };
    int Duration = duration with UsageInfo { FrequentlyUsed = true };
    string ClientAddress = clientAddress with UsageInfo { FrequentlyUsed = true };
    int ClientPort = clientPort with UsageInfo { FrequentlyUsed = true };
    
    static string CommFxServerOperationToText(any data)
    {
        var e = data as CommFxServerOperation;
        var text = e.Action + " completed for " + e.ClientAddress + ":" + (e.ClientPort as string) + " in " + (e.Duration as string) + "s";
        return text;
    }
} =
issues CommFxServerOperationInvoked { Id is var id, Action is var action, TimeAtActionInvoke is var invokeTime, ClientAddress is var clientAddress, ClientPort is var clientPort }
accepts CommFxServerOperationInvocationCompleted { Id == id, Action == action, OperationTime is var duration };

virtual operation WatchDogInspectionOperation with DisplayInfo { ToText = GetSummary }
{
    static string GetSummary(any data)
    {
        var e = data as WatchDogInspectionOperation;
        return "WatchDog inspection completed successfully";
    }
} =
issues WatchDogInspection { Status == "Activated" }
accepts WatchDogInspection { Status == "Completed" };

virtual operation TMMgmtNodeOperation with DisplayInfo { ToText = GetSummary }
{
    string Operation = op with UsageInfo { FrequentlyUsed = true };
    guid BladeId = bid with UsageInfo { FrequentlyUsed = true };
    
    static string GetSummary(any data)
    {
        var e = data as TMMgmtNodeOperation;
        return e.Operation + " complete on blade ID " + (e.BladeId as string);
    }
} =
issues TMMgmtNodeOperationRequest { Operation is var op, BladeId is var bid }
accepts TMMgmtNodeOperationResponse { Operation == op, BladeId == bid };

virtual operation TMMgmtPollHealthOperation with DisplayInfo { ToText = GetSummary }
{
    guid BladeId = bid with UsageInfo { FrequentlyUsed = true };
    
    static string GetSummary(any data)
    {
        var e = data as TMMgmtPollHealthOperation;
        return "PollHealth operation complete. Blade ID " + (e.BladeId as string) + " added back to good";
    }
} =
issues TMMgmtNodeTrace { Message is regex {NodePoller.IsStarted:True.*}, BladeId is var bid }
accepts TMMgmtNodeTrace { Message is regex {Finishing PollHealth, added back to good.*}, BladeId == bid };

///////////////////////////////////////////////
// Helper Property Definitions
///////////////////////////////////////////////

guid get EventBladeId(this LogEntry event)
{
    switch (event)
    {
        case e:NodeTraceEvent => return e.BladeId;
        case e:NodeOperationRequestEvent => return e.BladeId;
        case e:NodeOperationResponseEvent => return e.BladeId;
        case e:SLAMeasurementEvent => return e.NodeId;
        case e:NodeStateChangedEvent => return e.BladeId;
        case e:ContainerTraceEvent => return e.BladeId;
        case e:NodeNotificationEvent => return e.BladeId;
        case e:NodeFaultEvent => return e.BladeId;
        
        case e:TMMgmtNodeTrace => return e.BladeId;
        case e:TMMgmtNodeOperationRequest => return e.BladeId;
        case e:TMMgmtNodeOperationResponse => return e.BladeId;		
        case e:TMMgmtSlaMeasurementEvent => return e.NodeId;
        case e:TMMgmtContainerTrace => return e.BladeId;
        case e:TMMgmtNodeOperationFaulted => return e.BladeId;
    }
    
    return BinaryDecoder<guid>($[00000000000000000000000000000000]) as guid;
}

guid get EventContainerId(this LogEntry event)
{
    switch (event)
    {
        case e:ContainerTraceEvent => return e.ContainerId;
        case e:SLAMeasurementEvent => return e.ContainerId;
        case e:NodeNotificationEvent =>
            {
                if (e.Scope == "Container")
                    return ParseGuid(e.EntityId);
            }
        
        case e:TMMgmtContainerTrace => return e.ContainerId;
        case e:TMMgmtSlaMeasurementEvent => return e.ContainerId;
    }
    
    return BinaryDecoder<guid>($[00000000000000000000000000000000]) as guid;
}

string get EventContext(this LogEntry event)
{
    switch (event)
    {
        case e:NodeTraceEvent => return e.Context;
        case e:SLAMeasurementEvent => return e.Context;
        case e:TenantManagementJobLogEvent => return e.Context;
        case e:ContainerTraceEvent => return e.Context;
        case e:NodeNotificationEvent => return e.Context;
        
        case e:TMMgmtNodeTrace => return e.Context;
        case e:TMMgmtSlaMeasurementEvent => return e.Context;
        case e:TMMgmtContainerTrace => return e.Context;
    }
    
    return "";
}

guid get EventInstrumentationScopeId(this LogEntry event)
{
    switch (event)
    {
        case e:ContainerTraceEvent => return e.InstrumentationScopeId;
        case e:NodeFaultEvent => return e.InstrumentationScopeId;
        case e:NodeNotificationEvent => return e.InstrumentationScopeId;
        case e:NodeOperationRequestEvent => return e.InstrumentationScopeId;
        case e:NodeOperationResponseEvent => return e.InstrumentationScopeId;
        case e:NodeStateChangedEvent => return e.InstrumentationScopeId;
        case e:NodeTraceEvent => return e.InstrumentationScopeId;
        case e:TenantStateChangedEvent => return e.InstrumentationScopeId;
        
        case e:TMMgmtNodeTrace => return e.InstrumentationScopeId;
        case e:TMMgmtNodeOperationRequest => return e.InstrumentationScopeId;
        case e:TMMgmtNodeOperationResponse => return e.InstrumentationScopeId;		
        case e:TMMgmtContainerTrace => return e.InstrumentationScopeId;
        case e:TMMgmtNodeOperationFaulted => return e.InstrumentationScopeId;
    }
    
    return BinaryDecoder<guid>($[00000000000000000000000000000000]) as guid;
}

string get EventMessage(this LogEntry event)
{
    switch (event)
    {
        case e:ContainerTraceEvent => return e.Message;
        case e:NodeTraceEvent => return e.Message;
        case e:TenantManagementJobLogEvent => return e.Message;
        
        case e:TMMgmtContainerTrace => return e.Message;
        case e:TMMgmtNodeTrace => return e.Message;
    }
    
    return "";
}
string get EventNewState(this LogEntry event)
{
    switch (event)
    {
        case e:NodeStateChangedEvent => return e.NewState;
        case e:TenantStateChangedEvent => return e.NewState;
    }
    
    return "";
}

string get EventOldState(this LogEntry event)
{
    switch (event)
    {
        case e:NodeStateChangedEvent => return e.OldState;
        case e:TenantStateChangedEvent => return e.OldState;
    }
    
    return "";
}

guid get EventTenantId(this LogEntry event)
{
    switch (event)
    {
        case e:SLAMeasurementEvent => return e.TenantId;
        case e:TenantStateChangedEvent => return e.TenantID;
        
        case e:TMMgmtSlaMeasurementEvent => return e.TenantId;
        case e:TMMgmtTenantStateChanged => return e.TenantId;
        case e:TMMgmtTenantCreated => return e.TenantId;
    }
    
    return BinaryDecoder<guid>($[00000000000000000000000000000000]) as guid;
}

string get EventTenantName(this LogEntry event)
{
    switch (event)
    {
        case e:SLAMeasurementEvent => return e.TenantName;
        case e:TenantStateChangedEvent => return e.TenantName;
        case e:TenantManagementJobLogEvent => return e.TenantName;
        
        case e:TMMgmtSlaMeasurementEvent => return e.TenantName;
    }
    
    return "";
}

message MkLogHeader with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"(?<TimeStamp>(\d{4}-\d{2}-\d{2} )?\d{2}:\d{2}:\d{2}\,\d{1,3})\s*(?<Level>\w+)\s*(\[(?<Channel>[-_/\w\d\.\[\]]+)\]\s*)?" },
    DisplayInfo { ToText = GetSummary } : LogEntry
{
    // Cannot use DateTime here because extern types cannot be used as message fields currently
    string TimeStamp with UsageInfo { FrequentlyUsed = true };
    string Level with UsageInfo { FrequentlyUsed = true };
    string Channel with UsageInfo { FrequentlyUsed = true };
    
    static string GetSummary(any data)
    {	
        var e = data as MkLogHeader;
        return e.Level + " event. No OPN parser available";
    }	
}

///////////////////////////////////////////////
// Log Message Definitions
///////////////////////////////////////////////

message MkMedRec with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "|MedRec|", Regex = @"\|.*\|MedRec\|(?<Severity>\w+)\s*\|(?<Address>[^\s]*)\s*\|(?<Tracer>[^\s]*)\s*\|" },
    DisplayInfo { ToText = GetSummary } : MkLogHeader
{
    string Severity with UsageInfo { FrequentlyUsed = true };
    string Address with UsageInfo { FrequentlyUsed = true };
    string Tracer with UsageInfo { FrequentlyUsed = true };
  
    static new string GetSummary(any data)
    {	
        var e = data as MkMedRec;
        return e.Severity + " from " + e.Address;
    }
}

message MkConfigComplete with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "|-", Regex = " ?", Multiline = HandleMultilineConfig },
    DisplayInfo { ToText = GetSummary } : MkLogHeader
{
    string Severity with UsageInfo { FrequentlyUsed = true };
    string Action with UsageInfo { FrequentlyUsed = true };
    string Message with UsageInfo { FrequentlyUsed = true };
  
    static new string GetSummary(any data)
    {	
        var e = data as MkConfigComplete;
        var origins = e.Origins;
        return "Configuration: " + (origins.Count as string) + " messages total";
    }	
    
    bool HandleMultilineConfig(string line, LineContext context)
    {
        //Regex: Pass QE Check 9/10/2013
        if (context.IsInitialLine || !(line is regex{\\\\d\{4\}-\\\\d\{2\}-\\\\d\{2\}.*}))
        {
            var c = Decode<MkConfig>(line, context);
            if (c == null) return false;
            
            AddToOrigins(this, c);
            return true;
        }
        
        return false;
    }
}

message MkConfig with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Tag = "|-", Regex = @"(?<TimeStamp>\d{2}:\d{2}:\d{2}\,\d{1,3})\s*\|-(?<Severity>[\w]+)\s*in\s*(?<Action>[-@_/\w\d\.\[\]]+)\s*-\s*(?<Message>.*)" },
    DisplayInfo { ToText = GetSummary } : LogEntry
{
    string TimeStamp with UsageInfo { FrequentlyUsed = true };
    string Severity with UsageInfo { FrequentlyUsed = true };
    string Action with UsageInfo { FrequentlyUsed = true };
    string Message with UsageInfo { FrequentlyUsed = true };
  
    static string GetSummary(any data)
    {	
        var e = data as MkConfig;
        return e.Message;
    }		
}

message MkException with  
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"^(?<Exception>[_\w\d\.]+)$" },
    DisplayInfo { ToText = GetSummary } : LogEntry
{
    string Exception with UsageInfo { FrequentlyUsed = true };
  
    static string GetSummary(any data)
    {	
        var e = data as MkException;
        return e.Exception;
    }
    
    bool HandleStackTrace(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
        
        var f = Decode<MkStackFrame>(line, context);
        if (f != null)
        {		
            AddToOrigins(this, f);
            return true;
        }
        
        return false;
    }
}

message MkStackFrame with  
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"\s+at\s+(?<Function>[_\w\d\.\(\):\<\>\$]+)" },
    DisplayInfo { ToText = GetSummary } : LogEntry
{
    string Function;
    
    static string GetSummary(any data)
    {	
        var e = data as MkStackFrame;
        return e.Function;
    }
}

message MkEntry with 
    //Regex: Pass QE Check 8/1/2013
    EntryInfo { Regex = @"[\d:\,]*\s*[\w]*?\s*(\[(?<Component>[-_/\w\d\.\[\]]+)\]\s*)?(?<Message>.*)", Multiline = HandleMultiline },
    DisplayInfo { ToText = GetSummary } : MkLogHeader
{
    string Component with UsageInfo { FrequentlyUsed = true };
    string Message with UsageInfo { FrequentlyUsed = true };
	
	const string ExceptionKey = "exception";
  
    static new string GetSummary(any data)
    {	
        var e = data as MkEntry;
        return e.Message;
    }
	
    bool HandleMultiline(string line, LineContext context)
    {
        if (context.IsInitialLine)
        {
            return true;
        }
		
		// First check whether there is an exception in progress
		if (ExceptionKey in context.Data)
		{
			var e = context.Data[ExceptionKey] as MkException;
			if (e.HandleStackTrace(line, context))
			{
				return true;
			}
			
			// If there was an exception in progress but it did not want to process the line
			// then clean up the context and try to parse the line as beginning of another exception
			context.Data = {};
		}
		
		// If there is not, try to create a new one
		return TryParseException(line, context);
    }
	
	bool TryParseException(string line, LineContext context)
	{
		var e = Decode<MkException>(line, context);
		if (e != null)
		{
			AddToOrigins(this, e);
			context.IsInitialLine = true;
			var handled = e.HandleStackTrace(line, context);
			context.IsInitialLine = false;
			assert handled;
			
			context.Data[ExceptionKey] = e;
			return true;
		}
		
		return false;
	}
}

void AddToOrigins(any message parent, any message origin)
{
    var origins = parent.Origins;
    origins = origins + [origin];
    Origins(parent, origins);
}
